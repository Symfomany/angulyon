(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
__webpack_require__(1);
__webpack_require__(2);
module.exports = __webpack_require__(232);
}, function(module, exports) {
var global = Function("return this")();
global.global = global;
}, function(module, exports, __webpack_require__) {
__webpack_require__(3);
}, function(module, exports, __webpack_require__) {
var platform_common_1 = __webpack_require__(4);
var compiler_1 = __webpack_require__(177);
var core_1 = __webpack_require__(156);
if (global.___TS_UNUSED) {
(function() {
return core_1.OpaqueToken;
})();
}
var dom_adapter_1 = __webpack_require__(178);
var resource_loader_1 = __webpack_require__(204);
var nativescript_module_1 = __webpack_require__(205);
exports.NativeScriptModule = nativescript_module_1.NativeScriptModule;
exports.NS_COMPILER_PROVIDERS = [ compiler_1.COMPILER_PROVIDERS, {
provide: core_1.COMPILER_OPTIONS,
useValue: {
providers: [ {
provide: compiler_1.ResourceLoader,
useClass: resource_loader_1.FileSystemResourceLoader
}, {
provide: compiler_1.ElementSchemaRegistry,
useClass: dom_adapter_1.NativeScriptElementSchemaRegistry
} ]
},
multi: true
} ];
var _platformNativeScriptDynamic = core_1.createPlatformFactory(compiler_1.platformCoreDynamic, "nativeScriptDynamic", platform_common_1.COMMON_PROVIDERS.concat(exports.NS_COMPILER_PROVIDERS));
function platformNativeScriptDynamic(options, extraProviders) {
if (options && options.bootInExistingPage === true) {
return _platformNativeScriptDynamic(extraProviders);
} else {
return new platform_common_1.NativeScriptPlatformRef(_platformNativeScriptDynamic(extraProviders), options);
}
}
exports.platformNativeScriptDynamic = platformNativeScriptDynamic;
}, function(module, exports, __webpack_require__) {
__webpack_require__(5);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
var core_1 = __webpack_require__(156);
if (global.___TS_UNUSED) {
(function() {
return core_1.OpaqueToken;
})();
}
var trace_1 = __webpack_require__(174);
var platform_providers_1 = __webpack_require__(175);
var application = __webpack_require__(16);
var frame_1 = __webpack_require__(10);
var text_view_1 = __webpack_require__(130);
__webpack_require__(176);
exports.onBeforeLivesync = new core_1.EventEmitter();
exports.onAfterLivesync = new core_1.EventEmitter();
var lastBootstrappedModule;
var NativeScriptSanitizer = function(_super) {
__extends(NativeScriptSanitizer, _super);
function NativeScriptSanitizer() {
_super.apply(this, arguments);
}
NativeScriptSanitizer.prototype.sanitize = function(_context, value) {
return value;
};
return NativeScriptSanitizer;
}(core_1.Sanitizer);
exports.NativeScriptSanitizer = NativeScriptSanitizer;
exports.COMMON_PROVIDERS = [ platform_providers_1.defaultPageFactoryProvider, {
provide: core_1.Sanitizer,
useClass: NativeScriptSanitizer
} ];
var NativeScriptPlatformRef = function(_super) {
__extends(NativeScriptPlatformRef, _super);
function NativeScriptPlatformRef(platform, appOptions) {
_super.call(this);
this.platform = platform;
this.appOptions = appOptions;
}
NativeScriptPlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
var _this = this;
this._bootstrapper = function() {
return _this.platform.bootstrapModuleFactory(moduleFactory);
};
this.bootstrapApp();
return null;
};
NativeScriptPlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
var _this = this;
if (compilerOptions === void 0) {
compilerOptions = [];
}
this._bootstrapper = function() {
return _this.platform.bootstrapModule(moduleType, compilerOptions);
};
this.bootstrapApp();
return null;
};
NativeScriptPlatformRef.prototype.bootstrapApp = function() {
var _this = this;
global.__onLiveSyncCore = function() {
return _this.livesyncModule();
};
var mainPageEntry = this.createNavigationEntry(this._bootstrapper);
if (this.appOptions && typeof this.appOptions.cssFile === "string") {
application.cssFile = this.appOptions.cssFile;
}
application.start(mainPageEntry);
};
NativeScriptPlatformRef.prototype.livesyncModule = function() {
trace_1.rendererLog("ANGULAR LiveSync Started");
exports.onBeforeLivesync.next(lastBootstrappedModule ? lastBootstrappedModule.get() : null);
var mainPageEntry = this.createNavigationEntry(this._bootstrapper, function(compRef) {
return exports.onAfterLivesync.next(compRef);
}, function(error) {
return exports.onAfterLivesync.error(error);
}, true);
mainPageEntry.animated = false;
mainPageEntry.clearHistory = true;
var frame = frame_1.topmost();
if (frame) {
if (frame.currentPage && frame.currentPage.modal) {
frame.currentPage.modal.closeModal();
}
frame.navigate(mainPageEntry);
}
};
NativeScriptPlatformRef.prototype.onDestroy = function(callback) {
this.platform.onDestroy(callback);
};
Object.defineProperty(NativeScriptPlatformRef.prototype, "injector", {
get: function() {
return this.platform.injector;
},
enumerable: true,
configurable: true
});
NativeScriptPlatformRef.prototype.destroy = function() {
this.platform.destroy();
};
Object.defineProperty(NativeScriptPlatformRef.prototype, "destroyed", {
get: function() {
return this.platform.destroyed;
},
enumerable: true,
configurable: true
});
NativeScriptPlatformRef.prototype.createNavigationEntry = function(bootstrapAction, resolve, reject, isLivesync, isReboot) {
var _this = this;
if (isLivesync === void 0) {
isLivesync = false;
}
if (isReboot === void 0) {
isReboot = false;
}
var pageFactory = this.platform.injector.get(platform_providers_1.PAGE_FACTORY);
var navEntry = {
create: function() {
var page = pageFactory({
isBootstrap: true,
isLivesync: isLivesync
});
if (_this.appOptions) {
page.actionBarHidden = _this.appOptions.startPageActionBarHidden;
}
var onLoadedHandler = function() {
page.off("loaded", onLoadedHandler);
trace_1.rendererLog("Page loaded");
trace_1.rendererLog("BOOTSTRAPPING...");
bootstrapAction().then(function(moduleRef) {
trace_1.rendererLog("ANGULAR BOOTSTRAP DONE.");
lastBootstrappedModule = new WeakRef(moduleRef);
if (resolve) {
resolve(moduleRef);
}
return moduleRef;
}, function(err) {
trace_1.rendererError("ERROR BOOTSTRAPPING ANGULAR");
var errorMessage = err.message + "\n\n" + err.stack;
trace_1.rendererError(errorMessage);
var view = new text_view_1.TextView();
view.text = errorMessage;
page.content = view;
if (reject) {
reject(err);
}
});
};
page.on("loaded", onLoadedHandler);
return page;
}
};
if (isReboot) {
navEntry.animated = false;
navEntry.clearHistory = true;
}
return navEntry;
};
NativeScriptPlatformRef.prototype.liveSyncApp = function() {};
return NativeScriptPlatformRef;
}(core_1.PlatformRef);
exports.NativeScriptPlatformRef = NativeScriptPlatformRef;
}, function(module, exports, __webpack_require__) {
__webpack_require__(6);
global.__extends = global.__extends || function(d, b) {
for (var p in b) {
if (b.hasOwnProperty(p)) {
d[p] = b[p];
}
}
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
global.moduleMerge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
var modules = new Map();
global.registerModule = function(name, loader) {
modules.set(name, loader);
};
global.moduleExists = function(name) {
return modules.has(name);
};
global.loadModule = function(name) {
var loader = modules.get(name);
if (loader) {
return loader();
} else {
var result_1 = global.require(name);
modules.set(name, function() {
return result_1;
});
return result_1;
}
};
global.zonedCallback = function(callback) {
if (global.zone) {
return global.zone.bind(callback);
}
if (global.Zone) {
return global.Zone.current.wrap(callback);
} else {
return callback;
}
};
global.registerModule("timer", function() {
return __webpack_require__(7);
});
global.registerModule("ui/dialogs", function() {
return __webpack_require__(8);
});
global.registerModule("xhr", function() {
return __webpack_require__(149);
});
global.registerModule("fetch", function() {
return __webpack_require__(150);
});
var __tnsGlobalMergedModules = new Map();
function registerOnGlobalContext(name, module) {
Object.defineProperty(global, name, {
get: function() {
var m = global.loadModule(module);
if (!__tnsGlobalMergedModules.has(module)) {
__tnsGlobalMergedModules.set(module, true);
global.moduleMerge(m, global);
}
var resolvedValue = m[name];
Object.defineProperty(this, name, {
value: resolvedValue,
configurable: true,
writable: true
});
return resolvedValue;
},
configurable: true
});
}
if (true) {
var timer = __webpack_require__(7);
global.setTimeout = timer.setTimeout;
global.clearTimeout = timer.clearTimeout;
global.setInterval = timer.setInterval;
global.clearInterval = timer.clearInterval;
var dialogs = __webpack_require__(8);
global.alert = dialogs.alert;
global.confirm = dialogs.confirm;
global.prompt = dialogs.prompt;
var xhr = __webpack_require__(149);
global.XMLHttpRequest = xhr.XMLHttpRequest;
global.FormData = xhr.FormData;
var fetch = __webpack_require__(150);
global.fetch = fetch.fetch;
global.Headers = fetch.Headers;
global.Request = fetch.Request;
global.Response = fetch.Response;
} else {
registerOnGlobalContext("setTimeout", "timer");
registerOnGlobalContext("clearTimeout", "timer");
registerOnGlobalContext("setInterval", "timer");
registerOnGlobalContext("clearInterval", "timer");
registerOnGlobalContext("alert", "ui/dialogs");
registerOnGlobalContext("confirm", "ui/dialogs");
registerOnGlobalContext("prompt", "ui/dialogs");
registerOnGlobalContext("XMLHttpRequest", "xhr");
registerOnGlobalContext("FormData", "xhr");
registerOnGlobalContext("fetch", "fetch");
}
var platform = __webpack_require__(49);
var consoleModule = __webpack_require__(151);
var c = new consoleModule.Console();
if (platform.device.os === platform.platformNames.android) {
global.console = c;
} else if (platform.device.os === platform.platformNames.ios) {
global.console.dump = function(args) {
c.dump(args);
};
}
function Deprecated(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is deprecated");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is deprecated");
return target;
}
}
exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;
function Experimental(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is experimental");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is experimental");
return target;
}
}
exports.Experimental = Experimental;
global.Experimental = Experimental;
}, function(module, exports) {
if (typeof global.__decorate !== "function") {
global.__decorate = function(decorators, target, key, desc) {
var c = arguments.length;
var r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof global.Reflect === "object" && typeof global.Reflect.decorate === "function") {
r = global.Reflect.decorate(decorators, target, key, desc);
} else {
for (var i = decorators.length - 1; i >= 0; i--) {
if (d = decorators[i]) {
r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
}
}
}
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
}
if (typeof global.__metadata !== "function") {
global.__metadata = function(k, v) {
if (typeof global.Reflect === "object" && typeof global.Reflect.metadata === "function") {
return global.Reflect.metadata(k, v);
}
};
}
if (typeof global.__param !== "function") {
global.__param = global && global.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
}
}, function(module, exports) {
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;
function createHandlerAndGetId() {
if (!timeoutHandler) {
timeoutHandler = new android.os.Handler(android.os.Looper.myLooper());
}
timerId++;
return timerId;
}
function setTimeout(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
delete timeoutCallbacks[id];
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setTimeout = setTimeout;
function clearTimeout(id) {
if (timeoutCallbacks[id]) {
timeoutHandler.removeCallbacks(timeoutCallbacks[id]);
delete timeoutCallbacks[id];
}
}
exports.clearTimeout = clearTimeout;
function setInterval(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var handler = timeoutHandler;
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
handler.postDelayed(runnable, long(milliseconds));
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;
}, function(module, exports, __webpack_require__) {
var dialogsCommon = __webpack_require__(9);
var appmodule = __webpack_require__(16);
var types = __webpack_require__(14);
global.moduleMerge(dialogsCommon, exports);
function createAlertDialog(options) {
var alert = new android.app.AlertDialog.Builder(appmodule.android.foregroundActivity);
alert.setTitle(options && types.isString(options.title) ? options.title : "");
alert.setMessage(options && types.isString(options.message) ? options.message : "");
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
return alert;
}
function showDialog(builder) {
var dlg = builder.show();
var labelColor = dialogsCommon.getLabelColor();
if (labelColor) {
var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);
if (textViewId) {
var tv = dlg.findViewById(textViewId);
if (tv) {
tv.setTextColor(labelColor.android);
}
}
var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);
if (messageTextViewId) {
var messageTextView = dlg.findViewById(messageTextViewId);
if (messageTextView) {
messageTextView.setTextColor(labelColor.android);
}
}
}
var buttonColor = dialogsCommon.getButtonColor();
if (buttonColor) {
var buttons = [];
for (var i = 0; i < 3; i++) {
var id = dlg.getContext().getResources().getIdentifier("android:id/button" + i, null, null);
buttons[i] = dlg.findViewById(id);
}
buttons.forEach(function(button) {
if (button) {
button.setTextColor(buttonColor.android);
}
});
}
}
function addButtonsToAlertDialog(alert, options, callback) {
if (!options) {
return;
}
if (options.okButtonText) {
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(true);
}
}));
}
if (options.cancelButtonText) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(false);
}
}));
}
if (options.neutralButtonText) {
alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(undefined);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
callback(false);
}
}));
}
function alert(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.ALERT,
okButtonText: dialogsCommon.OK,
message: arg + ""
} : arg;
var alert_1 = createAlertDialog(options);
alert_1.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve();
}
}));
alert_1.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
resolve();
}
}));
showDialog(alert_1);
} catch (ex) {
reject(ex);
}
});
}
exports.alert = alert;
function confirm(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.CONFIRM,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
message: arg + ""
} : arg;
var alert_2 = createAlertDialog(options);
addButtonsToAlertDialog(alert_2, options, function(result) {
resolve(result);
});
showDialog(alert_2);
} catch (ex) {
reject(ex);
}
});
}
exports.confirm = confirm;
function prompt(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.PROMPT,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
inputType: dialogsCommon.inputType.text
};
if (arguments.length === 1) {
if (types.isString(arg)) {
options = defaultOptions;
options.message = arg;
} else {
options = arg;
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.defaultText = arguments[1];
}
}
return new Promise(function(resolve, reject) {
try {
var alert_3 = createAlertDialog(options);
var input_1 = new android.widget.EditText(appmodule.android.foregroundActivity);
if (options && options.inputType === dialogsCommon.inputType.password) {
input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
}
input_1.setText(options && options.defaultText || "");
alert_3.setView(input_1);
var getText_1 = function() {
return input_1.getText().toString();
};
addButtonsToAlertDialog(alert_3, options, function(r) {
resolve({
result: r,
text: getText_1()
});
});
showDialog(alert_3);
} catch (ex) {
reject(ex);
}
});
}
exports.prompt = prompt;
function login(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.LOGIN,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isString(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
options.password = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var context_1 = appmodule.android.foregroundActivity;
var alert_4 = createAlertDialog(options);
var userNameInput_1 = new android.widget.EditText(context_1);
userNameInput_1.setText(options.userName ? options.userName : "");
var passwordInput_1 = new android.widget.EditText(context_1);
passwordInput_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
passwordInput_1.setText(options.password ? options.password : "");
var layout = new android.widget.LinearLayout(context_1);
layout.setOrientation(1);
layout.addView(userNameInput_1);
layout.addView(passwordInput_1);
alert_4.setView(layout);
addButtonsToAlertDialog(alert_4, options, function(r) {
resolve({
result: r,
userName: userNameInput_1.getText().toString(),
password: passwordInput_1.getText().toString()
});
});
showDialog(alert_4);
} catch (ex) {
reject(ex);
}
});
}
exports.login = login;
function action(arg) {
var options;
var defaultOptions = {
title: null,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isDefined(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
options.actions = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var activity = appmodule.android.foregroundActivity || appmodule.android.startActivity;
var alert_5 = new android.app.AlertDialog.Builder(activity);
var message = options && types.isString(options.message) ? options.message : "";
var title = options && types.isString(options.title) ? options.title : "";
if (options && options.cancelable === false) {
alert_5.setCancelable(false);
}
if (title) {
alert_5.setTitle(title);
if (!options.actions) {
alert_5.setMessage(message);
}
} else {
alert_5.setTitle(message);
}
if (options.actions) {
alert_5.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, which) {
resolve(options.actions[which]);
}
}));
}
if (types.isString(options.cancelButtonText)) {
alert_5.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve(options.cancelButtonText);
}
}));
}
alert_5.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
if (types.isString(options.cancelButtonText)) {
resolve(options.cancelButtonText);
} else {
resolve("");
}
}
}));
showDialog(alert_5);
} catch (ex) {
reject(ex);
}
});
}
exports.action = action;
}, function(module, exports, __webpack_require__) {
var frame = __webpack_require__(10);
var button = __webpack_require__(61);
var textField = __webpack_require__(126);
var label = __webpack_require__(72);
var types = __webpack_require__(14);
exports.STRING = "string", exports.PROMPT = "Prompt", exports.CONFIRM = "Confirm", 
exports.ALERT = "Alert", exports.LOGIN = "Login", exports.OK = "OK", exports.CANCEL = "Cancel";
var inputType;
(function(inputType) {
inputType.text = "text";
inputType.password = "password";
})(inputType = exports.inputType || (exports.inputType = {}));
function getCurrentPage() {
var topMostFrame = frame.topmost();
if (topMostFrame) {
return topMostFrame.currentPage;
}
return undefined;
}
exports.getCurrentPage = getCurrentPage;
function applySelectors(view) {
var currentPage = getCurrentPage();
if (currentPage) {
var styleScope = currentPage._getStyleScope();
if (styleScope) {
styleScope.applySelectors(view);
}
}
}
var buttonColor;
function getButtonColor() {
if (!buttonColor) {
var btn = new button.Button();
applySelectors(btn);
buttonColor = btn.color;
btn.onUnloaded();
}
return buttonColor;
}
exports.getButtonColor = getButtonColor;
var textFieldColor;
function getTextFieldColor() {
if (!textFieldColor) {
var tf = new textField.TextField();
applySelectors(tf);
textFieldColor = tf.color;
}
return textFieldColor;
}
exports.getTextFieldColor = getTextFieldColor;
var labelColor;
function getLabelColor() {
if (!labelColor) {
var lbl = new label.Label();
applySelectors(lbl);
labelColor = lbl.color;
}
return labelColor;
}
exports.getLabelColor = getLabelColor;
function isDialogOptions(arg) {
return !types.isNullOrUndefined(arg) && (arg.message || arg.title);
}
exports.isDialogOptions = isDialogOptions;
}, function(module, exports, __webpack_require__) {
var frameCommon = __webpack_require__(11);
var pages = __webpack_require__(89);
var transitionModule = __webpack_require__(144);
var trace = __webpack_require__(31);
var observable_1 = __webpack_require__(18);
var application = __webpack_require__(16);
var types = __webpack_require__(14);
global.moduleMerge(frameCommon, exports);
var HIDDEN = "_hidden";
var INTENT_EXTRA = "com.tns.activity";
var FRAMEID = "_frameId";
var navDepth = -1;
var fragmentId = -1;
var activityInitialized = false;
var CALLBACKS = "_callbacks";
function onFragmentShown(fragment) {
if (trace.enabled) {
trace.write("SHOWN " + fragment, trace.categories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
if (callbacks.clearHistory) {
if (trace.enabled) {
trace.write(fragment + " has been shown, but it is being cleared from history. Returning.", trace.categories.NativeLifecycle);
}
return null;
}
var frame = callbacks.frame;
var entry = callbacks.entry;
var page = entry.resolvedPage;
page._fragmentTag = entry.fragmentTag;
var currentNavigationContext;
var navigationQueue = frame._navigationQueue;
for (var i = 0; i < navigationQueue.length; i++) {
if (navigationQueue[i].entry === entry) {
currentNavigationContext = navigationQueue[i];
break;
}
}
var isBack = currentNavigationContext ? currentNavigationContext.isBackNavigation : false;
frame._addView(page);
if (!frame.isLoaded) {
frame._currentEntry = entry;
frame.onLoaded();
}
transitionModule._onFragmentShown(fragment, isBack);
}
function onFragmentHidden(fragment, destroyed) {
if (trace.enabled) {
trace.write("HIDDEN " + fragment + "; destroyed: " + destroyed, trace.categories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
var isBack = callbacks.entry.isBack;
callbacks.entry.isBack = undefined;
callbacks.entry.resolvedPage._fragmentTag = undefined;
transitionModule._onFragmentHidden(fragment, isBack, destroyed);
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._containerViewId = -1;
this._android = new AndroidFrame(this);
this._listener = new android.view.View.OnAttachStateChangeListener({
onViewAttachedToWindow: this.onNativeViewAttachedToWindow.bind(this),
onViewDetachedFromWindow: this.onNativeViewDetachedToWindow.bind(this)
});
}
Object.defineProperty(Frame, "defaultAnimatedNavigation", {
get: function() {
return frameCommon.Frame.defaultAnimatedNavigation;
},
set: function(value) {
frameCommon.Frame.defaultAnimatedNavigation = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame, "defaultTransition", {
get: function() {
return frameCommon.Frame.defaultTransition;
},
set: function(value) {
frameCommon.Frame.defaultTransition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "containerViewId", {
get: function() {
return this._containerViewId;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "_nativeView", {
get: function() {
return this._android.rootViewGroup;
},
enumerable: true,
configurable: true
});
Frame.prototype._navigateCore = function(backstackEntry) {
_super.prototype._navigateCore.call(this, backstackEntry);
var activity = this._android.activity;
if (!activity) {
var currentActivity = this._android.currentActivity;
if (currentActivity) {
startActivity(currentActivity, this._android.frameId);
}
this._delayedNavigationEntry = backstackEntry;
return;
}
var manager = activity.getFragmentManager();
var currentFragment;
if (this._currentEntry) {
this._currentEntry.isNavigation = true;
currentFragment = manager.findFragmentByTag(this._currentEntry.fragmentTag);
}
var clearHistory = backstackEntry.entry.clearHistory;
if (clearHistory) {
navDepth = -1;
}
navDepth++;
fragmentId++;
var newFragmentTag = "fragment" + fragmentId + "[" + navDepth + "]";
ensureFragmentClass();
var newFragment = new fragmentClass();
var args = new android.os.Bundle();
args.putInt(FRAMEID, this._android.frameId);
newFragment.setArguments(args);
setFragmentCallbacks(newFragment);
var callbacks = newFragment[CALLBACKS];
callbacks.frame = this;
callbacks.entry = backstackEntry;
backstackEntry.isNavigation = true;
backstackEntry.fragmentTag = newFragmentTag;
backstackEntry.navDepth = navDepth;
var fragmentTransaction = manager.beginTransaction();
if (trace.enabled) {
trace.write("BEGIN TRANSACTION " + fragmentTransaction, trace.categories.Navigation);
}
var animated = this._getIsAnimatedNavigation(backstackEntry.entry);
var navigationTransition = this._getNavigationTransition(backstackEntry.entry);
if (currentFragment) {
transitionModule._clearForwardTransitions(currentFragment);
if (animated && navigationTransition) {
transitionModule._setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction);
}
}
var length = manager.getBackStackEntryCount();
var emptyNativeBackStack = clearHistory && length > 0;
if (emptyNativeBackStack) {
for (var i = 0; i < length; i++) {
var fragmentToRemove = manager.findFragmentByTag(manager.getBackStackEntryAt(i).getName());
Frame._clearHistory(fragmentToRemove);
}
if (currentFragment) {
transitionModule._prepareCurrentFragmentForClearHistory(currentFragment);
}
var firstEntryName = manager.getBackStackEntryAt(0).getName();
if (trace.enabled) {
trace.write("POP BACK STACK " + firstEntryName, trace.categories.Navigation);
}
manager.popBackStackImmediate(firstEntryName, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
if (currentFragment && !emptyNativeBackStack) {
if (this.android.cachePagesOnNavigate && !clearHistory) {
if (trace.enabled) {
trace.write("\tHIDE " + currentFragment, trace.categories.Navigation);
}
fragmentTransaction.hide(currentFragment);
} else {
if (trace.enabled) {
trace.write("\tREMOVE " + currentFragment, trace.categories.Navigation);
}
fragmentTransaction.remove(currentFragment);
}
}
if (trace.enabled) {
trace.write("\tADD " + newFragmentTag + "<" + callbacks.entry.resolvedPage + ">", trace.categories.Navigation);
}
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
if (this.backStack.length > 0 && currentFragment && !clearHistory) {
if (trace.enabled) {
trace.write("\tADD TO BACK STACK " + currentFragment, trace.categories.Navigation);
}
fragmentTransaction.addToBackStack(this._currentEntry.fragmentTag);
}
if (currentFragment) {
ensureAnimationFixed();
var trans = void 0;
if (this.android.cachePagesOnNavigate && animationFixed < 0 && !navigationTransition) {
trans = android.app.FragmentTransaction.TRANSIT_NONE;
} else {
trans = animated ? android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN : android.app.FragmentTransaction.TRANSIT_NONE;
}
if (trace.enabled) {
trace.write("\tSET TRANSITION " + (trans === 0 ? "NONE" : "OPEN"), trace.categories.Navigation);
}
fragmentTransaction.setTransition(trans);
}
fragmentTransaction.commit();
if (trace.enabled) {
trace.write("END TRANSACTION " + fragmentTransaction, trace.categories.Navigation);
}
};
Frame._clearHistory = function(fragment) {
if (trace.enabled) {
trace.write("CLEAR HISTORY FOR " + fragment, trace.categories.Navigation);
}
var callbacks = fragment[CALLBACKS];
callbacks.clearHistory = true;
transitionModule._clearBackwardTransitions(fragment);
transitionModule._clearForwardTransitions(fragment);
transitionModule._removePageNativeViewFromAndroidParent(callbacks.entry.resolvedPage);
};
Frame.prototype._goBackCore = function(backstackEntry) {
_super.prototype._goBackCore.call(this, backstackEntry);
navDepth = backstackEntry.navDepth;
backstackEntry.isNavigation = true;
if (this._currentEntry) {
this._currentEntry.isBack = true;
this._currentEntry.isNavigation = true;
}
var manager = this._android.activity.getFragmentManager();
if (manager.getBackStackEntryCount() > 0) {
manager.popBackStack(backstackEntry.fragmentTag, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
};
Frame.prototype._createUI = function() {
var root = new org.nativescript.widgets.ContentLayout(this._context);
if (this._containerViewId < 0) {
this._containerViewId = android.view.View.generateViewId();
}
this._android.rootViewGroup = root;
this._android.rootViewGroup.setId(this._containerViewId);
this._android.rootViewGroup.addOnAttachStateChangeListener(this._listener);
};
Frame.prototype.onNativeViewAttachedToWindow = function(view) {
if (this._delayedNavigationEntry) {
this._navigateCore(this._delayedNavigationEntry);
this._delayedNavigationEntry = undefined;
}
};
Frame.prototype.onNativeViewDetachedToWindow = function(view) {};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
_super.prototype._popFromFrameStack.call(this);
if (this._android.hasOwnActivity) {
this._android.activity.finish();
}
};
Frame.prototype._clearAndroidReference = function() {
this._android.rootViewGroup.removeOnAttachStateChangeListener(this._listener);
this._android.rootViewGroup = null;
};
Frame.prototype._printNativeBackStack = function() {
if (!this._android.activity) {
return;
}
var manager = this._android.activity.getFragmentManager();
var length = manager.getBackStackEntryCount();
var i = length - 1;
console.log("Fragment Manager Back Stack: ");
while (i >= 0) {
var fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
console.log("\t" + fragment);
}
};
Frame.prototype._getNavBarVisible = function(page) {
if (types.isDefined(page.actionBarHidden)) {
return !page.actionBarHidden;
}
if (this._android && types.isDefined(this._android.showActionBar)) {
return this._android.showActionBar;
}
return true;
};
Frame.prototype._processNavigationContext = function(navigationContext) {
var _this = this;
var activity = this._android.activity;
if (activity) {
var isForegroundActivity = activity === application.android.foregroundActivity;
var isPaused = application.android.paused;
if (activity && !isForegroundActivity || isForegroundActivity && isPaused) {
var weakActivity_1 = new WeakRef(activity);
var resume_1 = function(args) {
var weakActivityInstance = weakActivity_1.get();
var isCurrent = args.activity === weakActivityInstance;
if (!weakActivityInstance) {
if (trace.enabled) {
trace.write("Frame _processNavigationContext: Drop For Activity GC-ed", trace.categories.Navigation);
}
unsubscribe_1();
return;
}
if (isCurrent) {
if (trace.enabled) {
trace.write("Frame _processNavigationContext: Activity.Resumed, Continue", trace.categories.Navigation);
}
_super.prototype._processNavigationContext.call(_this, navigationContext);
unsubscribe_1();
}
};
var unsubscribe_1 = function() {
if (trace.enabled) {
trace.write("Frame _processNavigationContext: Unsubscribe from Activity.Resumed", trace.categories.Navigation);
}
application.android.off(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.off(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.off(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
};
if (trace.enabled) {
trace.write("Frame._processNavigationContext: Subscribe for Activity.Resumed", trace.categories.Navigation);
}
application.android.on(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.on(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.on(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
return;
}
}
_super.prototype._processNavigationContext.call(this, navigationContext);
};
return Frame;
}(frameCommon.Frame);
exports.Frame = Frame;
var framesCounter = 0;
var framesCache = new Array();
var AndroidFrame = function(_super) {
__extends(AndroidFrame, _super);
function AndroidFrame(owner) {
_super.call(this);
this.hasOwnActivity = false;
this._showActionBar = true;
this._owner = owner;
this.frameId = framesCounter++;
framesCache.push(new WeakRef(this));
}
Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
get: function() {
return this._showActionBar;
},
set: function(value) {
if (this._showActionBar !== value) {
this._showActionBar = value;
if (this.owner.currentPage) {
this.owner.currentPage.actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "activity", {
get: function() {
var activity = this.owner._context;
if (activity) {
return activity;
}
var currView = this._owner.parent;
while (currView) {
if (currView instanceof Frame) {
return currView.android.activity;
}
currView = currView.parent;
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "actionBar", {
get: function() {
var activity = this.currentActivity;
if (!activity) {
return undefined;
}
var bar = activity.getActionBar();
if (!bar) {
return undefined;
}
return bar;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
get: function() {
var activity = this.activity;
if (activity) {
return activity;
}
var stack = frameCommon.stack(), length = stack.length, i = length - 1, frame;
for (i; i >= 0; i--) {
frame = stack[i];
activity = frame.android.activity;
if (activity) {
return activity;
}
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "owner", {
get: function() {
return this._owner;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "cachePagesOnNavigate", {
get: function() {
return this._cachePagesOnNavigate;
},
set: function(value) {
if (this._cachePagesOnNavigate !== value) {
if (this._owner.backStack.length > 0) {
this._owner._printFrameBackStack();
this._owner._printNativeBackStack();
console.log("currentPage: " + this._owner.currentPage);
throw new Error("Cannot set cachePagesOnNavigate if there are items in the back stack.");
}
this._cachePagesOnNavigate = value;
}
},
enumerable: true,
configurable: true
});
AndroidFrame.prototype.canGoBack = function() {
if (!this.activity) {
return false;
}
return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
};
AndroidFrame.prototype.fragmentForPage = function(page) {
if (!page) {
return undefined;
}
var tag = page._fragmentTag;
if (tag) {
var manager = this.activity.getFragmentManager();
return manager.findFragmentByTag(tag);
}
return undefined;
};
return AndroidFrame;
}(observable_1.Observable);
function findPageForFragment(fragment, frame) {
var fragmentTag = fragment.getTag();
var page;
var entry;
if (trace.enabled) {
trace.write("Finding page for " + fragmentTag + ".", trace.categories.NativeLifecycle);
}
if (fragmentTag === pages.DIALOG_FRAGMENT_TAG) {
if (trace.enabled) {
trace.write("No need to find page for dialog fragment.", trace.categories.NativeLifecycle);
}
return;
}
if (frame._currentEntry && frame._currentEntry.fragmentTag === fragmentTag) {
page = frame.currentPage;
entry = frame._currentEntry;
if (trace.enabled) {
trace.write("Current page matches fragment " + fragmentTag + ".", trace.categories.NativeLifecycle);
}
} else {
var backStack = frame.backStack;
for (var i = 0; i < backStack.length; i++) {
if (backStack[i].fragmentTag === fragmentTag) {
entry = backStack[i];
break;
}
}
if (entry) {
page = entry.resolvedPage;
if (trace.enabled) {
trace.write("Found " + page + " for " + fragmentTag, trace.categories.NativeLifecycle);
}
}
}
if (page) {
var callbacks = fragment[CALLBACKS];
callbacks.frame = frame;
callbacks.entry = entry;
} else {
throw new Error("Could not find a page for " + fragmentTag + ".");
}
}
function startActivity(activity, frameId) {
var intent = new android.content.Intent(activity, activity.getClass());
intent.setAction(android.content.Intent.ACTION_DEFAULT);
intent.putExtra(INTENT_EXTRA, frameId);
activity.startActivity(intent);
}
function getFrameById(frameId) {
for (var i = 0; i < framesCache.length; i++) {
var aliveFrame = framesCache[i].get();
if (aliveFrame && aliveFrame.frameId === frameId) {
return aliveFrame.owner;
}
}
return null;
}
var animationFixed;
function ensureAnimationFixed() {
if (!animationFixed) {
animationFixed = android.os.Build.VERSION.SDK_INT >= 19 ? 1 : -1;
}
}
function ensureFragmentClass() {
if (fragmentClass) {
return;
}
__webpack_require__(148);
if (!fragmentClass) {
throw new Error("Failed to initialize the extended android.app.Fragment class");
}
}
var fragmentClass;
function setFragmentClass(clazz) {
if (fragmentClass) {
throw new Error("Fragment class already initialized");
}
fragmentClass = clazz;
}
exports.setFragmentClass = setFragmentClass;
var FragmentCallbacksImplementation = function() {
function FragmentCallbacksImplementation() {}
FragmentCallbacksImplementation.prototype.onHiddenChanged = function(fragment, hidden, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onHiddenChanged(" + hidden + ")", trace.categories.NativeLifecycle);
}
superFunc.call(fragment, hidden);
if (hidden) {
onFragmentHidden(fragment, false);
} else {
onFragmentShown(fragment);
}
};
FragmentCallbacksImplementation.prototype.onCreateAnimator = function(fragment, transit, enter, nextAnim, superFunc) {
var nextAnimString;
switch (nextAnim) {
case -10:
nextAnimString = "enter";
break;

case -20:
nextAnimString = "exit";
break;

case -30:
nextAnimString = "popEnter";
break;

case -40:
nextAnimString = "popExit";
break;
}
var animator = transitionModule._onFragmentCreateAnimator(fragment, nextAnim);
if (!animator) {
animator = superFunc.call(fragment, transit, enter, nextAnim);
}
if (trace.enabled) {
trace.write(fragment + ".onCreateAnimator(" + transit + ", " + (enter ? "enter" : "exit") + ", " + nextAnimString + "): " + animator, trace.categories.NativeLifecycle);
}
return animator;
};
FragmentCallbacksImplementation.prototype.onCreate = function(fragment, savedInstanceState, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
}
superFunc.call(fragment, savedInstanceState);
if (!this.entry) {
var frameId = fragment.getArguments().getInt(FRAMEID);
var frame = getFrameById(frameId);
if (frame) {
this.frame = frame;
} else {
throw new Error("Cannot find Frame for " + fragment);
}
findPageForFragment(fragment, this.frame);
}
};
FragmentCallbacksImplementation.prototype.onCreateView = function(fragment, inflater, container, savedInstanceState, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onCreateView(inflater, container, " + savedInstanceState + ")", trace.categories.NativeLifecycle);
}
var entry = this.entry;
var page = entry.resolvedPage;
if (savedInstanceState && savedInstanceState.getBoolean(HIDDEN, false)) {
fragment.getFragmentManager().beginTransaction().hide(fragment).commit();
page._onAttached(fragment.getActivity());
} else {
onFragmentShown(fragment);
}
return page._nativeView;
};
FragmentCallbacksImplementation.prototype.onSaveInstanceState = function(fragment, outState, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onSaveInstanceState(" + outState + ")", trace.categories.NativeLifecycle);
}
superFunc.call(fragment, outState);
if (fragment.isHidden()) {
outState.putBoolean(HIDDEN, true);
}
};
FragmentCallbacksImplementation.prototype.onDestroyView = function(fragment, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onDestroyView()", trace.categories.NativeLifecycle);
}
superFunc.call(fragment);
onFragmentHidden(fragment, true);
};
FragmentCallbacksImplementation.prototype.onDestroy = function(fragment, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onDestroy()", trace.categories.NativeLifecycle);
}
superFunc.call(fragment);
};
FragmentCallbacksImplementation.prototype.toStringOverride = function(fragment, superFunc) {
return fragment.getTag() + "<" + (this.entry ? this.entry.resolvedPage : "") + ">";
};
return FragmentCallbacksImplementation;
}();
var ActivityCallbacksImplementation = function() {
function ActivityCallbacksImplementation() {}
ActivityCallbacksImplementation.prototype.onCreate = function(activity, savedInstanceState, superFunc) {
if (trace.enabled) {
trace.write("Activity.onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
}
var app = application.android;
var intent = activity.getIntent();
if (application.onLaunch) {
application.onLaunch(intent);
}
var launchArgs = {
eventName: application.launchEvent,
object: app,
android: intent
};
application.notify(launchArgs);
var frameId = -1;
var rootView = launchArgs.root;
var extras = intent.getExtras();
if (extras) {
frameId = extras.getInt(INTENT_EXTRA, -1);
}
if (savedInstanceState && frameId < 0) {
frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
}
var frame;
var navParam;
if (frameId >= 0) {
rootView = getFrameById(frameId);
}
if (!rootView) {
navParam = application.mainEntry;
if (!navParam) {
navParam = application.mainModule;
}
if (navParam) {
frame = new Frame();
} else {
throw new Error("A Frame must be used to navigate to a Page.");
}
rootView = frame;
}
var isRestart = !!savedInstanceState && activityInitialized;
superFunc.call(activity, isRestart ? savedInstanceState : null);
this._rootView = rootView;
rootView._onAttached(activity);
activity.setContentView(rootView._nativeView, new org.nativescript.widgets.CommonLayoutParams());
if (frame) {
frame.navigate(navParam);
}
activityInitialized = true;
};
ActivityCallbacksImplementation.prototype.onSaveInstanceState = function(activity, outState, superFunc) {
superFunc.call(activity, outState);
var view = this._rootView;
if (view instanceof Frame) {
outState.putInt(INTENT_EXTRA, view.android.frameId);
}
};
ActivityCallbacksImplementation.prototype.onStart = function(activity, superFunc) {
superFunc.call(activity);
if (trace.enabled) {
trace.write("NativeScriptActivity.onStart();", trace.categories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && !rootView.isLoaded) {
rootView.onLoaded();
}
};
ActivityCallbacksImplementation.prototype.onStop = function(activity, superFunc) {
superFunc.call(activity);
if (trace.enabled) {
trace.write("NativeScriptActivity.onStop();", trace.categories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && rootView.isLoaded) {
rootView.onUnloaded();
}
};
ActivityCallbacksImplementation.prototype.onDestroy = function(activity, superFunc) {
var rootView = this._rootView;
if (rootView && rootView._context) {
rootView._onDetached(true);
}
superFunc.call(activity);
if (trace.enabled) {
trace.write("NativeScriptActivity.onDestroy();", trace.categories.NativeLifecycle);
}
var exitArgs = {
eventName: application.exitEvent,
object: application.android,
android: activity
};
application.notify(exitArgs);
if (application.onExit) {
application.onExit();
}
};
ActivityCallbacksImplementation.prototype.onBackPressed = function(activity, superFunc) {
if (trace.enabled) {
trace.write("NativeScriptActivity.onBackPressed;", trace.categories.NativeLifecycle);
}
var args = {
eventName: "activityBackPressed",
object: application.android,
activity: activity,
cancel: false
};
application.android.notify(args);
if (args.cancel) {
return;
}
if (!frameCommon.goBack()) {
superFunc.call(activity);
}
};
ActivityCallbacksImplementation.prototype.onRequestPermissionsResult = function(activity, requestCode, permissions, grantResults, superFunc) {
if (trace.enabled) {
trace.write("NativeScriptActivity.onRequestPermissionsResult;", trace.categories.NativeLifecycle);
}
application.android.notify({
eventName: "activityRequestPermissions",
object: application.android,
activity: activity,
requestCode: requestCode,
permissions: permissions,
grantResults: grantResults
});
};
ActivityCallbacksImplementation.prototype.onActivityResult = function(activity, requestCode, resultCode, data, superFunc) {
superFunc.call(activity, requestCode, resultCode, data);
if (trace.enabled) {
trace.write("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", trace.categories.NativeLifecycle);
}
var result = application.android.onActivityResult;
if (result) {
result(requestCode, resultCode, data);
}
application.android.notify({
eventName: "activityResult",
object: application.android,
activity: activity,
requestCode: requestCode,
resultCode: resultCode,
intent: data
});
};
return ActivityCallbacksImplementation;
}();
function setActivityCallbacks(activity) {
activity[CALLBACKS] = new ActivityCallbacksImplementation();
}
exports.setActivityCallbacks = setActivityCallbacks;
function setFragmentCallbacks(fragment) {
fragment[CALLBACKS] = new FragmentCallbacksImplementation();
}
exports.setFragmentCallbacks = setFragmentCallbacks;
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var page_1 = __webpack_require__(89);
var types_1 = __webpack_require__(14);
var trace = __webpack_require__(31);
var file_name_resolver_1 = __webpack_require__(111);
var fs = __webpack_require__(46);
var platform = __webpack_require__(49);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(105);
}
}
var frameStack = [];
function buildEntryFromArgs(arg) {
var entry;
if (arg instanceof page_1.Page) {
throw new Error("Navigating to a Page instance is no longer supported. Please navigate by using either a module name or a page factory function.");
} else if (types_1.isString(arg)) {
entry = {
moduleName: arg
};
} else if (types_1.isFunction(arg)) {
entry = {
create: arg
};
} else {
entry = arg;
}
return entry;
}
function reloadPage() {
var frame = exports.topmost();
if (frame) {
if (frame.currentPage && frame.currentPage.modal) {
frame.currentPage.modal.closeModal();
}
var currentEntry = frame._currentEntry.entry;
var newEntry = {
animated: false,
clearHistory: true,
context: currentEntry.context,
create: currentEntry.create,
moduleName: currentEntry.moduleName,
backstackVisible: currentEntry.backstackVisible
};
frame.navigate(newEntry);
}
}
exports.reloadPage = reloadPage;
function resolvePageFromEntry(entry) {
var page;
if (entry.create) {
page = entry.create();
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to create Page with entry.create() function.");
}
} else if (entry.moduleName) {
var currentAppPath = fs.knownFolders.currentApp().path;
var moduleNamePath = fs.path.join(currentAppPath, entry.moduleName);
var moduleExports;
if (global.moduleExists(entry.moduleName)) {
if (trace.enabled) {
trace.write("Loading pre-registered JS module: " + entry.moduleName, trace.categories.Navigation);
}
moduleExports = global.loadModule(entry.moduleName);
} else {
var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");
if (moduleExportsResolvedPath) {
if (trace.enabled) {
trace.write("Loading JS file: " + moduleExportsResolvedPath, trace.categories.Navigation);
}
moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
moduleExports = global.loadModule(moduleExportsResolvedPath);
}
}
if (moduleExports && moduleExports.createPage) {
if (trace.enabled) {
trace.write("Calling createPage()", trace.categories.Navigation);
}
page = moduleExports.createPage();
} else {
page = pageFromBuilder(moduleNamePath, moduleExports);
}
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to load Page from entry.moduleName: " + entry.moduleName);
}
var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFileName && !page["cssFile"]) {
page.addCssFile(cssFileName);
}
}
return page;
}
exports.resolvePageFromEntry = resolvePageFromEntry;
function pageFromBuilder(moduleNamePath, moduleExports) {
var page;
var element;
var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
if (fileName) {
if (trace.enabled) {
trace.write("Loading XML file: " + fileName, trace.categories.Navigation);
}
ensureBuilder();
element = builder.load(fileName, moduleExports);
if (element instanceof page_1.Page) {
page = element;
}
}
return page;
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._isInFrameStack = false;
this._backStack = new Array();
this._navigationQueue = new Array();
}
Frame.prototype.canGoBack = function() {
return this._backStack.length > 0;
};
Frame.prototype.goBack = function(backstackEntry) {
if (trace.enabled) {
trace.write("GO BACK", trace.categories.Navigation);
}
if (!this.canGoBack()) {
return;
}
if (!backstackEntry) {
backstackEntry = this._backStack.pop();
} else {
var backIndex = this._backStack.indexOf(backstackEntry);
if (backIndex < 0) {
return;
}
this._backStack.splice(backIndex);
}
var navigationContext = {
entry: backstackEntry,
isBackNavigation: true
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (trace.enabled) {
trace.write("Going back scheduled", trace.categories.Navigation);
}
}
};
Frame.prototype.navigate = function(param) {
if (trace.enabled) {
trace.write("NAVIGATE", trace.categories.Navigation);
}
var entry = buildEntryFromArgs(param);
var page = resolvePageFromEntry(entry);
this._pushInFrameStack();
var backstackEntry = {
entry: entry,
resolvedPage: page,
navDepth: undefined,
fragmentTag: undefined,
isBack: undefined,
isNavigation: true
};
var navigationContext = {
entry: backstackEntry,
isBackNavigation: false
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (trace.enabled) {
trace.write("Navigation scheduled", trace.categories.Navigation);
}
}
};
Frame.prototype._processNavigationQueue = function(page) {
if (this._navigationQueue.length === 0) {
return;
}
var entry = this._navigationQueue[0].entry;
var currentNavigationPage = entry.resolvedPage;
if (page !== currentNavigationPage) {
throw new Error("Corrupted navigation stack; page: " + page + "; currentNavigationPage: " + currentNavigationPage);
}
this._navigationQueue.shift();
if (this._navigationQueue.length > 0) {
var navigationContext = this._navigationQueue[0];
this._processNavigationContext(navigationContext);
}
this._updateActionBar();
};
Frame.prototype.navigationQueueIsEmpty = function() {
return this._navigationQueue.length === 0;
};
Frame._isEntryBackstackVisible = function(entry) {
if (!entry) {
return false;
}
var backstackVisibleValue = entry.entry.backstackVisible;
var backstackHidden = types_1.isDefined(backstackVisibleValue) && !backstackVisibleValue;
return !backstackHidden;
};
Frame.prototype._updateActionBar = function(page) {};
Frame.prototype._processNavigationContext = function(navigationContext) {
if (navigationContext.isBackNavigation) {
this.performGoBack(navigationContext);
} else {
this.performNavigation(navigationContext);
}
};
Frame.prototype.performNavigation = function(navigationContext) {
var navContext = navigationContext.entry;
if (navigationContext.entry.entry.clearHistory) {
this._backStack.length = 0;
} else if (Frame._isEntryBackstackVisible(this._currentEntry)) {
this._backStack.push(this._currentEntry);
}
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._navigateCore(navContext);
};
Frame.prototype.performGoBack = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._goBackCore(navContext);
};
Frame.prototype._goBackCore = function(backstackEntry) {
if (trace.enabled) {
trace.write("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, trace.categories.Navigation);
}
};
Frame.prototype._navigateCore = function(backstackEntry) {
if (trace.enabled) {
trace.write("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, trace.categories.Navigation);
}
};
Frame.prototype._onNavigatingTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatingFrom(isBack);
}
backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
};
Object.defineProperty(Frame.prototype, "animated", {
get: function() {
return this._animated;
},
set: function(value) {
this._animated = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "transition", {
get: function() {
return this._transition;
},
set: function(value) {
this._transition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "backStack", {
get: function() {
return this._backStack.slice();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentPage", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.resolvedPage;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentEntry", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.entry;
}
return null;
},
enumerable: true,
configurable: true
});
Frame.prototype._pushInFrameStack = function() {
if (this._isInFrameStack) {
return;
}
frameStack.push(this);
this._isInFrameStack = true;
};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
var top = _topmost();
if (top !== this) {
throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
}
frameStack.pop();
this._isInFrameStack = false;
};
Object.defineProperty(Frame.prototype, "_childrenCount", {
get: function() {
if (this.currentPage) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._eachChildView = function(callback) {
if (this.currentPage) {
callback(this.currentPage);
}
};
Frame.prototype._getIsAnimatedNavigation = function(entry) {
if (entry && types_1.isDefined(entry.animated)) {
return entry.animated;
}
if (types_1.isDefined(this.animated)) {
return this.animated;
}
return Frame.defaultAnimatedNavigation;
};
Frame.prototype._getNavigationTransition = function(entry) {
if (entry) {
if (platform.device.os === platform.platformNames.ios && types_1.isDefined(entry.transitioniOS)) {
return entry.transitioniOS;
}
if (platform.device.os === platform.platformNames.android && types_1.isDefined(entry.transitionAndroid)) {
return entry.transitionAndroid;
}
if (types_1.isDefined(entry.transition)) {
return entry.transition;
}
}
if (types_1.isDefined(this.transition)) {
return this.transition;
}
return Frame.defaultTransition;
};
Object.defineProperty(Frame.prototype, "navigationBarHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._getNavBarVisible = function(page) {
throw new Error();
};
Frame.prototype._addViewToNativeVisualTree = function(child) {
return true;
};
Frame.prototype._removeViewFromNativeVisualTree = function(child) {
child._isAddedToNativeVisualTree = false;
};
Frame.prototype._printFrameBackStack = function() {
var length = this.backStack.length;
var i = length - 1;
console.log("Frame Back Stack: ");
while (i >= 0) {
var backstackEntry = this.backStack[i--];
console.log("\t" + backstackEntry.resolvedPage);
}
};
Frame.prototype._backstackEntryTrace = function(b) {
var result = "" + b.resolvedPage;
var backstackVisible = Frame._isEntryBackstackVisible(b);
if (!backstackVisible) {
result += " | INVISIBLE";
}
if (b.entry.clearHistory) {
result += " | CLEAR HISTORY";
}
var animated = this._getIsAnimatedNavigation(b.entry);
if (!animated) {
result += " | NOT ANIMATED";
}
var t = this._getNavigationTransition(b.entry);
if (t) {
result += " | Transition[" + JSON.stringify(t) + "]";
}
return result;
};
Frame.androidOptionSelectedEvent = "optionSelected";
Frame.defaultAnimatedNavigation = true;
return Frame;
}(view_1.CustomLayoutView);
exports.Frame = Frame;
var _topmost = function() {
if (frameStack.length > 0) {
return frameStack[frameStack.length - 1];
}
return undefined;
};
exports.topmost = _topmost;
function goBack() {
var top = _topmost();
if (top.canGoBack()) {
top.goBack();
return true;
}
if (frameStack.length > 1) {
top._popFromFrameStack();
}
return false;
}
exports.goBack = goBack;
function stack() {
return frameStack;
}
exports.stack = stack;
}, function(module, exports, __webpack_require__) {
var viewCommon = __webpack_require__(13);
var trace = __webpack_require__(31);
var utils = __webpack_require__(37);
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var enums = __webpack_require__(39);
var background = __webpack_require__(136);
var platform_1 = __webpack_require__(49);
var flexbox;
global.moduleMerge(viewCommon, exports);
var ANDROID = "_android";
var NATIVE_VIEW = "_nativeView";
var VIEW_GROUP = "_viewGroup";
function onAutomationTextPropertyChanged(data) {
var view = data.object;
view._nativeView.setContentDescription(data.newValue);
}
viewCommon.View.automationTextProperty.metadata.onSetNativeValue = onAutomationTextPropertyChanged;
function onIdPropertyChanged(data) {
var view = data.object;
view._nativeView.setTag(data.newValue + "");
}
viewCommon.View.idProperty.metadata.onSetNativeValue = onIdPropertyChanged;
function onOriginXPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setX(data.object._nativeView, data.newValue);
}
viewCommon.View.originXProperty.metadata.onSetNativeValue = onOriginXPropertyChanged;
function onOriginYPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setY(data.object._nativeView, data.newValue);
}
viewCommon.View.originYProperty.metadata.onSetNativeValue = onOriginYPropertyChanged;
function onIsEnabledPropertyChanged(data) {
var view = data.object;
view._nativeView.setEnabled(data.newValue);
}
viewCommon.View.isEnabledProperty.metadata.onSetNativeValue = onIsEnabledPropertyChanged;
function onIsUserInteractionEnabledPropertyChanged(data) {
var view = data.object;
view._updateOnTouchListener(data.newValue);
}
viewCommon.View.isUserInteractionEnabledProperty.metadata.onSetNativeValue = onIsUserInteractionEnabledPropertyChanged;
var styleHandlersInitialized;
var View = function(_super) {
__extends(View, _super);
function View() {
_super.call(this);
this._disableUserInteractionListener = new android.view.View.OnTouchListener({
onTouch: function(view, event) {
return true;
}
});
if (!styleHandlersInitialized) {
styleHandlersInitialized = true;
ViewStyler.registerHandlers();
}
}
View.prototype._updateOnTouchListener = function(isUserInteractionEnabled) {
if (!isUserInteractionEnabled) {
this._nativeView.setOnTouchListener(this._disableUserInteractionListener);
return;
}
if (this._gesturesListener) {
this._nativeView.setOnTouchListener(this._gesturesListener);
return;
}
this._nativeView.setOnTouchListener(null);
};
Object.defineProperty(View.prototype, "gesturesListener", {
set: function(value) {
this._gesturesListener = value;
this._updateOnTouchListener(this.isUserInteractionEnabled);
},
enumerable: true,
configurable: true
});
View.prototype.observe = function(type, callback, thisArg) {
_super.prototype.observe.call(this, type, callback, thisArg);
if (this.isLoaded && !this.touchListenerIsSet) {
this.setOnTouchListener();
}
};
View.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.setOnTouchListener();
};
View.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this._unregisterAllAnimations();
if (this._nativeView && this._nativeView.setOnTouchListener) {
this._nativeView.setOnTouchListener(null);
this.touchListenerIsSet = false;
}
};
View.prototype.hasGestureObservers = function() {
return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
};
View.prototype.setOnTouchListener = function() {
if (this._nativeView && this._nativeView.setOnTouchListener && this.hasGestureObservers()) {
this.touchListenerIsSet = true;
var that = new WeakRef(this);
if (this._nativeView.setClickable) {
this._nativeView.setClickable(true);
}
this._nativeView.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(view, motionEvent) {
var owner = that.get();
if (!owner) {
return false;
}
for (var type in owner._gestureObservers) {
var list = owner._gestureObservers[type];
for (var i = 0; i < list.length; i++) {
list[i].androidOnTouchEvent(motionEvent);
}
}
if (!owner._nativeView || !owner._nativeView.onTouchEvent) {
return false;
}
return owner._nativeView.onTouchEvent(motionEvent);
}
}));
}
};
View.prototype._addViewCore = function(view, atIndex) {
if (this._context) {
view._onAttached(this._context);
}
_super.prototype._addViewCore.call(this, view, atIndex);
if (this._context) {
view._syncNativeProperties();
}
};
View.prototype._removeViewCore = function(view) {
_super.prototype._removeViewCore.call(this, view);
if (view._context) {
view._onDetached();
}
};
View.prototype._onAttached = function(context) {
if (!context) {
throw new Error("Expected valid android.content.Context instance.");
}
if (trace.enabled) {
trace.write(this + "._onAttached(context)", trace.categories.VisualTreeEvents);
}
if (this._context === context) {
return;
}
if (this._context) {
this._onDetached(true);
}
this._context = context;
this._onContextChanged();
trace.notifyEvent(this, "_onAttached");
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
child._onAttached(context);
if (!child._isAddedToNativeVisualTree) {
child._isAddedToNativeVisualTree = that._addViewToNativeVisualTree(child);
}
child._syncNativeProperties();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype._onDetached = function(force) {
if (trace.enabled) {
trace.write(this + "._onDetached(force)", trace.categories.VisualTreeEvents);
}
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
if (child._isAddedToNativeVisualTree) {
that._removeViewFromNativeVisualTree(child);
}
if (child._context) {
child._onDetached(force);
}
return true;
};
this._eachChildView(eachChild);
}
this._clearAndroidReference();
this._context = undefined;
trace.notifyEvent(this, "_onDetached");
};
View.prototype._clearAndroidReference = function() {
if (this[NATIVE_VIEW] === this[ANDROID]) {
this[NATIVE_VIEW] = undefined;
}
if (this[VIEW_GROUP] === this[ANDROID]) {
this[VIEW_GROUP] = undefined;
}
this[ANDROID] = undefined;
};
View.prototype._onContextChanged = function() {
if (trace.enabled) {
trace.write(this + "._onContextChanged", trace.categories.VisualTreeEvents);
}
this._createUI();
if (this._nativeView && !this._nativeView.getLayoutParams()) {
this._nativeView.setLayoutParams(new org.nativescript.widgets.CommonLayoutParams());
}
var padding = this.style.paddingLeft;
padding = this.style.paddingTop;
padding = this.style.paddingRight;
padding = this.style.paddingBottom;
trace.notifyEvent(this, "_onContextChanged");
};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return this.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutRequired", {
get: function() {
return !this.isLayoutValid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
if (this._nativeView) {
return !this._nativeView.isLayoutRequested();
}
return false;
},
enumerable: true,
configurable: true
});
View.prototype.layoutNativeView = function(left, top, right, bottom) {
if (this._nativeView) {
this._nativeView.layout(left, top, right, bottom);
}
};
View.prototype.requestLayout = function() {
_super.prototype.requestLayout.call(this);
if (this._nativeView) {
return this._nativeView.requestLayout();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
_super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
this.onMeasure(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
_super.prototype.layout.call(this, left, top, right, bottom);
this.onLayout(left, top, right, bottom);
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var view = this._nativeView;
if (view) {
view.measure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
}
};
View.prototype.onLayout = function(left, top, right, bottom) {
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
}
};
View.prototype._getCurrentLayoutBounds = function() {
if (this._nativeView) {
return {
left: this._nativeView.getLeft(),
top: this._nativeView.getTop(),
right: this._nativeView.getRight(),
bottom: this._nativeView.getBottom()
};
}
return _super.prototype._getCurrentLayoutBounds.call(this);
};
View.prototype.getMeasuredWidth = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredWidth();
}
return _super.prototype.getMeasuredWidth.call(this);
};
View.prototype.getMeasuredHeight = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredHeight();
}
return _super.prototype.getMeasuredHeight.call(this);
};
View.prototype.focus = function() {
if (this._nativeView) {
return this._nativeView.requestFocus();
}
return false;
};
View.prototype.getLocationInWindow = function() {
if (!this._nativeView || !this._nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this._nativeView.getLocationInWindow(nativeArray);
return {
x: utils.layout.toDeviceIndependentPixels(nativeArray[0]),
y: utils.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationOnScreen = function() {
if (!this._nativeView || !this._nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this._nativeView.getLocationOnScreen(nativeArray);
return {
x: utils.layout.toDeviceIndependentPixels(nativeArray[0]),
y: utils.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationRelativeTo = function(otherView) {
if (!this._nativeView || !this._nativeView.getWindowToken() || !otherView._nativeView || !otherView._nativeView.getWindowToken() || this._nativeView.getWindowToken() !== otherView._nativeView.getWindowToken()) {
return undefined;
}
var myArray = Array.create("int", 2);
this._nativeView.getLocationOnScreen(myArray);
var otherArray = Array.create("int", 2);
otherView._nativeView.getLocationOnScreen(otherArray);
return {
x: utils.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
y: utils.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
};
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = specSize | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return result | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
return View;
}(viewCommon.View);
exports.View = View;
var CustomLayoutView = function(_super) {
__extends(CustomLayoutView, _super);
function CustomLayoutView() {
_super.apply(this, arguments);
}
Object.defineProperty(CustomLayoutView.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CustomLayoutView.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
CustomLayoutView.prototype._createUI = function() {
this._viewGroup = new org.nativescript.widgets.ContentLayout(this._context);
};
CustomLayoutView.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
if (trace.enabled) {
trace.write(this + "._nativeView.addView(" + child + "._nativeView)", trace.categories.VisualTreeEvents);
}
this._nativeView.addView(child._nativeView);
} else {
if (trace.enabled) {
trace.write(this + "._nativeView.addView(" + child + "._nativeView, " + atIndex + ")", trace.categories.VisualTreeEvents);
}
this._nativeView.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
CustomLayoutView.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
if (trace.enabled) {
trace.write(this + "._nativeView.removeView(" + child + "._nativeView)", trace.categories.VisualTreeEvents);
}
this._nativeView.removeView(child._nativeView);
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return CustomLayoutView;
}(View);
exports.CustomLayoutView = CustomLayoutView;
var ViewStyler = function() {
function ViewStyler() {}
ViewStyler.setBackgroundAndBorder = function(view, newValue, defaultValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.resetBackgroundAndBorder = function(view, nativeValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.setVisibilityProperty = function(view, newValue) {
var androidValue = newValue === enums.Visibility.visible ? android.view.View.VISIBLE : android.view.View.GONE;
view._nativeView.setVisibility(androidValue);
};
ViewStyler.resetVisibilityProperty = function(view, nativeValue) {
view._nativeView.setVisibility(android.view.View.VISIBLE);
};
ViewStyler.setOpacityProperty = function(view, newValue) {
view._nativeView.setAlpha(float(newValue));
};
ViewStyler.resetOpacityProperty = function(view, nativeValue) {
view._nativeView.setAlpha(float(1));
};
ViewStyler.setMinWidthProperty = function(view, newValue) {
view._nativeView.setMinimumWidth(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinWidthProperty = function(view, nativeValue) {
view._nativeView.setMinimumWidth(0);
};
ViewStyler.setMinHeightProperty = function(view, newValue) {
view._nativeView.setMinimumHeight(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinHeightProperty = function(view, nativeValue) {
view._nativeView.setMinimumHeight(0);
};
ViewStyler.setNativeLayoutParamsProperty = function(view, params) {
var nativeView = view._nativeView;
var width = params.width * utils.layout.getDisplayDensity();
var height = params.height * utils.layout.getDisplayDensity();
if (width < 0) {
width = -2;
}
if (height < 0) {
height = -2;
}
var gravity = 0;
switch (params.horizontalAlignment) {
case enums.HorizontalAlignment.left:
gravity |= android.view.Gravity.LEFT;
break;

case enums.HorizontalAlignment.center:
gravity |= android.view.Gravity.CENTER_HORIZONTAL;
break;

case enums.HorizontalAlignment.right:
gravity |= android.view.Gravity.RIGHT;
break;

case enums.HorizontalAlignment.stretch:
gravity |= android.view.Gravity.FILL_HORIZONTAL;
if (width < 0) {
width = -1;
}
break;

default:
throw new Error("Invalid horizontalAlignment value: " + params.horizontalAlignment);
}
switch (params.verticalAlignment) {
case enums.VerticalAlignment.top:
gravity |= android.view.Gravity.TOP;
break;

case enums.VerticalAlignment.center:
case enums.VerticalAlignment.middle:
gravity |= android.view.Gravity.CENTER_VERTICAL;
break;

case enums.VerticalAlignment.bottom:
gravity |= android.view.Gravity.BOTTOM;
break;

case enums.VerticalAlignment.stretch:
gravity |= android.view.Gravity.FILL_VERTICAL;
if (height < 0) {
height = -1;
}
break;

default:
throw new Error("Invalid verticalAlignment value: " + params.verticalAlignment);
}
var lp = nativeView.getLayoutParams();
lp.width = Math.round(width);
lp.height = Math.round(height);
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
lp.widthPercent = params.widthPercent;
lp.heightPercent = params.heightPercent;
lp.leftMarginPercent = params.leftMarginPercent;
lp.topMarginPercent = params.topMarginPercent;
lp.rightMarginPercent = params.rightMarginPercent;
lp.bottomMarginPercent = params.bottomMarginPercent;
lp.leftMargin = Math.round(params.leftMargin * utils.layout.getDisplayDensity());
lp.topMargin = Math.round(params.topMargin * utils.layout.getDisplayDensity());
lp.rightMargin = Math.round(params.rightMargin * utils.layout.getDisplayDensity());
lp.bottomMargin = Math.round(params.bottomMargin * utils.layout.getDisplayDensity());
lp.gravity = gravity;
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
if (!flexbox) {
flexbox = __webpack_require__(142);
}
flexbox._setAndroidLayoutParams(lp, view);
}
} else {
var layoutParams = lp;
if (types.isDefined(layoutParams.widthPercent)) {
layoutParams.widthPercent = params.widthPercent;
}
if (types.isDefined(layoutParams.heightPercent)) {
layoutParams.heightPercent = params.heightPercent;
}
if (types.isDefined(layoutParams.leftMarginPercent)) {
layoutParams.leftMarginPercent = params.leftMarginPercent;
}
if (types.isDefined(layoutParams.topMarginPercent)) {
layoutParams.topMarginPercent = params.topMarginPercent;
}
if (types.isDefined(layoutParams.rightMarginPercent)) {
layoutParams.rightMarginPercent = params.rightMarginPercent;
}
if (types.isDefined(layoutParams.bottomMarginPercent)) {
layoutParams.bottomMarginPercent = params.bottomMarginPercent;
}
if (types.isDefined(layoutParams.leftMargin)) {
layoutParams.leftMargin = Math.round(params.leftMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.topMargin)) {
layoutParams.topMargin = Math.round(params.topMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.rightMargin)) {
layoutParams.rightMargin = Math.round(params.rightMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.bottomMargin)) {
layoutParams.bottomMargin = Math.round(params.bottomMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.gravity)) {
layoutParams.gravity = gravity;
}
}
nativeView.setLayoutParams(lp);
};
ViewStyler.resetNativeLayoutParamsProperty = function(view, nativeValue) {
ViewStyler.setNativeLayoutParamsProperty(view, style.nativeLayoutParamsProperty.defaultValue);
};
ViewStyler.getNativePaddingLeft = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingLeft() / density;
};
ViewStyler.getNativePaddingTop = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingTop() / density;
};
ViewStyler.getNativePaddingRight = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingRight() / density;
};
ViewStyler.getNativePaddingBottom = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingBottom() / density;
};
ViewStyler.setNativePaddingLeft = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = (value + view.borderLeftWidth) * density;
var top = nativeView.getPaddingTop();
var right = nativeView.getPaddingRight();
var bottom = nativeView.getPaddingBottom();
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setNativePaddingTop = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = nativeView.getPaddingLeft();
var top = (value + view.borderTopWidth) * density;
var right = nativeView.getPaddingRight();
var bottom = nativeView.getPaddingBottom();
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setNativePaddingRight = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = nativeView.getPaddingLeft();
var top = nativeView.getPaddingTop();
var right = (value + view.borderRightWidth) * density;
var bottom = nativeView.getPaddingBottom();
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setNativePaddingBottom = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = nativeView.getPaddingLeft();
var top = nativeView.getPaddingTop();
var right = nativeView.getPaddingRight();
var bottom = (value + view.borderBottomWidth) * density;
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setRotateProperty = function(view, newValue) {
view._nativeView.setRotation(newValue);
};
ViewStyler.resetRotateProperty = function(view, nativeValue) {
view._nativeView.setRotation(float(0));
};
ViewStyler.setScaleXProperty = function(view, newValue) {
view._nativeView.setScaleX(newValue);
};
ViewStyler.resetScaleXProperty = function(view, nativeValue) {
view._nativeView.setScaleX(float(1));
};
ViewStyler.setScaleYProperty = function(view, newValue) {
view._nativeView.setScaleY(newValue);
};
ViewStyler.resetScaleYProperty = function(view, nativeValue) {
view._nativeView.setScaleY(float(1));
};
ViewStyler.setTranslateXProperty = function(view, newValue) {
view._nativeView.setTranslationX(newValue * utils.layout.getDisplayDensity());
};
ViewStyler.resetTranslateXProperty = function(view, nativeValue) {
view._nativeView.setTranslationX(float(0));
};
ViewStyler.setTranslateYProperty = function(view, newValue) {
view._nativeView.setTranslationY(newValue * utils.layout.getDisplayDensity());
};
ViewStyler.resetTranslateYProperty = function(view, nativeValue) {
view._nativeView.setTranslationY(float(0));
};
ViewStyler.getZIndexProperty = function(view) {
return view.android.getZ ? view.android.getZ() : 0;
};
ViewStyler.setZIndexProperty = function(view, newValue) {
if (view.android.setZ) {
view.android.setZ(newValue);
if (view.android instanceof android.widget.Button) {
view.android.setStateListAnimator(null);
}
}
};
ViewStyler.resetZIndexProperty = function(view, nativeValue) {
if (view.android.setZ) {
view.android.setZ(nativeValue);
}
};
ViewStyler.registerHandlers = function() {
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ViewStyler.setVisibilityProperty, ViewStyler.resetVisibilityProperty));
style.registerHandler(style.opacityProperty, new style.StylePropertyChangedHandler(ViewStyler.setOpacityProperty, ViewStyler.resetOpacityProperty));
style.registerHandler(style.minWidthProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinWidthProperty, ViewStyler.resetMinWidthProperty));
style.registerHandler(style.minHeightProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinHeightProperty, ViewStyler.resetMinHeightProperty));
style.registerHandler(style.backgroundInternalProperty, new style.StylePropertyChangedHandler(ViewStyler.setBackgroundAndBorder, ViewStyler.resetBackgroundAndBorder));
style.registerHandler(style.nativeLayoutParamsProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativeLayoutParamsProperty, ViewStyler.resetNativeLayoutParamsProperty));
style.registerHandler(style.paddingLeftProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingLeft, ViewStyler.setNativePaddingLeft, ViewStyler.getNativePaddingLeft), "TextBase");
style.registerHandler(style.paddingTopProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingTop, ViewStyler.setNativePaddingTop, ViewStyler.getNativePaddingTop), "TextBase");
style.registerHandler(style.paddingRightProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingRight, ViewStyler.setNativePaddingRight, ViewStyler.getNativePaddingRight), "TextBase");
style.registerHandler(style.paddingBottomProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingBottom, ViewStyler.setNativePaddingBottom, ViewStyler.getNativePaddingBottom), "TextBase");
style.registerHandler(style.paddingLeftProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingLeft, ViewStyler.setNativePaddingLeft, ViewStyler.getNativePaddingLeft), "Button");
style.registerHandler(style.paddingTopProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingTop, ViewStyler.setNativePaddingTop, ViewStyler.getNativePaddingTop), "Button");
style.registerHandler(style.paddingRightProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingRight, ViewStyler.setNativePaddingRight, ViewStyler.getNativePaddingRight), "Button");
style.registerHandler(style.paddingBottomProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingBottom, ViewStyler.setNativePaddingBottom, ViewStyler.getNativePaddingBottom), "Button");
style.registerHandler(style.paddingLeftProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingLeft, ViewStyler.setNativePaddingLeft, ViewStyler.getNativePaddingLeft), "LayoutBase");
style.registerHandler(style.paddingTopProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingTop, ViewStyler.setNativePaddingTop, ViewStyler.getNativePaddingTop), "LayoutBase");
style.registerHandler(style.paddingRightProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingRight, ViewStyler.setNativePaddingRight, ViewStyler.getNativePaddingRight), "LayoutBase");
style.registerHandler(style.paddingBottomProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingBottom, ViewStyler.setNativePaddingBottom, ViewStyler.getNativePaddingBottom), "LayoutBase");
style.registerHandler(style.rotateProperty, new style.StylePropertyChangedHandler(ViewStyler.setRotateProperty, ViewStyler.resetRotateProperty));
style.registerHandler(style.scaleXProperty, new style.StylePropertyChangedHandler(ViewStyler.setScaleXProperty, ViewStyler.resetScaleXProperty));
style.registerHandler(style.scaleYProperty, new style.StylePropertyChangedHandler(ViewStyler.setScaleYProperty, ViewStyler.resetScaleYProperty));
style.registerHandler(style.translateXProperty, new style.StylePropertyChangedHandler(ViewStyler.setTranslateXProperty, ViewStyler.resetTranslateXProperty));
style.registerHandler(style.translateYProperty, new style.StylePropertyChangedHandler(ViewStyler.setTranslateYProperty, ViewStyler.resetTranslateYProperty));
if (parseInt(platform_1.device.sdkVersion, 10) >= 21) {
style.registerHandler(style.zIndexProperty, new style.StylePropertyChangedHandler(ViewStyler.setZIndexProperty, ViewStyler.resetZIndexProperty, ViewStyler.getZIndexProperty));
}
};
return ViewStyler;
}();
exports.ViewStyler = ViewStyler;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var styling = __webpack_require__(139);
var trace = __webpack_require__(31);
var gestures = __webpack_require__(140);
var styleScope = __webpack_require__(91);
var enums = __webpack_require__(39);
var utils = __webpack_require__(37);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var special_properties_1 = __webpack_require__(36);
var style_1 = __webpack_require__(15);
var debug_1 = __webpack_require__(106);
special_properties_1.registerSpecialProperty("class", function(instance, propertyValue) {
instance.className = propertyValue;
});
special_properties_1.registerSpecialProperty("text", function(instance, propertyValue) {
instance.set("text", propertyValue);
});
function getEventOrGestureName(name) {
return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}
function isEventOrGesture(name, view) {
if (types.isString(name)) {
var eventOrGestureName = getEventOrGestureName(name);
var evt = eventOrGestureName + "Event";
return view.constructor && evt in view.constructor || gestures.fromString(eventOrGestureName.toLowerCase()) !== undefined;
}
return false;
}
exports.isEventOrGesture = isEventOrGesture;
function getViewById(view, id) {
if (!view) {
return undefined;
}
if (view.id === id) {
return view;
}
var retVal;
var descendantsCallback = function(child) {
if (child.id === id) {
retVal = child;
return false;
}
return true;
};
eachDescendant(view, descendantsCallback);
return retVal;
}
exports.getViewById = getViewById;
function eachDescendant(view, callback) {
if (!callback || !view) {
return;
}
var continueIteration;
var localCallback = function(child) {
continueIteration = callback(child);
if (continueIteration) {
child._eachChildView(localCallback);
}
return continueIteration;
};
view._eachChildView(localCallback);
}
exports.eachDescendant = eachDescendant;
function getAncestor(view, criterion) {
var matcher = null;
if (typeof criterion === "string") {
matcher = function(view) {
return view.typeName === criterion;
};
} else {
matcher = function(view) {
return view instanceof criterion;
};
}
for (var parent = view.parent; parent != null; parent = parent.parent) {
if (matcher(parent)) {
return parent;
}
}
return null;
}
exports.getAncestor = getAncestor;
function PseudoClassHandler() {
var pseudoClasses = [];
for (var _i = 0; _i < arguments.length; _i++) {
pseudoClasses[_i - 0] = arguments[_i];
}
var stateEventNames = pseudoClasses.map(function(s) {
return ":" + s;
});
var listeners = Symbol("listeners");
return function(target, propertyKey, descriptor) {
function update(change) {
var prev = this[listeners] || 0;
var next = prev + change;
if (prev <= 0 && next > 0) {
this[propertyKey](true);
} else if (prev > 0 && next <= 0) {
this[propertyKey](false);
}
}
stateEventNames.forEach(function(s) {
return target[s] = update;
});
};
}
exports.PseudoClassHandler = PseudoClassHandler;
var viewIdCounter = 0;
function onCssClassPropertyChanged(data) {
var view = data.object;
var classes = view.cssClasses;
classes.clear();
if (types.isString(data.newValue)) {
data.newValue.split(" ").forEach(function(c) {
return classes.add(c);
});
}
}
var cssClassProperty = new dependency_observable_1.Property("cssClass", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var classNameProperty = new dependency_observable_1.Property("className", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var idProperty = new dependency_observable_1.Property("id", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle));
var automationTextProperty = new dependency_observable_1.Property("automationText", "View", new proxy_1.PropertyMetadata(undefined));
var originXProperty = new dependency_observable_1.Property("originX", "View", new proxy_1.PropertyMetadata(.5));
var originYProperty = new dependency_observable_1.Property("originY", "View", new proxy_1.PropertyMetadata(.5));
var isEnabledProperty = new dependency_observable_1.Property("isEnabled", "View", new proxy_1.PropertyMetadata(true));
var isUserInteractionEnabledProperty = new dependency_observable_1.Property("isUserInteractionEnabled", "View", new proxy_1.PropertyMetadata(true));
var View = function(_super) {
__extends(View, _super);
function View() {
_super.call(this, {});
this._isVisibleCache = true;
this._measuredWidth = Number.NaN;
this._measuredHeight = Number.NaN;
this._oldWidthMeasureSpec = Number.NaN;
this._oldHeightMeasureSpec = Number.NaN;
this._oldLeft = 0;
this._oldTop = 0;
this._oldRight = 0;
this._oldBottom = 0;
this._isLayoutValid = false;
this._isAddedToNativeVisualTree = false;
this._gestureObservers = {};
this.cssClasses = new Set();
this.cssPseudoClasses = new Set();
this.pseudoClassAliases = {
highlighted: [ "active", "pressed" ]
};
this._style = new style.Style(this);
this._domId = viewIdCounter++;
this._goToVisualState("normal");
}
View.prototype.getGestureObservers = function(type) {
return this._gestureObservers[type];
};
View.prototype.observe = function(type, callback, thisArg) {
if (!this._gestureObservers[type]) {
this._gestureObservers[type] = [];
}
this._gestureObservers[type].push(gestures.observe(this, type, callback, thisArg));
};
View.prototype.addEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
arg = getEventOrGestureName(arg);
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this.observe(gesture, callback, thisArg);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this.observe(gst, callback, thisArg);
} else {
_super.prototype.addEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this.observe(arg, callback, thisArg);
}
};
View.prototype.removeEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this._disconnectGestureObservers(gesture);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this._disconnectGestureObservers(gst);
} else {
_super.prototype.removeEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.removeEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this._disconnectGestureObservers(arg);
}
};
View.prototype._isEvent = function(name) {
return this.constructor && name + "Event" in this.constructor;
};
View.prototype._disconnectGestureObservers = function(type) {
var observers = this.getGestureObservers(type);
if (observers) {
for (var i = 0; i < observers.length; i++) {
observers[i].disconnect();
}
}
};
View.prototype.getViewById = function(id) {
return getViewById(this, id);
};
Object.defineProperty(View.prototype, "automationText", {
get: function() {
return this._getValue(View.automationTextProperty);
},
set: function(value) {
this._setValue(View.automationTextProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderColor", {
get: function() {
return this.style.borderColor;
},
set: function(value) {
this.style.borderColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopColor", {
get: function() {
return this.style.borderTopColor;
},
set: function(value) {
this.style.borderTopColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRightColor", {
get: function() {
return this.style.borderRightColor;
},
set: function(value) {
this.style.borderRightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomColor", {
get: function() {
return this.style.borderBottomColor;
},
set: function(value) {
this.style.borderBottomColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderLeftColor", {
get: function() {
return this.style.borderLeftColor;
},
set: function(value) {
this.style.borderLeftColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderWidth", {
get: function() {
return this.style.borderWidth;
},
set: function(value) {
this.style.borderWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopWidth", {
get: function() {
return this.style.borderTopWidth;
},
set: function(value) {
this.style.borderTopWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRightWidth", {
get: function() {
return this.style.borderRightWidth;
},
set: function(value) {
this.style.borderRightWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomWidth", {
get: function() {
return this.style.borderBottomWidth;
},
set: function(value) {
this.style.borderBottomWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderLeftWidth", {
get: function() {
return this.style.borderLeftWidth;
},
set: function(value) {
this.style.borderLeftWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRadius", {
get: function() {
return this.style.borderRadius;
},
set: function(value) {
this.style.borderRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopLeftRadius", {
get: function() {
return this.style.borderTopLeftRadius;
},
set: function(value) {
this.style.borderTopLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopRightRadius", {
get: function() {
return this.style.borderTopRightRadius;
},
set: function(value) {
this.style.borderTopRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomRightRadius", {
get: function() {
return this.style.borderBottomRightRadius;
},
set: function(value) {
this.style.borderBottomRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomLeftRadius", {
get: function() {
return this.style.borderBottomLeftRadius;
},
set: function(value) {
this.style.borderBottomLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundImage", {
get: function() {
return this.style.backgroundImage;
},
set: function(value) {
this.style.backgroundImage = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minWidth", {
get: function() {
return this.style.minWidth;
},
set: function(value) {
this.style.minWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minHeight", {
get: function() {
return this.style.minHeight;
},
set: function(value) {
this.style.minHeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "width", {
get: function() {
return this.style.width;
},
set: function(value) {
this.style.width = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "height", {
get: function() {
return this.style.height;
},
set: function(value) {
this.style.height = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "margin", {
get: function() {
return this.style.margin;
},
set: function(value) {
this.style.margin = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginLeft", {
get: function() {
return this.style.marginLeft;
},
set: function(value) {
this.style.marginLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginTop", {
get: function() {
return this.style.marginTop;
},
set: function(value) {
this.style.marginTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginRight", {
get: function() {
return this.style.marginRight;
},
set: function(value) {
this.style.marginRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginBottom", {
get: function() {
return this.style.marginBottom;
},
set: function(value) {
this.style.marginBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "horizontalAlignment", {
get: function() {
return this.style.horizontalAlignment;
},
set: function(value) {
this.style.horizontalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "verticalAlignment", {
get: function() {
return this.style.verticalAlignment;
},
set: function(value) {
this.style.verticalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "visibility", {
get: function() {
return this.style.visibility;
},
set: function(value) {
this.style.visibility = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "opacity", {
get: function() {
return this.style.opacity;
},
set: function(value) {
this.style.opacity = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateX", {
get: function() {
return this.style.translateX;
},
set: function(value) {
this.style.translateX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateY", {
get: function() {
return this.style.translateY;
},
set: function(value) {
this.style.translateY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleX", {
get: function() {
return this.style.scaleX;
},
set: function(value) {
this.style.scaleX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleY", {
get: function() {
return this.style.scaleY;
},
set: function(value) {
this.style.scaleY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originX", {
get: function() {
return this._getValue(View.originXProperty);
},
set: function(value) {
this._setValue(View.originXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originY", {
get: function() {
return this._getValue(View.originYProperty);
},
set: function(value) {
this._setValue(View.originYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "rotate", {
get: function() {
return this.style.rotate;
},
set: function(value) {
this.style.rotate = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isEnabled", {
get: function() {
return this._getValue(View.isEnabledProperty);
},
set: function(value) {
this._setValue(View.isEnabledProperty, value);
if (value === false) {
this._goToVisualState("disabled");
} else {
this._goToVisualState("normal");
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "page", {
get: function() {
if (this.parent) {
return this.parent.page;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isUserInteractionEnabled", {
get: function() {
return this._getValue(View.isUserInteractionEnabledProperty);
},
set: function(value) {
this._setValue(View.isUserInteractionEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "id", {
get: function() {
return this._getValue(View.idProperty);
},
set: function(value) {
this._setValue(View.idProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssClass", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "className", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "style", {
get: function() {
return this._style;
},
set: function(value) {
throw new Error("View.style property is read-only.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutRequired", {
get: function() {
return true;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
return this._isLayoutValid;
},
set: function(value) {
throw new Error("isLayoutValid is read-only property.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssType", {
get: function() {
if (!this._cssType) {
this._cssType = this.typeName.toLowerCase();
}
return this._cssType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLoaded", {
get: function() {
return this._isLoaded;
},
enumerable: true,
configurable: true
});
View.prototype.onLoaded = function() {
this._isLoaded = true;
this._loadEachChildView();
this._applyStyleFromScope();
this._emit("loaded");
};
View.prototype._loadEachChildView = function() {
if (this._childrenCount > 0) {
var eachChild = function(child) {
child.onLoaded();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype.onUnloaded = function() {
this._setCssState(null);
this._unloadEachChildView();
this._isLoaded = false;
this._emit("unloaded");
};
View.prototype._unloadEachChildView = function() {
if (this._childrenCount > 0) {
this._eachChildView(function(child) {
if (child.isLoaded) {
child.onUnloaded();
}
return true;
});
}
};
View.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var _this = this;
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this._childrenCount > 0) {
var shouldUpdateInheritableProps = property.inheritable && !(property instanceof styling.Property);
if (shouldUpdateInheritableProps) {
this._updatingInheritedProperties = true;
this._eachChildView(function(child) {
child._setValue(property, _this._getValue(property), dependency_observable_1.ValueSource.Inherited);
return true;
});
this._updatingInheritedProperties = false;
}
}
this._checkMetadataOnPropertyChanged(property.metadata);
};
View.prototype._isInheritedChange = function() {
if (this._updatingInheritedProperties) {
return true;
}
var parentView;
parentView = this.parent;
while (parentView) {
if (parentView._updatingInheritedProperties) {
return true;
}
parentView = parentView.parent;
}
return false;
};
View.prototype._checkMetadataOnPropertyChanged = function(metadata) {
if (metadata.affectsLayout) {
this.requestLayout();
}
if (metadata.affectsStyle) {
this.style._resetCssValues();
this._applyStyleFromScope();
this._eachChildView(function(v) {
v._checkMetadataOnPropertyChanged(metadata);
return true;
});
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
};
View.prototype.getMeasuredWidth = function() {
return this._measuredWidth & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.getMeasuredHeight = function() {
return this._measuredHeight & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.getMeasuredState = function() {
return this._measuredWidth & utils.layout.MEASURED_STATE_MASK | this._measuredHeight >> utils.layout.MEASURED_HEIGHT_STATE_SHIFT & utils.layout.MEASURED_STATE_MASK >> utils.layout.MEASURED_HEIGHT_STATE_SHIFT;
};
View.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
if (trace.enabled) {
trace.write(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, trace.categories.Layout);
}
};
View.prototype.requestLayout = function() {
this._isLayoutValid = false;
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
View.prototype.onLayout = function(left, top, right, bottom) {};
View.prototype.layoutNativeView = function(left, top, right, bottom) {};
View.prototype.getAllAliasedStates = function(name) {
var allStates = [];
allStates.push(name);
if (name in this.pseudoClassAliases) {
for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
allStates.push(this.pseudoClassAliases[name][i]);
}
}
return allStates;
};
View.prototype.addPseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (!this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.add(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
View.prototype.deletePseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.delete(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = Math.round(specSize + .499) | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return Math.round(result + .499) | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
View.combineMeasuredStates = function(curState, newState) {
return curState | newState;
};
View.layoutChild = function(parent, child, left, top, right, bottom) {
if (!child || !child._isVisible) {
return;
}
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style_1.nativeLayoutParamsProperty);
var childTop;
var childLeft;
var childWidth = child.getMeasuredWidth();
var childHeight = child.getMeasuredHeight();
var vAlignment;
if (lp.height >= 0 && lp.verticalAlignment === enums.VerticalAlignment.stretch) {
vAlignment = enums.VerticalAlignment.center;
} else {
vAlignment = lp.verticalAlignment;
}
var marginTop = lp.topMargin;
var marginBottom = lp.bottomMargin;
var marginLeft = lp.leftMargin;
var marginRight = lp.rightMargin;
switch (vAlignment) {
case enums.VerticalAlignment.top:
childTop = top + marginTop * density;
break;

case enums.VerticalAlignment.center:
case enums.VerticalAlignment.middle:
childTop = top + (bottom - top - childHeight + (marginTop - marginBottom) * density) / 2;
break;

case enums.VerticalAlignment.bottom:
childTop = bottom - childHeight - marginBottom * density;
break;

case enums.VerticalAlignment.stretch:
default:
childTop = top + marginTop * density;
childHeight = bottom - top - (marginTop + marginBottom) * density;
break;
}
var hAlignment;
if (lp.width >= 0 && lp.horizontalAlignment === enums.HorizontalAlignment.stretch) {
hAlignment = enums.HorizontalAlignment.center;
} else {
hAlignment = lp.horizontalAlignment;
}
switch (hAlignment) {
case enums.HorizontalAlignment.left:
childLeft = left + marginLeft * density;
break;

case enums.HorizontalAlignment.center:
childLeft = left + (right - left - childWidth + (marginLeft - marginRight) * density) / 2;
break;

case enums.HorizontalAlignment.right:
childLeft = right - childWidth - marginRight * density;
break;

case enums.HorizontalAlignment.stretch:
default:
childLeft = left + marginLeft * density;
childWidth = right - left - (marginLeft + marginRight) * density;
break;
}
var childRight = Math.round(childLeft + childWidth);
var childBottom = Math.round(childTop + childHeight);
childLeft = Math.round(childLeft);
childTop = Math.round(childTop);
if (trace.enabled) {
trace.write(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, trace.categories.Layout);
}
child.layout(childLeft, childTop, childRight, childBottom);
};
View.measureChild = function(parent, child, widthMeasureSpec, heightMeasureSpec) {
var measureWidth = 0;
var measureHeight = 0;
if (child && child._isVisible) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var childWidthMeasureSpec = View.getMeasureSpec(child, width, widthMode, true);
var childHeightMeasureSpec = View.getMeasureSpec(child, height, heightMode, false);
if (trace.enabled) {
trace.write(child.parent + " :measureChild: " + child + " " + utils.layout.measureSpecToString(childWidthMeasureSpec) + ", " + utils.layout.measureSpecToString(childHeightMeasureSpec), trace.categories.Layout);
}
child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
measureWidth = child.getMeasuredWidth();
measureHeight = child.getMeasuredHeight();
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
measureWidth = Math.round(measureWidth + (lp.leftMargin + lp.rightMargin) * density);
measureHeight = Math.round(measureHeight + (lp.topMargin + lp.bottomMargin) * density);
}
return {
measuredWidth: measureWidth,
measuredHeight: measureHeight
};
};
View.getMeasureSpec = function(view, parentLength, parentSpecMode, horizontal) {
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
var density = utils.layout.getDisplayDensity();
var margins = horizontal ? lp.leftMargin + lp.rightMargin : lp.topMargin + lp.bottomMargin;
margins = Math.round(margins * density);
var resultSize = 0;
var resultMode = 0;
var measureLength = Math.max(0, parentLength - margins);
var childLength = Math.round((horizontal ? lp.width : lp.height) * density);
if (childLength >= 0) {
if (parentSpecMode !== utils.layout.UNSPECIFIED) {
resultSize = Math.min(parentLength, childLength);
} else {
resultSize = childLength;
}
resultMode = utils.layout.EXACTLY;
} else {
switch (parentSpecMode) {
case utils.layout.EXACTLY:
resultSize = measureLength;
var stretched = horizontal ? lp.horizontalAlignment === enums.HorizontalAlignment.stretch : lp.verticalAlignment === enums.VerticalAlignment.stretch;
resultMode = stretched ? utils.layout.EXACTLY : utils.layout.AT_MOST;
break;

case utils.layout.AT_MOST:
resultSize = measureLength;
resultMode = utils.layout.AT_MOST;
break;

case utils.layout.UNSPECIFIED:
resultSize = 0;
resultMode = utils.layout.UNSPECIFIED;
break;
}
}
return utils.layout.makeMeasureSpec(resultSize, resultMode);
};
View.prototype._setCurrentMeasureSpecs = function(widthMeasureSpec, heightMeasureSpec) {
var changed = this._oldWidthMeasureSpec !== widthMeasureSpec || this._oldHeightMeasureSpec !== heightMeasureSpec;
this._oldWidthMeasureSpec = widthMeasureSpec;
this._oldHeightMeasureSpec = heightMeasureSpec;
return changed;
};
View.adjustChildLayoutParams = function(view, widthMeasureSpec, heightMeasureSpec) {
if (!view) {
return;
}
var availableWidth = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthSpec = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var availableHeight = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightSpec = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
if (widthSpec !== utils.layout.UNSPECIFIED) {
if (lp.widthPercent > 0) {
lp.width = Math.round(availableWidth * lp.widthPercent);
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = Math.round(availableWidth * lp.leftMarginPercent);
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = Math.round(availableWidth * lp.rightMarginPercent);
}
}
if (heightSpec !== utils.layout.UNSPECIFIED) {
if (lp.heightPercent > 0) {
lp.height = Math.round(availableHeight * lp.heightPercent);
}
if (lp.topMarginPercent > 0) {
lp.topMargin = Math.round(availableHeight * lp.topMarginPercent);
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = Math.round(availableHeight * lp.bottomMarginPercent);
}
}
};
View.restoreChildOriginalParams = function(view) {
if (!view) {
return;
}
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
if (lp.widthPercent > 0) {
lp.width = -1;
}
if (lp.heightPercent > 0) {
lp.height = -1;
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = 0;
}
if (lp.topMarginPercent > 0) {
lp.topMargin = 0;
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = 0;
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = 0;
}
};
View.prototype._getCurrentLayoutBounds = function() {
return {
left: this._oldLeft,
top: this._oldTop,
right: this._oldRight,
bottom: this._oldBottom
};
};
View.prototype._setCurrentLayoutBounds = function(left, top, right, bottom) {
this._isLayoutValid = true;
var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
this._oldLeft = left;
this._oldTop = top;
this._oldRight = right;
this._oldBottom = bottom;
return {
boundsChanged: boundsChanged,
sizeChanged: sizeChanged
};
};
View.prototype._applyStyleFromScope = function() {
var rootPage = this.page;
if (!rootPage || !rootPage.isLoaded) {
return;
}
var scope = rootPage._getStyleScope();
scope.applySelectors(this);
};
View.prototype._applyInlineStyle = function(inlineStyle) {
if (types.isString(inlineStyle)) {
try {
this.style._beginUpdate();
styleScope.applyInlineSyle(this, inlineStyle);
} finally {
this.style._endUpdate();
}
}
};
View.prototype._onAttached = function(context) {};
View.prototype._onDetached = function(force) {};
View.prototype._createUI = function() {};
View.prototype._onContextChanged = function() {};
Object.defineProperty(View.prototype, "_childrenCount", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
View.prototype._eachChildView = function(callback) {};
View.prototype._childIndexToNativeChildIndex = function(index) {
return index;
};
View.prototype._getNativeViewsCount = function() {
return this._isAddedToNativeVisualTree ? 1 : 0;
};
View.prototype._eachLayoutView = function(callback) {
return callback(this);
};
View.prototype._addToSuperview = function(superview, index) {
return false;
};
View.prototype._removeFromSuperview = function() {};
View.prototype._addView = function(view, atIndex) {
if (trace.enabled) {
trace.write(this + "._addView(" + view + ", " + atIndex + ")", trace.categories.ViewHierarchy);
}
if (!view) {
throw new Error("Expecting a valid View instance.");
}
if (!(view instanceof View)) {
throw new Error(view + " is not a valid View instance.");
}
if (view._parent) {
throw new Error("View already has a parent. View: " + view + " Parent: " + view._parent);
}
view._parent = this;
this._addViewCore(view, atIndex);
view._parentChanged(null);
};
View.prototype._addViewCore = function(view, atIndex) {
this._propagateInheritableProperties(view);
if (!view._isAddedToNativeVisualTree) {
var nativeIndex = this._childIndexToNativeChildIndex(atIndex);
view._isAddedToNativeVisualTree = this._addViewToNativeVisualTree(view, nativeIndex);
}
if (this._isLoaded) {
view.onLoaded();
}
};
View.prototype._propagateInheritableProperties = function(view) {
view._inheritProperties(this);
view.style._inheritStyleProperties(this);
};
View.prototype._inheritProperties = function(parentView) {
var _this = this;
parentView._eachSetProperty(function(property) {
if (!(property instanceof styling.Property) && property.inheritable) {
var baseValue = parentView._getValue(property);
_this._setValue(property, baseValue, dependency_observable_1.ValueSource.Inherited);
}
return true;
});
};
View.prototype._removeView = function(view) {
if (trace.enabled) {
trace.write(this + "._removeView(" + view + ")", trace.categories.ViewHierarchy);
}
if (view._parent !== this) {
throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view._parent + " ExpectedParent: " + this);
}
this._removeViewCore(view);
view._parent = undefined;
view._parentChanged(this);
};
View.prototype._removeViewCore = function(view) {
this._removeViewFromNativeVisualTree(view);
if (view.isLoaded) {
view.onUnloaded();
}
view.unsetInheritedProperties();
};
View.prototype.unsetInheritedProperties = function() {
var _this = this;
this._setValue(proxy_1.ProxyObject.bindingContextProperty, undefined, dependency_observable_1.ValueSource.Inherited);
this._eachSetProperty(function(property) {
if (!(property instanceof styling.Property) && property.inheritable) {
_this._resetValue(property, dependency_observable_1.ValueSource.Inherited);
}
return true;
});
};
View.prototype._parentChanged = function(oldParent) {};
View.prototype._addViewToNativeVisualTree = function(view, atIndex) {
if (view._isAddedToNativeVisualTree) {
throw new Error("Child already added to the native visual tree.");
}
return true;
};
View.prototype._removeViewFromNativeVisualTree = function(view) {
view._isAddedToNativeVisualTree = false;
};
View.prototype._syncNativeProperties = function() {
_super.prototype._syncNativeProperties.call(this);
this.style._syncNativeProperties();
};
View.prototype._goToVisualState = function(state) {
if (trace.enabled) {
trace.write(this + " going to state: " + state, trace.categories.Style);
}
if (state === this._visualState) {
return;
}
this.deletePseudoClass(this._visualState);
this._visualState = state;
this.addPseudoClass(state);
};
View.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "style") {
this._applyInlineStyle(value);
return true;
}
return false;
};
View.prototype.setInlineStyle = function(style) {
if (!types.isString(style)) {
throw new Error("Parameter should be valid CSS string!");
}
this._applyInlineStyle(style);
};
View.prototype._updateLayout = function() {};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "_isVisible", {
get: function() {
return this._isVisibleCache;
},
enumerable: true,
configurable: true
});
View.prototype._shouldApplyStyleHandlers = function() {
return !!this._nativeView;
};
View.prototype.focus = function() {
return undefined;
};
View.prototype.getLocationInWindow = function() {
return undefined;
};
View.prototype.getLocationOnScreen = function() {
return undefined;
};
View.prototype.getLocationRelativeTo = function(otherView) {
return undefined;
};
View.prototype.getActualSize = function() {
var currentBounds = this._getCurrentLayoutBounds();
if (!currentBounds) {
return undefined;
}
return {
width: utils.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
height: utils.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
};
};
View.prototype.animate = function(animation) {
return this.createAnimation(animation).play();
};
View.prototype.createAnimation = function(animation) {
var animationModule = __webpack_require__(40);
var that = this;
animation.target = that;
return new animationModule.Animation([ animation ]);
};
View.prototype._registerAnimation = function(animation) {
if (this._registeredAnimations === undefined) {
this._registeredAnimations = new Array();
}
this._registeredAnimations.push(animation);
};
View.prototype._unregisterAnimation = function(animation) {
if (this._registeredAnimations) {
var index_1 = this._registeredAnimations.indexOf(animation);
if (index_1 >= 0) {
this._registeredAnimations.splice(index_1, 1);
}
}
};
View.prototype._unregisterAllAnimations = function() {
if (this._registeredAnimations) {
for (var _i = 0, _a = this._registeredAnimations; _i < _a.length; _i++) {
var animation = _a[_i];
animation.cancel();
}
}
};
View.prototype.toString = function() {
var str = this.typeName;
if (this.id) {
str += "<" + this.id + ">";
} else {
str += "(" + this._domId + ")";
}
var source = debug_1.Source.get(this);
if (source) {
str += "@" + source + ";";
}
return str;
};
View.prototype._setNativeViewFrame = function(nativeView, frame) {};
View.prototype._onStylePropertyChanged = function(property) {};
View.prototype._canApplyNativeProperty = function() {
return !!this._nativeView;
};
View.prototype.notifyPseudoClassChanged = function(pseudoClass) {
this.notify({
eventName: ":" + pseudoClass,
object: this
});
};
View.prototype._setCssState = function(next) {
var _this = this;
var previous = this._cssState;
this._cssState = next;
if (!this._invalidateCssHandler) {
this._invalidateCssHandler = function() {
if (_this._invalidateCssHandlerSuspended) {
return;
}
_this.applyCssState();
};
}
try {
this._invalidateCssHandlerSuspended = true;
if (next) {
next.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.addEventListener(attribute + "Change", _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.addEventListener(":" + pseudoClass, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](+1);
}
});
}
});
}
if (previous) {
previous.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.removeEventListener("onPropertyChanged:" + attribute, _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.removeEventListener(eventName, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](-1);
}
});
}
});
}
} finally {
this._invalidateCssHandlerSuspended = false;
}
this.applyCssState();
};
View.prototype.applyCssState = function() {
if (!this._cssState) {
return;
}
this.style._beginUpdate();
this._cssState.apply();
this.style._endUpdate();
};
View.loadedEvent = "loaded";
View.unloadedEvent = "unloaded";
View.automationTextProperty = automationTextProperty;
View.idProperty = idProperty;
View.cssClassProperty = cssClassProperty;
View.classNameProperty = classNameProperty;
View.originXProperty = originXProperty;
View.originYProperty = originYProperty;
View.isEnabledProperty = isEnabledProperty;
View.isUserInteractionEnabledProperty = isUserInteractionEnabledProperty;
return View;
}(proxy_1.ProxyObject);
exports.View = View;
}, function(module, exports) {
function isString(value) {
return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isBoolean(value) {
return typeof value === "boolean" || value instanceof Boolean;
}
exports.isBoolean = isBoolean;
function isFunction(value) {
if (!value) {
return false;
}
return typeof value === "function";
}
exports.isFunction = isFunction;
function isObject(value) {
if (!value) {
return false;
}
return typeof value === "object";
}
exports.isObject = isObject;
function isUndefined(value) {
return typeof value === "undefined";
}
exports.isUndefined = isUndefined;
function isDefined(value) {
return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
return typeof value === "undefined" || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
if (value && !isFunction(value)) {
throw new TypeError("Callback must be a valid function.");
}
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function (.{1,})\(/;
function getClass(object) {
return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
var constructor = object.constructor;
var result = classInfosMap.get(constructor);
if (!result) {
result = new ClassInfo(constructor);
classInfosMap.set(constructor, result);
}
return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
var result = [];
var info = getClassInfo(object);
while (info) {
result.push(info.name);
info = info.baseClassInfo;
}
return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = function() {
function ClassInfo(typeCosntructor) {
this._typeCosntructor = typeCosntructor;
}
Object.defineProperty(ClassInfo.prototype, "name", {
get: function() {
if (!this._name) {
var results = funcNameRegex.exec(this._typeCosntructor.toString());
this._name = results && results.length > 1 ? results[1] : "";
}
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
get: function() {
if (isUndefined(this._baseClassInfo)) {
this._baseClassInfo = ClassInfo._getBase(this);
if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
}
}
return this._baseClassInfo;
},
enumerable: true,
configurable: true
});
ClassInfo._getBase = function(info) {
var result = null;
var constructorProto = info._typeCosntructor.prototype;
if (constructorProto.__proto__) {
result = getClassInfo(constructorProto.__proto__);
}
return result;
};
return ClassInfo;
}();
exports.ClassInfo = ClassInfo;
function toUIString(obj) {
return isNullOrUndefined(obj) ? "" : obj + "";
}
exports.toUIString = toUIString;
}, function(module, exports, __webpack_require__) {
var application = __webpack_require__(16);
var types = __webpack_require__(14);
var trace = __webpack_require__(31);
var dependency_observable_1 = __webpack_require__(29);
var color_1 = __webpack_require__(23);
var styleProperty = __webpack_require__(98);
var converters = __webpack_require__(45);
var enums = __webpack_require__(39);
var utils = __webpack_require__(37);
var font = __webpack_require__(43);
var background = __webpack_require__(136);
var platform = __webpack_require__(49);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(53);
}
}
var _registeredHandlers = Array();
var _handlersCache = {};
var noStylingClasses = {};
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function parseMargin(value) {
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
var top = void 0;
var right = void 0;
var bottom = void 0;
var left = void 0;
if (arr.length === 1) {
top = right = bottom = left = arr[0];
} else if (arr.length === 2) {
top = bottom = arr[0];
right = left = arr[1];
} else if (arr.length === 3) {
top = arr[0];
right = left = arr[1];
bottom = arr[2];
} else if (arr.length === 4) {
top = arr[0];
right = arr[1];
bottom = arr[2];
left = arr[3];
} else {
throw new Error("Invalid value for margin: " + value);
}
return {
top: top,
right: right,
bottom: bottom,
left: left
};
} else if (types.isNumber(value)) {
return {
top: value,
right: value,
bottom: value,
left: value
};
} else {
return value;
}
}
function layoutParamsComparer(x, y) {
return x.width === y.width && x.height === y.height && x.leftMargin === y.leftMargin && x.topMargin === y.topMargin && x.rightMargin === y.rightMargin && x.bottomMargin === y.bottomMargin && x.horizontalAlignment === y.horizontalAlignment && x.verticalAlignment === y.verticalAlignment && x.widthPercent === y.widthPercent && x.heightPercent === y.heightPercent && x.leftMarginPercent === y.leftMarginPercent && x.topMarginPercent === y.topMarginPercent && x.rightMarginPercent === y.rightMarginPercent && x.bottomMarginPercent === y.bottomMarginPercent;
}
function onLayoutParamsChanged(data) {
var style = data.object;
var widthValue = convertToPercentHelper(style.width);
var width;
var widthPercent;
if (widthValue.isPercent) {
width = style.horizontalAlignment === enums.HorizontalAlignment.stretch ? -1 : -2;
widthPercent = widthValue.value / 100;
} else {
width = isNaN(widthValue.value) ? -1 : widthValue.value;
widthPercent = -1;
}
var heightValue = convertToPercentHelper(style.height);
var height;
var heightPercent;
if (heightValue.isPercent) {
height = style.verticalAlignment === enums.VerticalAlignment.stretch ? -1 : -2;
heightPercent = heightValue.value / 100;
} else {
height = isNaN(heightValue.value) ? -1 : heightValue.value;
heightPercent = -1;
}
var marginLeftValue = convertToPercentHelper(style.marginLeft);
var marginTopValue = convertToPercentHelper(style.marginTop);
var marginRightValue = convertToPercentHelper(style.marginRight);
var marginBottomValue = convertToPercentHelper(style.marginBottom);
var layoutParams = {
width: width,
height: height,
widthPercent: widthPercent,
heightPercent: heightPercent,
leftMargin: marginLeftValue.isPercent ? 0 : marginLeftValue.value,
leftMarginPercent: marginLeftValue.isPercent ? marginLeftValue.value / 100 : -1,
topMargin: marginTopValue.isPercent ? 0 : marginTopValue.value,
topMarginPercent: marginTopValue.isPercent ? marginTopValue.value / 100 : -1,
rightMargin: marginRightValue.isPercent ? 0 : marginRightValue.value,
rightMarginPercent: marginRightValue.isPercent ? marginRightValue.value / 100 : -1,
bottomMargin: marginBottomValue.isPercent ? 0 : marginBottomValue.value,
bottomMarginPercent: marginBottomValue.isPercent ? marginBottomValue.value / 100 : -1,
horizontalAlignment: style.horizontalAlignment,
verticalAlignment: style.verticalAlignment
};
style._setValue(exports.nativeLayoutParamsProperty, layoutParams);
}
function onPaddingValueChanged(data) {
var style = data.object;
var thickness = {
top: style.paddingTop,
right: style.paddingRight,
bottom: style.paddingBottom,
left: style.paddingLeft
};
style._setValue(exports.nativePaddingsProperty, thickness);
}
function thicknessComparer(x, y) {
if (x && y) {
return x.left === y.left && x.top === y.top && x.right === y.right && x.bottom === y.bottom;
}
return !x === !y;
}
function convertToPercentHelper(value) {
var numberValue = 0;
var isPercent = false;
var isError = true;
if (types.isString(value)) {
var stringValue = value.trim();
var percentIndex = stringValue.indexOf("%");
if (percentIndex !== -1) {
if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
numberValue = 0;
} else {
isPercent = true;
numberValue = converters.numberConverter(stringValue.substring(0, stringValue.length - 1).trim());
isError = numberValue === 0;
}
} else {
isError = false;
isPercent = false;
numberValue = converters.numberConverter(stringValue);
}
} else if (types.isNumber(value)) {
isError = false;
isPercent = false;
numberValue = value;
}
return {
isError: isError,
isPercent: isPercent,
value: numberValue
};
}
function numberOrPercentConverter(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
throw new Error("Invalid value: " + value);
}
return result.isPercent ? value : result.value;
}
function isWidthHeightValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isNaN(result.value) || result.value >= 0 && isFinite(result.value);
}
function isMinWidthHeightValid(value) {
return !isNaN(value) && value >= 0 && isFinite(value);
}
function getHandlerInternal(propertyId, classInfo) {
var className = classInfo ? classInfo.name : "default";
var handlerKey = className + propertyId;
var result = _handlersCache[handlerKey];
if (types.isDefined(result)) {
return result;
}
var propertyHandlers = _registeredHandlers[propertyId];
if (noStylingClasses.hasOwnProperty(className) || !propertyHandlers) {
result = null;
} else if (propertyHandlers.hasOwnProperty(className)) {
result = propertyHandlers[className];
} else if (classInfo) {
result = getHandlerInternal(propertyId, classInfo.baseClassInfo);
} else {
result = null;
}
_handlersCache[handlerKey] = result;
return result;
}
function isVisibilityValid(value) {
return value === enums.Visibility.visible || value === enums.Visibility.collapse || value === enums.Visibility.collapsed;
}
function isTextDecorationValid(value) {
var values = (value + "").split(" ");
return values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1;
}
function isTextTransformValid(value) {
return value === enums.TextTransform.none || value === enums.TextTransform.uppercase || value === enums.TextTransform.lowercase || value === enums.TextTransform.capitalize;
}
function isWhiteSpaceValid(value) {
return value === enums.WhiteSpace.nowrap || value === enums.WhiteSpace.normal;
}
function isNonNegativeFiniteNumber(value) {
return isFinite(value) && !isNaN(value) && value >= 0;
}
var supportedPaths = [ "rect", "circle", "ellipse", "polygon" ];
function isClipPathValid(value) {
if (!value) {
return true;
}
var functionName = value.substring(0, value.indexOf("(")).trim();
return supportedPaths.indexOf(functionName) !== -1;
}
function isMarginValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isFinite(result.value) && !isNaN(result.value);
}
function isOpacityValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue) && 0 <= parsedValue && parsedValue <= 1;
}
function isFloatValueValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue);
}
function isFontWeightValid(value) {
if (!value) {
console.trace();
}
return value === enums.FontWeight.thin || value === enums.FontWeight.extraLight || value === enums.FontWeight.light || value === enums.FontWeight.normal || value === "400" || value === enums.FontWeight.medium || value === enums.FontWeight.semiBold || value === enums.FontWeight.bold || value === "700" || value === enums.FontWeight.extraBold || value === enums.FontWeight.black;
}
function isFontStyleValid(value) {
return value === enums.FontStyle.normal || value === enums.FontStyle.italic;
}
function onVisibilityChanged(data) {
data.object._view._isVisibleCache = data.newValue === enums.Visibility.visible;
}
function onFontFamilyChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontFamily !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontFamily(data.newValue));
}
}
function onFontStyleChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontStyle !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontStyle(data.newValue));
}
}
function onFontWeightChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontWeight !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontWeight(data.newValue));
}
}
function onFontSizeChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontSize !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontSize(data.newValue));
}
}
var Style = function(_super) {
__extends(Style, _super);
function Style(parentView) {
_super.call(this);
this._updateCounter = 0;
this._nativeSetters = new Map();
this._view = parentView;
}
Object.defineProperty(Style.prototype, "rotate", {
get: function() {
return this._getValue(exports.rotateProperty);
},
set: function(value) {
this._setValue(exports.rotateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "scaleX", {
get: function() {
return this._getValue(exports.scaleXProperty);
},
set: function(value) {
this._setValue(exports.scaleXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "scaleY", {
get: function() {
return this._getValue(exports.scaleYProperty);
},
set: function(value) {
this._setValue(exports.scaleYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "translateX", {
get: function() {
return this._getValue(exports.translateXProperty);
},
set: function(value) {
this._setValue(exports.translateXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "translateY", {
get: function() {
return this._getValue(exports.translateYProperty);
},
set: function(value) {
this._setValue(exports.translateYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "color", {
get: function() {
return this._getValue(exports.colorProperty);
},
set: function(value) {
this._setValue(exports.colorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "tintColor", {
get: function() {
return this._getValue(exports.tintColorProperty);
},
set: function(value) {
this._setValue(exports.tintColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "placeholderColor", {
get: function() {
return this._getValue(exports.placeholderColorProperty);
},
set: function(value) {
this._setValue(exports.placeholderColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundColor", {
get: function() {
return this._getValue(exports.backgroundColorProperty);
},
set: function(value) {
this._setValue(exports.backgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundImage", {
get: function() {
return this._getValue(exports.backgroundImageProperty);
},
set: function(value) {
this._setValue(exports.backgroundImageProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundRepeat", {
get: function() {
return this._getValue(exports.backgroundRepeatProperty);
},
set: function(value) {
this._setValue(exports.backgroundRepeatProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundSize", {
get: function() {
return this._getValue(exports.backgroundSizeProperty);
},
set: function(value) {
this._setValue(exports.backgroundSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundPosition", {
get: function() {
return this._getValue(exports.backgroundPositionProperty);
},
set: function(value) {
this._setValue(exports.backgroundPositionProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderColor", {
get: function() {
if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
return this.borderTopColor;
} else {
return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
}
},
set: function(value) {
if (value instanceof color_1.Color) {
value = value.hex;
}
this._setShorthandProperty("border-color", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopColor", {
get: function() {
return this._getValue(exports.borderTopColorProperty);
},
set: function(value) {
this._setValue(exports.borderTopColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRightColor", {
get: function() {
return this._getValue(exports.borderRightColorProperty);
},
set: function(value) {
this._setValue(exports.borderRightColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomColor", {
get: function() {
return this._getValue(exports.borderBottomColorProperty);
},
set: function(value) {
this._setValue(exports.borderBottomColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderLeftColor", {
get: function() {
return this._getValue(exports.borderLeftColorProperty);
},
set: function(value) {
this._setValue(exports.borderLeftColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderWidth", {
get: function() {
if (this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth) {
return this.borderTopWidth;
} else {
return this.borderTopWidth + " " + this.borderRightWidth + " " + this.borderBottomWidth + " " + this.borderLeftWidth;
}
},
set: function(value) {
this._setShorthandProperty("border-width", value.toString());
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopWidth", {
get: function() {
return this._getValue(exports.borderTopWidthProperty);
},
set: function(value) {
this._setValue(exports.borderTopWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRightWidth", {
get: function() {
return this._getValue(exports.borderRightWidthProperty);
},
set: function(value) {
this._setValue(exports.borderRightWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomWidth", {
get: function() {
return this._getValue(exports.borderBottomWidthProperty);
},
set: function(value) {
this._setValue(exports.borderBottomWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderLeftWidth", {
get: function() {
return this._getValue(exports.borderLeftWidthProperty);
},
set: function(value) {
this._setValue(exports.borderLeftWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRadius", {
get: function() {
if (this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius) {
return this.borderTopLeftRadius;
} else {
return this.borderTopLeftRadius + " " + this.borderTopRightRadius + " " + this.borderBottomRightRadius + " " + this.borderBottomLeftRadius;
}
},
set: function(value) {
this._setShorthandProperty("border-radius", value.toString());
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopLeftRadius", {
get: function() {
return this._getValue(exports.borderTopLeftRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderTopLeftRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopRightRadius", {
get: function() {
return this._getValue(exports.borderTopRightRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderTopRightRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomRightRadius", {
get: function() {
return this._getValue(exports.borderBottomRightRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderBottomRightRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomLeftRadius", {
get: function() {
return this._getValue(exports.borderBottomLeftRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderBottomLeftRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "clipPath", {
get: function() {
return this._getValue(exports.clipPathProperty);
},
set: function(value) {
this._setValue(exports.clipPathProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontSize", {
get: function() {
return this._getValue(exports.fontSizeProperty);
},
set: function(value) {
this._setValue(exports.fontSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontFamily", {
get: function() {
return this._getValue(exports.fontFamilyProperty);
},
set: function(value) {
this._setValue(exports.fontFamilyProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontStyle", {
get: function() {
return this._getValue(exports.fontStyleProperty);
},
set: function(value) {
this._setValue(exports.fontStyleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontWeight", {
get: function() {
return this._getValue(exports.fontWeightProperty);
},
set: function(value) {
this._setValue(exports.fontWeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "font", {
get: function() {
return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
},
set: function(value) {
this._setShorthandProperty("font", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "_fontInternal", {
get: function() {
return this._getValue(exports.fontInternalProperty);
},
set: function(value) {
this._setValue(exports.fontInternalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textAlignment", {
get: function() {
return this._getValue(exports.textAlignmentProperty);
},
set: function(value) {
this._setValue(exports.textAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minWidth", {
get: function() {
return this._getValue(exports.minWidthProperty);
},
set: function(value) {
this._setValue(exports.minWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minHeight", {
get: function() {
return this._getValue(exports.minHeightProperty);
},
set: function(value) {
this._setValue(exports.minHeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "width", {
get: function() {
return this._getValue(exports.widthProperty);
},
set: function(value) {
this._setValue(exports.widthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "height", {
get: function() {
return this._getValue(exports.heightProperty);
},
set: function(value) {
this._setValue(exports.heightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "margin", {
get: function() {
return this.marginTop + " " + this.marginRight + " " + this.marginBottom + " " + this.marginLeft;
},
set: function(value) {
this._setShorthandProperty("margin", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginLeft", {
get: function() {
return this._getValue(exports.marginLeftProperty);
},
set: function(value) {
this._setValue(exports.marginLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginTop", {
get: function() {
return this._getValue(exports.marginTopProperty);
},
set: function(value) {
this._setValue(exports.marginTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginRight", {
get: function() {
return this._getValue(exports.marginRightProperty);
},
set: function(value) {
this._setValue(exports.marginRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginBottom", {
get: function() {
return this._getValue(exports.marginBottomProperty);
},
set: function(value) {
this._setValue(exports.marginBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "padding", {
get: function() {
return this.paddingTop + " " + this.paddingRight + " " + this.paddingBottom + " " + this.paddingLeft;
},
set: function(value) {
this._setShorthandProperty("padding", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingLeft", {
get: function() {
return this._getValue(exports.paddingLeftProperty);
},
set: function(value) {
this._setValue(exports.paddingLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingTop", {
get: function() {
return this._getValue(exports.paddingTopProperty);
},
set: function(value) {
this._setValue(exports.paddingTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingRight", {
get: function() {
return this._getValue(exports.paddingRightProperty);
},
set: function(value) {
this._setValue(exports.paddingRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingBottom", {
get: function() {
return this._getValue(exports.paddingBottomProperty);
},
set: function(value) {
this._setValue(exports.paddingBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "horizontalAlignment", {
get: function() {
return this._getValue(exports.horizontalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.horizontalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "verticalAlignment", {
get: function() {
return this._getValue(exports.verticalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.verticalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "visibility", {
get: function() {
return this._getValue(exports.visibilityProperty);
},
set: function(value) {
this._setValue(exports.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "opacity", {
get: function() {
return this._getValue(exports.opacityProperty);
},
set: function(value) {
this._setValue(exports.opacityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textDecoration", {
get: function() {
return this._getValue(exports.textDecorationProperty);
},
set: function(value) {
this._setValue(exports.textDecorationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textTransform", {
get: function() {
return this._getValue(exports.textTransformProperty);
},
set: function(value) {
this._setValue(exports.textTransformProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "whiteSpace", {
get: function() {
return this._getValue(exports.whiteSpaceProperty);
},
set: function(value) {
this._setValue(exports.whiteSpaceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "letterSpacing", {
get: function() {
return this._getValue(exports.letterSpacingProperty);
},
set: function(value) {
this._setValue(exports.letterSpacingProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "zIndex", {
get: function() {
return this._getValue(exports.zIndexProperty);
},
set: function(value) {
this._setValue(exports.zIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "tabTextColor", {
get: function() {
return this._getValue(exports.tabTextColorProperty);
},
set: function(value) {
this._setValue(exports.tabTextColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "tabBackgroundColor", {
get: function() {
return this._getValue(exports.tabBackgroundColorProperty);
},
set: function(value) {
this._setValue(exports.tabBackgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "selectedTabTextColor", {
get: function() {
return this._getValue(exports.selectedTabTextColorProperty);
},
set: function(value) {
this._setValue(exports.selectedTabTextColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "androidSelectedTabHighlightColor", {
get: function() {
return this._getValue(exports.androidSelectedTabHighlightColorProperty);
},
set: function(value) {
this._setValue(exports.androidSelectedTabHighlightColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "selectedBackgroundColor", {
get: function() {
return this._getValue(exports.selectedBackgroundColorProperty);
},
set: function(value) {
this._setValue(exports.selectedBackgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Style.prototype._updateTextDecoration = function() {
if (this._getValue(exports.textDecorationProperty) !== enums.TextDecoration.none) {
this._applyProperty(exports.textDecorationProperty, this._getValue(exports.textDecorationProperty));
}
};
Style.prototype._updateTextTransform = function() {
if (this._getValue(exports.textTransformProperty) !== enums.TextTransform.none) {
this._applyProperty(exports.textTransformProperty, this._getValue(exports.textTransformProperty));
}
};
Style.prototype._beginUpdate = function() {
this._updateCounter++;
};
Style.prototype._endUpdate = function() {
var _this = this;
this._updateCounter--;
if (this._updateCounter < 0) {
throw new Error("style._endUpdate() called, but no update is in progress.");
}
if (this._updateCounter === 0) {
this._nativeSetters.forEach(function(newValue, property, map) {
_this._applyStyleProperty(property, newValue);
});
this._nativeSetters.clear();
}
};
Style.prototype._resetCssValues = function() {
this._view._unregisterAllAnimations();
this._resetValues(dependency_observable_1.ValueSource.Css);
};
Style.prototype._resetLocalValues = function() {
this._resetValues(dependency_observable_1.ValueSource.Local);
};
Style.prototype._inheritStyleProperties = function(parent) {
var _this = this;
parent.style._eachSetPropertyValue(function(property, value) {
if (property.inheritable) {
_this._setValue(property, value, dependency_observable_1.ValueSource.Inherited);
}
return true;
});
};
Style.prototype._onPropertyChanged = function(property, oldValue, newValue) {
if (trace.enabled) {
trace.write("Style._onPropertyChanged view:" + this._view + ", property: " + property.name + ", oldValue: " + oldValue + ", newValue: " + newValue, trace.categories.Style);
}
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._view._checkMetadataOnPropertyChanged(property.metadata);
this._applyProperty(property, newValue);
};
Style.prototype._sizeChanged = function() {
if (!this._getValue(exports.backgroundInternalProperty).isEmpty()) {
this._applyStyleProperty(exports.backgroundInternalProperty, this._getValue(exports.backgroundInternalProperty));
}
var clipPathPropertyValue = this._getValue(exports.clipPathProperty);
if (types.isString(clipPathPropertyValue) && clipPathPropertyValue !== "") {
this._applyStyleProperty(exports.clipPathProperty, clipPathPropertyValue);
}
};
Style.prototype._syncNativeProperties = function() {
var _this = this;
this._eachSetPropertyValue(function(property, value) {
_this._applyStyleProperty(property, value);
return true;
});
};
Style.prototype._applyProperty = function(property, newValue) {
this._applyStyleProperty(property, newValue);
if (property.inheritable && this._view._childrenCount > 0) {
this._view._eachChildView(function(child) {
child.style._setValue(property, newValue, dependency_observable_1.ValueSource.Inherited);
return true;
});
}
};
Style.prototype._applyStyleProperty = function(property, newValue) {
if (!this._view._shouldApplyStyleHandlers()) {
return;
}
if (this._updateCounter > 0) {
this._nativeSetters.set(property, newValue);
return;
}
var handler = getHandler(property, this._view);
if (!handler) {
if (trace.enabled) {
trace.write("No handler for property: " + property.name + " with id: " + property.id + ", view:" + this._view, trace.categories.Style);
}
} else {
if (trace.enabled) {
trace.write("Found handler for property: " + property.name + ", view:" + this._view, trace.categories.Style);
}
var shouldReset = false;
if (property.equalityComparer) {
shouldReset = property.equalityComparer(newValue, property.defaultValue);
} else {
shouldReset = newValue === property.defaultValue;
}
if (shouldReset) {
handler.resetProperty(property, this._view);
} else {
handler.applyProperty(property, this._view, newValue);
}
this._view._onStylePropertyChanged(property);
}
};
Object.defineProperty(Style.prototype, "_nativeView", {
get: function() {
return this._view._nativeView;
},
enumerable: true,
configurable: true
});
Style.prototype._setShorthandProperty = function(name, value) {
var pairs = styleProperty.getShorthandPairs(name, value);
if (pairs) {
this._beginUpdate();
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
this._setValue(pair.property, pair.value, dependency_observable_1.ValueSource.Local);
}
this._endUpdate();
}
};
return Style;
}(dependency_observable_1.DependencyObservable);
exports.Style = Style;
function registerHandler(property, handler, className) {
var realClassName = className ? className : "default";
var handlerRecord = _registeredHandlers[property.id];
if (!handlerRecord) {
handlerRecord = {};
_registeredHandlers[property.id] = handlerRecord;
}
handlerRecord[realClassName] = handler;
}
exports.registerHandler = registerHandler;
function registerNoStylingClass(className) {
noStylingClasses[className] = 1;
}
exports.registerNoStylingClass = registerNoStylingClass;
function getHandler(property, view) {
return getHandlerInternal(property.id, types.getClassInfo(view));
}
exports.getHandler = getHandler;
exports.rotateProperty = new styleProperty.Property("rotate", "rotate", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.scaleXProperty = new styleProperty.Property("scaleX", "scaleX", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.scaleYProperty = new styleProperty.Property("scaleY", "scaleY", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.translateXProperty = new styleProperty.Property("translateX", "translateX", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.translateYProperty = new styleProperty.Property("translateY", "translateY", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.colorProperty = new styleProperty.Property("color", "color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.tintColorProperty = new styleProperty.Property("tintColor", "tint-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.placeholderColorProperty = new styleProperty.Property("placeholderColor", "placeholder-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.fontSizeProperty = new styleProperty.Property("fontSize", "font-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontSizeChanged), converters.fontSizeConverter);
exports.fontFamilyProperty = new styleProperty.Property("fontFamily", "font-family", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontFamilyChanged));
exports.fontStyleProperty = new styleProperty.Property("fontStyle", "font-style", new dependency_observable_1.PropertyMetadata(enums.FontStyle.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontStyleChanged, isFontStyleValid));
exports.fontWeightProperty = new styleProperty.Property("fontWeight", "font-weight", new dependency_observable_1.PropertyMetadata(enums.FontWeight.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontWeightChanged, isFontWeightValid));
exports.fontInternalProperty = new styleProperty.Property("_fontInternal", "_fontInternal", new dependency_observable_1.PropertyMetadata(font.Font.default, AffectsLayout, null, null, font.Font.equals), font.Font.parse);
exports.textAlignmentProperty = new styleProperty.Property("textAlignment", "text-align", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout | dependency_observable_1.PropertyMetadataSettings.Inheritable), converters.textAlignConverter);
exports.minWidthProperty = new styleProperty.Property("minWidth", "min-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.minHeightProperty = new styleProperty.Property("minHeight", "min-height", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.visibilityProperty = new styleProperty.Property("visibility", "visibility", new dependency_observable_1.PropertyMetadata(enums.Visibility.visible, AffectsLayout, onVisibilityChanged, isVisibilityValid), converters.visibilityConverter);
exports.opacityProperty = new styleProperty.Property("opacity", "opacity", new dependency_observable_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, undefined, isOpacityValid), converters.opacityConverter);
exports.textDecorationProperty = new styleProperty.Property("textDecoration", "text-decoration", new dependency_observable_1.PropertyMetadata(enums.TextDecoration.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextDecorationValid), converters.textDecorationConverter);
exports.textTransformProperty = new styleProperty.Property("textTransform", "text-transform", new dependency_observable_1.PropertyMetadata(enums.TextTransform.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextTransformValid), converters.textTransformConverter);
exports.whiteSpaceProperty = new styleProperty.Property("whiteSpace", "white-space", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, undefined, isWhiteSpaceValid), converters.whiteSpaceConverter);
exports.letterSpacingProperty = new styleProperty.Property("letterSpacing", "letter-spacing", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, undefined, isFloatValueValid), converters.floatConverter);
exports.zIndexProperty = new styleProperty.Property("zIndex", "z-index", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, undefined, isFloatValueValid), converters.floatConverter);
exports.tabTextColorProperty = new styleProperty.Property("tabTextColor", "tab-text-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.tabBackgroundColorProperty = new styleProperty.Property("tabBackgroundColor", "tab-background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.selectedTabTextColorProperty = new styleProperty.Property("selectedTabTextColor", "selected-tab-text-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.androidSelectedTabHighlightColorProperty = new styleProperty.Property("androidSelectedTabHighlightColor", "android-selected-tab-highlight-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.selectedBackgroundColorProperty = new styleProperty.Property("selectedBackgroundColor", "selected-background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.nativeLayoutParamsProperty = new styleProperty.Property("nativeLayoutParams", "nativeLayoutParams", new dependency_observable_1.PropertyMetadata({
width: -1,
widthPercent: -1,
height: -1,
heightPercent: -1,
leftMargin: 0,
leftMarginPercent: -1,
topMargin: 0,
topMarginPercent: -1,
rightMargin: 0,
rightMarginPercent: -1,
bottomMargin: 0,
bottomMarginPercent: -1,
horizontalAlignment: enums.HorizontalAlignment.stretch,
verticalAlignment: enums.VerticalAlignment.stretch
}, null, null, null, layoutParamsComparer));
exports.widthProperty = new styleProperty.Property("width", "width", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.heightProperty = new styleProperty.Property("height", "height", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.marginLeftProperty = new styleProperty.Property("marginLeft", "margin-left", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginRightProperty = new styleProperty.Property("marginRight", "margin-right", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginTopProperty = new styleProperty.Property("marginTop", "margin-top", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginBottomProperty = new styleProperty.Property("marginBottom", "margin-bottom", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.verticalAlignmentProperty = new styleProperty.Property("verticalAlignment", "vertical-align", new dependency_observable_1.PropertyMetadata(enums.VerticalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
exports.horizontalAlignmentProperty = new styleProperty.Property("horizontalAlignment", "horizontal-align", new dependency_observable_1.PropertyMetadata(enums.HorizontalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
function getNativePadding(nativeView, callback) {
return {
result: nativeView ? callback(nativeView) / utils.layout.getDisplayDensity() : 0,
cacheable: !!nativeView
};
}
function getNativePaddingLeft(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingLeft();
});
}
function getNativePaddingTop(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingTop();
});
}
function getNativePaddingRight(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingRight();
});
}
function getNativePaddingBottom(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingBottom();
});
}
exports.nativePaddingsProperty = new styleProperty.Property("paddingNative", "paddingNative", new dependency_observable_1.PropertyMetadata(undefined, null, null, null, thicknessComparer));
var defaultPadding = platform.isAndroid ? undefined : 0;
exports.paddingLeftProperty = new styleProperty.Property("paddingLeft", "padding-left", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.paddingRightProperty = new styleProperty.Property("paddingRight", "padding-right", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.paddingTopProperty = new styleProperty.Property("paddingTop", "padding-top", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.paddingBottomProperty = new styleProperty.Property("paddingBottom", "padding-bottom", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
if (platform.device.os === platform.platformNames.android) {
exports.paddingTopProperty.defaultValueGetter = getNativePaddingTop;
exports.paddingLeftProperty.defaultValueGetter = getNativePaddingLeft;
exports.paddingRightProperty.defaultValueGetter = getNativePaddingRight;
exports.paddingBottomProperty.defaultValueGetter = getNativePaddingBottom;
}
function onPaddingChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.paddingTopProperty,
value: thickness.top
});
array.push({
property: exports.paddingRightProperty,
value: thickness.right
});
array.push({
property: exports.paddingBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.paddingLeftProperty,
value: thickness.left
});
return array;
}
function onMarginChanged(value) {
var thickness = parseMargin(value);
var array = new Array();
array.push({
property: exports.marginTopProperty,
value: thickness.top
});
array.push({
property: exports.marginRightProperty,
value: thickness.right
});
array.push({
property: exports.marginBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.marginLeftProperty,
value: thickness.left
});
return array;
}
function onFontChanged(value) {
var newFont = font.Font.parse(value);
var array = new Array();
array.push({
property: exports.fontFamilyProperty,
value: newFont.fontFamily
});
array.push({
property: exports.fontStyleProperty,
value: newFont.fontStyle
});
array.push({
property: exports.fontWeightProperty,
value: newFont.fontWeight
});
array.push({
property: exports.fontSizeProperty,
value: newFont.fontSize
});
return array;
}
function onTransformChanged(value) {
var newTransform = converters.transformConverter(value);
var array = new Array();
var values = undefined;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push({
property: exports.scaleXProperty,
value: parseFloat(newTransform[transform])
});
break;

case "scaleY":
array.push({
property: exports.scaleYProperty,
value: parseFloat(newTransform[transform])
});
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push({
property: exports.scaleXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.scaleYProperty,
value: parseFloat(values[1])
});
} else if (values.length === 1) {
array.push({
property: exports.scaleXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.scaleYProperty,
value: parseFloat(values[0])
});
}
break;

case "translateX":
array.push({
property: exports.translateXProperty,
value: parseFloat(newTransform[transform])
});
break;

case "translateY":
array.push({
property: exports.translateYProperty,
value: parseFloat(newTransform[transform])
});
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push({
property: exports.translateXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.translateYProperty,
value: parseFloat(values[1])
});
} else if (values.length === 1) {
array.push({
property: exports.translateXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.translateYProperty,
value: parseFloat(values[0])
});
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push({
property: exports.rotateProperty,
value: val
});
break;

case "none":
array.push({
property: exports.scaleXProperty,
value: 1
});
array.push({
property: exports.scaleYProperty,
value: 1
});
array.push({
property: exports.translateXProperty,
value: 0
});
array.push({
property: exports.translateYProperty,
value: 0
});
array.push({
property: exports.rotateProperty,
value: 0
});
break;
}
}
return array;
}
styleProperty.registerShorthandCallback("font", onFontChanged);
styleProperty.registerShorthandCallback("margin", onMarginChanged);
styleProperty.registerShorthandCallback("padding", onPaddingChanged);
styleProperty.registerShorthandCallback("transform", onTransformChanged);
var _defaultNativeValuesCache = {};
var StylePropertyChangedHandler = function() {
function StylePropertyChangedHandler(applyCallback, resetCallback, getNativeValue) {
this._applyProperty = applyCallback;
this._resetProperty = resetCallback;
this._getNativeValue = getNativeValue;
}
StylePropertyChangedHandler.prototype.applyProperty = function(property, view, newValue) {
var className = types.getClass(view);
if (!_defaultNativeValuesCache.hasOwnProperty(className + property.id) && this._getNativeValue) {
_defaultNativeValuesCache[className + property.id] = this._getNativeValue(view);
}
if (application.android) {
newValue = newValue.android ? newValue.android : newValue;
} else if (application.ios) {
newValue = newValue.ios ? newValue.ios : newValue;
}
this._applyProperty(view, newValue, _defaultNativeValuesCache[className + property.id]);
};
StylePropertyChangedHandler.prototype.resetProperty = function(property, view) {
var className = types.getClass(view);
this._resetProperty(view, _defaultNativeValuesCache[className + property.id]);
};
return StylePropertyChangedHandler;
}();
exports.StylePropertyChangedHandler = StylePropertyChangedHandler;
exports.ignorePropertyHandler = new StylePropertyChangedHandler(function(view, val) {}, function(view, val) {});
registerNoStylingClass("Frame");
function onBackgroundColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (!color_1.Color.equals(currentBackground.color, data.newValue)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withColor(data.newValue));
}
}
function onBackgroundImagePropertyChanged(data) {
var style = data.object;
var url = data.newValue;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
var isValid = false;
if (types.isString(data.newValue)) {
var pattern = /url\(('|")(.*?)\1\)/;
var match = url.match(pattern);
if (match && match[2]) {
url = match[2];
}
ensureImageSource();
if (utils.isDataURI(url)) {
var base64Data = url.split(",")[1];
if (types.isDefined(base64Data)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromBase64(base64Data)));
isValid = true;
}
} else if (utils.isFileOrResourcePath(url)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromFileOrResource(url)));
isValid = true;
} else if (url.indexOf("http") !== -1) {
style["_url"] = url;
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
imageSource.fromUrl(url).then(function(r) {
if (style && style["_url"] === url) {
currentBackground = style._getValue(exports.backgroundInternalProperty);
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(r));
}
});
isValid = true;
}
}
if (!isValid) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
}
}
function onBackgroundRepeatPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.repeat) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withRepeat(data.newValue));
}
}
function onBackgroundPositionPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.position) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withPosition(data.newValue));
}
}
function onBackgroundSizePropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.size) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withSize(data.newValue));
}
}
function onBorderTopColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopColor(data.newValue));
}
}
function onBorderRightColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderRightColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderRightColor(data.newValue));
}
}
function onBorderBottomColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomColor(data.newValue));
}
}
function onBorderLeftColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderLeftColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderLeftColor(data.newValue));
}
}
function onBorderTopWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopWidth(data.newValue));
}
}
function onBorderRightWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderRightWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderRightWidth(data.newValue));
}
}
function onBorderBottomWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomWidth(data.newValue));
}
}
function onBorderLeftWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderLeftWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderLeftWidth(data.newValue));
}
}
function onBorderTopLeftRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopLeftRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopLeftRadius(data.newValue));
}
}
function onBorderTopRightRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopRightRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopRightRadius(data.newValue));
}
}
function onBorderBottomRightRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomRightRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomRightRadius(data.newValue));
}
}
function onBorderBottomLeftRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomLeftRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomLeftRadius(data.newValue));
}
}
function onClipPathPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.clipPath) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withClipPath(data.newValue));
}
}
exports.backgroundInternalProperty = new styleProperty.Property("_backgroundInternal", "_backgroundInternal", new dependency_observable_1.PropertyMetadata(background.Background.default, dependency_observable_1.PropertyMetadataSettings.None, undefined, undefined, background.Background.equals));
exports.backgroundImageProperty = new styleProperty.Property("backgroundImage", "background-image", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundImagePropertyChanged));
exports.backgroundColorProperty = new styleProperty.Property("backgroundColor", "background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.backgroundRepeatProperty = new styleProperty.Property("backgroundRepeat", "background-repeat", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundRepeatPropertyChanged));
exports.backgroundSizeProperty = new styleProperty.Property("backgroundSize", "background-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundSizePropertyChanged));
exports.backgroundPositionProperty = new styleProperty.Property("backgroundPosition", "background-position", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundPositionPropertyChanged));
exports.borderTopColorProperty = new styleProperty.Property("borderTopColor", "border-top-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderTopColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderRightColorProperty = new styleProperty.Property("borderRightColor", "border-right-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderRightColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderBottomColorProperty = new styleProperty.Property("borderBottomColor", "border-bottom-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderBottomColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderLeftColorProperty = new styleProperty.Property("borderLeftColor", "border-left-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderLeftColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderTopWidthProperty = new styleProperty.Property("borderTopWidth", "border-top-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderTopWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderRightWidthProperty = new styleProperty.Property("borderRightWidth", "border-right-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderRightWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderBottomWidthProperty = new styleProperty.Property("borderBottomWidth", "border-bottom-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderBottomWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderLeftWidthProperty = new styleProperty.Property("borderLeftWidth", "border-left-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderLeftWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderTopLeftRadiusProperty = new styleProperty.Property("borderTopLeftRadius", "border-top-left-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderTopLeftRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderTopRightRadiusProperty = new styleProperty.Property("borderTopRightRadius", "border-top-right-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderTopRightRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderBottomRightRadiusProperty = new styleProperty.Property("borderBottomRightRadius", "border-bottom-right-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderBottomRightRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderBottomLeftRadiusProperty = new styleProperty.Property("borderBottomLeftRadius", "border-bottom-left-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderBottomLeftRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.clipPathProperty = new styleProperty.Property("clipPath", "clip-path", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, onClipPathPropertyChanged, isClipPathValid));
function parseThickness(value) {
var result = {
top: 0,
right: 0,
bottom: 0,
left: 0
};
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
if (arr.length === 1) {
var arr0 = parseInt(arr[0]);
result.top = arr0;
result.right = arr0;
result.bottom = arr0;
result.left = arr0;
} else if (arr.length === 2) {
var arr0 = parseInt(arr[0]);
var arr1 = parseInt(arr[1]);
result.top = arr0;
result.right = arr1;
result.bottom = arr0;
result.left = arr1;
} else if (arr.length === 3) {
var arr0 = parseInt(arr[0]);
var arr1 = parseInt(arr[1]);
var arr2 = parseInt(arr[2]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr1;
} else if (arr.length === 4) {
var arr0 = parseInt(arr[0]);
var arr1 = parseInt(arr[1]);
var arr2 = parseInt(arr[2]);
var arr3 = parseInt(arr[3]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr3;
}
} else if (types.isNumber(value)) {
result.top = result.right = result.bottom = result.left = value;
} else {
result = value;
}
return result;
}
function parseBorderColor(value) {
var result = {
top: undefined,
right: undefined,
bottom: undefined,
left: undefined
};
try {
if (types.isString(value)) {
if (value.indexOf("rgb") === 0) {
result.top = result.right = result.bottom = result.left = new color_1.Color(value);
return result;
}
var arr = value.split(/[ ,]+/);
if (arr.length === 1) {
var arr0 = new color_1.Color(arr[0]);
result.top = arr0;
result.right = arr0;
result.bottom = arr0;
result.left = arr0;
} else if (arr.length === 2) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
result.top = arr0;
result.right = arr1;
result.bottom = arr0;
result.left = arr1;
} else if (arr.length === 3) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr1;
} else if (arr.length === 4) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
var arr3 = new color_1.Color(arr[3]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr3;
}
} else if (value instanceof color_1.Color) {
result.top = result.right = result.bottom = result.left = value;
} else {
result = value;
}
} catch (ex) {
if (trace.enabled) {
trace.write("Error parsing border color " + value + ": " + ex + "'", trace.categories.Style, trace.messageType.error);
}
}
return result;
}
function onBorderColorChanged(value) {
var fourColors = parseBorderColor(value);
var array = new Array();
array.push({
property: exports.borderTopColorProperty,
value: fourColors.top
});
array.push({
property: exports.borderRightColorProperty,
value: fourColors.right
});
array.push({
property: exports.borderBottomColorProperty,
value: fourColors.bottom
});
array.push({
property: exports.borderLeftColorProperty,
value: fourColors.left
});
return array;
}
function onBorderWidthChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.borderTopWidthProperty,
value: thickness.top
});
array.push({
property: exports.borderRightWidthProperty,
value: thickness.right
});
array.push({
property: exports.borderBottomWidthProperty,
value: thickness.bottom
});
array.push({
property: exports.borderLeftWidthProperty,
value: thickness.left
});
return array;
}
function onBorderRadiusChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.borderTopLeftRadiusProperty,
value: thickness.top
});
array.push({
property: exports.borderTopRightRadiusProperty,
value: thickness.right
});
array.push({
property: exports.borderBottomRightRadiusProperty,
value: thickness.bottom
});
array.push({
property: exports.borderBottomLeftRadiusProperty,
value: thickness.left
});
return array;
}
styleProperty.registerShorthandCallback("border-color", onBorderColorChanged);
styleProperty.registerShorthandCallback("border-width", onBorderWidthChanged);
styleProperty.registerShorthandCallback("border-radius", onBorderRadiusChanged);
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(17);
var observable = __webpack_require__(18);
var enums;
global.moduleMerge(appModule, exports);
var typedExports = exports;
function initLifecycleCallbacks() {
var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
onActivityCreated: function(activity, bundle) {
var activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), android.content.pm.PackageManager.GET_META_DATA);
if (activityInfo.metaData) {
var setThemeOnLaunch = activityInfo.metaData.getInt("SET_THEME_ON_LAUNCH", -1);
if (setThemeOnLaunch !== -1) {
activity.setTheme(setThemeOnLaunch);
}
}
if (!androidApp.startActivity) {
androidApp.startActivity = activity;
}
androidApp.notify({
eventName: "activityCreated",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onActivityCreated) {
androidApp.onActivityCreated(activity, bundle);
}
},
onActivityDestroyed: function(activity) {
if (activity === androidApp.foregroundActivity) {
androidApp.foregroundActivity = undefined;
}
if (activity === androidApp.startActivity) {
androidApp.startActivity = undefined;
}
androidApp.notify({
eventName: "activityDestroyed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityDestroyed) {
androidApp.onActivityDestroyed(activity);
}
gc();
},
onActivityPaused: function(activity) {
if (activity.isNativeScriptActivity) {
androidApp.paused = true;
if (typedExports.onSuspend) {
typedExports.onSuspend();
}
typedExports.notify({
eventName: typedExports.suspendEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: "activityPaused",
object: androidApp,
activity: activity
});
if (androidApp.onActivityPaused) {
androidApp.onActivityPaused(activity);
}
},
onActivityResumed: function(activity) {
androidApp.foregroundActivity = activity;
if (activity.isNativeScriptActivity) {
if (typedExports.onResume) {
typedExports.onResume();
}
typedExports.notify({
eventName: typedExports.resumeEvent,
object: androidApp,
android: activity
});
androidApp.paused = false;
}
androidApp.notify({
eventName: "activityResumed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityResumed) {
androidApp.onActivityResumed(activity);
}
},
onActivitySaveInstanceState: function(activity, bundle) {
androidApp.notify({
eventName: "saveActivityState",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onSaveActivityState) {
androidApp.onSaveActivityState(activity, bundle);
}
},
onActivityStarted: function(activity) {
androidApp.notify({
eventName: "activityStarted",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStarted) {
androidApp.onActivityStarted(activity);
}
},
onActivityStopped: function(activity) {
androidApp.notify({
eventName: "activityStopped",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStopped) {
androidApp.onActivityStopped(activity);
}
}
});
return lifecycleCallbacks;
}
var currentOrientation;
function initComponentCallbacks() {
var componentCallbacks = new android.content.ComponentCallbacks2({
onLowMemory: function() {
gc();
java.lang.System.gc();
typedExports.notify({
eventName: typedExports.lowMemoryEvent,
object: this,
android: this
});
},
onTrimMemory: function(level) {},
onConfigurationChanged: function(newConfig) {
var newOrientation = newConfig.orientation;
if (newOrientation === currentOrientation) {
return;
}
if (!enums) {
enums = __webpack_require__(39);
}
currentOrientation = newOrientation;
var newValue;
switch (newOrientation) {
case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
newValue = enums.DeviceOrientation.landscape;
break;

case android.content.res.Configuration.ORIENTATION_PORTRAIT:
newValue = enums.DeviceOrientation.portrait;
break;

default:
newValue = enums.DeviceOrientation.unknown;
break;
}
typedExports.notify({
eventName: typedExports.orientationChangedEvent,
android: androidApp.nativeApp,
newValue: newValue,
object: typedExports.android
});
}
});
return componentCallbacks;
}
var AndroidApplication = function(_super) {
__extends(AndroidApplication, _super);
function AndroidApplication() {
_super.apply(this, arguments);
this._registeredReceivers = {};
this._pendingReceiverRegistrations = new Array();
}
Object.defineProperty(AndroidApplication.prototype, "currentContext", {
get: function() {
return this.foregroundActivity;
},
enumerable: true,
configurable: true
});
AndroidApplication.prototype.init = function(nativeApp) {
if (this.nativeApp) {
throw new Error("application.android already initialized.");
}
this.nativeApp = nativeApp;
this.packageName = nativeApp.getPackageName();
this.context = nativeApp.getApplicationContext();
var lifecycleCallbacks = initLifecycleCallbacks();
var componentCallbacks = initComponentCallbacks();
this.nativeApp.registerActivityLifecycleCallbacks(lifecycleCallbacks);
this.nativeApp.registerComponentCallbacks(componentCallbacks);
this._registerPendingReceivers();
};
AndroidApplication.prototype._registerPendingReceivers = function() {
if (this._pendingReceiverRegistrations) {
var i = 0;
var length = this._pendingReceiverRegistrations.length;
for (;i < length; i++) {
var registerFunc = this._pendingReceiverRegistrations[i];
registerFunc(this.context);
}
this._pendingReceiverRegistrations = new Array();
}
};
AndroidApplication.prototype.registerBroadcastReceiver = function(intentFilter, onReceiveCallback) {
ensureBroadCastReceiverClass();
var that = this;
var registerFunc = function(context) {
var receiver = new BroadcastReceiverClass(onReceiveCallback);
context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
that._registeredReceivers[intentFilter] = receiver;
};
if (this.context) {
registerFunc(this.context);
} else {
this._pendingReceiverRegistrations.push(registerFunc);
}
};
AndroidApplication.prototype.unregisterBroadcastReceiver = function(intentFilter) {
var receiver = this._registeredReceivers[intentFilter];
if (receiver) {
this.context.unregisterReceiver(receiver);
this._registeredReceivers[intentFilter] = undefined;
delete this._registeredReceivers[intentFilter];
}
};
AndroidApplication.activityCreatedEvent = "activityCreated";
AndroidApplication.activityDestroyedEvent = "activityDestroyed";
AndroidApplication.activityStartedEvent = "activityStarted";
AndroidApplication.activityPausedEvent = "activityPaused";
AndroidApplication.activityResumedEvent = "activityResumed";
AndroidApplication.activityStoppedEvent = "activityStopped";
AndroidApplication.saveActivityStateEvent = "saveActivityState";
AndroidApplication.activityResultEvent = "activityResult";
AndroidApplication.activityBackPressedEvent = "activityBackPressed";
AndroidApplication.activityRequestPermissionsEvent = "activityRequestPermissions";
return AndroidApplication;
}(observable.Observable);
exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
typedExports.android = androidApp;
var BroadcastReceiverClass;
function ensureBroadCastReceiverClass() {
if (BroadcastReceiverClass) {
return;
}
var BroadcastReceiver = function(_super) {
__extends(BroadcastReceiver, _super);
function BroadcastReceiver(onReceiveCallback) {
_super.call(this);
this._onReceiveCallback = onReceiveCallback;
return global.__native(this);
}
BroadcastReceiver.prototype.onReceive = function(context, intent) {
if (this._onReceiveCallback) {
this._onReceiveCallback(context, intent);
}
};
return BroadcastReceiver;
}(android.content.BroadcastReceiver);
BroadcastReceiverClass = BroadcastReceiver;
}
var started = false;
function start(entry) {
if (started) {
throw new Error("Application is already started.");
}
if (!androidApp.nativeApp) {
var utils = __webpack_require__(37);
var nativeApp = utils.ad.getApplication();
androidApp.init(nativeApp);
}
started = true;
if (entry) {
typedExports.mainEntry = entry;
}
loadCss();
}
exports.start = start;
function loadCss() {
typedExports.appSelectors = typedExports.loadCss(typedExports.cssFile) || [];
if (typedExports.appSelectors.length > 0) {
typedExports.mergeCssSelectors(typedExports);
}
}
function addCss(cssText) {
var parsed = typedExports.parseCss(cssText);
if (parsed) {
typedExports.additionalSelectors.push.apply(typedExports.additionalSelectors, parsed);
typedExports.mergeCssSelectors(typedExports);
}
}
exports.addCss = addCss;
global.__onLiveSync = function() {
if (typedExports.android && typedExports.android.paused) {
return;
}
appModule.__onLiveSync();
loadCss();
};
global.__onUncaughtError = function(error) {
var types = __webpack_require__(14);
if (types.isFunction(typedExports.onUncaughtError)) {
typedExports.onUncaughtError(error);
}
typedExports.notify({
eventName: typedExports.uncaughtErrorEvent,
object: appModule.android,
android: error
});
};
}, function(module, exports, __webpack_require__) {
__webpack_require__(5);
var observable = __webpack_require__(18);
var frame = __webpack_require__(10);
__webpack_require__(19);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(105);
}
}
var styleScope = undefined;
var events = new observable.Observable();
global.moduleMerge(events, exports);
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
exports.cssFile = "app.css";
function setCssFileName(cssFileName) {
exports.cssFile = cssFileName;
}
exports.setCssFileName = setCssFileName;
exports.appSelectors = [];
exports.additionalSelectors = [];
exports.cssSelectors = [];
exports.cssSelectorVersion = 0;
exports.keyframes = {};
exports.resources = {};
function setResources(res) {
exports.resources = res;
}
exports.setResources = setResources;
exports.onUncaughtError = undefined;
exports.onLaunch = undefined;
exports.onSuspend = undefined;
exports.onResume = undefined;
exports.onExit = undefined;
exports.onLowMemory = undefined;
exports.android = undefined;
exports.ios = undefined;
function loadCss(cssFile) {
if (!cssFile) {
return undefined;
}
var result;
var fs = __webpack_require__(46);
if (!styleScope) {
styleScope = __webpack_require__(91);
}
var cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFile);
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var applicationCss = file.readTextSync();
if (applicationCss) {
result = parseCss(applicationCss, cssFileName);
}
}
return result;
}
exports.loadCss = loadCss;
function mergeCssSelectors(module) {
module.cssSelectors = module.appSelectors.slice();
module.cssSelectors.push.apply(module.cssSelectors, module.additionalSelectors);
module.cssSelectorVersion++;
}
exports.mergeCssSelectors = mergeCssSelectors;
function parseCss(cssText, cssFileName) {
if (!styleScope) {
styleScope = __webpack_require__(91);
}
return styleScope.StyleScope.createSelectorsFromCss(cssText, cssFileName, exports.keyframes);
}
exports.parseCss = parseCss;
function __onLiveSync() {
if (global.errorPage) {
global.errorPage.closeModal();
global.errorPage = undefined;
}
try {
var fileResolver = __webpack_require__(111);
fileResolver.clearCache();
loadCss();
global.__onLiveSyncCore();
} catch (ex) {
ensureBuilder();
global.errorPage = builder.parse('<Page><ScrollView><Label text="' + ex + '" textWrap="true" style="color: red;" /></ScrollView></Page>');
global.errorPage.showModal();
}
}
exports.__onLiveSync = __onLiveSync;
function __onLiveSyncCore() {
frame.reloadPage();
}
exports.__onLiveSyncCore = __onLiveSyncCore;
global.__onLiveSyncCore = __onLiveSyncCore;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var _wrappedIndex = 0;
var WrappedValue = function() {
function WrappedValue(value) {
this._wrapped = value;
}
Object.defineProperty(WrappedValue.prototype, "wrapped", {
get: function() {
return this._wrapped;
},
set: function(value) {
this._wrapped = value;
},
enumerable: true,
configurable: true
});
WrappedValue.unwrap = function(value) {
if (value && value.wrapped) {
return value.wrapped;
}
return value;
};
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var Observable = function() {
function Observable(source) {
this._observers = {};
this.disableNotifications = {};
if (source) {
addPropertiesFromObject(this, source);
}
}
Observable.prototype._defineNewProperty = function(propertyName) {
Object.defineProperty(this, propertyName, {
get: function() {
return this._map.get(propertyName);
},
set: function(value) {
this._map.set(propertyName, value);
this.notify(this._createPropertyChangeData(propertyName, value));
},
enumerable: true,
configurable: true
});
};
Object.defineProperty(Observable.prototype, "typeName", {
get: function() {
return types.getClass(this);
},
enumerable: true,
configurable: true
});
Observable.prototype.on = function(eventNames, callback, thisArg) {
this.addEventListener(eventNames, callback, thisArg);
};
Observable.prototype.off = function(eventNames, callback, thisArg) {
this.removeEventListener(eventNames, callback, thisArg);
};
Observable.prototype.addEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
types.verifyCallback(callback);
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
var list = this._getEventList(event, true);
list.push({
callback: callback,
thisArg: thisArg
});
}
};
Observable.prototype.removeEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
if (callback) {
var list = this._getEventList(event, false);
if (list) {
var index = this._indexOfListener(list, callback, thisArg);
if (index >= 0) {
list.splice(index, 1);
}
if (list.length === 0) {
delete this._observers[event];
}
}
} else {
this._observers[event] = undefined;
delete this._observers[event];
}
}
};
Observable.prototype.notifyPropertyChange = function(propertyName, newValue) {
this.notify(this._createPropertyChangeData(propertyName, newValue));
};
Observable.prototype.set = function(name, value) {
if (this[name] === value) {
return;
}
var data = this._createPropertyChangeData(name, value);
this._setCore(data);
this.notify(data);
};
Observable.prototype.get = function(name) {
return this[name];
};
Observable.prototype._setCore = function(data) {
this.disableNotifications[data.propertyName] = true;
var newValue = WrappedValue.unwrap(data.value);
this[data.propertyName] = newValue;
delete this.disableNotifications[data.propertyName];
};
Observable.prototype.notify = function(data) {
if (this.disableNotifications[data.propertyName]) {
return;
}
var observers = this._getEventList(data.eventName);
if (!observers) {
return;
}
var i;
var entry;
var observersLength = observers.length;
for (i = observersLength - 1; i >= 0; i--) {
entry = observers[i];
if (entry.thisArg) {
entry.callback.apply(entry.thisArg, [ data ]);
} else {
entry.callback(data);
}
}
};
Observable.prototype.hasListeners = function(eventName) {
return eventName in this._observers;
};
Observable.prototype._createPropertyChangeData = function(name, value) {
return {
eventName: Observable.propertyChangeEvent,
propertyName: name,
object: this,
value: value
};
};
Observable.prototype._emit = function(eventNames) {
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
this.notify({
eventName: event,
object: this
});
}
};
Observable.prototype._getEventList = function(eventName, createIfNeeded) {
if (!eventName) {
throw new TypeError("EventName must be valid string.");
}
var list = this._observers[eventName];
if (!list && createIfNeeded) {
list = [];
this._observers[eventName] = list;
}
return list;
};
Observable.prototype._indexOfListener = function(list, callback, thisArg) {
var i;
var entry;
for (i = 0; i < list.length; i++) {
entry = list[i];
if (thisArg) {
if (entry.callback === callback && entry.thisArg === thisArg) {
return i;
}
} else {
if (entry.callback === callback) {
return i;
}
}
}
return -1;
};
Observable.prototype.toString = function() {
return this.typeName;
};
Observable.propertyChangeEvent = "propertyChange";
return Observable;
}();
exports.Observable = Observable;
function addPropertiesFromObject(observable, source, recursive) {
var isRecursive = recursive || false;
observable._map = new Map();
for (var prop in source) {
if (source.hasOwnProperty(prop)) {
if (isRecursive) {
if (!Array.isArray(source[prop]) && source[prop] && typeof source[prop] === "object" && types.getClass(source[prop]) !== "ObservableArray") {
source[prop] = fromObjectRecursive(source[prop]);
}
}
observable._defineNewProperty(prop);
observable.set(prop, source[prop]);
}
}
}
function fromObject(source) {
var observable = new Observable();
addPropertiesFromObject(observable, source, false);
return observable;
}
exports.fromObject = fromObject;
function fromObjectRecursive(source) {
var observable = new Observable();
addPropertiesFromObject(observable, source, true);
return observable;
}
exports.fromObjectRecursive = fromObjectRecursive;
}, function(module, exports, __webpack_require__) {
if (global.TNS_WEBPACK) {
__webpack_require__(5);
global.registerModule("text/formatted-string", function() {
return __webpack_require__(20);
});
global.registerModule("text/span", function() {
return __webpack_require__(26);
});
global.registerModule("ui/action-bar", function() {
return __webpack_require__(50);
});
global.registerModule("ui/activity-indicator", function() {
return __webpack_require__(57);
});
global.registerModule("ui/border", function() {
return __webpack_require__(59);
});
global.registerModule("ui/button", function() {
return __webpack_require__(61);
});
global.registerModule("ui/content-view", function() {
return __webpack_require__(60);
});
global.registerModule("ui/date-picker", function() {
return __webpack_require__(64);
});
global.registerModule("ui/html-view", function() {
return __webpack_require__(66);
});
global.registerModule("ui/image", function() {
return __webpack_require__(68);
});
global.registerModule("ui/label", function() {
return __webpack_require__(72);
});
global.registerModule("ui/layouts/absolute-layout", function() {
return __webpack_require__(76);
});
global.registerModule("ui/layouts/dock-layout", function() {
return __webpack_require__(80);
});
global.registerModule("ui/layouts/grid-layout", function() {
return __webpack_require__(82);
});
global.registerModule("ui/layouts/stack-layout", function() {
return __webpack_require__(85);
});
global.registerModule("ui/list-picker", function() {
return __webpack_require__(87);
});
global.registerModule("ui/page", function() {
return __webpack_require__(89);
});
global.registerModule("ui/placeholder", function() {
return __webpack_require__(99);
});
global.registerModule("ui/progress", function() {
return __webpack_require__(101);
});
global.registerModule("ui/proxy-view-container", function() {
return __webpack_require__(103);
});
global.registerModule("ui/repeater", function() {
return __webpack_require__(104);
});
global.registerModule("ui/scroll-view", function() {
return __webpack_require__(112);
});
global.registerModule("ui/search-bar", function() {
return __webpack_require__(114);
});
global.registerModule("ui/segmented-bar", function() {
return __webpack_require__(116);
});
global.registerModule("ui/slider", function() {
return __webpack_require__(118);
});
global.registerModule("ui/switch", function() {
return __webpack_require__(120);
});
global.registerModule("ui/tab-view", function() {
return __webpack_require__(122);
});
global.registerModule("ui/web-view", function() {
return __webpack_require__(124);
});
global.registerModule("ui/text-field", function() {
return __webpack_require__(126);
});
global.registerModule("ui/text-view", function() {
return __webpack_require__(130);
});
global.registerModule("ui/time-picker", function() {
return __webpack_require__(132);
});
global.registerModule("ui/list-view", function() {
return __webpack_require__(134);
});
}
}, function(module, exports, __webpack_require__) {
var formattedStringCommon = __webpack_require__(21);
var types = __webpack_require__(14);
global.moduleMerge(formattedStringCommon, exports);
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.apply(this, arguments);
}
FormattedString.prototype.createFormattedStringCore = function() {
var ssb = new android.text.SpannableStringBuilder();
var i;
var spanStart = 0;
var spanLength = 0;
var spanText = "";
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
spanText = types.toUIString(span.text);
spanLength = spanText.length;
if (spanLength !== 0) {
ssb.insert(spanStart, spanText);
span.updateSpanModifiers(this);
var p;
for (p = 0; p < span.spanModifiers.length; p++) {
ssb.setSpan(span.spanModifiers[p], spanStart, spanStart + spanLength, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
spanStart += spanLength;
}
}
this._formattedText = ssb;
};
return FormattedString;
}(formattedStringCommon.FormattedString);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var observableArray = __webpack_require__(22);
var types = __webpack_require__(14);
var colorModule = __webpack_require__(23);
var knownCollections;
(function(knownCollections) {
knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.call(this);
this._spans = new observableArray.ObservableArray();
this._spans.addEventListener(observableArray.ObservableArray.changeEvent, this.onSpansCollectionChanged, this);
this._isDirty = true;
}
Object.defineProperty(FormattedString.prototype, "parent", {
get: function() {
return this._parent;
},
set: function(value) {
if (this._parent !== value) {
this._parent = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var foreColor;
if (types.isString(value)) {
foreColor = new colorModule.Color(value);
} else {
foreColor = value;
}
if (this._foregroundColor !== foreColor) {
this._foregroundColor = foreColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var backColor;
if (types.isString(value)) {
backColor = new colorModule.Color(value);
} else {
backColor = value;
}
if (this._backgroundColor !== backColor) {
this._backgroundColor = backColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "spans", {
get: function() {
if (!this._spans) {
this._spans = new observableArray.ObservableArray();
}
return this._spans;
},
enumerable: true,
configurable: true
});
FormattedString.prototype.onSpansCollectionChanged = function(eventData) {
var i;
if (eventData.addedCount > 0) {
for (i = 0; i < eventData.addedCount; i++) {
var addedSpan = eventData.object.getItem(eventData.index + i);
addedSpan.parentFormattedString = this;
addedSpan.addEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
if (eventData.removed && eventData.removed.length > 0) {
var p;
for (p = 0; p < eventData.removed.length; p++) {
var removedSpan = eventData.removed[p];
removedSpan.removeEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
this.updateFormattedText(true);
};
FormattedString.prototype.onSpanChanged = function(eventData) {
this.updateFormattedText(true);
};
FormattedString.prototype.updateFormattedText = function(isDirty) {
var shouldUpdate = isDirty || this._isDirty;
if (shouldUpdate) {
this.createFormattedStringCore();
this._isDirty = false;
this.notify(this._createPropertyChangeData("", this));
}
};
FormattedString.prototype.createFormattedStringCore = function() {};
FormattedString.prototype.toString = function() {
var result = "";
var i;
for (i = 0; i < this._spans.length; i++) {
result += this._spans.getItem(i).text;
}
return result;
};
FormattedString.prototype._addArrayFromBuilder = function(name, value) {
var i;
var span;
if (name === knownCollections.spans) {
for (i = 0; i < value.length; i++) {
span = value[i];
this.spans.push(span);
}
}
};
FormattedString.prototype.updateSpansBindingContext = function(newBindingContext) {
var i;
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
span.bindingContext = newBindingContext;
}
};
FormattedString.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
this.spans.push(value);
}
};
FormattedString.addFormattedStringToView = function(view, name, value) {
if (name === CHILD_SPAN) {
if (!view.formattedText) {
view.formattedText = new FormattedString();
}
view.formattedText.spans.push(value);
} else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
view.formattedText = value;
}
};
FormattedString.prototype._updateCharactersInRangeReplacementString = function(rangeLocation, rangeLength, replacementString) {};
return FormattedString;
}(observable.Observable);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var types = __webpack_require__(14);
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var CHANGE = "change";
var ObservableArray = function(_super) {
__extends(ObservableArray, _super);
function ObservableArray() {
_super.call(this);
if (arguments.length === 1 && Array.isArray(arguments[0])) {
this._array = arguments[0].slice();
} else {
this._array = Array.apply(null, arguments);
}
this._addArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Add,
index: null,
removed: new Array(),
addedCount: 1
};
this._deleteArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Delete,
index: null,
removed: null,
addedCount: 0
};
}
ObservableArray.prototype.getItem = function(index) {
return this._array[index];
};
ObservableArray.prototype.setItem = function(index, value) {
var oldValue = this._array[index];
this._array[index] = value;
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Update,
index: index,
removed: [ oldValue ],
addedCount: 1
});
};
Object.defineProperty(ObservableArray.prototype, "length", {
get: function() {
return this._array.length;
},
set: function(value) {
if (types.isNumber(value) && this._array && this._array.length !== value) {
this.splice(value, this._array.length - value);
}
},
enumerable: true,
configurable: true
});
ObservableArray.prototype.toString = function() {
return this._array.toString();
};
ObservableArray.prototype.toLocaleString = function() {
return this._array.toLocaleString();
};
ObservableArray.prototype.concat = function() {
this._addArgs.index = this._array.length;
var result = this._array.concat.apply(this._array, arguments);
return result;
};
ObservableArray.prototype.join = function(separator) {
return this._array.join(separator);
};
ObservableArray.prototype.pop = function() {
this._deleteArgs.index = this._array.length - 1;
var result = this._array.pop();
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.push = function() {
this._addArgs.index = this._array.length;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
var source = arguments[0];
for (var i = 0, l = source.length; i < l; i++) {
this._array.push(source[i]);
}
} else {
this._array.push.apply(this._array, arguments);
}
this._addArgs.addedCount = this._array.length - this._addArgs.index;
this.notify(this._addArgs);
this._notifyLengthChange();
return this._array.length;
};
ObservableArray.prototype._notifyLengthChange = function() {
var lengthChangedData = this._createPropertyChangeData("length", this._array.length);
this.notify(lengthChangedData);
};
ObservableArray.prototype.reverse = function() {
return this._array.reverse();
};
ObservableArray.prototype.shift = function() {
var result = this._array.shift();
this._deleteArgs.index = 0;
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.slice = function(start, end) {
return this._array.slice(start, end);
};
ObservableArray.prototype.sort = function(compareFn) {
return this._array.sort(compareFn);
};
ObservableArray.prototype.splice = function(start, deleteCount) {
var length = this._array.length;
var result = this._array.splice.apply(this._array, arguments);
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Splice,
index: start,
removed: result,
addedCount: this._array.length > length ? this._array.length - length : 0
});
if (this._array.length !== length) {
this._notifyLengthChange();
}
return result;
};
ObservableArray.prototype.unshift = function() {
var length = this._array.length;
var result = this._array.unshift.apply(this._array, arguments);
this._addArgs.index = 0;
this._addArgs.addedCount = result - length;
this.notify(this._addArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.indexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : 0;
for (var i = index, l = this._array.length; i < l; i++) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : this._array.length - 1;
for (var i = index; i >= 0; i--) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.every = function(callbackfn, thisArg) {
return this._array.every(callbackfn, thisArg);
};
ObservableArray.prototype.some = function(callbackfn, thisArg) {
return this._array.some(callbackfn, thisArg);
};
ObservableArray.prototype.forEach = function(callbackfn, thisArg) {
this._array.forEach(callbackfn, thisArg);
};
ObservableArray.prototype.map = function(callbackfn, thisArg) {
return this._array.map(callbackfn, thisArg);
};
ObservableArray.prototype.filter = function(callbackfn, thisArg) {
return this._array.filter(callbackfn, thisArg);
};
ObservableArray.prototype.reduce = function(callbackfn, initialValue) {
return this._array.reduce(callbackfn, initialValue);
};
ObservableArray.prototype.reduceRight = function(callbackfn, initialValue) {
return this._array.reduceRight(callbackfn, initialValue);
};
ObservableArray.changeEvent = CHANGE;
return ObservableArray;
}(observable.Observable);
exports.ObservableArray = ObservableArray;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(24);
var Color = function(_super) {
__extends(Color, _super);
function Color() {
_super.apply(this, arguments);
}
Object.defineProperty(Color.prototype, "android", {
get: function() {
return this.argb;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return android.graphics.Color.parseColor(hex);
};
return Color;
}(common.Color);
exports.Color = Color;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var knownColors = __webpack_require__(25);
var AMP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = function() {
function Color() {
if (arguments.length === 1) {
var arg = arguments[0];
if (types.isString(arg)) {
if (isRgbOrRgba(arg)) {
this._argb = argbFromRgbOrRgba(arg);
} else if (knownColors.isKnownName(arg)) {
this._hex = knownColors.getKnownColor(arg);
this._name = arg;
this._argb = this._argbFromString(this._hex);
} else {
this._hex = this._normalizeHex(arg);
this._argb = this._argbFromString(this._hex);
}
} else if (types.isNumber(arg)) {
this._argb = arg;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
this._parseComponents();
if (!this._hex) {
this._hex = this._buildHex();
}
} else if (arguments.length === 4) {
this._a = arguments[0];
this._r = arguments[1];
this._g = arguments[2];
this._b = arguments[3];
this._buildArgb();
this._hex = this._buildHex();
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
}
Object.defineProperty(Color.prototype, "a", {
get: function() {
return this._a;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "r", {
get: function() {
return this._r;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "g", {
get: function() {
return this._g;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "b", {
get: function() {
return this._b;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "argb", {
get: function() {
return this._argb;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "hex", {
get: function() {
return this._hex;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return undefined;
};
Color.prototype.equals = function(value) {
return this.argb === value.argb;
};
Color.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.equals(value2);
};
Color.isValid = function(value) {
if (types.isNullOrUndefined(value) || value instanceof Color) {
return true;
}
if (!types.isString(value)) {
return false;
}
if (knownColors.isKnownName(value)) {
return true;
}
return HEX_REGEX.test(value) || isRgbOrRgba(value);
};
Color.prototype._buildHex = function() {
return AMP + this._componentToHex(this._a) + this._componentToHex(this._r) + this._componentToHex(this._g) + this._componentToHex(this._b);
};
Color.prototype._componentToHex = function(component) {
var hex = component.toString(16);
if (hex.length === 1) {
hex = "0" + hex;
}
return hex;
};
Color.prototype._parseComponents = function() {
if (types.isUndefined(this._argb)) {
throw new Error("Missing the ARGB numeric value");
}
this._a = this._argb >> 24 & 255;
this._r = this._argb >> 16 & 255;
this._g = this._argb >> 8 & 255;
this._b = this._argb & 255;
};
Color.prototype._buildArgb = function() {
this._argb = this._a << 24 | this._r << 16 | this._g << 8 | this._b;
};
Color.prototype._normalizeHex = function(hexStr) {
if (hexStr.charAt(0) === AMP && hexStr.length === 4) {
hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
}
return hexStr;
};
Color.prototype.toString = function() {
return this.hex;
};
return Color;
}();
exports.Color = Color;
function isRgbOrRgba(value) {
var toLower = value.toLowerCase();
return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}
function argbFromRgbOrRgba(value) {
var toLower = value.toLowerCase();
var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
var r = 255, g = 255, b = 255, a = 255;
if (parts[0]) {
r = parseInt(parts[0].trim());
}
if (parts[1]) {
g = parseInt(parts[1].trim());
}
if (parts[2]) {
b = parseInt(parts[2].trim());
}
if (parts[3]) {
a = Math.round(parseFloat(parts[3].trim()) * 255);
}
return a << 24 | r << 16 | g << 8 | b;
}
}, function(module, exports) {
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};
(function() {
var name;
var underscore = "_";
for (var p in exports) {
name = p;
if (name.charAt(0) !== underscore) {
_allColors[name.toLowerCase()] = exports[p];
}
}
})();
function isKnownName(name) {
if (!name) {
return undefined;
}
return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
if (!name) {
return undefined;
}
return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
}, function(module, exports, __webpack_require__) {
var spanCommon = __webpack_require__(27);
var enums = __webpack_require__(39);
var utils = __webpack_require__(37);
var fontModule = __webpack_require__(43);
global.moduleMerge(spanCommon, exports);
var CustomTypefaceSpanClass;
function ensureCustomTypefaceSpanClass() {
if (CustomTypefaceSpanClass) {
return;
}
var CustomTypefaceSpan = function(_super) {
__extends(CustomTypefaceSpan, _super);
function CustomTypefaceSpan(family, typeface) {
_super.call(this, family);
this.typeface = typeface;
return global.__native(this);
}
CustomTypefaceSpan.prototype.updateDrawState = function(ds) {
CustomTypefaceSpan.applyCustomTypeFace(ds, this.typeface);
};
CustomTypefaceSpan.prototype.updateMeasureState = function(paint) {
CustomTypefaceSpan.applyCustomTypeFace(paint, this.typeface);
};
CustomTypefaceSpan.applyCustomTypeFace = function(paint, tf) {
var oldStyle;
var old = paint.getTypeface();
if (old === null) {
oldStyle = 0;
} else {
oldStyle = old.getStyle();
}
var fake = oldStyle & ~tf.getStyle();
if ((fake & android.graphics.Typeface.BOLD) !== 0) {
paint.setFakeBoldText(true);
}
if ((fake & android.graphics.Typeface.ITALIC) !== 0) {
paint.setTextSkewX(-.25);
}
paint.setTypeface(tf);
};
return CustomTypefaceSpan;
}(android.text.style.TypefaceSpan);
CustomTypefaceSpanClass = CustomTypefaceSpan;
}
var Span = function(_super) {
__extends(Span, _super);
function Span() {
_super.apply(this, arguments);
}
Span.prototype.updateSpanModifiers = function(parent) {
_super.prototype.updateSpanModifiers.call(this, parent);
var realFontFamily = this.fontFamily || (parent ? parent.fontFamily : undefined);
if (realFontFamily) {
var font = new fontModule.Font(realFontFamily, 0, realFontAttributes & enums.FontAttributes.Italic ? enums.FontStyle.italic : enums.FontStyle.normal, realFontAttributes & enums.FontAttributes.Bold ? enums.FontWeight.bold : enums.FontWeight.normal);
ensureCustomTypefaceSpanClass();
var typefaceSpan = new CustomTypefaceSpanClass(realFontFamily, font.getAndroidTypeface());
this.spanModifiers.push(typefaceSpan);
}
var realFontSize = this.fontSize || (parent ? parent.fontSize : undefined) || (parent && parent.parent ? parent.parent.style.fontSize : undefined);
if (realFontSize) {
this.spanModifiers.push(new android.text.style.AbsoluteSizeSpan(realFontSize * utils.layout.getDisplayDensity()));
}
var realForegroundColor = this.foregroundColor || (parent ? parent.foregroundColor : undefined) || (parent && parent.parent ? parent.parent.style.color : undefined);
if (realForegroundColor) {
this.spanModifiers.push(new android.text.style.ForegroundColorSpan(realForegroundColor.android));
}
var realBackgroundColor = this.backgroundColor || (parent ? parent.backgroundColor : undefined) || (parent && parent.parent ? parent.parent.style.backgroundColor : undefined);
if (realBackgroundColor) {
this.spanModifiers.push(new android.text.style.BackgroundColorSpan(realBackgroundColor.android));
}
var realFontAttributes = this.fontAttributes || (parent ? parent.fontAttributes : undefined);
if (realFontAttributes) {
if (realFontAttributes & enums.FontAttributes.Bold && realFontAttributes & enums.FontAttributes.Italic) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC));
} else if (realFontAttributes & enums.FontAttributes.Bold) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD));
} else if (realFontAttributes & enums.FontAttributes.Italic) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC));
}
}
var realUnderline = this.underline || (parent ? parent.underline : undefined);
if (realUnderline) {
this.spanModifiers.push(new android.text.style.UnderlineSpan());
}
var realStrikethrough = this.strikethrough || (parent ? parent.strikethrough : undefined);
if (realStrikethrough) {
this.spanModifiers.push(new android.text.style.StrikethroughSpan());
}
};
return Span;
}(spanCommon.Span);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(23);
var bindable = __webpack_require__(28);
var types = __webpack_require__(14);
var enums = __webpack_require__(39);
var Span = function(_super) {
__extends(Span, _super);
function Span() {
_super.apply(this, arguments);
}
Object.defineProperty(Span.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype._getColorValue = function(value) {
var result;
if (types.isString(value) && colorModule.Color.isValid(value)) {
result = new colorModule.Color(value);
} else {
result = value;
}
return result;
};
Object.defineProperty(Span.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var convertedColor = this._getColorValue(value);
if (this._foregroundColor !== convertedColor) {
this._foregroundColor = convertedColor;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var convertedColor = this._getColorValue(value);
if (this._backgroundColor !== convertedColor) {
this._backgroundColor = convertedColor;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "spanModifiers", {
get: function() {
if (!this._spanModifiers) {
this._spanModifiers = new Array();
}
return this._spanModifiers;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "text", {
get: function() {
return this._text;
},
set: function(value) {
if (this._text !== value) {
this._setTextInternal(value);
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype._setTextInternal = function(value) {
this._text = value;
};
Object.defineProperty(Span.prototype, "parentFormattedString", {
get: function() {
return this._parentFormattedString;
},
set: function(value) {
if (this._parentFormattedString !== value) {
this._parentFormattedString = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype.updateSpanModifiers = function(parent) {
if (this._isInEditMode) {
throw new Error("Cannot update span modifiers during update!");
}
this._spanModifiers = new Array();
};
Span.prototype.beginEdit = function() {
this._isInEditMode = true;
};
Span.prototype.updateAndNotify = function() {
if (!this._isInEditMode) {
this.updateSpanModifiers(this.parentFormattedString);
this.notify(this._createPropertyChangeData(".", this));
}
};
Span.prototype.endEdit = function() {
this._isInEditMode = false;
this.updateAndNotify();
};
Span.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "fontAttributes") {
if (value.indexOf(",")) {
var fontAttr = value.split(",");
var fontAttrValue;
var j;
for (j = 0; j < fontAttr.length; j++) {
fontAttrValue = Span.getFontAttributeFromString(fontAttr[j]);
this.fontAttributes |= fontAttrValue;
}
} else {
this.fontAttributes |= value;
}
return true;
} else {
return false;
}
};
Span.getFontAttributeFromString = function(fontAttr) {
var fontAttrTrimmedAndLowerCase = fontAttr.trim().toLowerCase();
if (fontAttrTrimmedAndLowerCase === "bold") {
return enums.FontAttributes.Bold;
} else if (fontAttrTrimmedAndLowerCase === "italic") {
return enums.FontAttributes.Italic;
} else {
return enums.FontAttributes.Normal;
}
};
return Span;
}(bindable.Bindable);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(18);
var dependency_observable_1 = __webpack_require__(29);
var weakEvents = __webpack_require__(30);
var types = __webpack_require__(14);
var trace = __webpack_require__(31);
var bindingBuilder = __webpack_require__(32);
var viewModule = __webpack_require__(12);
var application = __webpack_require__(16);
var polymerExpressions = __webpack_require__(33);
var specialProperties = __webpack_require__(36);
var utils = __webpack_require__(37);
var bindingContextProperty = new dependency_observable_1.Property("bindingContext", "Bindable", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onBindingContextChanged));
function onBindingContextChanged(data) {
var bindable = data.object;
bindable._onBindingContextChanged(data.oldValue, data.newValue);
}
var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = bindingBuilder.bindingConstants;
var defaultBindingSource = {};
var Bindable = function(_super) {
__extends(Bindable, _super);
function Bindable() {
_super.apply(this, arguments);
this.bindings = new Map();
}
Object.defineProperty(Bindable.prototype, "bindingContext", {
get: function() {
return this._getValue(Bindable.bindingContextProperty);
},
set: function(value) {
this._setValue(Bindable.bindingContextProperty, value);
},
enumerable: true,
configurable: true
});
Bindable.prototype.bind = function(options, source) {
if (source === void 0) {
source = defaultBindingSource;
}
var binding = this.bindings.get(options.targetProperty);
if (binding) {
binding.unbind();
}
binding = new Binding(this, options);
this.bindings.set(options.targetProperty, binding);
var bindingSource = source;
if (bindingSource === defaultBindingSource) {
bindingSource = this.bindingContext;
binding.sourceIsBindingContext = true;
}
binding.bind(bindingSource);
};
Bindable.prototype.unbind = function(property) {
var binding = this.bindings.get(property);
if (binding) {
binding.unbind();
this.bindings.delete(property);
}
};
Bindable.prototype._updateTwoWayBinding = function(propertyName, value) {
var binding = this.bindings.get(propertyName);
if (binding) {
binding.updateTwoWay(value);
}
};
Bindable.prototype._setCore = function(data) {
_super.prototype._setCore.call(this, data);
this._updateTwoWayBinding(data.propertyName, data.value);
};
Bindable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
if (trace.enabled) {
trace.write(this + "._onPropertyChanged(" + property.name + ", " + oldValue + ", " + newValue + ")", trace.categories.Binding);
}
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this instanceof viewModule.View) {
if (property.inheritable && this._isInheritedChange() === true) {
return;
}
}
var binding = this.bindings.get(property.name);
if (binding && !binding.updating) {
if (binding.options.twoWay) {
if (trace.enabled) {
trace.write(this + "._updateTwoWayBinding(" + property.name + ", " + newValue + ");" + property.name, trace.categories.Binding);
}
this._updateTwoWayBinding(property.name, newValue);
} else {
if (trace.enabled) {
trace.write(this + ".unbind(" + property.name + ");", trace.categories.Binding);
}
this.unbind(property.name);
}
}
};
Bindable.prototype._onBindingContextChanged = function(oldValue, newValue) {
var bindingContextBinding = this.bindings.get("bindingContext");
if (bindingContextBinding) {
if (!bindingContextBinding.updating) {
bindingContextBinding.bind(newValue);
}
}
var bindingContextSource = this.bindingContext;
this.bindings.forEach(function(binding, index, bindings) {
if (!binding.updating && binding.sourceIsBindingContext && binding.options.targetProperty !== "bindingContext") {
if (trace.enabled) {
trace.write("Binding " + binding.target.get() + "." + binding.options.targetProperty + " to new context " + bindingContextSource, trace.categories.Binding);
}
if (!types.isNullOrUndefined(bindingContextSource)) {
binding.bind(bindingContextSource);
} else {
binding.clearBinding();
}
}
});
};
Bindable.bindingContextProperty = bindingContextProperty;
return Bindable;
}(dependency_observable_1.DependencyObservable);
exports.Bindable = Bindable;
var emptyArray = [];
function getProperties(property) {
var result = emptyArray;
if (property) {
var parentsMatches = property.match(bindingBuilder.parentsRegex);
result = property.replace(bindingBuilder.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
var parentsMatchesCounter = 0;
for (var i = 0, resultLength = result.length; i < resultLength; i++) {
if (result[i] === "parentsMatch") {
result[i] = parentsMatches[parentsMatchesCounter++];
}
}
}
return result;
}
var Binding = function() {
function Binding(target, options) {
this.propertyChangeListeners = new Map();
this.target = new WeakRef(target);
this.options = options;
this.sourceProperties = getProperties(options.sourceProperty);
this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));
}
Binding.prototype.loadedHandlerVisualTreeBinding = function(args) {
var target = args.object;
target.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
if (!types.isNullOrUndefined(target.bindingContext)) {
this.bind(target.bindingContext);
}
};
Binding.prototype.clearSource = function() {
var _this = this;
this.propertyChangeListeners.forEach(function(observable, index, map) {
weakEvents.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
});
this.propertyChangeListeners.clear();
this.sourcesAndProperties = null;
if (this.source) {
this.source.clear();
}
if (this.sourceOptions) {
this.sourceOptions.instance.clear();
this.sourceOptions = undefined;
}
};
Binding.prototype.sourceAsObject = function(source) {
var objectType = typeof source;
if (objectType === "number") {
source = new Number(source);
} else if (objectType === "boolean") {
source = new Boolean(source);
} else if (objectType === "string") {
source = new String(source);
}
return source;
};
Binding.prototype.bind = function(source) {
this.clearSource();
source = this.sourceAsObject(source);
var sourceValue;
if (!types.isNullOrUndefined(source)) {
this.source = new WeakRef(source);
this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue);
this.addPropertyChangeListeners(this.source, this.sourceProperties);
} else if (!this.sourceIsBindingContext) {
sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue ? sourceValue : source);
}
};
Binding.prototype.resolveObjectsAndProperties = function(source, properties) {
var result = [];
var currentObject = source;
var currentObjectChanged = false;
for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
var property = properties[i];
if (property === bc.bindingValueKey) {
currentObjectChanged = true;
}
if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
var parentView = this.getParentView(this.target.get(), property).view;
if (parentView) {
currentObject = parentView.bindingContext;
} else {
var targetInstance = this.target.get();
targetInstance.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
targetInstance.on(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
}
currentObjectChanged = true;
}
if (currentObject) {
result.push({
instance: currentObject,
property: property
});
} else {
break;
}
if (!currentObjectChanged && i < propsArrayLength - 1) {
currentObject = currentObject ? currentObject[properties[i]] : null;
}
currentObjectChanged = false;
}
return result;
};
Binding.prototype.addPropertyChangeListeners = function(source, sourceProperty, parentProperies) {
var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
var prop = parentProperies || "";
for (var i = 0, length = objectsAndProperties.length; i < length; i++) {
prop += "$" + objectsAndProperties[i].property;
var currentObject = objectsAndProperties[i].instance;
if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
weakEvents.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.set(prop, currentObject);
}
}
};
Binding.prototype.unbind = function() {
if (!this.source) {
return;
}
this.clearSource();
if (this.targetOptions) {
this.targetOptions = undefined;
}
this.sourceProperties = undefined;
};
Binding.prototype.prepareExpressionForUpdate = function() {
var escapedSourceProperty = utils.escapeRegexSymbols(this.options.sourceProperty);
var expRegex = new RegExp(escapedSourceProperty, "g");
var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
return resultExp;
};
Binding.prototype.updateTwoWay = function(value) {
if (this.updating || !this.options.twoWay) {
return;
}
var newValue = value;
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = value;
changedModel[bc.newPropertyValueKey] = value;
var sourcePropertyName = "";
if (this.sourceOptions) {
sourcePropertyName = this.sourceOptions.property;
} else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
sourcePropertyName = this.options.sourceProperty;
}
if (sourcePropertyName !== "") {
changedModel[sourcePropertyName] = value;
}
var updateExpression = this.prepareExpressionForUpdate();
this.prepareContextForExpression(changedModel, updateExpression, undefined);
var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
}
newValue = expressionValue;
}
this.updateSource(newValue);
};
Binding.prototype._getExpressionValue = function(expression, isBackConvert, changedModel) {
try {
var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);
if (exp_1) {
var context_1 = this.source && this.source.get && this.source.get() || global;
var model = {};
var addedProps = [];
for (var prop in application.resources) {
if (application.resources.hasOwnProperty(prop) && !context_1.hasOwnProperty(prop)) {
context_1[prop] = application.resources[prop];
addedProps.push(prop);
}
}
this.prepareContextForExpression(context_1, expression, addedProps);
model[contextKey] = context_1;
var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
var addedPropsLength = addedProps.length;
for (var i = 0; i < addedPropsLength; i++) {
delete context_1[addedProps[i]];
}
addedProps.length = 0;
return result;
}
return new Error(expression + " is not a valid expression.");
} catch (e) {
var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
return new Error(errorMessage);
}
};
Binding.prototype.onSourcePropertyChanged = function(data) {
var sourceProps = this.sourceProperties;
var sourcePropsLength = sourceProps.length;
var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
var parentProps = "";
if (changedPropertyIndex > -1) {
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
while (this.propertyChangeListeners.get(parentProps) !== data.object) {
changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
}
}
if (this.options.expression) {
var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
this.updateTarget(expressionValue);
}
} else {
if (changedPropertyIndex > -1) {
var props = sourceProps.slice(changedPropertyIndex + 1);
var propsLength = props.length;
if (propsLength > 0) {
var value = data.value;
for (var i = 0; i < propsLength; i++) {
value = value[props[i]];
}
this.updateTarget(value);
} else if (data.propertyName === this.sourceOptions.property) {
this.updateTarget(data.value);
}
}
}
if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
var probablyChangedObject = this.propertyChangeListeners.get(parentProps);
if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
var prop = "$" + sourceProps.slice(0, i + 1).join("$");
if (this.propertyChangeListeners.has(prop)) {
weakEvents.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.delete(prop);
}
}
var newProps = sourceProps.slice(changedPropertyIndex + 1);
var newObject = data.object[sourceProps[changedPropertyIndex]];
if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
}
}
}
};
Binding.prototype.prepareContextForExpression = function(model, expression, newProps) {
var parentViewAndIndex;
var parentView;
var addedProps = newProps || [];
if (expression.indexOf(bc.bindingValueKey) > -1) {
model[bc.bindingValueKey] = model;
addedProps.push(bc.bindingValueKey);
}
if (expression.indexOf(bc.parentValueKey) > -1) {
parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;
if (parentView) {
model[bc.parentValueKey] = parentView.bindingContext;
addedProps.push(bc.parentValueKey);
}
}
var parentsArray = expression.match(bindingBuilder.parentsRegex);
if (parentsArray) {
for (var i = 0; i < parentsArray.length; i++) {
parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);
if (parentViewAndIndex.view) {
model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
addedProps.push(bc.parentsValueKey);
}
}
}
};
Binding.prototype.getSourcePropertyValue = function() {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;
var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
return expressionValue;
}
}
if (this.sourceOptions) {
var sourceOptionsInstance = this.sourceOptions.instance.get();
if (this.sourceOptions.property === bc.bindingValueKey) {
return sourceOptionsInstance;
} else if (sourceOptionsInstance instanceof observable_1.Observable && (this.sourceOptions.property && this.sourceOptions.property !== "")) {
return sourceOptionsInstance.get(this.sourceOptions.property);
} else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
return sourceOptionsInstance[this.sourceOptions.property];
} else {
trace.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace.categories.Binding, trace.messageType.error);
}
}
return null;
};
Binding.prototype.clearBinding = function() {
this.clearSource();
this.updateTarget(undefined);
};
Binding.prototype.updateTarget = function(value) {
if (this.updating) {
return;
}
this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? dependency_observable_1.unsetValue : value);
};
Binding.prototype.updateSource = function(value) {
if (this.updating || !this.source || !this.source.get()) {
return;
}
this.updateOptions(this.sourceOptions, value);
};
Binding.prototype.getParentView = function(target, property) {
if (!target || !(target instanceof viewModule.View)) {
return {
view: null,
index: null
};
}
var result;
if (property === bc.parentValueKey) {
result = target.parent;
}
var index = null;
if (property.indexOf(bc.parentsValueKey) === 0) {
result = target.parent;
var indexParams = paramsRegex.exec(property);
if (indexParams && indexParams.length > 1) {
index = indexParams[2];
}
if (!isNaN(index)) {
var indexAsInt = parseInt(index);
while (indexAsInt > 0) {
result = result.parent;
indexAsInt--;
}
} else if (types.isString(index)) {
while (result && result.typeName !== index) {
result = result.parent;
}
}
}
return {
view: result,
index: index
};
};
Binding.prototype.resolveOptions = function(obj, properties) {
var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);
if (objectsAndProperties.length > 0) {
var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
return {
instance: new WeakRef(this.sourceAsObject(resolvedObj)),
property: prop
};
}
return null;
};
Binding.prototype.updateOptions = function(options, value) {
var optionsInstance;
if (options && options.instance) {
optionsInstance = options.instance.get();
}
if (!optionsInstance) {
return;
}
this.updating = true;
try {
if (optionsInstance instanceof Bindable && viewModule.isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
optionsInstance.off(options.property, null, optionsInstance.bindingContext);
optionsInstance.on(options.property, value, optionsInstance.bindingContext);
} else {
var specialSetter = specialProperties.getSpecialPropertySetter(options.property);
if (specialSetter) {
specialSetter(optionsInstance, value);
} else {
if (optionsInstance instanceof observable_1.Observable) {
optionsInstance.set(options.property, value);
} else {
optionsInstance[options.property] = value;
}
}
}
} catch (ex) {
trace.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace.categories.Binding, trace.messageType.error);
}
this.updating = false;
};
return Binding;
}();
exports.Binding = Binding;
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(18);
var types = __webpack_require__(14);
var propertyFromKey = {};
var propertyIdCounter = 0;
exports.unsetValue = new Object();
function generatePropertyKey(name, ownerType, validate) {
if (validate) {
validateRegisterParameters(name, ownerType);
}
return ownerType + "." + name;
}
function validateRegisterParameters(name, ownerType) {
if (name == null || name.trim().length === 0) {
throw new Error("Name should not be null or empty string.");
}
if (ownerType == null || ownerType.trim().length === 0) {
throw new Error("OwnerType should not be null or empty string.");
}
}
function getPropertyByNameAndType(name, owner) {
var result;
var key;
var classInfo = types.getClassInfo(owner);
while (classInfo) {
key = generatePropertyKey(name, classInfo.name);
result = propertyFromKey[key];
if (result) {
break;
}
classInfo = classInfo.baseClassInfo;
}
return result;
}
var PropertyMetadataSettings;
(function(PropertyMetadataSettings) {
PropertyMetadataSettings.None = 0;
PropertyMetadataSettings.AffectsLayout = 1;
PropertyMetadataSettings.AffectsStyle = 1 << 1;
PropertyMetadataSettings.Inheritable = 1 << 2;
})(PropertyMetadataSettings = exports.PropertyMetadataSettings || (exports.PropertyMetadataSettings = {}));
var ValueSource;
(function(ValueSource) {
ValueSource.Default = 0;
ValueSource.Inherited = 1;
ValueSource.Css = 2;
ValueSource.Local = 3;
ValueSource.VisualState = 4;
})(ValueSource = exports.ValueSource || (exports.ValueSource = {}));
var PropertyMetadata = function() {
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, equalityComparer) {
if (options === void 0) {
options = PropertyMetadataSettings.None;
}
this.defaultValue = defaultValue;
this.options = options;
this.defaultValue = defaultValue;
this.options = options;
this.onValueChanged = onChanged;
this.onValidateValue = onValidateValue;
this.equalityComparer = equalityComparer;
this.inheritable = (options & PropertyMetadataSettings.Inheritable) === PropertyMetadataSettings.Inheritable;
this.affectsStyle = (options & PropertyMetadataSettings.AffectsStyle) === PropertyMetadataSettings.AffectsStyle;
this.affectsLayout = (options & PropertyMetadataSettings.AffectsLayout) === PropertyMetadataSettings.AffectsLayout;
}
return PropertyMetadata;
}();
exports.PropertyMetadata = PropertyMetadata;
var Property = function() {
function Property(name, ownerType, metadata, valueConverter) {
this.name = name;
this.ownerType = ownerType;
this.metadata = metadata;
this.key = generatePropertyKey(name, ownerType, true);
if (propertyFromKey[this.key]) {
throw new Error("Property " + name + " already registered for type " + ownerType + ".");
}
propertyFromKey[this.key] = this;
if (!metadata || !(metadata instanceof PropertyMetadata)) {
throw new Error("Expected valid PropertyMetadata instance.");
}
this.name = name;
this.nameEvent = name + "Change";
this.ownerType = ownerType;
this.metadata = metadata;
this.id = propertyIdCounter++;
this.valueConverter = valueConverter;
this.defaultValue = metadata.defaultValue;
this.onValueChanged = metadata.onValueChanged;
this.onValidateValue = metadata.onValidateValue;
this.equalityComparer = metadata.equalityComparer || function(x, y) {
return x === y;
};
this.inheritable = metadata.inheritable;
this.affectsStyle = metadata.affectsStyle;
this.affectsLayout = metadata.affectsLayout;
}
return Property;
}();
exports.Property = Property;
var PropertyEntry = function() {
function PropertyEntry(property) {
this.property = property;
this.valueSource = ValueSource.Default;
}
PropertyEntry.prototype.resetValue = function() {
this.valueSource = ValueSource.Default;
this.inheritedValue = this.cssValue = this.localValue = this.visualStateValue = this.effectiveValue = undefined;
};
return PropertyEntry;
}();
exports.PropertyEntry = PropertyEntry;
var DependencyObservable = function(_super) {
__extends(DependencyObservable, _super);
function DependencyObservable() {
_super.apply(this, arguments);
this._propertyEntries = {};
}
DependencyObservable.prototype.set = function(name, value) {
var property = getPropertyByNameAndType(name, this);
if (property) {
this._setValueInternal(property, value, ValueSource.Local);
} else {
_super.prototype.set.call(this, name, value);
}
};
DependencyObservable.prototype.get = function(name) {
var property = getPropertyByNameAndType(name, this);
if (property) {
return this._getValue(property);
} else {
return _super.prototype.get.call(this, name);
}
};
DependencyObservable.prototype._setValue = function(property, value, source) {
this._setValueInternal(property, value, source || ValueSource.Local);
};
DependencyObservable.prototype._getValueSource = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.valueSource;
}
return ValueSource.Default;
};
DependencyObservable.prototype._getValue = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.effectiveValue;
} else {
return this._getDefaultValue(property);
}
};
DependencyObservable.prototype._getDefaultValue = function(property) {
if (property.defaultValueGetter) {
var defaultValueResult = property.defaultValueGetter(this);
var defaultValue = defaultValueResult.result;
if (defaultValueResult.cacheable) {
var entry = new PropertyEntry(property);
entry.effectiveValue = entry.defaultValue = defaultValue;
this._propertyEntries[property.id] = entry;
}
return defaultValue;
}
return property.defaultValue;
};
DependencyObservable.prototype._resetValues = function(valueSource) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
this._resetValueInternal(entry.property, entry, valueSource);
}
};
DependencyObservable.prototype._resetValue = function(property, valueSource) {
if (valueSource === void 0) {
valueSource = ValueSource.Local;
}
var entry = this._propertyEntries[property.id];
if (!entry) {
return;
}
this._resetValueInternal(property, entry, valueSource);
};
DependencyObservable.prototype._resetValueInternal = function(property, entry, valueSource) {
switch (valueSource) {
case ValueSource.Inherited:
entry.inheritedValue = undefined;
break;

case ValueSource.Css:
entry.cssValue = undefined;
break;

case ValueSource.Local:
entry.localValue = undefined;
break;

case ValueSource.VisualState:
entry.visualStateValue = undefined;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource !== valueSource) {
return;
}
var currentValue = entry.effectiveValue;
var newValue = this.getEffectiveValueAndUpdateEntry(currentValueSource, entry, property);
if (!property.equalityComparer(currentValue, newValue)) {
if (entry.valueSource === ValueSource.Default && !property.defaultValueGetter) {
delete this._propertyEntries[property.id];
} else {
entry.effectiveValue = newValue;
}
this._onPropertyChanged(property, currentValue, newValue);
}
};
DependencyObservable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var valueChanged = property.onValueChanged;
if (valueChanged) {
valueChanged({
object: this,
property: property,
eventName: observable_1.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
var propName = property.name;
if (this.hasListeners(observable_1.Observable.propertyChangeEvent)) {
var changeData = _super.prototype._createPropertyChangeData.call(this, propName, newValue);
this.notify(changeData);
}
var eventName = property.nameEvent;
if (this.hasListeners(eventName)) {
var ngChangedData = {
eventName: eventName,
propertyName: propName,
object: this,
value: newValue
};
this.notify(ngChangedData);
}
};
DependencyObservable.prototype._eachSetProperty = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (!callback(entry.property)) {
break;
}
}
};
DependencyObservable.prototype._eachSetPropertyValue = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (entry.valueSource === ValueSource.Default) {
continue;
}
if (!callback(entry.property, entry.effectiveValue)) {
break;
}
}
};
DependencyObservable.prototype.toString = function() {
return this.typeName;
};
DependencyObservable.prototype._setValueInternal = function(property, value, source) {
if (value === exports.unsetValue) {
this._resetValue(property, source);
return;
}
var wrapped = value && value.wrapped;
var realValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
var validate = property.onValidateValue;
if (validate && !validate(realValue)) {
throw new Error("Invalid value " + realValue + " for property " + property.name);
}
var converter = property.valueConverter;
if (converter && types.isString(realValue)) {
realValue = converter(realValue);
}
var entry = this._propertyEntries[property.id];
var currentValue;
if (!entry) {
entry = new PropertyEntry(property);
entry.effectiveValue = this._getDefaultValue(property);
this._propertyEntries[property.id] = entry;
}
currentValue = entry.effectiveValue;
switch (source) {
case ValueSource.Inherited:
entry.inheritedValue = realValue;
break;

case ValueSource.Css:
entry.cssValue = realValue;
break;

case ValueSource.Local:
entry.localValue = realValue;
break;

case ValueSource.VisualState:
entry.visualStateValue = realValue;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource > source) {
return;
} else if (currentValueSource < source) {
entry.valueSource = source;
}
if (wrapped || !property.equalityComparer(currentValue, realValue)) {
entry.effectiveValue = realValue;
this._onPropertyChanged(property, currentValue, realValue);
}
};
DependencyObservable.prototype.getEffectiveValueAndUpdateEntry = function(currentValueSource, entry, property) {
var newValue;
switch (currentValueSource) {
case ValueSource.Inherited:
newValue = property.defaultValue;
entry.valueSource = ValueSource.Default;
break;

case ValueSource.Css:
if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.Local:
if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.VisualState:
if (entry.localValue !== undefined) {
newValue = entry.localValue;
entry.valueSource = ValueSource.Local;
} else if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;
}
return newValue;
};
return DependencyObservable;
}(observable_1.Observable);
exports.DependencyObservable = DependencyObservable;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();
var TargetHandlerPair = function() {
function TargetHandlerPair(target, handler) {
this.tagetRef = new WeakRef(target);
this.handler = handler;
}
return TargetHandlerPair;
}();
function getHandlerForEventName(eventName) {
var handler = handlersForEventName.get(eventName);
if (!handler) {
handler = function(eventData) {
var source = eventData.object;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var deadPairsIndexes = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var target = pair.tagetRef.get();
if (target) {
pair.handler.call(target, eventData);
} else {
deadPairsIndexes.push(i);
}
}
if (deadPairsIndexes.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
sourceEventMap.delete(eventName);
} else {
for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(deadPairsIndexes[j], 1);
}
}
};
handlersForEventName.set(eventName, handler);
}
return handler;
}
function validateArgs(source, eventName, handler, target) {
if (types.isNullOrUndefined(source)) {
throw new Error("source is null or undefined");
}
if (types.isNullOrUndefined(target)) {
throw new Error("target is null or undefined");
}
if (!types.isString(eventName)) {
throw new Error("eventName is not a string");
}
if (!types.isFunction(handler)) {
throw new Error("handler is not a function");
}
}
function addWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var shouldAttach = false;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
sourceEventMap = new Map();
sourcesMap.set(source, sourceEventMap);
shouldAttach = true;
}
var pairList = sourceEventMap.get(eventName);
if (!pairList) {
pairList = new Array();
sourceEventMap.set(eventName, pairList);
shouldAttach = true;
}
pairList.push(new TargetHandlerPair(target, handler));
if (shouldAttach) {
source.addEventListener(eventName, getHandlerForEventName(eventName));
}
}
exports.addWeakEventListener = addWeakEventListener;
function removeWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var handlerForEventWithName = handlersForEventName.get(eventName);
if (!handlerForEventWithName) {
return;
}
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var targetHandlerPairsToRemove = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var registeredTarget = pair.tagetRef.get();
if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
targetHandlerPairsToRemove.push(i);
}
}
if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlerForEventWithName);
sourceEventMap.delete(eventName);
} else {
for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
}
}
}
exports.removeWeakEventListener = removeWeakEventListener;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
exports.enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
function enable() {
exports.enabled = true;
}
exports.enable = enable;
function disable() {
exports.enabled = false;
}
exports.disable = disable;
function isCategorySet(category) {
return category in _categories;
}
exports.isCategorySet = isCategorySet;
function addWriter(writer) {
_writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
var index = _writers.indexOf(writer);
if (index >= 0) {
_writers.splice(index, 1);
}
}
exports.removeWriter = removeWriter;
function clearWriters() {
if (_writers.length > 0) {
_writers.splice(0, _writers.length);
}
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
_categories = {};
addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
var split = categories.split(",");
for (var i = 0; i < split.length; i++) {
_categories[split[i].trim()] = true;
}
}
exports.addCategories = addCategories;
function write(message, category, type) {
var i;
if (type === messageType.error) {
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
if (!exports.enabled) {
return;
}
if (!(category in _categories)) {
return;
}
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
exports.write = write;
function notifyEvent(object, name, data) {
if (!exports.enabled) {
return;
}
var i, listener, filters;
for (i = 0; i < _eventListeners.length; i++) {
listener = _eventListeners[i];
if (listener.filter) {
filters = listener.filter.split(",");
filters.forEach(function(value) {
if (value.trim() === name) {
listener.on(object, name, data);
}
});
} else {
listener.on(object, name, data);
}
}
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
_eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
var index = _eventListeners.indexOf(listener);
if (index >= 0) {
_eventListeners.splice(index, 1);
}
}
exports.removeEventListener = removeEventListener;
var messageType;
(function(messageType) {
messageType.log = 0;
messageType.info = 1;
messageType.warn = 2;
messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function(categories) {
categories.VisualTreeEvents = "VisualTreeEvents";
categories.Layout = "Layout";
categories.Style = "Style";
categories.ViewHierarchy = "ViewHierarchy";
categories.NativeLifecycle = "NativeLifecycle";
categories.Debug = "Debug";
categories.Navigation = "Navigation";
categories.Test = "Test";
categories.Binding = "Binding";
categories.BindingError = "BindingError";
categories.Error = "Error";
categories.Animation = "Animation";
categories.Transition = "Transition";
categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
categories.separator = ",";
function concat() {
var i;
var result;
for (i = 0; i < arguments.length; i++) {
if (!result) {
result = arguments[i];
continue;
}
result = result.concat(categories.separator, arguments[i]);
}
return result;
}
categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = function() {
function ConsoleWriter() {}
ConsoleWriter.prototype.write = function(message, category, type) {
if (!console) {
return;
}
var msgType;
if (types.isUndefined(type)) {
msgType = messageType.log;
} else {
msgType = type;
}
switch (msgType) {
case messageType.log:
console.log(category + ": " + message);
break;

case messageType.info:
console.info(category + ": " + message);
break;

case messageType.warn:
console.warn(category + ": " + message);
break;

case messageType.error:
console.error(category + ": " + message);
break;
}
};
return ConsoleWriter;
}();
addWriter(new ConsoleWriter());
}, function(module, exports) {
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;
(function(bindingConstants) {
bindingConstants.sourceProperty = "sourceProperty";
bindingConstants.targetProperty = "targetProperty";
bindingConstants.expression = "expression";
bindingConstants.twoWay = "twoWay";
bindingConstants.source = "source";
bindingConstants.bindingValueKey = "$value";
bindingConstants.parentValueKey = "$parent";
bindingConstants.parentsValueKey = "$parents";
bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;
function isNamedParam(value) {
var equalSignIndex = value.search(hasEqualSignRegex);
if (equalSignIndex > -1) {
var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);
if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
return true;
}
}
return false;
}
function areNamedParams(params) {
var i;
for (i = 0; i < params.length; i++) {
if (isNamedParam(params[i])) {
return true;
}
}
return false;
}
var namedParamConstants = {
propName: "propName",
propValue: "propValue"
};
function getPropertyNameValuePair(param, knownOptions, callback) {
var nameValuePair = {};
var propertyName = param.substr(0, param.indexOf("=")).trim();
var propertyValue = param.substr(param.indexOf("=") + 1).trim();
if (knownOptions) {
if (!propertyName) {
propertyName = knownOptions.defaultProperty;
} else {
propertyName = propertyName in knownOptions ? propertyName : null;
}
}
if (propertyName) {
if (callback) {
nameValuePair = callback(propertyName, propertyValue);
} else {
nameValuePair[namedParamConstants.propName] = propertyName;
nameValuePair[namedParamConstants.propValue] = propertyValue;
}
return nameValuePair;
}
return null;
}
function parseNamedProperties(parameterList, knownOptions, callback) {
var result = {};
var i;
for (i = 0; i < parameterList.length; i++) {
var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);
if (nameValuePair) {
result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
}
}
return result;
}
function getParamsArray(value) {
var result = [];
var i;
var skipComma = 0;
var indexReached = 0;
var singleQuoteBlock, doubleQuoteBlock = false;
for (i = 0; i < value.length; i++) {
if (value[i] === '"') {
doubleQuoteBlock = !doubleQuoteBlock;
}
if (value[i] === "'") {
singleQuoteBlock = !singleQuoteBlock;
}
if (value[i] === "(" || value[i] === "[") {
skipComma++;
}
if (value[i] === ")" || value[i] === "]") {
skipComma--;
}
if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
result.push(value.substr(indexReached, i - indexReached));
indexReached = i + 1;
}
}
result.push(value.substr(indexReached));
return result;
}
function isExpression(expression) {
if (expression.search(expressionSymbolsRegex) > -1) {
var parentsMatches = expression.match(exports.parentsRegex);
if (parentsMatches) {
var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);
if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
return false;
}
}
return true;
}
return false;
}
function getBindingOptions(name, value) {
var namedParams = [];
var params = getParamsArray(value);
if (!areNamedParams(params)) {
if (params.length === 1) {
var trimmedValue = params[0].trim();
var sourceProp;
if (isExpression(trimmedValue)) {
sourceProp = bindingConstants.bindingValueKey;
namedParams.push(bindingConstants.expression + " = " + trimmedValue);
} else {
sourceProp = trimmedValue;
}
namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
namedParams.push(bindingConstants.twoWay + " = true");
} else {
namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
namedParams.push(bindingConstants.expression + " = " + params[1].trim());
var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
namedParams.push(bindingConstants.twoWay + " = " + twoWay);
}
} else {
namedParams = params;
}
var bindingPropertyHandler = function(prop, value) {
var result = {};
result[namedParamConstants.propName] = prop;
if (prop === bindingConstants.twoWay) {
if (value === "true") {
result[namedParamConstants.propValue] = true;
} else {
result[namedParamConstants.propValue] = false;
}
} else {
result[namedParamConstants.propValue] = value;
}
return result;
};
var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
var bindOptions = {
targetProperty: name
};
for (var prop in bindingOptionsParameters) {
if (bindingOptionsParameters.hasOwnProperty(prop)) {
bindOptions[prop] = bindingOptionsParameters[prop];
}
}
if (bindOptions[bindingConstants.twoWay] === undefined) {
bindOptions[bindingConstants.twoWay] = true;
}
return bindOptions;
}
exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
sourceProperty: true,
expression: true,
twoWay: true,
source: true,
defaultProperty: bindingConstants.sourceProperty
};
}, function(module, exports, __webpack_require__) {
var esprima = __webpack_require__(34).esprima;
var Path = __webpack_require__(35).Path;
(function(global) {
"use strict";
var expressionParseCache = Object.create(null);
function getExpression(expressionText) {
var expression = expressionParseCache[expressionText];
if (!expression) {
var delegate = new ASTDelegate();
esprima.parse(expressionText, delegate);
expression = new Expression(delegate);
expressionParseCache[expressionText] = expression;
}
return expression;
}
function Literal(value) {
this.value = value;
this.valueFn_ = undefined;
}
Literal.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var value = this.value;
this.valueFn_ = function() {
return value;
};
}
return this.valueFn_;
}
};
function IdentPath(name) {
this.name = name;
this.path = Path.get(name);
}
IdentPath.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var name = this.name;
var path = this.path;
this.valueFn_ = function(model, observer, changedModel) {
if (observer) observer.addPath(model, path);
if (changedModel) {
var result = path.getValueFrom(changedModel);
if (result !== undefined) {
return result;
}
}
return path.getValueFrom(model);
};
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.path.length == 1) {
model = findScope(model, this.path[0]);
}
return this.path.setValueFrom(model, newValue);
}
};
function MemberExpression(object, property, accessor) {
this.computed = accessor == "[";
this.dynamicDeps = typeof object == "function" || object.dynamicDeps || this.computed && !(property instanceof Literal);
this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
this.object = this.simplePath ? object : getFn(object);
this.property = !this.computed || this.simplePath ? property : getFn(property);
}
MemberExpression.prototype = {
get fullPath() {
if (!this.fullPath_) {
var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [ this.object.name ];
parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
this.fullPath_ = Path.get(parts);
}
return this.fullPath_;
},
valueFn: function() {
if (!this.valueFn_) {
var object = this.object;
if (this.simplePath) {
var path = this.fullPath;
this.valueFn_ = function(model, observer) {
if (observer) observer.addPath(model, path);
return path.getValueFrom(model);
};
} else if (!this.computed) {
var path = Path.get(this.property.name);
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
if (observer) observer.addPath(context, path);
return path.getValueFrom(context);
};
} else {
var property = this.property;
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
var propName = property(model, observer, filterRegistry);
if (observer) observer.addPath(context, [ propName ]);
return context ? context[propName] : undefined;
};
}
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.simplePath) {
this.fullPath.setValueFrom(model, newValue);
return newValue;
}
var object = this.object(model);
var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
return object[propName] = newValue;
}
};
function Filter(name, args) {
this.name = name;
this.args = [];
for (var i = 0; i < args.length; i++) {
this.args[i] = getFn(args[i]);
}
}
Filter.prototype = {
transform: function(model, observer, filterRegistry, toModelDirection, initialArgs) {
var fn = filterRegistry[this.name];
var context = model;
if (fn) {
context = undefined;
} else {
fn = context[this.name];
if (!fn) {
console.error("Cannot find function or filter: " + this.name);
return;
}
}
if (toModelDirection) {
fn = fn.toModel;
} else if (typeof fn.toView == "function") {
fn = fn.toView;
}
if (typeof fn != "function") {
console.error("Cannot find function or filter: " + this.name);
return;
}
var args = initialArgs || [];
for (var i = 0; i < this.args.length; i++) {
args.push(getFn(this.args[i])(model, observer, filterRegistry));
}
return fn.apply(context, args);
}
};
function notImplemented() {
throw Error("Not Implemented");
}
var unaryOperators = {
"+": function(v) {
return +v;
},
"-": function(v) {
return -v;
},
"!": function(v) {
return !v;
}
};
var binaryOperators = {
"+": function(l, r) {
return l + r;
},
"-": function(l, r) {
return l - r;
},
"*": function(l, r) {
return l * r;
},
"/": function(l, r) {
return l / r;
},
"%": function(l, r) {
return l % r;
},
"<": function(l, r) {
return l < r;
},
">": function(l, r) {
return l > r;
},
"<=": function(l, r) {
return l <= r;
},
">=": function(l, r) {
return l >= r;
},
"==": function(l, r) {
return l == r;
},
"!=": function(l, r) {
return l != r;
},
"===": function(l, r) {
return l === r;
},
"!==": function(l, r) {
return l !== r;
},
"&&": function(l, r) {
return l && r;
},
"||": function(l, r) {
return l || r;
}
};
function getFn(arg) {
return typeof arg == "function" ? arg : arg.valueFn();
}
function ASTDelegate() {
this.expression = null;
this.filters = [];
this.deps = {};
this.currentPath = undefined;
this.scopeIdent = undefined;
this.indexIdent = undefined;
this.dynamicDeps = false;
}
ASTDelegate.prototype = {
createUnaryExpression: function(op, argument) {
if (!unaryOperators[op]) throw Error("Disallowed operator: " + op);
argument = getFn(argument);
return function(model, observer, filterRegistry) {
return unaryOperators[op](argument(model, observer, filterRegistry));
};
},
createBinaryExpression: function(op, left, right) {
if (!binaryOperators[op]) throw Error("Disallowed operator: " + op);
left = getFn(left);
right = getFn(right);
switch (op) {
case "||":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
};

case "&&":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
};
}
return function(model, observer, filterRegistry) {
return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
};
},
createConditionalExpression: function(test, consequent, alternate) {
test = getFn(test);
consequent = getFn(consequent);
alternate = getFn(alternate);
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
};
},
createIdentifier: function(name) {
var ident = new IdentPath(name);
ident.type = "Identifier";
return ident;
},
createMemberExpression: function(accessor, object, property) {
var ex = new MemberExpression(object, property, accessor);
if (ex.dynamicDeps) this.dynamicDeps = true;
return ex;
},
createCallExpression: function(expression, args) {
if (!(expression instanceof IdentPath)) throw Error("Only identifier function invocations are allowed");
var filter = new Filter(expression.name, args);
return function(model, observer, filterRegistry) {
return filter.transform(model, observer, filterRegistry, false);
};
},
createLiteral: function(token) {
return new Literal(token.value);
},
createArrayExpression: function(elements) {
for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);
return function(model, observer, filterRegistry) {
var arr = [];
for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));
return arr;
};
},
createProperty: function(kind, key, value) {
return {
key: key instanceof IdentPath ? key.name : key.value,
value: value
};
},
createObjectExpression: function(properties) {
for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);
return function(model, observer, filterRegistry) {
var obj = {};
for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);
return obj;
};
},
createFilter: function(name, args) {
this.filters.push(new Filter(name, args));
},
createAsExpression: function(expression, scopeIdent) {
this.expression = expression;
this.scopeIdent = scopeIdent;
},
createInExpression: function(scopeIdent, indexIdent, expression) {
this.expression = expression;
this.scopeIdent = scopeIdent;
this.indexIdent = indexIdent;
},
createTopLevel: function(expression) {
this.expression = expression;
},
createThisExpression: notImplemented
};
function Expression(delegate) {
this.scopeIdent = delegate.scopeIdent;
this.indexIdent = delegate.indexIdent;
if (!delegate.expression) throw Error("No expression found.");
this.expression = delegate.expression;
getFn(this.expression);
this.filters = delegate.filters;
this.dynamicDeps = delegate.dynamicDeps;
}
Expression.prototype = {
getValue: function(model, isBackConvert, changedModel, observer) {
var value = getFn(this.expression)(model.context, observer, changedModel);
for (var i = 0; i < this.filters.length; i++) {
value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [ value ]);
}
return value;
},
setValue: function(model, newValue, filterRegistry) {
var count = this.filters ? this.filters.length : 0;
while (count-- > 0) {
newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [ newValue ]);
}
if (this.expression.setValue) return this.expression.setValue(model, newValue);
}
};
function convertStylePropertyName(name) {
return String(name).replace(/[A-Z]/g, function(c) {
return "-" + c.toLowerCase();
});
}
var parentScopeName = "@" + Math.random().toString(36).slice(2);
function findScope(model, prop) {
while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
model = model[parentScopeName];
}
return model;
}
function isLiteralExpression(pathString) {
switch (pathString) {
case "":
return false;

case "false":
case "null":
case "true":
return true;
}
if (!isNaN(Number(pathString))) return true;
return false;
}
function PolymerExpressions() {}
PolymerExpressions.prototype = {
styleObject: function(value) {
var parts = [];
for (var key in value) {
parts.push(convertStylePropertyName(key) + ": " + value[key]);
}
return parts.join("; ");
},
tokenList: function(value) {
var tokens = [];
for (var key in value) {
if (value[key]) tokens.push(key);
}
return tokens.join(" ");
},
prepareInstancePositionChanged: function(template) {
var indexIdent = template.polymerExpressionIndexIdent_;
if (!indexIdent) return;
return function(templateInstance, index) {
templateInstance.model[indexIdent] = index;
};
},
prepareInstanceModel: function(template) {
var scopeName = template.polymerExpressionScopeIdent_;
if (!scopeName) return;
var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
var indexName = template.polymerExpressionIndexIdent_;
return function(model) {
return createScopeObject(parentScope, model, scopeName, indexName);
};
}
};
var createScopeObject = "__proto__" in {} ? function(parentScope, model, scopeName, indexName) {
var scope = {};
scope[scopeName] = model;
scope[indexName] = undefined;
scope[parentScopeName] = parentScope;
scope.__proto__ = parentScope;
return scope;
} : function(parentScope, model, scopeName, indexName) {
var scope = Object.create(parentScope);
Object.defineProperty(scope, scopeName, {
value: model,
configurable: true,
writable: true
});
Object.defineProperty(scope, indexName, {
value: undefined,
configurable: true,
writable: true
});
Object.defineProperty(scope, parentScopeName, {
value: parentScope,
configurable: true,
writable: true
});
return scope;
};
global.PolymerExpressions = PolymerExpressions;
PolymerExpressions.getExpression = getExpression;
})(module.exports);
}, function(module, exports) {
(function(global) {
"use strict";
var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
Token = {
BooleanLiteral: 1,
EOF: 2,
Identifier: 3,
Keyword: 4,
NullLiteral: 5,
NumericLiteral: 6,
Punctuator: 7,
StringLiteral: 8
};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {
ArrayExpression: "ArrayExpression",
BinaryExpression: "BinaryExpression",
CallExpression: "CallExpression",
ConditionalExpression: "ConditionalExpression",
EmptyStatement: "EmptyStatement",
ExpressionStatement: "ExpressionStatement",
Identifier: "Identifier",
Literal: "Literal",
LabeledStatement: "LabeledStatement",
LogicalExpression: "LogicalExpression",
MemberExpression: "MemberExpression",
ObjectExpression: "ObjectExpression",
Program: "Program",
Property: "Property",
ThisExpression: "ThisExpression",
UnaryExpression: "UnaryExpression"
};
Messages = {
UnexpectedToken: "Unexpected token %0",
UnknownLabel: "Undefined label '%0'",
Redeclaration: "%0 '%1' has already been declared"
};
function assert(condition, message) {
if (!condition) {
throw new Error("ASSERT: " + message);
}
}
function isDecimalDigit(ch) {
return ch >= 48 && ch <= 57;
}
function isWhiteSpace(ch) {
return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && " ᠎             　\ufeff".indexOf(String.fromCharCode(ch)) > 0;
}
function isLineTerminator(ch) {
return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
}
function isIdentifierStart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
function isIdentifierPart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57;
}
function isKeyword(id) {
return id === "this";
}
function skipWhitespace() {
while (index < length && isWhiteSpace(source.charCodeAt(index))) {
++index;
}
}
function getIdentifier() {
var start, ch;
start = index++;
while (index < length) {
ch = source.charCodeAt(index);
if (isIdentifierPart(ch)) {
++index;
} else {
break;
}
}
return source.slice(start, index);
}
function scanIdentifier() {
var start, id, type;
start = index;
id = getIdentifier();
if (id.length === 1) {
type = Token.Identifier;
} else if (isKeyword(id)) {
type = Token.Keyword;
} else if (id === "null") {
type = Token.NullLiteral;
} else if (id === "true" || id === "false") {
type = Token.BooleanLiteral;
} else {
type = Token.Identifier;
}
return {
type: type,
value: id,
range: [ start, index ]
};
}
function scanPunctuator() {
var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2;
switch (code) {
case 46:
case 40:
case 41:
case 59:
case 44:
case 123:
case 125:
case 91:
case 93:
case 58:
case 63:
++index;
return {
type: Token.Punctuator,
value: String.fromCharCode(code),
range: [ start, index ]
};

default:
code2 = source.charCodeAt(index + 1);
if (code2 === 61) {
switch (code) {
case 37:
case 38:
case 42:
case 43:
case 45:
case 47:
case 60:
case 62:
case 124:
index += 2;
return {
type: Token.Punctuator,
value: String.fromCharCode(code) + String.fromCharCode(code2),
range: [ start, index ]
};

case 33:
case 61:
index += 2;
if (source.charCodeAt(index) === 61) {
++index;
}
return {
type: Token.Punctuator,
value: source.slice(start, index),
range: [ start, index ]
};

default:
break;
}
}
break;
}
ch2 = source[index + 1];
if (ch1 === ch2 && "&|".indexOf(ch1) >= 0) {
index += 2;
return {
type: Token.Punctuator,
value: ch1 + ch2,
range: [ start, index ]
};
}
if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
++index;
return {
type: Token.Punctuator,
value: ch1,
range: [ start, index ]
};
}
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
function scanNumericLiteral() {
var number, start, ch;
ch = source[index];
assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
start = index;
number = "";
if (ch !== ".") {
number = source[index++];
ch = source[index];
if (number === "0") {
if (ch && isDecimalDigit(ch.charCodeAt(0))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === ".") {
number += source[index++];
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === "e" || ch === "E") {
number += source[index++];
ch = source[index];
if (ch === "+" || ch === "-") {
number += source[index++];
}
if (isDecimalDigit(source.charCodeAt(index))) {
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
} else {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
if (isIdentifierStart(source.charCodeAt(index))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.NumericLiteral,
value: parseFloat(number),
range: [ start, index ]
};
}
function scanStringLiteral() {
var str = "", quote, start, ch, octal = false;
quote = source[index];
assert(quote === "'" || quote === '"', "String literal must starts with a quote");
start = index;
++index;
while (index < length) {
ch = source[index++];
if (ch === quote) {
quote = "";
break;
} else if (ch === "\\") {
ch = source[index++];
if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
switch (ch) {
case "n":
str += "\n";
break;

case "r":
str += "\r";
break;

case "t":
str += "\t";
break;

case "b":
str += "\b";
break;

case "f":
str += "\f";
break;

case "v":
str += "\v";
break;

default:
str += ch;
break;
}
} else {
if (ch === "\r" && source[index] === "\n") {
++index;
}
}
} else if (isLineTerminator(ch.charCodeAt(0))) {
break;
} else {
str += ch;
}
}
if (quote !== "") {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.StringLiteral,
value: str,
octal: octal,
range: [ start, index ]
};
}
function isIdentifierName(token) {
return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
}
function advance() {
var ch;
skipWhitespace();
if (index >= length) {
return {
type: Token.EOF,
range: [ index, index ]
};
}
ch = source.charCodeAt(index);
if (ch === 40 || ch === 41 || ch === 58) {
return scanPunctuator();
}
if (ch === 39 || ch === 34) {
return scanStringLiteral();
}
if (isIdentifierStart(ch)) {
return scanIdentifier();
}
if (ch === 46) {
if (isDecimalDigit(source.charCodeAt(index + 1))) {
return scanNumericLiteral();
}
return scanPunctuator();
}
if (isDecimalDigit(ch)) {
return scanNumericLiteral();
}
return scanPunctuator();
}
function lex() {
var token;
token = lookahead;
index = token.range[1];
lookahead = advance();
index = token.range[1];
return token;
}
function peek() {
var pos;
pos = index;
lookahead = advance();
index = pos;
}
function throwError(token, messageFormat) {
var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
assert(index < args.length, "Message reference must be in range");
return args[index];
});
error = new Error(msg);
error.index = index;
error.description = msg;
throw error;
}
function throwUnexpected(token) {
throwError(token, Messages.UnexpectedToken, token.value);
}
function expect(value) {
var token = lex();
if (token.type !== Token.Punctuator || token.value !== value) {
throwUnexpected(token);
}
}
function match(value) {
return lookahead.type === Token.Punctuator && lookahead.value === value;
}
function matchKeyword(keyword) {
return lookahead.type === Token.Keyword && lookahead.value === keyword;
}
function consumeSemicolon() {
if (source.charCodeAt(index) === 59) {
lex();
return;
}
skipWhitespace();
if (match(";")) {
lex();
return;
}
if (lookahead.type !== Token.EOF && !match("}")) {
throwUnexpected(lookahead);
}
}
function parseArrayInitialiser() {
var elements = [];
expect("[");
while (!match("]")) {
if (match(",")) {
lex();
elements.push(null);
} else {
elements.push(parseExpression());
if (!match("]")) {
expect(",");
}
}
}
expect("]");
return delegate.createArrayExpression(elements);
}
function parseObjectPropertyKey() {
var token;
skipWhitespace();
token = lex();
if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
return delegate.createLiteral(token);
}
return delegate.createIdentifier(token.value);
}
function parseObjectProperty() {
var token, key;
token = lookahead;
skipWhitespace();
if (token.type === Token.EOF || token.type === Token.Punctuator) {
throwUnexpected(token);
}
key = parseObjectPropertyKey();
expect(":");
return delegate.createProperty("init", key, parseExpression());
}
function parseObjectInitialiser() {
var properties = [];
expect("{");
while (!match("}")) {
properties.push(parseObjectProperty());
if (!match("}")) {
expect(",");
}
}
expect("}");
return delegate.createObjectExpression(properties);
}
function parseGroupExpression() {
var expr;
expect("(");
expr = parseExpression();
expect(")");
return expr;
}
function parsePrimaryExpression() {
var type, token, expr;
if (match("(")) {
return parseGroupExpression();
}
type = lookahead.type;
if (type === Token.Identifier) {
expr = delegate.createIdentifier(lex().value);
} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
expr = delegate.createLiteral(lex());
} else if (type === Token.Keyword) {
if (matchKeyword("this")) {
lex();
expr = delegate.createThisExpression();
}
} else if (type === Token.BooleanLiteral) {
token = lex();
token.value = token.value === "true";
expr = delegate.createLiteral(token);
} else if (type === Token.NullLiteral) {
token = lex();
token.value = null;
expr = delegate.createLiteral(token);
} else if (match("[")) {
expr = parseArrayInitialiser();
} else if (match("{")) {
expr = parseObjectInitialiser();
}
if (expr) {
return expr;
}
throwUnexpected(lex());
}
function parseArguments() {
var args = [];
expect("(");
if (!match(")")) {
while (index < length) {
args.push(parseExpression());
if (match(")")) {
break;
}
expect(",");
}
}
expect(")");
return args;
}
function parseNonComputedProperty() {
var token;
token = lex();
if (!isIdentifierName(token)) {
throwUnexpected(token);
}
return delegate.createIdentifier(token.value);
}
function parseNonComputedMember() {
expect(".");
return parseNonComputedProperty();
}
function parseComputedMember() {
var expr;
expect("[");
expr = parseExpression();
expect("]");
return expr;
}
function parseLeftHandSideExpression() {
var expr, args, property;
expr = parsePrimaryExpression();
while (true) {
if (match("[")) {
property = parseComputedMember();
expr = delegate.createMemberExpression("[", expr, property);
} else if (match(".")) {
property = parseNonComputedMember();
expr = delegate.createMemberExpression(".", expr, property);
} else if (match("(")) {
args = parseArguments();
expr = delegate.createCallExpression(expr, args);
} else {
break;
}
}
return expr;
}
var parsePostfixExpression = parseLeftHandSideExpression;
function parseUnaryExpression() {
var token, expr;
if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
expr = parsePostfixExpression();
} else if (match("+") || match("-") || match("!")) {
token = lex();
expr = parseUnaryExpression();
expr = delegate.createUnaryExpression(token.value, expr);
} else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
throwError({}, Messages.UnexpectedToken);
} else {
expr = parsePostfixExpression();
}
return expr;
}
function binaryPrecedence(token) {
var prec = 0;
if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
return 0;
}
switch (token.value) {
case "||":
prec = 1;
break;

case "&&":
prec = 2;
break;

case "==":
case "!=":
case "===":
case "!==":
prec = 6;
break;

case "<":
case ">":
case "<=":
case ">=":
case "instanceof":
prec = 7;
break;

case "in":
prec = 7;
break;

case "+":
case "-":
prec = 9;
break;

case "*":
case "/":
case "%":
prec = 11;
break;

default:
break;
}
return prec;
}
function parseBinaryExpression() {
var expr, token, prec, stack, right, operator, left, i;
left = parseUnaryExpression();
token = lookahead;
prec = binaryPrecedence(token);
if (prec === 0) {
return left;
}
token.prec = prec;
lex();
right = parseUnaryExpression();
stack = [ left, token, right ];
while ((prec = binaryPrecedence(lookahead)) > 0) {
while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
right = stack.pop();
operator = stack.pop().value;
left = stack.pop();
expr = delegate.createBinaryExpression(operator, left, right);
stack.push(expr);
}
token = lex();
token.prec = prec;
stack.push(token);
expr = parseUnaryExpression();
stack.push(expr);
}
i = stack.length - 1;
expr = stack[i];
while (i > 1) {
expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
i -= 2;
}
return expr;
}
function parseConditionalExpression() {
var expr, consequent, alternate;
expr = parseBinaryExpression();
if (match("?")) {
lex();
consequent = parseConditionalExpression();
expect(":");
alternate = parseConditionalExpression();
expr = delegate.createConditionalExpression(expr, consequent, alternate);
}
return expr;
}
var parseExpression = parseConditionalExpression;
function parseFilter() {
var identifier, args;
identifier = lex();
if (identifier.type !== Token.Identifier) {
throwUnexpected(identifier);
}
args = match("(") ? parseArguments() : [];
return delegate.createFilter(identifier.value, args);
}
function parseFilters() {
while (match("|")) {
lex();
parseFilter();
}
}
function parseTopLevel() {
skipWhitespace();
peek();
var expr = parseExpression();
if (expr) {
if (lookahead.value === "," || lookahead.value == "in" && expr.type === Syntax.Identifier) {
parseInExpression(expr);
} else {
parseFilters();
if (lookahead.value === "as") {
parseAsExpression(expr);
} else {
delegate.createTopLevel(expr);
}
}
}
if (lookahead.type !== Token.EOF) {
throwUnexpected(lookahead);
}
}
function parseAsExpression(expr) {
lex();
var identifier = lex().value;
delegate.createAsExpression(expr, identifier);
}
function parseInExpression(identifier) {
var indexName;
if (lookahead.value === ",") {
lex();
if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
indexName = lex().value;
}
lex();
var expr = parseExpression();
parseFilters();
delegate.createInExpression(identifier.name, indexName, expr);
}
function parse(code, inDelegate) {
delegate = inDelegate;
source = code;
index = 0;
length = source.length;
lookahead = null;
state = {
labelSet: {}
};
return parseTopLevel();
}
global.esprima = {
parse: parse
};
})(module.exports);
}, function(module, exports) {
"use strict";
function detectEval() {
if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
return false;
}
if (typeof navigator != "undefined" && navigator.getDeviceStorage) {
return false;
}
try {
var f = new Function("", "return true;");
return f();
} catch (ex) {
return false;
}
}
var hasEval = detectEval();
function isIndex(s) {
return +s === s >>> 0 && s !== "";
}
function toNumber(s) {
return +s;
}
function isObject(obj) {
return obj === Object(obj);
}
var numberIsNaN = Number.isNaN || function(value) {
return typeof value === "number" && isNaN(value);
};
function areSameValue(left, right) {
if (left === right) return left !== 0 || 1 / left === 1 / right;
if (numberIsNaN(left) && numberIsNaN(right)) return true;
return left !== left && right !== right;
}
var createObject = "__proto__" in {} ? function(obj) {
return obj;
} : function(obj) {
var proto = obj.__proto__;
if (!proto) return obj;
var newObject = Object.create(proto);
Object.getOwnPropertyNames(obj).forEach(function(name) {
Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
});
return newObject;
};
var identStart = "[$_a-zA-Z]";
var identPart = "[$_a-zA-Z0-9]";
var identRegExp = new RegExp("^" + identStart + "+" + identPart + "*" + "$");
function getPathCharType(char) {
if (char === undefined) return "eof";
var code = char.charCodeAt(0);
switch (code) {
case 91:
case 93:
case 46:
case 34:
case 39:
case 48:
return char;

case 95:
case 36:
return "ident";

case 32:
case 9:
case 10:
case 13:
case 160:
case 65279:
case 8232:
case 8233:
return "ws";
}
if (97 <= code && code <= 122 || 65 <= code && code <= 90) return "ident";
if (49 <= code && code <= 57) return "number";
return "else";
}
var pathStateMachine = {
beforePath: {
ws: [ "beforePath" ],
ident: [ "inIdent", "append" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
inPath: {
ws: [ "inPath" ],
".": [ "beforeIdent" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
beforeIdent: {
ws: [ "beforeIdent" ],
ident: [ "inIdent", "append" ]
},
inIdent: {
ident: [ "inIdent", "append" ],
0: [ "inIdent", "append" ],
number: [ "inIdent", "append" ],
ws: [ "inPath", "push" ],
".": [ "beforeIdent", "push" ],
"[": [ "beforeElement", "push" ],
eof: [ "afterPath", "push" ]
},
beforeElement: {
ws: [ "beforeElement" ],
0: [ "afterZero", "append" ],
number: [ "inIndex", "append" ],
"'": [ "inSingleQuote", "append", "" ],
'"': [ "inDoubleQuote", "append", "" ]
},
afterZero: {
ws: [ "afterElement", "push" ],
"]": [ "inPath", "push" ]
},
inIndex: {
0: [ "inIndex", "append" ],
number: [ "inIndex", "append" ],
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
},
inSingleQuote: {
"'": [ "afterElement" ],
eof: [ "error" ],
else: [ "inSingleQuote", "append" ]
},
inDoubleQuote: {
'"': [ "afterElement" ],
eof: [ "error" ],
else: [ "inDoubleQuote", "append" ]
},
afterElement: {
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
}
};
function noop() {}
function parsePath(path) {
var keys = [];
var index = -1;
var c, newChar, key, type, transition, action, typeMap, mode = "beforePath";
var actions = {
push: function() {
if (key === undefined) return;
keys.push(key);
key = undefined;
},
append: function() {
if (key === undefined) key = newChar; else key += newChar;
}
};
function maybeUnescapeQuote() {
if (index >= path.length) return;
var nextChar = path[index + 1];
if (mode == "inSingleQuote" && nextChar == "'" || mode == "inDoubleQuote" && nextChar == '"') {
index++;
newChar = nextChar;
actions.append();
return true;
}
}
while (mode) {
index++;
c = path[index];
if (c == "\\" && maybeUnescapeQuote(mode)) continue;
type = getPathCharType(c);
typeMap = pathStateMachine[mode];
transition = typeMap[type] || typeMap["else"] || "error";
if (transition == "error") return;
mode = transition[0];
action = actions[transition[1]] || noop;
newChar = transition[2] === undefined ? c : transition[2];
action();
if (mode === "afterPath") {
return keys;
}
}
return;
}
function isIdent(s) {
return identRegExp.test(s);
}
var constructorIsPrivate = {};
function Path(parts, privateToken) {
if (privateToken !== constructorIsPrivate) throw Error("Use Path.get to retrieve path objects");
for (var i = 0; i < parts.length; i++) {
this.push(String(parts[i]));
}
if (hasEval && this.length) {
this.getValueFrom = this.compiledGetValueFromFn();
}
}
var pathCache = {};
function getPath(pathString) {
if (pathString instanceof Path) return pathString;
if (pathString == null || pathString.length == 0) pathString = "";
if (typeof pathString != "string") {
if (isIndex(pathString.length)) {
return new Path(pathString, constructorIsPrivate);
}
pathString = String(pathString);
}
var path = pathCache[pathString];
if (path) return path;
var parts = parsePath(pathString);
if (!parts) return invalidPath;
var path = new Path(parts, constructorIsPrivate);
pathCache[pathString] = path;
return path;
}
Path.get = getPath;
function formatAccessor(key) {
if (isIndex(key)) {
return "[" + key + "]";
} else {
return '["' + key.replace(/"/g, '\\"') + '"]';
}
}
Path.prototype = createObject({
__proto__: [],
valid: true,
toString: function() {
var pathString = "";
for (var i = 0; i < this.length; i++) {
var key = this[i];
if (isIdent(key)) {
pathString += i ? "." + key : key;
} else {
pathString += formatAccessor(key);
}
}
return pathString;
},
getValueFrom: function(obj, directObserver) {
for (var i = 0; i < this.length; i++) {
if (obj == null) return;
obj = obj[this[i]];
}
return obj;
},
iterateObjects: function(obj, observe) {
for (var i = 0; i < this.length; i++) {
if (i) obj = obj[this[i - 1]];
if (!isObject(obj)) return;
observe(obj, this[i]);
}
},
compiledGetValueFromFn: function() {
var str = "";
var pathString = "obj";
str += "if (obj != null";
var i = 0;
var key;
for (;i < this.length - 1; i++) {
key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += " &&\n     " + pathString + " != null";
}
str += ")\n";
var key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += "  return " + pathString + ";\nelse\n  return undefined;";
return new Function("obj", str);
},
setValueFrom: function(obj, value) {
if (!this.length) return false;
for (var i = 0; i < this.length - 1; i++) {
if (!isObject(obj)) return false;
obj = obj[this[i]];
}
if (!isObject(obj)) return false;
obj[this[i]] = value;
return true;
}
});
var invalidPath = new Path("", constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};
exports.Path = Path;
}, function(module, exports) {
var specialProperties = new Map();
function specialPropertyKey(name) {
return name.toLowerCase();
}
function registerSpecialProperty(name, setter) {
var propertyKey = specialPropertyKey(name);
if (specialProperties.has(propertyKey)) {
throw new Error("Property for " + propertyKey + " already registered");
} else {
specialProperties.set(propertyKey, setter);
}
}
exports.registerSpecialProperty = registerSpecialProperty;
function getSpecialPropertySetter(name) {
var propertyKey = specialPropertyKey(name);
return specialProperties.get(propertyKey);
}
exports.getSpecialPropertySetter = getSpecialPropertySetter;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(38);
var enums = __webpack_require__(39);
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(31);
}
}
var layout;
(function(layout) {
var density = -1;
var metrics;
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
var sdkVersion = -1;
var useOldMeasureSpec = false;
function makeMeasureSpec(size, mode) {
if (sdkVersion === -1) {
sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
}
if (useOldMeasureSpec) {
return size + mode;
}
return size & ~MODE_MASK | mode & MODE_MASK;
}
layout.makeMeasureSpec = makeMeasureSpec;
function getDisplayMetrics() {
if (!metrics) {
metrics = ad.getApplicationContext().getResources().getDisplayMetrics();
}
return metrics;
}
layout.getDisplayMetrics = getDisplayMetrics;
function getDisplayDensity() {
if (density === -1) {
density = getDisplayMetrics().density;
}
return density;
}
layout.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
return value * getDisplayDensity();
}
layout.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
return value / getDisplayDensity();
}
layout.toDeviceIndependentPixels = toDeviceIndependentPixels;
})(layout = exports.layout || (exports.layout = {}));
var ad;
(function(ad) {
function setTextDecoration(view, value) {
var flags = 0;
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.underline) !== -1) {
flags = flags | android.graphics.Paint.UNDERLINE_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
flags = flags | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.none) === -1) {
view.setPaintFlags(flags);
} else {
view.setPaintFlags(0);
}
}
ad.setTextDecoration = setTextDecoration;
function setTextTransform(v, value) {
var view = v._nativeView;
var str = view.getText() + "";
var result = getTransformedString(value, view, str);
if (v.formattedText) {
for (var i = 0; i < v.formattedText.spans.length; i++) {
var span = v.formattedText.spans.getItem(i);
span.text = getTransformedString(value, view, span.text);
}
} else {
view.setText(result);
}
}
ad.setTextTransform = setTextTransform;
function getTransformedString(textTransform, view, stringToTransform) {
var result;
switch (textTransform) {
case enums.TextTransform.none:
default:
result = view["originalString"] || stringToTransform;
if (view["transformationMethod"]) {
view.setTransformationMethod(view["transformationMethod"]);
}
break;

case enums.TextTransform.uppercase:
view.setTransformationMethod(null);
result = stringToTransform.toUpperCase();
break;

case enums.TextTransform.lowercase:
view.setTransformationMethod(null);
result = stringToTransform.toLowerCase();
break;

case enums.TextTransform.capitalize:
view.setTransformationMethod(null);
result = getCapitalizedString(stringToTransform);
break;
}
if (!view["originalString"]) {
view["originalString"] = stringToTransform;
view["transformationMethod"] = view.getTransformationMethod();
}
return result;
}
ad.getTransformedString = getTransformedString;
function getCapitalizedString(str) {
var words = str.split(" ");
var newWords = [];
for (var i = 0; i < words.length; i++) {
var word = words[i].toLowerCase();
newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
}
return newWords.join(" ");
}
function setWhiteSpace(view, value) {
view.setSingleLine(value === enums.WhiteSpace.nowrap);
view.setEllipsize(value === enums.WhiteSpace.nowrap ? android.text.TextUtils.TruncateAt.END : null);
}
ad.setWhiteSpace = setWhiteSpace;
var nativeApp;
function getApplication() {
if (!nativeApp) {
if (com.tns.NativeScriptApplication) {
nativeApp = com.tns.NativeScriptApplication.getInstance();
}
if (!nativeApp) {
var application = __webpack_require__(16);
nativeApp = application.android.nativeApp;
if (!nativeApp) {
var clazz = java.lang.Class.forName("android.app.ActivityThread");
if (clazz) {
var method = clazz.getMethod("currentApplication", null);
if (method) {
nativeApp = method.invoke(null, null);
}
}
}
}
if (!nativeApp) {
throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.");
}
}
return nativeApp;
}
ad.getApplication = getApplication;
function getApplicationContext() {
var app = getApplication();
return app.getApplicationContext();
}
ad.getApplicationContext = getApplicationContext;
var inputMethodManager;
function getInputMethodManager() {
if (!inputMethodManager) {
inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
}
return inputMethodManager;
}
ad.getInputMethodManager = getInputMethodManager;
function showSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
}
}
ad.showSoftInput = showSoftInput;
function dismissSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.hideSoftInputFromWindow(nativeView.getWindowToken(), 0);
}
}
ad.dismissSoftInput = dismissSoftInput;
var collections;
(function(collections) {
function stringArrayToStringSet(str) {
var hashSet = new java.util.HashSet();
if ("undefined" !== typeof str) {
for (var element in str) {
hashSet.add("" + str[element]);
}
}
return hashSet;
}
collections.stringArrayToStringSet = stringArrayToStringSet;
function stringSetToStringArray(stringSet) {
var arr = [];
if ("undefined" !== typeof stringSet) {
var it = stringSet.iterator();
while (it.hasNext()) {
var element = "" + it.next();
arr.push(element);
}
}
return arr;
}
collections.stringSetToStringArray = stringSetToStringArray;
})(collections = ad.collections || (ad.collections = {}));
var resources;
(function(resources_1) {
var attr;
var attrCache = new Map();
function getDrawableId(name) {
return getId(":drawable/" + name);
}
resources_1.getDrawableId = getDrawableId;
function getStringId(name) {
return getId(":string/" + name);
}
resources_1.getStringId = getStringId;
function getId(name) {
var resources = getApplicationContext().getResources();
var packageName = getApplicationContext().getPackageName();
var uri = packageName + name;
return resources.getIdentifier(uri, null, null);
}
resources_1.getId = getId;
function getPalleteColor(name, context) {
if (attrCache.has(name)) {
return attrCache.get(name);
}
var result = 0;
try {
if (!attr) {
attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
}
var colorID = 0;
var field = attr.getField(name);
if (field) {
colorID = field.getInt(null);
}
if (colorID) {
var typedValue = new android.util.TypedValue();
context.getTheme().resolveAttribute(colorID, typedValue, true);
result = typedValue.data;
}
} catch (ex) {
ensureTrace();
trace.write("Cannot get pallete color: " + name, trace.categories.Error, trace.messageType.error);
}
attrCache.set(name, result);
return result;
}
resources_1.getPalleteColor = getPalleteColor;
})(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));
function GC() {
gc();
}
exports.GC = GC;
function openUrl(location) {
var context = ad.getApplicationContext();
try {
var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
} catch (e) {
ensureTrace();
trace.write("Error in OpenURL", trace.categories.Error, trace.messageType.error);
return false;
}
return true;
}
exports.openUrl = openUrl;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
exports.RESOURCE_PREFIX = "res://";
function copyFrom(source, target) {
if (types.isDefined(source) && types.isDefined(target)) {
var i;
var key;
var value;
var keys = Object.keys(source);
for (i = 0; i < keys.length; i++) {
key = keys[i];
value = source[key];
if (types.isDefined(value)) {
target[key] = value;
}
}
}
}
exports.copyFrom = copyFrom;
function parseJSON(source) {
var src = source.trim();
if (src.lastIndexOf(")") === src.length - 1) {
return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
}
return JSON.parse(src);
}
exports.parseJSON = parseJSON;
function escapeRegexSymbols(source) {
var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
function convertString(value) {
var result;
if (!types.isString(value)) {
result = value;
} else if (value.trim() === "") {
result = value;
} else {
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
result = valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
result = value.toLowerCase() === "true" ? true : false;
} else {
result = value;
}
}
return result;
}
exports.convertString = convertString;
var layout;
(function(layout) {
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
layout.UNSPECIFIED = 0 << MODE_SHIFT;
layout.EXACTLY = 1 << MODE_SHIFT;
layout.AT_MOST = 2 << MODE_SHIFT;
layout.MEASURED_HEIGHT_STATE_SHIFT = 16;
layout.MEASURED_STATE_TOO_SMALL = 16777216;
layout.MEASURED_STATE_MASK = 4278190080;
layout.MEASURED_SIZE_MASK = 16777215;
function getMode(mode) {
switch (mode) {
case layout.EXACTLY:
return "Exact";

case layout.AT_MOST:
return "AtMost";

default:
return "Unspecified";
}
}
layout.getMode = getMode;
function getMeasureSpecMode(spec) {
return spec & MODE_MASK;
}
layout.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
return spec & ~MODE_MASK;
}
layout.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
var mode = getMeasureSpecMode(measureSpec);
var size = getMeasureSpecSize(measureSpec);
var text = "MeasureSpec: ";
if (mode === layout.UNSPECIFIED) {
text += "UNSPECIFIED ";
} else if (mode === layout.EXACTLY) {
text += "EXACTLY ";
} else if (mode === layout.AT_MOST) {
text += "AT_MOST ";
} else {
text += mode + " ";
}
text += size;
return text;
}
layout.measureSpecToString = measureSpecToString;
})(layout = exports.layout || (exports.layout = {}));
function isFileOrResourcePath(path) {
if (!types.isString(path)) {
return false;
}
return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isDataURI(uri) {
if (!types.isString(uri)) {
return false;
}
var firstSegment = uri.trim().split(",")[0];
return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
function mergeSort(arr, compareFunc) {
if (arr.length < 2) {
return arr;
}
var middle = arr.length / 2;
var left = arr.slice(0, middle);
var right = arr.slice(middle, arr.length);
return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}
exports.mergeSort = mergeSort;
function merge(left, right, compareFunc) {
var result = [];
while (left.length && right.length) {
if (compareFunc(left[0], right[0]) <= 0) {
result.push(left.shift());
} else {
result.push(right.shift());
}
}
while (left.length) {
result.push(left.shift());
}
while (right.length) {
result.push(right.shift());
}
return result;
}
exports.merge = merge;
}, function(module, exports, __webpack_require__) {
var KeyboardType;
(function(KeyboardType) {
KeyboardType.datetime = "datetime";
KeyboardType.phone = "phone";
KeyboardType.number = "number";
KeyboardType.url = "url";
KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function(ReturnKeyType) {
ReturnKeyType.done = "done";
ReturnKeyType.next = "next";
ReturnKeyType.go = "go";
ReturnKeyType.search = "search";
ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function(TextAlignment) {
TextAlignment.left = "left";
TextAlignment.center = "center";
TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function(TextDecoration) {
TextDecoration.none = "none";
TextDecoration.underline = "underline";
TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function(TextTransform) {
TextTransform.none = "none";
TextTransform.capitalize = "capitalize";
TextTransform.uppercase = "uppercase";
TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function(WhiteSpace) {
WhiteSpace.normal = "normal";
WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function(Orientation) {
Orientation.horizontal = "horizontal";
Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function(DeviceOrientation) {
DeviceOrientation.portrait = "portrait";
DeviceOrientation.landscape = "landscape";
DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.left = "left";
HorizontalAlignment.center = "center";
HorizontalAlignment.right = "right";
HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.top = "top";
VerticalAlignment.center = "center";
VerticalAlignment.middle = "middle";
VerticalAlignment.bottom = "bottom";
VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function(Stretch) {
Stretch.none = "none";
Stretch.aspectFill = "aspectFill";
Stretch.aspectFit = "aspectFit";
Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function(Visibility) {
Visibility.visible = "visible";
Visibility.collapse = "collapse";
Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function(FontAttributes) {
FontAttributes.Normal = 0;
FontAttributes.Bold = 1;
FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function(DeviceType) {
DeviceType.Phone = "Phone";
DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function(UpdateTextTrigger) {
UpdateTextTrigger.focusLost = "focusLost";
UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function(Accuracy) {
Accuracy.any = 300;
Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function(Dock) {
Dock.left = "left";
Dock.top = "top";
Dock.right = "right";
Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function(AutocapitalizationType) {
AutocapitalizationType.none = "none";
AutocapitalizationType.words = "words";
AutocapitalizationType.sentences = "sentences";
AutocapitalizationType.allCharacters = "allCharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function(NavigationBarVisibility) {
NavigationBarVisibility.auto = "auto";
NavigationBarVisibility.never = "never";
NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function(AndroidActionBarIconVisibility) {
AndroidActionBarIconVisibility.auto = "auto";
AndroidActionBarIconVisibility.never = "never";
AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function(AndroidActionItemPosition) {
AndroidActionItemPosition.actionBar = "actionBar";
AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function(IOSActionItemPosition) {
IOSActionItemPosition.left = "left";
IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function(ImageFormat) {
ImageFormat.png = "png";
ImageFormat.jpeg = "jpeg";
ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function(FontStyle) {
FontStyle.normal = "normal";
FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.thin = "100";
FontWeight.extraLight = "200";
FontWeight.light = "300";
FontWeight.normal = "normal";
FontWeight.medium = "500";
FontWeight.semiBold = "600";
FontWeight.bold = "bold";
FontWeight.extraBold = "800";
FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.repeat = "repeat";
BackgroundRepeat.repeatX = "repeat-x";
BackgroundRepeat.repeatY = "repeat-y";
BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var animationModule;
var AnimationCurve;
(function(AnimationCurve) {
AnimationCurve.ease = "ease";
AnimationCurve.easeIn = "easeIn";
AnimationCurve.easeOut = "easeOut";
AnimationCurve.easeInOut = "easeInOut";
AnimationCurve.linear = "linear";
AnimationCurve.spring = "spring";
function cubicBezier(x1, y1, x2, y2) {
animationModule = animationModule || __webpack_require__(40);
return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
}
AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(41);
var utils = __webpack_require__(37);
var color = __webpack_require__(23);
var trace = __webpack_require__(31);
var types = __webpack_require__(14);
var enums = __webpack_require__(39);
var styleModule = __webpack_require__(15);
var lazy_1 = __webpack_require__(42);
var dependencyObservable = __webpack_require__(29);
global.moduleMerge(common, exports);
var argbEvaluator;
function ensureArgbEvaluator() {
if (!argbEvaluator) {
argbEvaluator = new android.animation.ArgbEvaluator();
}
}
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[common.Properties.backgroundColor] = Symbol(keyPrefix + common.Properties.backgroundColor);
propertyKeys[common.Properties.opacity] = Symbol(keyPrefix + common.Properties.opacity);
propertyKeys[common.Properties.rotate] = Symbol(keyPrefix + common.Properties.rotate);
propertyKeys[common.Properties.scale] = Symbol(keyPrefix + common.Properties.scale);
propertyKeys[common.Properties.translate] = Symbol(keyPrefix + common.Properties.translate);
var Animation = function(_super) {
__extends(Animation, _super);
function Animation(animationDefinitions, playSequentially) {
_super.call(this, animationDefinitions, playSequentially);
if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
this._valueSource = animationDefinitions[0].valueSource;
}
var that = this;
this._animatorListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", trace.categories.Animation);
}
},
onAnimationRepeat: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAnimationRepeat(" + animator + ")", trace.categories.Animation);
}
},
onAnimationEnd: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAnimationEnd(" + animator + ")", trace.categories.Animation);
}
that._onAndroidAnimationEnd();
},
onAnimationCancel: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAnimationCancel(" + animator + ")", trace.categories.Animation);
}
that._onAndroidAnimationCancel();
}
});
}
Animation.prototype.play = function() {
var animationFinishedPromise = _super.prototype.play.call(this);
this._animators = new Array();
this._propertyUpdateCallbacks = new Array();
this._propertyResetCallbacks = new Array();
for (var i = 0, length = this._propertyAnimations.length; i < length; i++) {
this._createAnimators(this._propertyAnimations[i]);
}
this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);
for (var i = 0, length = this._animators.length; i < length; i++) {
this._nativeAnimatorsArray[i] = this._animators[i];
}
this._animatorSet = new android.animation.AnimatorSet();
this._animatorSet.addListener(this._animatorListener);
if (this._animators.length > 0) {
if (this._playSequentially) {
this._animatorSet.playSequentially(this._nativeAnimatorsArray);
} else {
this._animatorSet.playTogether(this._nativeAnimatorsArray);
}
}
this._enableHardwareAcceleration();
if (trace.enabled) {
trace.write("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), trace.categories.Animation);
}
this._animatorSet.setupStartValues();
this._animatorSet.start();
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
_super.prototype.cancel.call(this);
if (trace.enabled) {
trace.write("Cancelling AnimatorSet.", trace.categories.Animation);
}
this._animatorSet.cancel();
};
Animation.prototype._onAndroidAnimationEnd = function() {
if (!this.isPlaying) {
return;
}
var i = 0;
var length = this._propertyUpdateCallbacks.length;
for (;i < length; i++) {
this._propertyUpdateCallbacks[i]();
}
this._disableHardwareAcceleration();
this._resolveAnimationFinishedPromise();
};
Animation.prototype._onAndroidAnimationCancel = function() {
var i = 0;
var length = this._propertyResetCallbacks.length;
for (;i < length; i++) {
this._propertyResetCallbacks[i]();
}
this._disableHardwareAcceleration();
this._rejectAnimationFinishedPromise();
};
Animation.prototype._createAnimators = function(propertyAnimation) {
if (!propertyAnimation.target._nativeView) {
return;
}
if (trace.enabled) {
trace.write("Creating ObjectAnimator(s) for animation: " + common.Animation._getAnimationInfo(propertyAnimation) + "...", trace.categories.Animation);
}
if (types.isNullOrUndefined(propertyAnimation.target)) {
throw new Error("Animation target cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.property)) {
throw new Error("Animation property cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.value)) {
throw new Error("Animation value cannot be null or undefined!");
}
var nativeArray;
var nativeView = propertyAnimation.target._nativeView;
var animators = new Array();
var propertyUpdateCallbacks = new Array();
var propertyResetCallbacks = new Array();
var originalValue1;
var originalValue2;
var density = utils.layout.getDisplayDensity();
var xyObjectAnimators;
var animatorSet;
var key = propertyKeys[propertyAnimation.property];
if (key) {
propertyAnimation.target[key] = propertyAnimation;
}
function checkAnimation(cb) {
return function() {
if (propertyAnimation.target[key] === propertyAnimation) {
delete propertyAnimation.target[key];
cb();
}
};
}
var valueSource = this._valueSource !== undefined ? this._valueSource : dependencyObservable.ValueSource.Local;
switch (propertyAnimation.property) {
case common.Properties.opacity:
originalValue1 = nativeView.getAlpha();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.opacityProperty, propertyAnimation.value, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.opacityProperty, originalValue1, valueSource);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
break;

case common.Properties.backgroundColor:
ensureArgbEvaluator();
originalValue1 = propertyAnimation.target.backgroundColor;
nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
onAnimationUpdate: function(animator) {
var argb = animator.getAnimatedValue().intValue();
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, new color.Color(argb), valueSource);
}
}));
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, propertyAnimation.value, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, originalValue1, valueSource);
}));
animators.push(animator);
break;

case common.Properties.translate:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x * density;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y * density;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getTranslationX();
originalValue2 = nativeView.getTranslationY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.translateXProperty, propertyAnimation.value.x, valueSource);
propertyAnimation.target.style._setValue(styleModule.translateYProperty, propertyAnimation.value.y, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.translateXProperty, originalValue1, valueSource);
propertyAnimation.target.style._setValue(styleModule.translateYProperty, originalValue2, valueSource);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.scale:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getScaleX();
originalValue2 = nativeView.getScaleY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.scaleXProperty, propertyAnimation.value.x, valueSource);
propertyAnimation.target.style._setValue(styleModule.scaleYProperty, propertyAnimation.value.y, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.scaleXProperty, originalValue1, valueSource);
propertyAnimation.target.style._setValue(styleModule.scaleYProperty, originalValue2, valueSource);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.rotate:
originalValue1 = nativeView.getRotation();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.rotateProperty, propertyAnimation.value, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.rotateProperty, originalValue1, valueSource);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
break;

default:
throw new Error("Cannot animate " + propertyAnimation.property);
}
var i = 0;
var length = animators.length;
for (;i < length; i++) {
if (propertyAnimation.duration !== undefined) {
animators[i].setDuration(propertyAnimation.duration);
}
if (propertyAnimation.delay !== undefined) {
animators[i].setStartDelay(propertyAnimation.delay);
}
if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
}
if (propertyAnimation.curve !== undefined) {
animators[i].setInterpolator(propertyAnimation.curve);
}
if (trace.enabled) {
trace.write("Animator created: " + animators[i], trace.categories.Animation);
}
}
this._animators = this._animators.concat(animators);
this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
};
Animation._getAndroidRepeatCount = function(iterations) {
return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
};
Animation.prototype._enableHardwareAcceleration = function() {
for (var i = 0, length = this._propertyAnimations.length; i < length; i++) {
var cache = this._propertyAnimations[i].target._nativeView;
if (cache) {
var layerType = cache.getLayerType();
if (layerType !== android.view.View.LAYER_TYPE_HARDWARE) {
cache.layerType = layerType;
cache.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
}
}
};
Animation.prototype._disableHardwareAcceleration = function() {
for (var i = 0, length = this._propertyAnimations.length; i < length; i++) {
var cache = this._propertyAnimations[i].target._nativeView;
if (cache && cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
};
return Animation;
}(common.Animation);
exports.Animation = Animation;
var easeIn = lazy_1.default(function() {
return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function() {
return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function() {
return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function() {
return new android.view.animation.BounceInterpolator();
});
function _resolveAnimationCurve(curve) {
switch (curve) {
case enums.AnimationCurve.easeIn:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", trace.categories.Animation);
}
return easeIn();

case enums.AnimationCurve.easeOut:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", trace.categories.Animation);
}
return easeOut();

case enums.AnimationCurve.easeInOut:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", trace.categories.Animation);
}
return easeInOut();

case enums.AnimationCurve.linear:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.LinearInterpolator().", trace.categories.Animation);
}
return linear();

case enums.AnimationCurve.spring:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.BounceInterpolator().", trace.categories.Animation);
}
return bounce();

case enums.AnimationCurve.ease:
return android.support.v4.view.animation.PathInterpolatorCompat.create(.25, .1, .25, 1);

default:
if (trace.enabled) {
trace.write("Animation curve resolved to original: " + curve, trace.categories.Animation);
}
if (curve instanceof common.CubicBezierAnimationCurve) {
var animationCurve = curve;
var interpolator = android.support.v4.view.animation.PathInterpolatorCompat.create(animationCurve.x1, animationCurve.y1, animationCurve.x2, animationCurve.y2);
return interpolator;
}
return curve;
}
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(40);
var colorModule = __webpack_require__(23);
var types = __webpack_require__(14);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(31);
}
}
var Properties;
(function(Properties) {
Properties.opacity = "opacity";
Properties.backgroundColor = "backgroundColor";
Properties.translate = "translate";
Properties.rotate = "rotate";
Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = function() {
function CubicBezierAnimationCurve(x1, y1, x2, y2) {
this.x1 = x1;
this.y1 = y1;
this.x2 = x2;
this.y2 = y2;
}
return CubicBezierAnimationCurve;
}();
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var AnimationPromise = function() {
function AnimationPromise() {}
AnimationPromise.prototype.cancel = function() {};
AnimationPromise.prototype.then = function(onFulfilled, onRejected) {
return new AnimationPromise();
};
AnimationPromise.prototype.catch = function(onRejected) {
return new AnimationPromise();
};
return AnimationPromise;
}();
exports.AnimationPromise = AnimationPromise;
var Animation = function() {
function Animation(animationDefinitions, playSequentially) {
if (!animationDefinitions || animationDefinitions.length === 0) {
throw new Error("No animation definitions specified");
}
ensureTrace();
if (trace.enabled) {
trace.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace.categories.Animation);
}
this._propertyAnimations = new Array();
var i = 0;
var length = animationDefinitions.length;
for (;i < length; i++) {
animationDefinitions[i].curve = definition._resolveAnimationCurve(animationDefinitions[i].curve);
this._propertyAnimations = this._propertyAnimations.concat(Animation._createPropertyAnimations(animationDefinitions[i]));
}
if (this._propertyAnimations.length === 0) {
throw new Error("Nothing to animate.");
}
if (trace.enabled) {
trace.write("Created " + this._propertyAnimations.length + " individual property animations.", trace.categories.Animation);
}
this._playSequentially = playSequentially;
}
Animation.prototype.play = function() {
var _this = this;
if (this.isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this.fixupAnimationPromise(animationFinishedPromise);
this._isPlaying = true;
return animationFinishedPromise;
};
Animation.prototype.fixupAnimationPromise = function(promise) {
var _this = this;
promise.cancel = function() {
_this.cancel();
};
var _then = promise.then;
promise.then = function() {
var r = _then.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
var _catch = promise.catch;
promise.catch = function() {
var r = _catch.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
};
Animation.prototype.cancel = function() {
if (!this.isPlaying) {
throw new Error("Animation is not currently playing.");
}
};
Object.defineProperty(Animation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
Animation.prototype._resolveAnimationFinishedPromise = function() {
this._isPlaying = false;
this._resolve();
};
Animation.prototype._rejectAnimationFinishedPromise = function() {
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
Animation._createPropertyAnimations = function(animationDefinition) {
if (!animationDefinition.target) {
throw new Error("No animation target specified.");
}
for (var item in animationDefinition) {
if (!types.isDefined(animationDefinition[item])) {
continue;
}
if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && !types.isNumber(animationDefinition[item])) {
throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
} else if ((item === Properties.scale || item === Properties.translate) && (!types.isNumber(animationDefinition[item].x) || !types.isNumber(animationDefinition[item].y))) {
throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
} else if (item === Properties.backgroundColor && !colorModule.Color.isValid(animationDefinition.backgroundColor)) {
throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
}
}
var propertyAnimations = new Array();
if (animationDefinition.opacity !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.opacity,
value: animationDefinition.opacity,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.backgroundColor !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.backgroundColor,
value: types.isString(animationDefinition.backgroundColor) ? new colorModule.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.translate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.translate,
value: animationDefinition.translate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.scale !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.scale,
value: animationDefinition.scale,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.rotate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.rotate,
value: animationDefinition.rotate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (propertyAnimations.length === 0) {
throw new Error("No animation property specified.");
}
return propertyAnimations;
};
Animation._getAnimationInfo = function(animation) {
return JSON.stringify({
target: animation.target.id,
property: animation.property,
value: animation.value,
duration: animation.duration,
delay: animation.delay,
iterations: animation.iterations,
curve: animation.curve
});
};
return Animation;
}();
exports.Animation = Animation;
}, function(module, exports) {
function lazy(action) {
var _value;
return function() {
return _value || (_value = action());
};
}
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.default = lazy;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(39);
var common = __webpack_require__(44);
var application;
function ensureApplication() {
if (!application) {
application = __webpack_require__(16);
}
}
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(31);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(46);
}
}
var typefaceCache = new Map();
var appAssets;
var FONTS_BASE_PATH = "/fonts/";
var Font = function(_super) {
__extends(Font, _super);
function Font(family, size, style, weight) {
_super.call(this, family, size, style, weight);
}
Font.prototype.withFontFamily = function(family) {
return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
};
Font.prototype.withFontStyle = function(style) {
return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
};
Font.prototype.withFontWeight = function(weight) {
return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
};
Font.prototype.withFontSize = function(size) {
return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
};
Font.prototype.getAndroidTypeface = function() {
if (!this._typeface) {
var fontStyle = 0;
if (this.isBold) {
fontStyle |= android.graphics.Typeface.BOLD;
}
if (this.isItalic) {
fontStyle |= android.graphics.Typeface.ITALIC;
}
var typeFace = createTypeface(this);
this._typeface = android.graphics.Typeface.create(typeFace, fontStyle);
}
return this._typeface;
};
Font.default = new Font(undefined, undefined, enums.FontStyle.normal, enums.FontWeight.normal);
return Font;
}(common.Font);
exports.Font = Font;
function loadFontFromFile(fontFamily) {
ensureApplication();
appAssets = appAssets || application.android.context.getAssets();
if (!appAssets) {
return null;
}
ensureTypes();
var result = typefaceCache.get(fontFamily);
if (types.isUndefined(result)) {
result = null;
ensureTrace();
ensureFS();
var fontAssetPath;
var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);
if (fs.File.exists(basePath + ".ttf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
} else if (fs.File.exists(basePath + ".otf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
} else {
if (trace.enabled) {
trace.write("Could not find font file for " + fontFamily, trace.categories.Error, trace.messageType.error);
}
}
if (fontAssetPath) {
try {
fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
result = android.graphics.Typeface.createFromFile(fontAssetPath);
} catch (e) {
if (trace.enabled) {
trace.write("Error loading font asset: " + fontAssetPath, trace.categories.Error, trace.messageType.error);
}
}
}
typefaceCache.set(fontFamily, result);
}
return result;
}
function createTypeface(font) {
var fonts = common.parseFontFamily(font.fontFamily);
var result = null;
if (fonts.length === 0) {
return null;
}
for (var i = 0; i < fonts.length; i++) {
switch (fonts[i].toLowerCase()) {
case common.genericFontFamilies.serif:
result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), 0);
break;

case common.genericFontFamilies.sansSerif:
case common.genericFontFamilies.system:
result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), 0);
break;

case common.genericFontFamilies.monospace:
result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), 0);
break;

default:
result = loadFontFromFile(fonts[i]);
break;
}
if (result) {
return result;
}
}
return null;
}
function getFontWeightSuffix(fontWeight) {
switch (fontWeight) {
case enums.FontWeight.thin:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

case enums.FontWeight.extraLight:
case enums.FontWeight.light:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

case enums.FontWeight.normal:
case "400":
case undefined:
case null:
return "";

case enums.FontWeight.medium:
case enums.FontWeight.semiBold:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

case enums.FontWeight.bold:
case "700":
case enums.FontWeight.extraBold:
return "";

case enums.FontWeight.black:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

default:
throw new Error('Invalid font weight: "' + fontWeight + '"');
}
}
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(39);
var converters = __webpack_require__(45);
var Font = function() {
function Font(family, size, style, weight) {
this._fontFamily = family;
this._fontSize = size;
this._fontStyle = style;
this._fontWeight = weight;
}
Object.defineProperty(Font.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
throw new Error("fontFamily is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontStyle", {
get: function() {
return this._fontStyle;
},
set: function(value) {
throw new Error("fontStyle is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontWeight", {
get: function() {
return this._fontWeight;
},
set: function(value) {
throw new Error("fontWeight is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
throw new Error("fontSize is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isBold", {
get: function() {
return this._fontWeight.toLowerCase() === enums.FontWeight.bold || this._fontWeight.toLowerCase() === "700";
},
set: function(value) {
throw new Error("isBold is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isItalic", {
get: function() {
return this._fontStyle.toLowerCase() === enums.FontStyle.italic;
},
set: function(value) {
throw new Error("isItalic is read-only");
},
enumerable: true,
configurable: true
});
Font.prototype.getAndroidTypeface = function() {
return undefined;
};
Font.prototype.getUIFont = function(defaultFont) {
return undefined;
};
Font.prototype.withFontFamily = function(family) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontStyle = function(style) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontWeight = function(weight) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontSize = function(size) {
throw new Error("This should be called on the derived class");
};
Font.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
};
Font.parse = function(cssValue) {
var parsed = parseFont(cssValue);
var size = converters.fontSizeConverter(parsed.fontSize);
size = !!size ? size : undefined;
return new Font(parsed.fontFamily, size, parsed.fontStyle, parsed.fontWeight);
};
Font.default = undefined;
return Font;
}();
exports.Font = Font;
function parseFontFamily(value) {
var result = new Array();
if (!value) {
return result;
}
var split = value.split(",");
for (var i = 0; i < split.length; i++) {
var str = split[i].trim().replace(/['"]+/g, "");
if (str) {
result.push(str);
}
}
return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function(genericFontFamilies) {
genericFontFamilies.serif = "serif";
genericFontFamilies.sansSerif = "sans-serif";
genericFontFamilies.monospace = "monospace";
genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[ "italic", "oblique" ].forEach(function(val, i, a) {
return styles.add(val);
});
var weights = new Set();
[ "normal", "bold", "100", "200", "300", "400", "500", "600", "700", "800", "900" ].forEach(function(val, i, a) {
return weights.add(val);
});
function parseFont(fontValue) {
var result = {
fontStyle: "normal",
fontVariant: "normal",
fontWeight: "normal"
};
var parts = fontValue.split(/\s+/);
var part;
while (part = parts.shift()) {
if (part === "normal") {} else if (part === "small-caps") {
result.fontVariant = part;
} else if (styles.has(part)) {
result.fontStyle = part;
} else if (weights.has(part)) {
result.fontWeight = part;
} else if (!result.fontSize) {
var sizes = part.split("/");
result.fontSize = sizes[0];
result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
} else {
result.fontFamily = part;
if (parts.length) {
result.fontFamily += " " + parts.join(" ");
}
break;
}
}
return result;
}
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(39);
var color = __webpack_require__(23);
var types = __webpack_require__(14);
function colorConverter(value) {
return new color.Color(value);
}
exports.colorConverter = colorConverter;
function floatConverter(value) {
var result = parseFloat(value);
return result;
}
exports.floatConverter = floatConverter;
function fontSizeConverter(value) {
return floatConverter(value);
}
exports.fontSizeConverter = fontSizeConverter;
function textAlignConverter(value) {
switch (value) {
case enums.TextAlignment.left:
case enums.TextAlignment.center:
case enums.TextAlignment.right:
return value;

default:
throw new Error('CSS text-align "' + value + '" is not supported.');
}
}
exports.textAlignConverter = textAlignConverter;
function textDecorationConverter(value) {
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
return value;
} else {
throw new Error('CSS text-decoration "' + value + '" is not supported.');
}
}
exports.textDecorationConverter = textDecorationConverter;
function whiteSpaceConverter(value) {
switch (value) {
case enums.WhiteSpace.normal:
case enums.WhiteSpace.nowrap:
return value;

default:
throw new Error('CSS white-space "' + value + '" is not supported.');
}
}
exports.whiteSpaceConverter = whiteSpaceConverter;
function textTransformConverter(value) {
switch (value) {
case enums.TextTransform.none:
case enums.TextTransform.uppercase:
case enums.TextTransform.lowercase:
case enums.TextTransform.capitalize:
return value;

default:
throw new Error('CSS text-transform "' + value + '" is not supported.');
}
}
exports.textTransformConverter = textTransformConverter;
exports.numberConverter = parseFloat;
function visibilityConverter(value) {
if (value.toLowerCase() === enums.Visibility.collapsed) {
return enums.Visibility.collapsed;
} else if (value.toLowerCase() === enums.Visibility.collapse) {
return enums.Visibility.collapse;
}
return enums.Visibility.visible;
}
exports.visibilityConverter = visibilityConverter;
function opacityConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.opacityConverter = opacityConverter;
function timeConverter(value) {
var result = parseFloat(value);
if (value.indexOf("ms") === -1) {
result = result * 1e3;
}
result = Math.max(0, result);
return result;
}
exports.timeConverter = timeConverter;
function bezieArgumentConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.bezieArgumentConverter = bezieArgumentConverter;
function animationTimingFunctionConverter(value) {
var result = enums.AnimationCurve.ease;
switch (value) {
case "ease":
result = enums.AnimationCurve.ease;
break;

case "linear":
result = enums.AnimationCurve.linear;
break;

case "ease-in":
result = enums.AnimationCurve.easeIn;
break;

case "ease-out":
result = enums.AnimationCurve.easeOut;
break;

case "ease-in-out":
result = enums.AnimationCurve.easeInOut;
break;

case "spring":
result = enums.AnimationCurve.spring;
break;

default:
if (value.indexOf("cubic-bezier(") === 0) {
var bezierArr = value.substring(13).split(/[,]+/);
if (bezierArr.length !== 4) {
throw new Error("Invalid value for animation: " + value);
}
result = enums.AnimationCurve.cubicBezier(bezieArgumentConverter(bezierArr[0]), bezieArgumentConverter(bezierArr[1]), bezieArgumentConverter(bezierArr[2]), bezieArgumentConverter(bezierArr[3]));
} else {
throw new Error("Invalid value for animation: " + value);
}
break;
}
return result;
}
exports.animationTimingFunctionConverter = animationTimingFunctionConverter;
function transformConverter(value) {
if (value === "none") {
var operations = {};
operations[value] = value;
return operations;
} else if (types.isString(value)) {
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
} else {
return undefined;
}
}
exports.transformConverter = transformConverter;
}, function(module, exports, __webpack_require__) {
var file_access_module = __webpack_require__(47);
var fileAccess;
var getFileAccess = function() {
if (!fileAccess) {
fileAccess = new file_access_module.FileSystemAccess();
}
return fileAccess;
};
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(49);
}
}
var nameProperty = "_name";
var pathProperty = "_path";
var isKnownProperty = "_isKnown";
var fileLockedProperty = "_locked";
var extensionProperty = "_extension";
var lastModifiedProperty = "_lastModified";
var createFile = function(info) {
var file = new File();
file[pathProperty] = info.path;
file[nameProperty] = info.name;
file[extensionProperty] = info.extension;
return file;
};
var createFolder = function(info) {
var documents = knownFolders.documents();
if (info.path === documents.path) {
return documents;
}
var temp = knownFolders.temp();
if (info.path === temp.path) {
return temp;
}
var folder = new Folder();
folder[pathProperty] = info.path;
folder[nameProperty] = info.name;
return folder;
};
var FileSystemEntity = function() {
function FileSystemEntity() {}
Object.defineProperty(FileSystemEntity.prototype, "parent", {
get: function() {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getParent(this.path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
},
enumerable: true,
configurable: true
});
FileSystemEntity.prototype.remove = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.removeSync(localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.removeSync = function(onError) {
if (this[isKnownProperty]) {
if (onError) {
onError({
message: "Cannot delete known folder."
});
}
return;
}
var fileAccess = getFileAccess();
if (this instanceof File) {
fileAccess.deleteFile(this.path, onError);
} else if (this instanceof Folder) {
fileAccess.deleteFolder(this.path, onError);
}
};
FileSystemEntity.prototype.rename = function(newName) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.renameSync(newName, localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.renameSync = function(newName, onError) {
if (this[isKnownProperty]) {
if (onError) {
onError(new Error("Cannot rename known folder."));
}
return;
}
var parentFolder = this.parent;
if (!parentFolder) {
if (onError) {
onError(new Error("No parent folder."));
}
return;
}
var fileAccess = getFileAccess();
var path = parentFolder.path;
var newPath = fileAccess.joinPath(path, newName);
var hasError = false;
var localError = function(error) {
hasError = true;
if (onError) {
onError(error);
}
return null;
};
fileAccess.rename(this.path, newPath, localError);
this[pathProperty] = newPath;
this[nameProperty] = newName;
if (this instanceof File) {
this[extensionProperty] = fileAccess.getFileExtension(newPath);
}
};
Object.defineProperty(FileSystemEntity.prototype, "name", {
get: function() {
return this[nameProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "path", {
get: function() {
return this[pathProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
get: function() {
var value = this[lastModifiedProperty];
if (!this[lastModifiedProperty]) {
value = this[lastModifiedProperty] = getFileAccess().getLastModified(this.path);
}
return value;
},
enumerable: true,
configurable: true
});
return FileSystemEntity;
}();
exports.FileSystemEntity = FileSystemEntity;
var File = function(_super) {
__extends(File, _super);
function File() {
_super.apply(this, arguments);
}
File.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var fileInfo = getFileAccess().getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
File.exists = function(path) {
return getFileAccess().fileExists(path);
};
Object.defineProperty(File.prototype, "extension", {
get: function() {
return this[extensionProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(File.prototype, "isLocked", {
get: function() {
return !!this[fileLockedProperty];
},
enumerable: true,
configurable: true
});
File.prototype.readSync = function(onError) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().read(this.path, localError);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeSync = function(content, onError) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().write(this.path, content, localError);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.readText = function(encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var content = _this.readTextSync(localError, encoding);
if (!hasError) {
resolve(content);
}
});
};
File.prototype.readTextSync = function(onError, encoding) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().readText(this.path, localError, encoding);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeText = function(content, encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.writeTextSync(content, localError, encoding);
if (!hasError) {
resolve();
}
});
};
File.prototype.writeTextSync = function(content, onError, encoding) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().writeText(this.path, content, localError, encoding);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.checkAccess = function() {
if (this.isLocked) {
throw new Error("Cannot access a locked file.");
}
};
return File;
}(FileSystemEntity);
exports.File = File;
var Folder = function(_super) {
__extends(Folder, _super);
function Folder() {
_super.apply(this, arguments);
}
Folder.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.exists = function(path) {
return getFileAccess().folderExists(path);
};
Folder.prototype.contains = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
if (fileAccess.fileExists(path)) {
return true;
}
return fileAccess.folderExists(path);
};
Folder.prototype.clear = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var onError = function(error) {
hasError = true;
reject(error);
};
_this.clearSync(onError);
if (!hasError) {
resolve();
}
});
};
Folder.prototype.clearSync = function(onError) {
getFileAccess().emptyFolder(this.path, onError);
};
Object.defineProperty(Folder.prototype, "isKnown", {
get: function() {
return this[isKnownProperty];
},
enumerable: true,
configurable: true
});
Folder.prototype.getFile = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var fileInfo = fileAccess.getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
Folder.prototype.getFolder = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var folderInfo = fileAccess.getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.prototype.getEntities = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var entities = _this.getEntitiesSync(localError);
if (!hasError) {
resolve(entities);
}
});
};
Folder.prototype.getEntitiesSync = function(onError) {
var fileInfos = getFileAccess().getEntities(this.path, onError);
if (!fileInfos) {
return null;
}
var entities = new Array();
var i;
for (i = 0; i < fileInfos.length; i++) {
if (fileInfos[i].extension) {
entities.push(createFile(fileInfos[i]));
} else {
entities.push(createFolder(fileInfos[i]));
}
}
return entities;
};
Folder.prototype.eachEntity = function(onEntity) {
if (!onEntity) {
return;
}
var onSuccess = function(fileInfo) {
var entity;
if (fileInfo.extension) {
entity = createFile(fileInfo);
} else {
entity = createFolder(fileInfo);
}
return onEntity(entity);
};
var onError = function(error) {
throw error;
};
getFileAccess().eachEntity(this.path, onSuccess, onError);
};
return Folder;
}(FileSystemEntity);
exports.Folder = Folder;
var knownFolders;
(function(knownFolders) {
var _documents;
var _temp;
var _app;
knownFolders.documents = function() {
if (!_documents) {
var path = getFileAccess().getDocumentsFolderPath();
_documents = new Folder();
_documents[pathProperty] = path;
_documents[isKnownProperty] = true;
}
return _documents;
};
knownFolders.temp = function() {
if (!_temp) {
var path = getFileAccess().getTempFolderPath();
_temp = new Folder();
_temp[pathProperty] = path;
_temp[isKnownProperty] = true;
}
return _temp;
};
knownFolders.currentApp = function() {
if (!_app) {
var path = getFileAccess().getCurrentAppPath();
_app = new Folder();
_app[pathProperty] = path;
_app[isKnownProperty] = true;
}
return _app;
};
var ios;
(function(ios) {
function _checkPlatform(knownFolderName) {
ensurePlatform();
if (!platform.isIOS) {
throw new Error('The "' + knownFolderName + '" known folder is available on iOS only!');
}
}
var _library;
ios.library = function() {
_checkPlatform("library");
if (!_library) {
var existingFolderInfo = getExistingFolderInfo(5);
if (existingFolderInfo) {
_library = existingFolderInfo.folder;
_library[pathProperty] = existingFolderInfo.path;
_library[isKnownProperty] = true;
}
}
return _library;
};
var _developer;
ios.developer = function() {
_checkPlatform("developer");
if (!_developer) {
var existingFolderInfo = getExistingFolderInfo(6);
if (existingFolderInfo) {
_developer = existingFolderInfo.folder;
_developer[pathProperty] = existingFolderInfo.path;
_developer[isKnownProperty] = true;
}
}
return _developer;
};
var _desktop;
ios.desktop = function() {
_checkPlatform("desktop");
if (!_desktop) {
var existingFolderInfo = getExistingFolderInfo(12);
if (existingFolderInfo) {
_desktop = existingFolderInfo.folder;
_desktop[pathProperty] = existingFolderInfo.path;
_desktop[isKnownProperty] = true;
}
}
return _desktop;
};
var _downloads;
ios.downloads = function() {
_checkPlatform("downloads");
if (!_downloads) {
var existingFolderInfo = getExistingFolderInfo(15);
if (existingFolderInfo) {
_downloads = existingFolderInfo.folder;
_downloads[pathProperty] = existingFolderInfo.path;
_downloads[isKnownProperty] = true;
}
}
return _downloads;
};
var _movies;
ios.movies = function() {
_checkPlatform("movies");
if (!_movies) {
var existingFolderInfo = getExistingFolderInfo(17);
if (existingFolderInfo) {
_movies = existingFolderInfo.folder;
_movies[pathProperty] = existingFolderInfo.path;
_movies[isKnownProperty] = true;
}
}
return _movies;
};
var _music;
ios.music = function() {
_checkPlatform("music");
if (!_music) {
var existingFolderInfo = getExistingFolderInfo(18);
if (existingFolderInfo) {
_music = existingFolderInfo.folder;
_music[pathProperty] = existingFolderInfo.path;
_music[isKnownProperty] = true;
}
}
return _music;
};
var _pictures;
ios.pictures = function() {
_checkPlatform("pictures");
if (!_pictures) {
var existingFolderInfo = getExistingFolderInfo(19);
if (existingFolderInfo) {
_pictures = existingFolderInfo.folder;
_pictures[pathProperty] = existingFolderInfo.path;
_pictures[isKnownProperty] = true;
}
}
return _pictures;
};
var _sharedPublic;
ios.sharedPublic = function() {
_checkPlatform("sharedPublic");
if (!_sharedPublic) {
var existingFolderInfo = getExistingFolderInfo(21);
if (existingFolderInfo) {
_sharedPublic = existingFolderInfo.folder;
_sharedPublic[pathProperty] = existingFolderInfo.path;
_sharedPublic[isKnownProperty] = true;
}
}
return _sharedPublic;
};
function getExistingFolderInfo(pathDirectory) {
var fileAccess = getFileAccess();
var folderPath = fileAccess.getKnownPath(pathDirectory);
var folderInfo = fileAccess.getExistingFolder(folderPath);
if (folderInfo) {
return {
folder: createFolder(folderInfo),
path: folderPath
};
}
return undefined;
}
})(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function(path_1) {
function normalize(path) {
return getFileAccess().normalizePath(path);
}
path_1.normalize = normalize;
function join() {
var paths = [];
for (var _i = 0; _i < arguments.length; _i++) {
paths[_i - 0] = arguments[_i];
}
var fileAccess = getFileAccess();
return fileAccess.joinPaths(paths);
}
path_1.join = join;
path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
}, function(module, exports, __webpack_require__) {
var textModule = __webpack_require__(48);
var utils = __webpack_require__(37);
var FileSystemAccess = function() {
function FileSystemAccess() {
this._pathSeparator = "/";
}
FileSystemAccess.prototype.getLastModified = function(path) {
var javaFile = new java.io.File(path);
return new Date(javaFile.lastModified());
};
FileSystemAccess.prototype.getParent = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var parent = javaFile.getParentFile();
return {
path: parent.getAbsolutePath(),
name: parent.getName()
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFile = function(path, onError) {
return this.ensureFile(new java.io.File(path), false, onError);
};
FileSystemAccess.prototype.getFolder = function(path, onError) {
var javaFile = new java.io.File(path);
var dirInfo = this.ensureFile(javaFile, true, onError);
if (!dirInfo) {
return undefined;
}
return {
path: dirInfo.path,
name: dirInfo.name
};
};
FileSystemAccess.prototype.eachEntity = function(path, onEntity, onError) {
if (!onEntity) {
return;
}
this.enumEntities(path, onEntity, onError);
};
FileSystemAccess.prototype.getEntities = function(path, onError) {
var fileInfos = new Array();
var onEntity = function(entity) {
fileInfos.push(entity);
return true;
};
var errorOccurred;
var localError = function(error) {
if (onError) {
onError(error);
}
errorOccurred = true;
};
this.enumEntities(path, onEntity, localError);
if (!errorOccurred) {
return fileInfos;
}
return null;
};
FileSystemAccess.prototype.fileExists = function(path) {
var file = new java.io.File(path);
return file.exists();
};
FileSystemAccess.prototype.folderExists = function(path) {
var file = new java.io.File(path);
return file.exists() && file.isDirectory();
};
FileSystemAccess.prototype.deleteFile = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.isFile()) {
if (onError) {
onError({
message: "The specified parameter is not a File entity."
});
}
return;
}
if (!javaFile.delete()) {
if (onError) {
onError({
message: "File deletion failed"
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
if (!javaFile.delete()) {
if (onError) {
onError({
message: "Folder deletion failed."
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.emptyFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.rename = function(path, newPath, onError) {
var javaFile = new java.io.File(path);
if (!javaFile.exists()) {
if (onError) {
onError(new Error("The file to rename does not exist"));
}
return;
}
var newFile = new java.io.File(newPath);
if (newFile.exists()) {
if (onError) {
onError(new Error("A file with the same name already exists."));
}
return;
}
if (!javaFile.renameTo(newFile)) {
if (onError) {
onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
}
}
};
FileSystemAccess.prototype.getDocumentsFolderPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getLogicalRootPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getCanonicalPath();
};
FileSystemAccess.prototype.getTempFolderPath = function() {
var dir = utils.ad.getApplicationContext().getCacheDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getCurrentAppPath = function() {
return this.getLogicalRootPath() + "/app";
};
FileSystemAccess.prototype.read = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var bytes = Array.create("byte", javaFile.length());
var dataInputStream = new java.io.DataInputStream(stream);
dataInputStream.readFully(bytes);
return bytes;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.write = function(path, bytes, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
stream.write(bytes, 0, bytes.length);
stream.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.readText = function(path, onError, encoding) {
try {
var types = __webpack_require__(14);
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var reader = new java.io.InputStreamReader(stream, actualEncoding);
var bufferedReader = new java.io.BufferedReader(reader);
var line = undefined;
var result = "";
while (true) {
line = bufferedReader.readLine();
if (types.isNullOrUndefined(line)) {
break;
}
if (result.length > 0) {
result += "\n";
}
result += line;
}
if (actualEncoding === textModule.encoding.UTF_8) {
result = FileSystemAccess._removeUtf8Bom(result);
}
bufferedReader.close();
return result;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess._removeUtf8Bom = function(s) {
if (s.charCodeAt(0) === 65279) {
s = s.slice(1);
}
return s;
};
FileSystemAccess.prototype.writeText = function(path, content, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
writer.write(content);
writer.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolderContent = function(file) {
var filesList = file.listFiles();
if (filesList.length === 0) {
return true;
}
var i, childFile, success = false;
for (i = 0; i < filesList.length; i++) {
childFile = filesList[i];
if (childFile.getCanonicalFile().isDirectory()) {
success = this.deleteFolderContent(childFile);
if (!success) {
break;
}
}
success = childFile.delete();
}
return success;
};
FileSystemAccess.prototype.ensureFile = function(javaFile, isFolder, onError) {
try {
if (!javaFile.exists()) {
var created;
if (isFolder) {
created = javaFile.mkdirs();
} else {
javaFile.getParentFile().mkdirs();
created = javaFile.createNewFile();
}
if (!created) {
if (onError) {
onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
}
return undefined;
} else {
javaFile.setReadable(true);
javaFile.setWritable(true);
}
}
var path = javaFile.getAbsolutePath();
return {
path: path,
name: javaFile.getName(),
extension: this.getFileExtension(path)
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFileExtension = function(path) {
var dotIndex = path.lastIndexOf(".");
if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
return path.substring(dotIndex);
}
return "";
};
FileSystemAccess.prototype.enumEntities = function(path, callback, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError("There is no folder existing at path " + path);
}
return;
}
var filesList = javaFile.listFiles();
var length = filesList.length;
var i;
var info;
var retVal;
for (i = 0; i < length; i++) {
javaFile = filesList[i];
info = {
path: javaFile.getAbsolutePath(),
name: javaFile.getName()
};
if (javaFile.isFile()) {
info.extension = this.getFileExtension(info.path);
}
retVal = callback(info);
if (retVal === false) {
break;
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.getPathSeparator = function() {
return this._pathSeparator;
};
FileSystemAccess.prototype.normalizePath = function(path) {
var file = new java.io.File(path);
return file.getAbsolutePath();
};
FileSystemAccess.prototype.joinPath = function(left, right) {
var file1 = new java.io.File(left);
var file2 = new java.io.File(file1, right);
return file2.getPath();
};
FileSystemAccess.prototype.joinPaths = function(paths) {
if (!paths || paths.length === 0) {
return "";
}
if (paths.length === 1) {
return paths[0];
}
var i, result = paths[0];
for (i = 1; i < paths.length; i++) {
result = this.joinPath(result, paths[i]);
}
return result;
};
return FileSystemAccess;
}();
exports.FileSystemAccess = FileSystemAccess;
}, function(module, exports) {
var encoding;
(function(encoding) {
encoding.ISO_8859_1 = "ISO-8859-1";
encoding.US_ASCII = "US-ASCII";
encoding.UTF_16 = "UTF-16";
encoding.UTF_16BE = "UTF-16BE";
encoding.UTF_16LE = "UTF-16LE";
encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var MIN_TABLET_PIXELS = 600;
var platformNames;
(function(platformNames) {
platformNames.android = "Android";
platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var Device = function() {
function Device() {}
Object.defineProperty(Device.prototype, "os", {
get: function() {
return platformNames.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "manufacturer", {
get: function() {
if (!this._manufacturer) {
this._manufacturer = android.os.Build.MANUFACTURER;
}
return this._manufacturer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "osVersion", {
get: function() {
if (!this._osVersion) {
this._osVersion = android.os.Build.VERSION.RELEASE;
}
return this._osVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "model", {
get: function() {
if (!this._model) {
this._model = android.os.Build.MODEL;
}
return this._model;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "sdkVersion", {
get: function() {
if (!this._sdkVersion) {
this._sdkVersion = android.os.Build.VERSION.SDK;
}
return this._sdkVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "deviceType", {
get: function() {
if (!this._deviceType) {
var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;
var enums = __webpack_require__(39);
if (dips >= MIN_TABLET_PIXELS) {
this._deviceType = enums.DeviceType.Tablet;
} else {
this._deviceType = enums.DeviceType.Phone;
}
}
return this._deviceType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "uuid", {
get: function() {
if (!this._uuid) {
this._uuid = android.provider.Settings.Secure.getString(utils.ad.getApplicationContext().getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
}
return this._uuid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "language", {
get: function() {
if (!this._language) {
this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
}
return this._language;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "region", {
get: function() {
if (!this._region) {
this._region = java.util.Locale.getDefault().getCountry();
}
return this._region;
},
enumerable: true,
configurable: true
});
return Device;
}();
var MainScreen = function() {
function MainScreen() {}
Object.defineProperty(MainScreen.prototype, "metrics", {
get: function() {
if (!this._metrics) {
this._metrics = utils.ad.getApplicationContext().getResources().getDisplayMetrics();
}
return this._metrics;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthPixels", {
get: function() {
return this.metrics.widthPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightPixels", {
get: function() {
return this.metrics.heightPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "scale", {
get: function() {
return this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthDIPs", {
get: function() {
return this.metrics.widthPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightDIPs", {
get: function() {
return this.metrics.heightPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
return MainScreen;
}();
exports.device = new Device();
var screen;
(function(screen) {
screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));
exports.isAndroid = true;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(51);
var types = __webpack_require__(14);
var enums = __webpack_require__(39);
var application = __webpack_require__(16);
var style = __webpack_require__(15);
var R_ID_HOME = 16908332;
var ACTION_ITEM_ID_OFFSET = 1e3;
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(31);
}
}
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(37);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(53);
}
}
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;
function generateItemId() {
actionItemIdGenerator++;
return actionItemIdGenerator;
}
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.call(this);
this._androidPosition = {
position: enums.AndroidActionItemPosition.actionBar,
systemIcon: undefined
};
this._itemId = generateItemId();
}
Object.defineProperty(ActionItem.prototype, "android", {
get: function() {
return this._androidPosition;
},
set: function(value) {
throw new Error("ActionItem.android is read-only");
},
enumerable: true,
configurable: true
});
ActionItem.prototype._getItemId = function() {
return this._itemId;
};
return ActionItem;
}(common.ActionItem);
exports.ActionItem = ActionItem;
var AndroidActionBarSettings = function() {
function AndroidActionBarSettings(actionBar) {
this._iconVisibility = enums.AndroidActionBarIconVisibility.auto;
this._actionBar = actionBar;
}
Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
get: function() {
return this._icon;
},
set: function(value) {
if (value !== this._icon) {
this._icon = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
get: function() {
return this._iconVisibility;
},
set: function(value) {
if (value !== this._iconVisibility) {
this._iconVisibility = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
return AndroidActionBarSettings;
}();
exports.AndroidActionBarSettings = AndroidActionBarSettings;
var NavigationButton = function(_super) {
__extends(NavigationButton, _super);
function NavigationButton() {
_super.apply(this, arguments);
}
return NavigationButton;
}(ActionItem);
exports.NavigationButton = NavigationButton;
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._appResources = application.android.context.getResources();
this._android = new AndroidActionBarSettings(this);
}
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
throw new Error("ActionBar.android is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_nativeView", {
get: function() {
return this._toolbar;
},
enumerable: true,
configurable: true
});
ActionBar.prototype._createUI = function() {
this._toolbar = new android.support.v7.widget.Toolbar(this._context);
var ownerRef = new WeakRef(this);
this._toolbar.setOnMenuItemClickListener(new android.support.v7.widget.Toolbar.OnMenuItemClickListener({
onMenuItemClick: function(item) {
var ownerValue = ownerRef.get();
if (!ownerValue) {
return false;
}
var itemId = item.getItemId();
return ownerValue._onAndroidItemSelected(itemId);
}
}));
};
ActionBar.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.update();
};
ActionBar.prototype.update = function() {
if (!this._toolbar) {
return;
}
if (!this.page.frame || !this.page.frame._getNavBarVisible(this.page)) {
this._toolbar.setVisibility(android.view.View.GONE);
return;
}
this._toolbar.setVisibility(android.view.View.VISIBLE);
this._addActionItems();
this._updateTitleAndTitleView();
this._updateIcon();
this._updateNavigationButton();
};
ActionBar.prototype._onAndroidItemSelected = function(itemId) {
if (this.navigationButton && itemId === R_ID_HOME) {
this.navigationButton._raiseTap();
return true;
}
var menuItem = undefined;
var items = this.actionItems.getItems();
for (var i = 0; i < items.length; i++) {
if (items[i]._getItemId() === itemId) {
menuItem = items[i];
break;
}
}
if (menuItem) {
menuItem._raiseTap();
return true;
}
return false;
};
ActionBar.prototype._updateNavigationButton = function() {
var navButton = this.navigationButton;
if (navButton && common.isVisible(navButton)) {
if (navButton.android.systemIcon) {
var systemResourceId = getSystemResourceId(navButton.android.systemIcon);
if (systemResourceId) {
this._toolbar.setNavigationIcon(systemResourceId);
}
} else if (navButton.icon) {
var drawableOrId = getDrawableOrResourceId(navButton.icon, this._appResources);
this._toolbar.setNavigationIcon(drawableOrId);
}
var navBtn_1 = new WeakRef(navButton);
this._toolbar.setNavigationOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
var owner = navBtn_1.get();
if (owner) {
owner._raiseTap();
}
}
}));
} else {
this._toolbar.setNavigationIcon(null);
}
};
ActionBar.prototype._updateIcon = function() {
var visibility = getIconVisibility(this.android.iconVisibility);
if (visibility) {
var icon = this.android.icon;
if (types.isDefined(icon)) {
var drawableOrId = getDrawableOrResourceId(icon, this._appResources);
if (drawableOrId) {
this._toolbar.setLogo(drawableOrId);
}
} else {
var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
this._toolbar.setLogo(defaultIcon);
}
} else {
this._toolbar.setLogo(null);
}
};
ActionBar.prototype._updateTitleAndTitleView = function() {
if (!this.titleView) {
var title = this.title;
if (types.isDefined(title)) {
this._toolbar.setTitle(title);
} else {
var appContext = application.android.context;
var appInfo = appContext.getApplicationInfo();
var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);
if (appLabel) {
this._toolbar.setTitle(appLabel);
}
}
}
};
ActionBar.prototype._addActionItems = function() {
var menu = this._toolbar.getMenu();
var items = this.actionItems.getVisibleItems();
menu.clear();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");
if (item.actionView && item.actionView.android) {
item.android.position = enums.AndroidActionItemPosition.actionBar;
menuItem.setActionView(item.actionView.android);
ActionBar._setOnClickListener(item);
} else if (item.android.systemIcon) {
var systemResourceId = getSystemResourceId(item.android.systemIcon);
if (systemResourceId) {
menuItem.setIcon(systemResourceId);
}
} else if (item.icon) {
var drawableOrId = getDrawableOrResourceId(item.icon, this._appResources);
if (drawableOrId) {
menuItem.setIcon(drawableOrId);
} else {
throw new Error("Error loading icon from " + item.icon);
}
}
var showAsAction = getShowAsAction(item);
menuItem.setShowAsAction(showAsAction);
}
};
ActionBar._setOnClickListener = function(item) {
item.actionView.android.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
item._raiseTap();
}
}));
};
ActionBar.prototype._onTitlePropertyChanged = function() {
if (this._toolbar) {
this._updateTitleAndTitleView();
}
};
ActionBar.prototype._onIconPropertyChanged = function() {
if (this._toolbar) {
this._updateIcon();
}
};
ActionBar.prototype._clearAndroidReference = function() {
this._toolbar = undefined;
};
ActionBar.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
this._toolbar.addView(child._nativeView);
} else {
this._toolbar.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
ActionBar.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
this._toolbar.removeView(child._nativeView);
ensureTrace();
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return ActionBar;
}(common.ActionBar);
exports.ActionBar = ActionBar;
function getDrawableOrResourceId(icon, resources) {
if (!types.isString(icon)) {
return undefined;
}
ensureUtils();
if (icon.indexOf(utils.RESOURCE_PREFIX) === 0) {
var resourceId = resources.getIdentifier(icon.substr(utils.RESOURCE_PREFIX.length), "drawable", application.android.packageName);
if (resourceId > 0) {
return resourceId;
}
} else {
var drawable;
ensureImageSource();
var is = imageSource.fromFileOrResource(icon);
if (is) {
drawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
return drawable;
}
return undefined;
}
function getShowAsAction(menuItem) {
switch (menuItem.android.position) {
case enums.AndroidActionItemPosition.actionBarIfRoom:
return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

case enums.AndroidActionItemPosition.popup:
return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

case enums.AndroidActionItemPosition.actionBar:
default:
return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
}
}
function getIconVisibility(iconVisibility) {
switch (iconVisibility) {
case enums.AndroidActionBarIconVisibility.always:
return true;

case enums.AndroidActionBarIconVisibility.auto:
case enums.AndroidActionBarIconVisibility.never:
default:
return false;
}
}
function getSystemResourceId(systemIcon) {
return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
var ActionBarStyler = function() {
function ActionBarStyler() {}
ActionBarStyler.setColorProperty = function(v, newValue) {
var toolbar = v._nativeView;
toolbar.setTitleTextColor(newValue);
};
ActionBarStyler.resetColorProperty = function(v, nativeValue) {
if (types.isNullOrUndefined(nativeValue)) {
nativeValue = android.graphics.Color.BLACK;
}
v._nativeView.setTitleTextColor(nativeValue);
};
ActionBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActionBarStyler.setColorProperty, ActionBarStyler.resetColorProperty), "ActionBar");
};
return ActionBarStyler;
}();
exports.ActionBarStyler = ActionBarStyler;
ActionBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dts = __webpack_require__(50);
var bindable = __webpack_require__(28);
var dependencyObservable = __webpack_require__(29);
var enums = __webpack_require__(39);
var proxy = __webpack_require__(52);
var view = __webpack_require__(12);
var ACTION_ITEMS = "actionItems";
var style;
function ensureStyle() {
if (!style) {
style = __webpack_require__(15);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
function onTitlePropertyChanged(data) {
var actionBar = data.object;
actionBar._onTitlePropertyChanged();
}
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._actionItems = new ActionItems(this);
}
Object.defineProperty(ActionBar.prototype, "title", {
get: function() {
return this._getValue(ActionBar.titleProperty);
},
set: function(value) {
this._setValue(ActionBar.titleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "navigationButton", {
get: function() {
return this._navigationButton;
},
set: function(value) {
if (this._navigationButton !== value) {
if (this._navigationButton) {
this._navigationButton.actionBar = undefined;
}
this._navigationButton = value;
if (this._navigationButton) {
this._navigationButton.actionBar = this;
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "actionItems", {
get: function() {
return this._actionItems;
},
set: function(value) {
throw new Error("actionItems property is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "titleView", {
get: function() {
return this._titleView;
},
set: function(value) {
if (this._titleView !== value) {
ensureStyle();
if (this._titleView) {
this._removeView(this._titleView);
this._titleView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._titleView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._titleView = value;
if (this._titleView) {
this._titleView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._titleView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._addView(this._titleView);
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "page", {
get: function() {
return this._page;
},
set: function(value) {
this._page = value;
this.unbind("bindingContext");
this.bind({
sourceProperty: "bindingContext",
targetProperty: "bindingContext"
}, this._page);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_childrenCount", {
get: function() {
var actionViewsCount = 0;
this._actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
actionViewsCount++;
}
});
return actionViewsCount + (this.titleView ? 1 : 0);
},
enumerable: true,
configurable: true
});
ActionBar.prototype.update = function() {};
ActionBar.prototype._onTitlePropertyChanged = function() {};
ActionBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === ACTION_ITEMS) {
this.actionItems.setItems(value);
}
};
ActionBar.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof dts.NavigationButton) {
this.navigationButton = value;
} else if (value instanceof dts.ActionItem) {
this.actionItems.addItem(value);
} else if (value instanceof view.View) {
this.titleView = value;
}
};
ActionBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this._navigationButton) {
this._navigationButton.bindingContext = newValue;
}
this._actionItems.getItems().forEach(function(item, i, arr) {
item.bindingContext = newValue;
});
};
ActionBar.prototype._eachChildView = function(callback) {
if (this.titleView) {
callback(this.titleView);
}
this.actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
callback(actionItem.actionView);
}
});
};
ActionBar.prototype._isEmpty = function() {
if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
return false;
}
return true;
};
ActionBar.titleProperty = new dependencyObservable.Property("title", "ActionBar", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTitlePropertyChanged));
return ActionBar;
}(view.View);
exports.ActionBar = ActionBar;
var ActionItems = function() {
function ActionItems(actionBar) {
this._items = new Array();
this._actionBar = actionBar;
}
ActionItems.prototype.addItem = function(item) {
if (!item) {
throw new Error("Cannot add empty item");
}
this._items.push(item);
item.actionBar = this._actionBar;
this.invalidate();
};
ActionItems.prototype.removeItem = function(item) {
if (!item) {
throw new Error("Cannot remove empty item");
}
var itemIndex = this._items.indexOf(item);
if (itemIndex < 0) {
throw new Error("Cannot find item to remove");
}
this._items.splice(itemIndex, 1);
item.actionBar = undefined;
this.invalidate();
};
ActionItems.prototype.getItems = function() {
return this._items.slice();
};
ActionItems.prototype.getVisibleItems = function() {
var visibleItems = [];
this._items.forEach(function(item) {
if (isVisible(item)) {
visibleItems.push(item);
}
});
return visibleItems;
};
ActionItems.prototype.getItemAt = function(index) {
if (index < 0 || index >= this._items.length) {
return undefined;
}
return this._items[index];
};
ActionItems.prototype.setItems = function(items) {
while (this._items.length > 0) {
this.removeItem(this._items[this._items.length - 1]);
}
for (var i = 0; i < items.length; i++) {
this.addItem(items[i]);
}
this.invalidate();
};
ActionItems.prototype.invalidate = function() {
if (this._actionBar) {
this._actionBar.update();
}
};
return ActionItems;
}();
exports.ActionItems = ActionItems;
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.apply(this, arguments);
}
Object.defineProperty(ActionItem.prototype, "actionView", {
get: function() {
return this._actionView;
},
set: function(value) {
if (this._actionView !== value) {
ensureStyle();
if (this._actionView && this._actionBar) {
this._actionBar._removeView(this._actionView);
this._actionView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._actionView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._actionView = value;
this._addActionViewToActionBar();
if (this._actionBar) {
this._actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "text", {
get: function() {
return this._getValue(ActionItem.textProperty);
},
set: function(value) {
this._setValue(ActionItem.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "icon", {
get: function() {
return this._getValue(ActionItem.iconProperty);
},
set: function(value) {
this._setValue(ActionItem.iconProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "visibility", {
get: function() {
return this._getValue(ActionItem.visibilityProperty);
},
set: function(value) {
this._setValue(ActionItem.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (value !== this._actionBar) {
this._actionBar = value;
if (this._actionBar) {
this.bindingContext = this._actionBar.bindingContext;
this._addActionViewToActionBar();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "page", {
get: function() {
return this.actionBar ? this.actionBar.page : undefined;
},
enumerable: true,
configurable: true
});
ActionItem.prototype._raiseTap = function() {
this._emit(ActionItem.tapEvent);
};
ActionItem.onItemChanged = function(data) {
var menuItem = data.object;
if (menuItem.actionBar) {
menuItem.actionBar.update();
}
};
ActionItem.prototype._addActionViewToActionBar = function() {
if (this._actionView && !this._actionView._isAddedToNativeVisualTree && this._actionBar) {
ensureStyle();
this._actionView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionBar._addView(this._actionView);
}
};
ActionItem.prototype._addChildFromBuilder = function(name, value) {
this.actionView = value;
};
ActionItem.tapEvent = "tap";
ActionItem.textProperty = new dependencyObservable.Property("text", "ActionItem", new dependencyObservable.PropertyMetadata("", null, ActionItem.onItemChanged));
ActionItem.iconProperty = new dependencyObservable.Property("icon", "ActionItem", new dependencyObservable.PropertyMetadata(null, null, ActionItem.onItemChanged));
ActionItem.visibilityProperty = new dependencyObservable.Property("visibility", "ActionItem", new dependencyObservable.PropertyMetadata(enums.Visibility.visible, null, ActionItem.onItemChanged));
return ActionItem;
}(bindable.Bindable);
exports.ActionItem = ActionItem;
function isVisible(item) {
return item.visibility === enums.Visibility.visible;
}
exports.isVisible = isVisible;
}, function(module, exports, __webpack_require__) {
var bindable = __webpack_require__(28);
var dependencyObservable = __webpack_require__(29);
var types = __webpack_require__(14);
var observable = __webpack_require__(18);
var PropertyMetadata = function(_super) {
__extends(PropertyMetadata, _super);
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, onSetNativeValue) {
_super.call(this, defaultValue, options, onChanged, onValidateValue);
this._onSetNativeValue = onSetNativeValue;
}
Object.defineProperty(PropertyMetadata.prototype, "onSetNativeValue", {
get: function() {
return this._onSetNativeValue;
},
set: function(value) {
this._onSetNativeValue = value;
},
enumerable: true,
configurable: true
});
return PropertyMetadata;
}(dependencyObservable.PropertyMetadata);
exports.PropertyMetadata = PropertyMetadata;
var ProxyObject = function(_super) {
__extends(ProxyObject, _super);
function ProxyObject() {
_super.apply(this, arguments);
this._updatingJSPropertiesDict = {};
}
Object.defineProperty(ProxyObject.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyObject.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
ProxyObject.prototype._onPropertyChanged = function(property, oldValue, newValue) {
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._trySetNativeValue(property, oldValue, newValue);
};
ProxyObject.prototype._onPropertyChangedFromNative = function(property, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
this._updatingJSPropertiesDict[property.name] = true;
this._setValue(property, newValue);
delete this._updatingJSPropertiesDict[property.name];
};
ProxyObject.prototype._syncNativeProperties = function() {
var that = this;
var eachPropertyCallback = function(property) {
that._trySetNativeValue(property);
return true;
};
this._eachSetProperty(eachPropertyCallback);
};
ProxyObject.prototype._canApplyNativeProperty = function() {
return false;
};
ProxyObject.prototype._trySetNativeValue = function(property, oldValue, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
if (!this._canApplyNativeProperty()) {
return;
}
var metadata = property.metadata;
if (!(metadata instanceof PropertyMetadata)) {
return;
}
var proxyMetadata = metadata;
if (proxyMetadata.onSetNativeValue) {
if (types.isUndefined(newValue)) {
newValue = this._getValue(property);
}
proxyMetadata.onSetNativeValue({
object: this,
property: property,
eventName: observable.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
};
return ProxyObject;
}(bindable.Bindable);
exports.ProxyObject = ProxyObject;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var common = __webpack_require__(54);
global.moduleMerge(common, exports);
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(37);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(46);
}
}
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(39);
}
}
var ImageSource = function() {
function ImageSource() {}
ImageSource.prototype.fromAsset = function(asset) {
var _this = this;
return new Promise(function(resolve, reject) {
asset.getImageAsync(function(image, err) {
if (image) {
_this.setRotationAngleFromFile(asset.android);
_this.setNativeSource(image);
resolve(_this);
} else {
reject(err);
}
});
});
};
ImageSource.prototype.loadFromResource = function(name) {
this.android = null;
ensureUtils();
var res = utils.ad.getApplicationContext().getResources();
if (res) {
var identifier = res.getIdentifier(name, "drawable", utils.ad.getApplication().getPackageName());
if (0 < identifier) {
var bitmapDrawable = res.getDrawable(identifier);
if (bitmapDrawable && bitmapDrawable.getBitmap) {
this.android = bitmapDrawable.getBitmap();
}
}
}
return this.android != null;
};
ImageSource.prototype.fromResource = function(name) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromResource(name));
});
};
ImageSource.prototype.setRotationAngleFromFile = function(filename) {
this.rotationAngle = 0;
var ei = new android.media.ExifInterface(filename);
var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);
switch (orientation) {
case android.media.ExifInterface.ORIENTATION_ROTATE_90:
this.rotationAngle = 90;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_180:
this.rotationAngle = 180;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_270:
this.rotationAngle = 270;
break;
}
};
ImageSource.prototype.loadFromFile = function(path) {
ensureFS();
var fileName = types.isString(path) ? path.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
this.setRotationAngleFromFile(fileName);
this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
return this.android != null;
};
ImageSource.prototype.fromFile = function(path) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromFile(path));
});
};
ImageSource.prototype.loadFromData = function(data) {
this.android = android.graphics.BitmapFactory.decodeStream(data);
return this.android != null;
};
ImageSource.prototype.fromData = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromData(data));
});
};
ImageSource.prototype.loadFromBase64 = function(source) {
if (types.isString(source)) {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
return this.android != null;
};
ImageSource.prototype.fromBase64 = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromBase64(data));
});
};
ImageSource.prototype.setNativeSource = function(source) {
this.android = source;
return source != null;
};
ImageSource.prototype.saveToFile = function(path, format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return false;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
var res = this.android.compress(targetFormat, quality, outputStream);
outputStream.close();
return res;
};
ImageSource.prototype.toBase64String = function(format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return null;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.ByteArrayOutputStream();
var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
this.android.compress(targetFormat, quality, base64Stream);
base64Stream.close();
outputStream.close();
return outputStream.toString();
};
Object.defineProperty(ImageSource.prototype, "height", {
get: function() {
if (this.android) {
return this.android.getHeight();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "width", {
get: function() {
if (this.android) {
return this.android.getWidth();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "rotationAngle", {
get: function() {
return this._rotationAngle;
},
set: function(value) {
this._rotationAngle = value;
},
enumerable: true,
configurable: true
});
return ImageSource;
}();
exports.ImageSource = ImageSource;
function getTargetFormat(format) {
ensureEnums();
switch (format) {
case enums.ImageFormat.jpeg || enums.ImageFormat.jpg:
return android.graphics.Bitmap.CompressFormat.JPEG;

default:
return android.graphics.Bitmap.CompressFormat.PNG;
}
}
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var http;
function ensureHttp() {
if (!http) {
http = __webpack_require__(55);
}
}
var definition = __webpack_require__(53);
function fromAsset(asset) {
var image = new definition.ImageSource();
return image.fromAsset(asset);
}
exports.fromAsset = fromAsset;
function fromResource(name) {
var image = new definition.ImageSource();
return image.loadFromResource(name) ? image : null;
}
exports.fromResource = fromResource;
function fromFile(path) {
var image = new definition.ImageSource();
return image.loadFromFile(path) ? image : null;
}
exports.fromFile = fromFile;
function fromData(data) {
var image = new definition.ImageSource();
return image.loadFromData(data) ? image : null;
}
exports.fromData = fromData;
function fromBase64(source) {
var image = new definition.ImageSource();
return image.loadFromBase64(source) ? image : null;
}
exports.fromBase64 = fromBase64;
function fromNativeSource(source) {
var image = new definition.ImageSource();
return image.setNativeSource(source) ? image : null;
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
ensureHttp();
return http.getImage(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
if (!isFileOrResourcePath(path)) {
throw new Error('Path "' + '" is not a valid file or resource.');
}
if (path.indexOf(utils.RESOURCE_PREFIX) === 0) {
return fromResource(path.substr(utils.RESOURCE_PREFIX.length));
}
return fromFile(path);
}
exports.fromFileOrResource = fromFileOrResource;
function isFileOrResourcePath(path) {
return utils.isFileOrResourcePath(path);
}
exports.isFileOrResourcePath = isFileOrResourcePath;
}, function(module, exports, __webpack_require__) {
var httpRequest = __webpack_require__(56);
global.moduleMerge(httpRequest, exports);
function getString(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var str = r.content.toString();
resolve(str);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getString = getString;
function getJSON(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var json = r.content.toJSON();
resolve(json);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getJSON = getJSON;
function getImage(arg) {
return httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(responce) {
return responce.content.toImage();
});
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var file = r.content.toFile(destinationFilePath);
resolve(file);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getFile = getFile;
function addHeader(headers, key, value) {
if (!headers[key]) {
headers[key] = value;
} else if (Array.isArray(headers[key])) {
headers[key].push(value);
} else {
var values = [ headers[key] ];
values.push(value);
headers[key] = values;
}
}
exports.addHeader = addHeader;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var http = __webpack_require__(55);
var requestIdCounter = 0;
var pendingRequests = {};
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(37);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(53);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(49);
}
}
var completeCallback;
function ensureCompleteCallback() {
if (completeCallback) {
return;
}
completeCallback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
onRequestComplete(context, result);
}
});
}
function onRequestComplete(requestId, result) {
var callbacks = pendingRequests[requestId];
delete pendingRequests[requestId];
if (result.error) {
callbacks.rejectCallback(new Error(result.error.toString()));
return;
}
var headers = {};
if (result.headers) {
var jHeaders = result.headers;
var length = jHeaders.size();
var i;
var pair;
for (i = 0; i < length; i++) {
pair = jHeaders.get(i);
http.addHeader(headers, pair.key, pair.value);
}
}
callbacks.resolveCallback({
content: {
raw: result.raw,
toString: function() {
if (types.isString(result.responseAsString)) {
return result.responseAsString;
} else {
throw new Error("Response content may not be converted to string");
}
},
toJSON: function() {
ensureUtils();
return utils.parseJSON(result.responseAsString);
},
toImage: function() {
ensureImageSource();
return new Promise(function(resolveImage, rejectImage) {
if (result.responseAsImage != null) {
resolveImage(imageSource.fromNativeSource(result.responseAsImage));
} else {
rejectImage(new Error("Response content may not be converted to an Image"));
}
});
},
toFile: function(destinationFilePath) {
var fs = __webpack_require__(46);
var fileName = callbacks.url;
if (!destinationFilePath) {
destinationFilePath = fs.path.join(fs.knownFolders.documents().path, fileName.substring(fileName.lastIndexOf("/") + 1));
}
var stream;
try {
var javaFile = new java.io.File(destinationFilePath);
stream = new java.io.FileOutputStream(javaFile);
stream.write(result.raw.toByteArray());
return fs.File.fromPath(destinationFilePath);
} catch (exception) {
throw new Error("Cannot save file with path: " + destinationFilePath + ".");
} finally {
if (stream) {
stream.close();
}
}
}
},
statusCode: result.statusCode,
headers: headers
});
}
function buildJavaOptions(options) {
if (!types.isString(options.url)) {
throw new Error("Http request must provide a valid url.");
}
var javaOptions = new org.nativescript.widgets.Async.Http.RequestOptions();
javaOptions.url = options.url;
if (types.isString(options.method)) {
javaOptions.method = options.method;
}
if (types.isString(options.content) || options.content instanceof FormData) {
javaOptions.content = options.content.toString();
}
if (types.isNumber(options.timeout)) {
javaOptions.timeout = options.timeout;
}
if (options.headers) {
var arrayList = new java.util.ArrayList();
var pair = org.nativescript.widgets.Async.Http.KeyValuePair;
for (var key in options.headers) {
arrayList.add(new pair(key, options.headers[key] + ""));
}
javaOptions.headers = arrayList;
}
ensurePlatform();
var screen = platform.screen.mainScreen;
javaOptions.screenWidth = screen.widthPixels;
javaOptions.screenHeight = screen.heightPixels;
return javaOptions;
}
function request(options) {
if (!types.isDefined(options)) {
return;
}
return new Promise(function(resolve, reject) {
try {
var javaOptions = buildJavaOptions(options);
var callbacks = {
url: options.url,
resolveCallback: resolve,
rejectCallback: reject
};
pendingRequests[requestIdCounter] = callbacks;
ensureCompleteCallback();
org.nativescript.widgets.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
requestIdCounter++;
} catch (ex) {
reject(ex);
}
});
}
exports.request = request;
}, function(module, exports, __webpack_require__) {
var aiCommon = __webpack_require__(58);
var enums = __webpack_require__(39);
var style = __webpack_require__(15);
function onBusyPropertyChanged(data) {
var indicator = data.object;
if (!indicator.android) {
return;
}
if (indicator.visibility === enums.Visibility.visible) {
indicator.android.setVisibility(data.newValue ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
}
aiCommon.ActivityIndicator.busyProperty.metadata.onSetNativeValue = onBusyPropertyChanged;
global.moduleMerge(aiCommon, exports);
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
ActivityIndicator.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context);
this._android.setVisibility(android.view.View.INVISIBLE);
this._android.setIndeterminate(true);
};
Object.defineProperty(ActivityIndicator.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return ActivityIndicator;
}(aiCommon.ActivityIndicator);
exports.ActivityIndicator = ActivityIndicator;
var ActivityIndicatorStyler = function() {
function ActivityIndicatorStyler() {}
ActivityIndicatorStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ActivityIndicatorStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().clearColorFilter();
};
ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty = function(view, newValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, newValue, view._nativeView);
};
ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty = function(view, nativeValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, enums.Visibility.visible, view._nativeView);
};
ActivityIndicatorStyler.setIndicatorVisibility = function(isBusy, visibility, nativeView) {
if (visibility === enums.Visibility.collapsed || visibility === enums.Visibility.collapse) {
nativeView.setVisibility(android.view.View.GONE);
} else {
nativeView.setVisibility(isBusy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
};
ActivityIndicatorStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setColorProperty, ActivityIndicatorStyler.resetColorProperty), "ActivityIndicator");
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty, ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty), "ActivityIndicator");
};
return ActivityIndicatorStyler;
}();
exports.ActivityIndicatorStyler = ActivityIndicatorStyler;
ActivityIndicatorStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(29);
var proxy_1 = __webpack_require__(52);
var busyProperty = new dependency_observable_1.Property("busy", "ActivityIndicator", new proxy_1.PropertyMetadata(false));
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
Object.defineProperty(ActivityIndicator.prototype, "busy", {
get: function() {
return this._getValue(ActivityIndicator.busyProperty);
},
set: function(value) {
this._setValue(ActivityIndicator.busyProperty, value);
},
enumerable: true,
configurable: true
});
ActivityIndicator.busyProperty = busyProperty;
return ActivityIndicator;
}(view_1.View);
exports.ActivityIndicator = ActivityIndicator;
}, function(module, exports, __webpack_require__) {
var contentView = __webpack_require__(60);
var viewModule = __webpack_require__(12);
var utils = __webpack_require__(37);
var types = __webpack_require__(14);
var Border = function(_super) {
__extends(Border, _super);
function Border() {
_super.apply(this, arguments);
}
Object.defineProperty(Border.prototype, "cornerRadius", {
get: function() {
if (types.isNumber(this.borderRadius)) {
return this.borderRadius;
}
return 0;
},
set: function(value) {
this.borderRadius = value;
},
enumerable: true,
configurable: true
});
Border.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var borderWidth = 0;
if (types.isNumber(this.borderWidth)) {
borderWidth = this.borderWidth;
}
var borderSize = 2 * borderWidth * density;
var result = viewModule.View.measureChild(this, this.layoutView, utils.layout.makeMeasureSpec(width - borderSize, widthMode), utils.layout.makeMeasureSpec(height - borderSize, heightMode));
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth + borderSize, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight + borderSize, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Border.prototype.onLayout = function(left, top, right, bottom) {
var density = utils.layout.getDisplayDensity();
var borderWidth = 0;
if (types.isNumber(this.borderWidth)) {
borderWidth = this.borderWidth;
}
var borderSize = borderWidth * density;
viewModule.View.layoutChild(this, this.layoutView, borderSize, borderSize, right - left - borderSize, bottom - top - borderSize);
};
Border = __decorate([ Deprecated ], Border);
return Border;
}(contentView.ContentView);
exports.Border = Border;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var utils = __webpack_require__(37);
var ContentView = function(_super) {
__extends(ContentView, _super);
function ContentView() {
_super.apply(this, arguments);
}
Object.defineProperty(ContentView.prototype, "content", {
get: function() {
return this._content;
},
set: function(value) {
var oldView = this._content;
if (this._content) {
this._removeView(this._content);
}
this._content = value;
if (this._content) {
this._addView(this._content);
}
this._onContentChanged(oldView, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "layoutView", {
get: function() {
var result;
if (this._content) {
var first_1 = true;
this._content._eachLayoutView(function(child) {
if (first_1) {
first_1 = false;
result = child;
} else {
throw new Error("More than one layout child inside a ContentView");
}
});
}
return result;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "_childrenCount", {
get: function() {
if (this._content) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
ContentView.prototype._onContentChanged = function(oldView, newView) {};
ContentView.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.content = value;
}
};
ContentView.prototype._eachChildView = function(callback) {
if (this._content) {
callback(this._content);
}
};
ContentView.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
view.View.adjustChildLayoutParams(this.layoutView, widthMeasureSpec, heightMeasureSpec);
var result = view.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var measureWidth = Math.max(result.measuredWidth, this.minWidth * density);
var measureHeight = Math.max(result.measuredHeight, this.minHeight * density);
var widthAndState = view.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
var heightAndState = view.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
ContentView.prototype.onLayout = function(left, top, right, bottom) {
view.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
view.View.restoreChildOriginalParams(this.layoutView);
};
return ContentView;
}(view.CustomLayoutView);
exports.ContentView = ContentView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(62);
var style = __webpack_require__(15);
var text_base_styler_1 = __webpack_require__(63);
var platform_1 = __webpack_require__(49);
var styleHandlersInitialized;
global.moduleMerge(common, exports);
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.call(this);
this._isPressed = false;
if (!styleHandlersInitialized) {
styleHandlersInitialized = true;
ButtonStyler.registerHandlers();
}
}
Object.defineProperty(Button.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Button.prototype._createUI = function() {
var that = new WeakRef(this);
this._android = new android.widget.Button(this._context);
this._android.setOnClickListener(new android.view.View.OnClickListener({
get owner() {
return that.get();
},
onClick: function(v) {
if (this.owner) {
this.owner._emit(common.Button.tapEvent);
}
}
}));
this._android.setOnTouchListener(new android.view.View.OnTouchListener({
get owner() {
return that.get();
},
onTouch: function(v, ev) {
if (ev.getAction() === 0) {
this.owner._goToVisualState("highlighted");
} else if (ev.getAction() === 1) {
this.owner._goToVisualState("normal");
}
return false;
}
}));
};
Button.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
this.android.setText(data.newValue + "");
}
};
Button.prototype._setFormattedTextPropertyToNative = function(value) {
var newText = value ? value._formattedText : null;
if (this.android) {
if (newText) {
if (!this._transformationMethod) {
this._transformationMethod = this.android.getTransformationMethod();
}
this.android.setTransformationMethod(null);
} else {
if (this._transformationMethod && !this.android.getTransformationMethod()) {
this.android.setTransformationMethod(this._transformationMethod);
}
}
this.android.setText(newText);
}
};
return Button;
}(common.Button);
exports.Button = Button;
var ButtonStyler = function() {
function ButtonStyler() {}
ButtonStyler.registerHandlers = function() {
var TextBaseStyler = text_base_styler_1.TextBaseStyler;
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "Button");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "Button");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "Button");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "Button");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "Button");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "Button");
if (parseInt(platform_1.device.sdkVersion, 10) >= 21) {
style.registerHandler(style.letterSpacingProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setLetterSpacingProperty, TextBaseStyler.resetLetterSpacingProperty, TextBaseStyler.getLetterSpacingProperty), "Button");
}
};
return ButtonStyler;
}();
exports.ButtonStyler = ButtonStyler;
}, function(module, exports, __webpack_require__) {
var dependency_observable_1 = __webpack_require__(29);
var view = __webpack_require__(12);
var proxy = __webpack_require__(52);
var formattedString = __webpack_require__(20);
var observable = __webpack_require__(18);
var enums_1 = __webpack_require__(39);
var platform_1 = __webpack_require__(49);
var AffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(30);
}
}
var textProperty = new dependency_observable_1.Property("text", "Button", new proxy.PropertyMetadata("", AffectsLayout));
var formattedTextProperty = new dependency_observable_1.Property("formattedText", "Button", new proxy.PropertyMetadata("", AffectsLayout));
var textWrapProperty = new dependency_observable_1.Property("textWrap", "Button", new proxy.PropertyMetadata(false, AffectsLayout));
function onTextPropertyChanged(data) {
var button = data.object;
button._onTextPropertyChanged(data);
button.style._updateTextDecoration();
button.style._updateTextTransform();
}
function onFormattedTextPropertyChanged(data) {
var button = data.object;
button._onFormattedTextPropertyChanged(data);
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.apply(this, arguments);
}
Button.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
this.style._updateTextDecoration();
this.style._updateTextTransform();
};
Object.defineProperty(Button.prototype, "text", {
get: function() {
return this._getValue(Button.textProperty);
},
set: function(value) {
this._setValue(Button.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "formattedText", {
get: function() {
return this._getValue(Button.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(Button.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "textWrap", {
get: function() {
return this._getValue(Button.textWrapProperty);
},
set: function(value) {
this._setValue(Button.textWrapProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "whiteSpace", {
get: function() {
return this.style.whiteSpace;
},
set: function(value) {
this.style.whiteSpace = value;
},
enumerable: true,
configurable: true
});
Button.prototype.onFormattedTextChanged = function(eventData) {
var value = eventData.value;
this._setFormattedTextPropertyToNative(value);
this._onPropertyChangedFromNative(Button.textProperty, value.toString());
};
Button.prototype._onTextPropertyChanged = function(data) {};
Button.prototype._setFormattedTextPropertyToNative = function(value) {};
Button.prototype._onFormattedTextPropertyChanged = function(data) {
var newValue = data.newValue;
if (newValue) {
newValue.parent = this;
}
this._setFormattedTextPropertyToNative(newValue);
var newText = newValue ? newValue.toString() : "";
this._onPropertyChangedFromNative(Button.textProperty, newText);
};
Button.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
Button.tapEvent = "tap";
Button.textProperty = textProperty;
Button.formattedTextProperty = formattedTextProperty;
Button.textWrapProperty = textWrapProperty;
return Button;
}(view.View);
exports.Button = Button;
function onTextWrapPropertyChanged(data) {
var v = data.object;
v.style.whiteSpace = data.newValue ? enums_1.WhiteSpace.normal : enums_1.WhiteSpace.nowrap;
}
Button.textWrapProperty.metadata.onSetNativeValue = onTextWrapPropertyChanged;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var style = __webpack_require__(15);
var enums = __webpack_require__(39);
var platform_1 = __webpack_require__(49);
var TextBaseStyler = function() {
function TextBaseStyler() {}
TextBaseStyler.setPlaceholderColorProperty = function(view, newValue) {
view._nativeView.setHintTextColor(newValue);
};
TextBaseStyler.resetPlaceholderColorProperty = function(view, nativeValue) {
view._nativeView.setHintTextColor(nativeValue);
};
TextBaseStyler.getNativePlaceholderColorValue = function(view) {
return view._nativeView.getHintTextColors().getDefaultColor();
};
TextBaseStyler.setColorProperty = function(view, newValue) {
view._nativeView.setTextColor(newValue);
};
TextBaseStyler.resetColorProperty = function(view, nativeValue) {
view._nativeView.setTextColor(nativeValue);
};
TextBaseStyler.getNativeColorValue = function(view) {
return view._nativeView.getTextColors().getDefaultColor();
};
TextBaseStyler.setFontInternalProperty = function(view, newValue, nativeValue) {
var tv = view._nativeView;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.resetFontInternalProperty = function(view, nativeValue) {
var tv = view._nativeView;
if (tv && nativeValue) {
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.getNativeFontInternalValue = function(view) {
var tv = view._nativeView;
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
};
TextBaseStyler.setTextAlignmentProperty = function(view, newValue) {
var verticalGravity = view._nativeView.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;
switch (newValue) {
case enums.TextAlignment.left:
view._nativeView.setGravity(android.view.Gravity.LEFT | verticalGravity);
break;

case enums.TextAlignment.center:
view._nativeView.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
break;

case enums.TextAlignment.right:
view._nativeView.setGravity(android.view.Gravity.RIGHT | verticalGravity);
break;

default:
break;
}
};
TextBaseStyler.resetTextAlignmentProperty = function(view, nativeValue) {
view._nativeView.setGravity(nativeValue);
};
TextBaseStyler.getNativeTextAlignmentValue = function(view) {
return view._nativeView.getGravity();
};
TextBaseStyler.setTextDecorationProperty = function(view, newValue) {
utils.ad.setTextDecoration(view._nativeView, newValue);
};
TextBaseStyler.resetTextDecorationProperty = function(view, nativeValue) {
utils.ad.setTextDecoration(view._nativeView, enums.TextDecoration.none);
};
TextBaseStyler.setTextTransformProperty = function(view, newValue) {
utils.ad.setTextTransform(view, newValue);
};
TextBaseStyler.resetTextTransformProperty = function(view, nativeValue) {
utils.ad.setTextTransform(view, enums.TextTransform.none);
};
TextBaseStyler.setWhiteSpaceProperty = function(view, newValue) {
utils.ad.setWhiteSpace(view._nativeView, newValue);
};
TextBaseStyler.resetWhiteSpaceProperty = function(view, nativeValue) {
utils.ad.setWhiteSpace(view._nativeView, enums.WhiteSpace.normal);
};
TextBaseStyler.getLetterSpacingProperty = function(view) {
return view.android.getLetterSpacing();
};
TextBaseStyler.setLetterSpacingProperty = function(view, newValue) {
view.android.setLetterSpacing(newValue);
};
TextBaseStyler.resetLetterSpacingProperty = function(view, nativeValue) {
view.android.setLetterSpacing(nativeValue);
};
TextBaseStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "TextBase");
style.registerHandler(style.placeholderColorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setPlaceholderColorProperty, TextBaseStyler.resetPlaceholderColorProperty, TextBaseStyler.getNativePlaceholderColorValue), "TextBase");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "TextBase");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "TextBase");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "TextBase");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "TextBase");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "TextBase");
if (parseInt(platform_1.device.sdkVersion, 10) >= 21) {
style.registerHandler(style.letterSpacingProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setLetterSpacingProperty, TextBaseStyler.resetLetterSpacingProperty, TextBaseStyler.getLetterSpacingProperty), "TextBase");
}
};
return TextBaseStyler;
}();
exports.TextBaseStyler = TextBaseStyler;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(65);
var types = __webpack_require__(14);
function onYearPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getYear() !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.yearProperty.metadata.onSetNativeValue = onYearPropertyChanged;
function onMonthPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getMonth() !== data.newValue - 1) {
updateNativeDate(picker);
}
}
common.DatePicker.monthProperty.metadata.onSetNativeValue = onMonthPropertyChanged;
function onDayPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getDayOfMonth() !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.dayProperty.metadata.onSetNativeValue = onDayPropertyChanged;
function updateNativeDate(picker) {
var year = types.isNumber(picker.year) ? picker.year : picker.android.getYear();
var month = types.isNumber(picker.month) ? picker.month - 1 : Math.max(0, picker.android.getMonth() - 1);
var day = types.isNumber(picker.day) ? picker.day : picker.android.getDayOfMonth();
picker.date = new Date(year, month, day);
}
function onMaxDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMaxDate() !== newValue) {
picker.android.setMaxDate(newValue);
}
}
common.DatePicker.maxDateProperty.metadata.onSetNativeValue = onMaxDatePropertyChanged;
function onMinDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMinDate() !== newValue) {
picker.android.setMinDate(newValue);
}
}
common.DatePicker.minDateProperty.metadata.onSetNativeValue = onMinDatePropertyChanged;
function onDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue;
if (picker.android && (picker.android.getDayOfMonth() !== newValue.getDate() || picker.android.getMonth() !== newValue.getMonth() || picker.android.getYear() !== newValue.getFullYear())) {
picker.android.updateDate(newValue.getFullYear(), newValue.getMonth(), newValue.getDate());
}
}
common.DatePicker.dateProperty.metadata.onSetNativeValue = onDatePropertyChanged;
global.moduleMerge(common, exports);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
var that = new WeakRef(this);
this._listener = new android.widget.DatePicker.OnDateChangedListener({
get owner() {
return that.get();
},
onDateChanged: function(picker, year, month, day) {
if (this.owner) {
var dateIsChanged = false;
if (year !== this.owner.year) {
this.owner._onPropertyChangedFromNative(common.DatePicker.yearProperty, year);
dateIsChanged = true;
}
if (month + 1 !== this.owner.month) {
this.owner._onPropertyChangedFromNative(common.DatePicker.monthProperty, month + 1);
dateIsChanged = true;
}
if (day !== this.owner.day) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dayProperty, day);
dateIsChanged = true;
}
if (dateIsChanged) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dateProperty, new Date(year, month, day));
}
}
}
});
}
Object.defineProperty(DatePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
DatePicker.prototype._createUI = function() {
this._android = new android.widget.DatePicker(this._context);
this._android.setCalendarViewShown(false);
this._android.init(0, 0, 0, this._listener);
};
return DatePicker;
}(common.DatePicker);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var view = __webpack_require__(12);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
}
Object.defineProperty(DatePicker.prototype, "year", {
get: function() {
return this._getValue(DatePicker.yearProperty);
},
set: function(value) {
this._setValue(DatePicker.yearProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "month", {
get: function() {
return this._getValue(DatePicker.monthProperty);
},
set: function(value) {
this._setValue(DatePicker.monthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "day", {
get: function() {
return this._getValue(DatePicker.dayProperty);
},
set: function(value) {
this._setValue(DatePicker.dayProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "maxDate", {
get: function() {
return this._getValue(DatePicker.maxDateProperty);
},
set: function(value) {
this._setValue(DatePicker.maxDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "minDate", {
get: function() {
return this._getValue(DatePicker.minDateProperty);
},
set: function(value) {
this._setValue(DatePicker.minDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "date", {
get: function() {
return this._getValue(DatePicker.dateProperty);
},
set: function(value) {
this._setValue(DatePicker.dateProperty, value);
},
enumerable: true,
configurable: true
});
DatePicker.yearProperty = new dependencyObservable.Property("year", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.monthProperty = new dependencyObservable.Property("month", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dayProperty = new dependencyObservable.Property("day", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.maxDateProperty = new dependencyObservable.Property("maxDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.minDateProperty = new dependencyObservable.Property("minDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dateProperty = new dependencyObservable.Property("date", "DatePicker", new proxy.PropertyMetadata(undefined));
return DatePicker;
}(view.View);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(67);
function onHtmlPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var types = __webpack_require__(14);
if (types.isString(data.newValue)) {
var mask = 15;
if (data.newValue.search(/<a\s/i) >= 0) {
mask = 0;
}
view.android.setAutoLinkMask(mask);
view.android.setText(android.text.Html.fromHtml(data.newValue));
} else {
view.android.setText("");
}
}
common.HtmlView.htmlProperty.metadata.onSetNativeValue = onHtmlPropertyChanged;
global.moduleMerge(common, exports);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
HtmlView.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setLinksClickable(true);
this._android.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
};
return HtmlView;
}(common.HtmlView);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var view = __webpack_require__(12);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "html", {
get: function() {
return this._getValue(HtmlView.htmlProperty);
},
set: function(value) {
this._setValue(HtmlView.htmlProperty, value);
},
enumerable: true,
configurable: true
});
HtmlView.htmlProperty = new dependencyObservable.Property("html", "HtmlView", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return HtmlView;
}(view.View);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var imageCommon = __webpack_require__(69);
var style = __webpack_require__(15);
var enums = __webpack_require__(39);
var types = __webpack_require__(14);
var imageSource = __webpack_require__(53);
var utils = __webpack_require__(37);
var fs = __webpack_require__(46);
global.moduleMerge(imageCommon, exports);
var FILE_PREFIX = "file:///";
var ASYNC = "async";
var imageFetcher;
var imageCache;
(function(CacheMode) {
CacheMode[CacheMode["none"] = 0] = "none";
CacheMode[CacheMode["memory"] = 1] = "memory";
CacheMode[CacheMode["diskAndMemory"] = 2] = "diskAndMemory";
})(exports.CacheMode || (exports.CacheMode = {}));
var CacheMode = exports.CacheMode;
function onStretchPropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
switch (data.newValue) {
case enums.Stretch.aspectFit:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
break;

case enums.Stretch.aspectFill:
image.android.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
break;

case enums.Stretch.fill:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
break;

case enums.Stretch.none:
default:
image.android.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
break;
}
}
function onImageSourcePropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
image._setNativeImage(data.newValue);
}
function initImageCache(context, mode, memoryCacheSize, diskCacheSize) {
if (mode === void 0) {
mode = CacheMode.diskAndMemory;
}
if (memoryCacheSize === void 0) {
memoryCacheSize = .25;
}
if (diskCacheSize === void 0) {
diskCacheSize = 10 * 1024 * 1024;
}
if (exports.currentCacheMode === mode) {
return;
}
exports.currentCacheMode = mode;
if (!imageFetcher) {
imageFetcher = org.nativescript.widgets.image.Fetcher.getInstance(context);
}
if (mode === CacheMode.none) {
if (imageCache != null && imageFetcher != null) {
imageFetcher.clearCache();
}
}
var params = new org.nativescript.widgets.image.Cache.CacheParams();
params.memoryCacheEnabled = mode !== CacheMode.none;
params.setMemCacheSizePercent(memoryCacheSize);
params.diskCacheEnabled = mode === CacheMode.diskAndMemory;
params.diskCacheSize = diskCacheSize;
imageCache = org.nativescript.widgets.image.Cache.getInstance(params);
imageFetcher.addImageCache(imageCache);
imageFetcher.initCache();
}
exports.initImageCache = initImageCache;
imageCommon.Image.imageSourceProperty.metadata.onSetNativeValue = onImageSourcePropertyChanged;
imageCommon.Image.stretchProperty.metadata.onSetNativeValue = onStretchPropertyChanged;
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
this.decodeWidth = 0;
this.decodeHeight = 0;
this.useCache = true;
}
Object.defineProperty(Image.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Image.prototype._createUI = function() {
if (!imageFetcher) {
initImageCache(this._context);
}
this._android = new org.nativescript.widgets.ImageView(this._context);
this._createImageSourceFromSrc();
};
Image.prototype._setNativeImage = function(nativeImage) {
if (!nativeImage) {
return;
}
var rotation = nativeImage.rotationAngle ? nativeImage.rotationAngle : 0;
this.android.setRotationAngle(rotation);
this.android.setImageBitmap(nativeImage.android);
};
Image.prototype._createImageSourceFromSrc = function() {
var imageView = this._android;
if (!imageView || !this.src) {
return;
}
var value = this.src;
var async = this.loadMode === ASYNC;
var owner = new WeakRef(this);
var listener = new org.nativescript.widgets.image.Worker.OnImageLoadedListener({
onImageLoaded: function(success) {
var that = owner.get();
if (that) {
that._setValue(Image.isLoadingProperty, false);
}
}
});
this._resetValue(Image.imageSourceProperty);
if (types.isString(value)) {
value = value.trim();
this._setValue(Image.isLoadingProperty, true);
if (utils.isDataURI(value)) {
_super.prototype._createImageSourceFromSrc.call(this);
} else if (imageSource.isFileOrResourcePath(value)) {
if (value.indexOf(utils.RESOURCE_PREFIX) === 0) {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, async, listener);
} else {
var fileName = value;
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
imageView.setUri(FILE_PREFIX + fileName, this.decodeWidth, this.decodeHeight, this.useCache, async, listener);
}
} else {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, true, listener);
}
} else {
_super.prototype._createImageSourceFromSrc.call(this);
}
};
return Image;
}(imageCommon.Image);
exports.Image = Image;
var ImageStyler = function() {
function ImageStyler() {}
ImageStyler.setTintColorProperty = function(view, newValue) {
var imageView = view._nativeView;
imageView.setColorFilter(newValue);
};
ImageStyler.resetTintColorProperty = function(view, nativeValue) {
var imageView = view._nativeView;
imageView.clearColorFilter();
};
ImageStyler.registerHandlers = function() {
style.registerHandler(style.tintColorProperty, new style.StylePropertyChangedHandler(ImageStyler.setTintColorProperty, ImageStyler.resetTintColorProperty), "Image");
};
return ImageStyler;
}();
exports.ImageStyler = ImageStyler;
ImageStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var view = __webpack_require__(12);
var proxy = __webpack_require__(52);
var imageSource = __webpack_require__(53);
var imageAssetModule = __webpack_require__(70);
var enums = __webpack_require__(39);
var platform = __webpack_require__(49);
var utils = __webpack_require__(37);
var types = __webpack_require__(14);
var SRC = "src";
var IMAGE_SOURCE = "imageSource";
var LOAD_MODE = "loadMode";
var SYNC = "sync";
var ASYNC = "async";
var IMAGE = "Image";
var ISLOADING = "isLoading";
var STRETCH = "stretch";
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependencyObservable.PropertyMetadataSettings.None : dependencyObservable.PropertyMetadataSettings.AffectsLayout;
function onSrcPropertyChanged(data) {
var image = data.object;
image._createImageSourceFromSrc();
}
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
}
Object.defineProperty(Image.prototype, "imageSource", {
get: function() {
return this._getValue(Image.imageSourceProperty);
},
set: function(value) {
this._setValue(Image.imageSourceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "src", {
get: function() {
return this._getValue(Image.srcProperty);
},
set: function(value) {
this._setValue(Image.srcProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "isLoading", {
get: function() {
return this._getValue(Image.isLoadingProperty);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "stretch", {
get: function() {
return this._getValue(Image.stretchProperty);
},
set: function(value) {
this._setValue(Image.stretchProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "loadMode", {
get: function() {
return this._getValue(Image.loadModeProperty);
},
set: function(value) {
this._setValue(Image.loadModeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "tintColor", {
get: function() {
return this.style.tintColor;
},
set: function(value) {
this.style.tintColor = value;
},
enumerable: true,
configurable: true
});
Image.prototype._setNativeImage = function(nativeImage) {};
Image.prototype._createImageSourceFromSrc = function() {
var _this = this;
var value = this.src;
if (types.isString(value)) {
value = value.trim();
this.imageSource = null;
this["_url"] = value;
this._setValue(Image.isLoadingProperty, true);
var source = new imageSource.ImageSource();
var imageLoaded = function() {
var currentValue = _this.src;
if (!types.isString(_this.src) || value !== currentValue.trim()) {
return;
}
_this.imageSource = source;
_this._setValue(Image.isLoadingProperty, false);
};
if (utils.isDataURI(value)) {
var base64Data = value.split(",")[1];
if (types.isDefined(base64Data)) {
if (this.loadMode === SYNC) {
source.loadFromBase64(base64Data);
imageLoaded();
} else if (this.loadMode === ASYNC) {
source.fromBase64(base64Data).then(imageLoaded);
}
}
} else if (imageSource.isFileOrResourcePath(value)) {
if (value.indexOf(utils.RESOURCE_PREFIX) === 0) {
var resPath = value.substr(utils.RESOURCE_PREFIX.length);
if (this.loadMode === SYNC) {
source.loadFromResource(resPath);
imageLoaded();
} else if (this.loadMode === ASYNC) {
this.imageSource = null;
source.fromResource(resPath).then(imageLoaded);
}
} else {
if (this.loadMode === SYNC) {
source.loadFromFile(value);
imageLoaded();
} else if (this.loadMode === ASYNC) {
this.imageSource = null;
source.fromFile(value).then(imageLoaded);
}
}
} else {
this.imageSource = null;
imageSource.fromUrl(value).then(function(r) {
if (_this["_url"] === value) {
_this.imageSource = r;
_this._setValue(Image.isLoadingProperty, false);
}
});
}
} else if (value instanceof imageSource.ImageSource) {
this.imageSource = value;
this._setValue(Image.isLoadingProperty, false);
} else if (value instanceof imageAssetModule.ImageAsset) {
imageSource.fromAsset(value).then(function(result) {
_this.imageSource = result;
_this._setValue(Image.isLoadingProperty, false);
});
} else {
this.imageSource = imageSource.fromNativeSource(value);
this._setValue(Image.isLoadingProperty, false);
}
};
Image.srcProperty = new dependencyObservable.Property(SRC, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onSrcPropertyChanged));
Image.imageSourceProperty = new dependencyObservable.Property(IMAGE_SOURCE, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
Image.isLoadingProperty = new dependencyObservable.Property(ISLOADING, IMAGE, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
Image.stretchProperty = new dependencyObservable.Property(STRETCH, IMAGE, new proxy.PropertyMetadata(enums.Stretch.aspectFit, AffectsLayout));
Image.loadModeProperty = new dependencyObservable.Property(LOAD_MODE, IMAGE, new proxy.PropertyMetadata(SYNC, 0, null, function(value) {
return value === SYNC || value === ASYNC;
}, null));
return Image;
}(view.View);
exports.Image = Image;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(49);
var common = __webpack_require__(71);
global.moduleMerge(common, exports);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset(asset) {
_super.call(this);
this.android = asset;
}
ImageAsset.prototype.getImageAsync = function(callback) {
var bitmapOptions = new android.graphics.BitmapFactory.Options();
bitmapOptions.inJustDecodeBounds = true;
var bitmap = android.graphics.BitmapFactory.decodeFile(this.android, bitmapOptions);
var sourceSize = {
width: bitmapOptions.outWidth,
height: bitmapOptions.outHeight
};
var requestedSize = common.getRequestedImageSize(sourceSize, this.options);
var sampleSize = calculateInSampleSize(bitmapOptions.outWidth, bitmapOptions.outHeight, requestedSize.width, requestedSize.height);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
try {
bitmap = android.graphics.BitmapFactory.decodeFile(this.android, finalBitmapOptions);
callback(bitmap, null);
} catch (ex) {
callback(null, ex);
}
};
return ImageAsset;
}(common.ImageAsset);
exports.ImageAsset = ImageAsset;
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
var displayWidth = platform.screen.mainScreen.widthDIPs;
var displayHeigth = platform.screen.mainScreen.heightDIPs;
reqWidth = reqWidth > 0 && reqWidth < displayWidth ? reqWidth : displayWidth;
reqHeight = reqHeight > 0 && reqHeight < displayHeigth ? reqHeight : displayHeigth;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(49);
var ImageAsset = function() {
function ImageAsset() {}
Object.defineProperty(ImageAsset.prototype, "options", {
get: function() {
return this._options;
},
set: function(value) {
this._options = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "ios", {
get: function() {
return this._ios;
},
set: function(value) {
this._ios = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
this._android = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "nativeImage", {
get: function() {
return this._nativeImage;
},
set: function(value) {
this._nativeImage = value;
},
enumerable: true,
configurable: true
});
ImageAsset.prototype.getImageAsync = function(callback) {};
return ImageAsset;
}();
exports.ImageAsset = ImageAsset;
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
function getRequestedImageSize(src, options) {
var reqWidth = platform.screen.mainScreen.widthDIPs;
var reqHeight = platform.screen.mainScreen.heightDIPs;
if (options && options.width) {
reqWidth = options.width > 0 && options.width < reqWidth ? options.width : reqWidth;
}
if (options && options.height) {
reqHeight = options.height > 0 && options.height < reqHeight ? options.height : reqHeight;
}
if (options && options.keepAspectRatio) {
var safeAspectSize = getAspectSafeDimensions(src.width, src.height, reqWidth, reqHeight);
reqWidth = safeAspectSize.width;
reqHeight = safeAspectSize.height;
}
return {
width: reqWidth,
height: reqHeight
};
}
exports.getRequestedImageSize = getRequestedImageSize;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(73);
global.moduleMerge(common, exports);
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Label.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setSingleLine(true);
this._android.setEllipsize(android.text.TextUtils.TruncateAt.END);
};
return Label;
}(common.Label);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(74);
var enums_1 = __webpack_require__(39);
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "textWrap", {
get: function() {
return this.style.whiteSpace === enums_1.WhiteSpace.normal;
},
set: function(value) {
this.style.whiteSpace = value ? enums_1.WhiteSpace.normal : enums_1.WhiteSpace.nowrap;
},
enumerable: true,
configurable: true
});
return Label;
}(textBase.TextBase);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(75);
var types = __webpack_require__(14);
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.apply(this, arguments);
}
TextBase.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
var newValue = types.toUIString(data.newValue);
this.android.setText(newValue);
}
};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {
var newText = value ? value._formattedText : null;
if (this.android) {
this.android.setText(newText);
}
};
return TextBase;
}(common.TextBase);
exports.TextBase = TextBase;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var observable = __webpack_require__(18);
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var formattedString = __webpack_require__(20);
var tbs = __webpack_require__(63);
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(30);
}
}
var textProperty = new dependencyObservable.Property("text", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.None));
var formattedTextProperty = new dependencyObservable.Property("formattedText", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
function onTextPropertyChanged(data) {
var textBase = data.object;
textBase._onTextPropertyChanged(data);
textBase.style._updateTextTransform();
textBase.style._updateTextDecoration();
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onFormattedTextPropertyChanged(data) {
var textBase = data.object;
textBase._onFormattedTextPropertyChanged(data);
}
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var styleHandlersInitialized;
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.call(this);
if (!styleHandlersInitialized) {
styleHandlersInitialized = true;
tbs.TextBaseStyler.registerHandlers();
}
}
TextBase.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
this.style._updateTextTransform();
this.style._updateTextDecoration();
};
Object.defineProperty(TextBase.prototype, "text", {
get: function() {
return this._getValue(TextBase.textProperty);
},
set: function(value) {
this._setValue(TextBase.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "textAlignment", {
get: function() {
return this.style.textAlignment;
},
set: function(value) {
this.style.textAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "formattedText", {
get: function() {
return this._getValue(TextBase.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(TextBase.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
TextBase.prototype.onFormattedTextChanged = function(eventData) {
var value = eventData.value;
this._setFormattedTextPropertyToNative(value);
this._onPropertyChangedFromNative(TextBase.textProperty, value.toString());
};
TextBase.prototype._onTextPropertyChanged = function(data) {};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {};
TextBase.prototype._onFormattedTextPropertyChanged = function(data) {
var newValue = data.newValue;
if (newValue) {
newValue.parent = this;
}
this._setFormattedTextPropertyToNative(newValue);
var newText = newValue ? newValue.toString() : "";
this._onPropertyChangedFromNative(TextBase.textProperty, newText);
};
TextBase.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
TextBase.prototype._requestLayoutOnTextChanged = function() {
this.requestLayout();
};
TextBase.textProperty = textProperty;
TextBase.formattedTextProperty = formattedTextProperty;
return TextBase;
}(view.View);
exports.TextBase = TextBase;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var common = __webpack_require__(77);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter(lp);
nativeView.setLayoutParams(lp);
}
}
}
function setNativeLeftProperty(data) {
setNativeProperty(data, function(lp) {
lp.left = data.newValue * utils.layout.getDisplayDensity();
});
}
function setNativeTopProperty(data) {
setNativeProperty(data, function(lp) {
lp.top = data.newValue * utils.layout.getDisplayDensity();
});
}
common.AbsoluteLayout.leftProperty.metadata.onSetNativeValue = setNativeLeftProperty;
common.AbsoluteLayout.topProperty.metadata.onSetNativeValue = setNativeTopProperty;
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(AbsoluteLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbsoluteLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
AbsoluteLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.AbsoluteLayout(this._context);
};
return AbsoluteLayout;
}(common.AbsoluteLayout);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(78);
var view_1 = __webpack_require__(12);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var special_properties_1 = __webpack_require__(36);
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("left", function(instance, propertyValue) {
AbsoluteLayout.setLeft(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("top", function(instance, propertyValue) {
AbsoluteLayout.setTop(instance, !isNaN(+propertyValue) && +propertyValue);
});
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
AbsoluteLayout.isValid = function(value) {
return isFinite(value);
};
AbsoluteLayout.onLeftPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onLeftChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.onTopPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onTopChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.getLeft = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.leftProperty);
};
AbsoluteLayout.setLeft = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.leftProperty, value);
};
AbsoluteLayout.getTop = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.topProperty);
};
AbsoluteLayout.setTop = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.topProperty, value);
};
AbsoluteLayout.prototype.onLeftChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.prototype.onTopChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.leftProperty = new dependency_observable_1.Property("left", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onLeftPropertyChanged, AbsoluteLayout.isValid));
AbsoluteLayout.topProperty = new dependency_observable_1.Property("top", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onTopPropertyChanged, AbsoluteLayout.isValid));
return AbsoluteLayout;
}(layout_base_1.LayoutBase);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(79);
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
}
LayoutBase.prototype._onClipToBoundsChanged = function(oldValue, newValue) {
console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative");
};
return LayoutBase;
}(common.LayoutBase);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(29);
var dependency_observable_1 = __webpack_require__(29);
var proxy_1 = __webpack_require__(52);
var clipToBoundsProperty = new dependency_observable_1.Property("clipToBounds", "LayoutBase", new proxy_1.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
function onClipToBoundsPropertyChanged(data) {
var layout = data.object;
layout._onClipToBoundsChanged(data.oldValue, data.newValue);
}
clipToBoundsProperty.metadata.onSetNativeValue = onClipToBoundsPropertyChanged;
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
this._subViews = new Array();
}
LayoutBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.addChild(value);
}
};
LayoutBase.prototype.getChildrenCount = function() {
return this._subViews.length;
};
Object.defineProperty(LayoutBase.prototype, "_childrenCount", {
get: function() {
return this._subViews.length;
},
enumerable: true,
configurable: true
});
LayoutBase.prototype.getChildAt = function(index) {
return this._subViews[index];
};
LayoutBase.prototype.getChildIndex = function(child) {
return this._subViews.indexOf(child);
};
LayoutBase.prototype.getChildById = function(id) {
return view.getViewById(this, id);
};
LayoutBase.prototype._registerLayoutChild = function(child) {};
LayoutBase.prototype._unregisterLayoutChild = function(child) {};
LayoutBase.prototype.addChild = function(child) {
this._subViews.push(child);
this._addView(child);
this._registerLayoutChild(child);
};
LayoutBase.prototype.insertChild = function(child, atIndex) {
this._subViews.splice(atIndex, 0, child);
this._addView(child, atIndex);
this._registerLayoutChild(child);
};
LayoutBase.prototype.removeChild = function(child) {
this._removeView(child);
var index = this._subViews.indexOf(child);
this._subViews.splice(index, 1);
this._unregisterLayoutChild(child);
};
LayoutBase.prototype.removeChildren = function() {
while (this.getChildrenCount() !== 0) {
this.removeChild(this._subViews[this.getChildrenCount() - 1]);
}
};
Object.defineProperty(LayoutBase.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "clipToBounds", {
get: function() {
return this._getValue(LayoutBase.clipToBoundsProperty);
},
set: function(value) {
this._setValue(LayoutBase.clipToBoundsProperty, value);
},
enumerable: true,
configurable: true
});
LayoutBase.prototype._onClipToBoundsChanged = function(oldValue, newValue) {};
LayoutBase.prototype._childIndexToNativeChildIndex = function(index) {
if (types.isUndefined(index)) {
return undefined;
}
var result = 0;
for (var i = 0; i < index && i < this._subViews.length; i++) {
result += this._subViews[i]._getNativeViewsCount();
}
return result;
};
LayoutBase.prototype._eachChildView = function(callback) {
var i;
var length = this._subViews.length;
var retVal;
for (i = 0; i < length; i++) {
retVal = callback(this._subViews[i]);
if (retVal === false) {
break;
}
}
};
LayoutBase.prototype.eachLayoutChild = function(callback) {
var lastChild = null;
this._eachChildView(function(cv) {
cv._eachLayoutView(function(lv) {
if (lastChild && lastChild._isVisible) {
callback(lastChild, false);
}
lastChild = lv;
});
return true;
});
if (lastChild && lastChild._isVisible) {
callback(lastChild, true);
}
};
LayoutBase.adjustChildrenLayoutParams = function(layoutBase, widthMeasureSpec, heightMeasureSpec) {
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
view.View.adjustChildLayoutParams(child, widthMeasureSpec, heightMeasureSpec);
}
};
LayoutBase.restoreOriginalParams = function(layoutBase) {
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
view.View.restoreChildOriginalParams(child);
}
};
LayoutBase.clipToBoundsProperty = clipToBoundsProperty;
return LayoutBase;
}(view.CustomLayoutView);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(81);
var enums_1 = __webpack_require__(39);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeDockProperty(data) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
switch (data.newValue) {
case enums_1.Dock.left:
lp.dock = org.nativescript.widgets.Dock.left;
break;

case enums_1.Dock.top:
lp.dock = org.nativescript.widgets.Dock.top;
break;

case enums_1.Dock.right:
lp.dock = org.nativescript.widgets.Dock.right;
break;

case enums_1.Dock.bottom:
lp.dock = org.nativescript.widgets.Dock.bottom;
break;

default:
throw new Error("Invalid dock value: " + data.newValue + " on element: " + view);
}
nativeView.setLayoutParams(lp);
}
}
}
common.DockLayout.dockProperty.metadata.onSetNativeValue = setNativeDockProperty;
function setNativeStretchLastChildProperty(data) {
var dockLayout = data.object;
var nativeView = dockLayout._nativeView;
nativeView.setStretchLastChild(data.newValue);
}
common.DockLayout.stretchLastChildProperty.metadata.onSetNativeValue = setNativeStretchLastChildProperty;
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(DockLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DockLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
DockLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.DockLayout(this._context);
};
return DockLayout;
}(common.DockLayout);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(49);
var enums_1 = __webpack_require__(39);
var layout_base_1 = __webpack_require__(78);
var view_1 = __webpack_require__(12);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var special_properties_1 = __webpack_require__(36);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isDockValid(value) {
return value === enums_1.Dock.left || value === enums_1.Dock.top || value === enums_1.Dock.right || value === enums_1.Dock.bottom;
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("dock", function(instance, propertyValue) {
DockLayout.setDock(instance, propertyValue);
});
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
DockLayout.onDockPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof DockLayout) {
layout.onDockChanged(view, data.oldValue, data.newValue);
}
}
};
DockLayout.getDock = function(element) {
return validateArgs(element)._getValue(DockLayout.dockProperty);
};
DockLayout.setDock = function(element, value) {
validateArgs(element)._setValue(DockLayout.dockProperty, value);
};
Object.defineProperty(DockLayout.prototype, "stretchLastChild", {
get: function() {
return this._getValue(DockLayout.stretchLastChildProperty);
},
set: function(value) {
this._setValue(DockLayout.stretchLastChildProperty, value);
},
enumerable: true,
configurable: true
});
DockLayout.prototype.onDockChanged = function(view, oldValue, newValue) {};
DockLayout.dockProperty = new dependency_observable_1.Property("dock", "DockLayout", new proxy_1.PropertyMetadata(enums_1.Dock.left, undefined, DockLayout.onDockPropertyChanged, isDockValid));
DockLayout.stretchLastChildProperty = new dependency_observable_1.Property("stretchLastChild", "DockLayout", new proxy_1.PropertyMetadata(true, AffectsLayout));
return DockLayout;
}(layout_base_1.LayoutBase);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var common = __webpack_require__(83);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter(lp);
nativeView.setLayoutParams(lp);
}
}
}
function setNativeRowProperty(data) {
setNativeProperty(data, function(lp) {
lp.row = data.newValue;
});
}
function setNativeRowSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.rowSpan = data.newValue;
});
}
function setNativeColumnProperty(data) {
setNativeProperty(data, function(lp) {
lp.column = data.newValue;
});
}
function setNativeColumnSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.columnSpan = data.newValue;
});
}
common.GridLayout.rowProperty.metadata.onSetNativeValue = setNativeRowProperty;
common.GridLayout.rowSpanProperty.metadata.onSetNativeValue = setNativeRowSpanProperty;
common.GridLayout.columnProperty.metadata.onSetNativeValue = setNativeColumnProperty;
common.GridLayout.columnSpanProperty.metadata.onSetNativeValue = setNativeColumnSpanProperty;
function createNativeSpec(itemSpec) {
switch (itemSpec.gridUnitType) {
case common.GridUnitType.auto:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

case common.GridUnitType.star:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

case common.GridUnitType.pixel:
return new org.nativescript.widgets.ItemSpec(itemSpec.value * utils.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

default:
throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.apply(this, arguments);
}
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
if (this.nativeSpec) {
return Math.round(this.nativeSpec.getActualLength() / utils.layout.getDisplayDensity());
}
return 0;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(common.ItemSpec);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(GridLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
GridLayout.prototype._createUI = function() {
var _this = this;
this._layout = new org.nativescript.widgets.GridLayout(this._context);
this.getRows().forEach(function(itemSpec, index, rows) {
_this._onRowAdded(itemSpec);
}, this);
this.getColumns().forEach(function(itemSpec, index, rows) {
_this._onColumnAdded(itemSpec);
}, this);
};
GridLayout.prototype._onRowAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addRow(nativeSpec);
}
};
GridLayout.prototype._onColumnAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addColumn(nativeSpec);
}
};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeRowAt(index);
}
};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeColumnAt(index);
}
};
GridLayout.prototype.invalidate = function() {};
return GridLayout;
}(common.GridLayout);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(78);
var view_1 = __webpack_require__(12);
var bindable_1 = __webpack_require__(28);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var special_properties_1 = __webpack_require__(36);
var numberUtils = __webpack_require__(84);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var GridUnitType;
(function(GridUnitType) {
GridUnitType.auto = "auto";
GridUnitType.pixel = "pixel";
GridUnitType.star = "star";
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));
special_properties_1.registerSpecialProperty("row", function(instance, propertyValue) {
GridLayout.setRow(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("col", function(instance, propertyValue) {
GridLayout.setColumn(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("colSpan", function(instance, propertyValue) {
GridLayout.setColumnSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("rowSpan", function(instance, propertyValue) {
GridLayout.setRowSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.call(this);
this._actualLength = 0;
if (arguments.length === 0) {
this._value = 1;
this._unitType = GridUnitType.star;
} else if (arguments.length === 2) {
ensureTypes();
if (types.isNumber(arguments[0]) && types.isString(arguments[1])) {
if (arguments[0] < 0 || arguments[1] !== GridUnitType.auto && arguments[1] !== GridUnitType.star && arguments[1] !== GridUnitType.pixel) {
throw new Error("Invalid values.");
}
this._value = arguments[0];
this._unitType = arguments[1];
} else {
throw new Error("Arguments must be number and string.");
}
} else {
throw new Error("ItemSpec expects 0 or 2 arguments");
}
this.index = -1;
}
ItemSpec.create = function(value, type) {
var spec = new ItemSpec();
spec._value = value;
spec._unitType = type;
return spec;
};
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
return this._actualLength;
},
set: function(value) {
throw new Error("actualLength is read-only property");
},
enumerable: true,
configurable: true
});
ItemSpec.equals = function(value1, value2) {
return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
};
Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
get: function() {
return this._unitType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
get: function() {
return this._unitType === GridUnitType.pixel;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAuto", {
get: function() {
return this._unitType === GridUnitType.auto;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isStar", {
get: function() {
return this._unitType === GridUnitType.star;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(bindable_1.Bindable);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
this._rows = new Array();
this._cols = new Array();
}
GridLayout.getColumn = function(element) {
return validateArgs(element)._getValue(GridLayout.columnProperty);
};
GridLayout.setColumn = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnProperty, value);
};
GridLayout.getColumnSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.columnSpanProperty);
};
GridLayout.setColumnSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnSpanProperty, value);
};
GridLayout.getRow = function(element) {
return validateArgs(element)._getValue(GridLayout.rowProperty);
};
GridLayout.setRow = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowProperty, value);
};
GridLayout.getRowSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.rowSpanProperty);
};
GridLayout.setRowSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowSpanProperty, value);
};
GridLayout.prototype.addRow = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._rows.push(itemSpec);
this._onRowAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.addColumn = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._cols.push(itemSpec);
this._onColumnAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.removeRow = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._rows.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Row is not child of this GridLayout");
}
itemSpec.index = -1;
this._rows.splice(index, 1);
this._onRowRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumn = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._cols.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Column is not child of this GridLayout");
}
itemSpec.index = -1;
this._cols.splice(index, 1);
this._onColumnRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumns = function() {
for (var i = this._cols.length - 1; i >= 0; i--) {
var colSpec = this._cols[i];
this._onColumnRemoved(colSpec, i);
colSpec.index = -1;
}
this._cols.length = 0;
this.invalidate();
};
GridLayout.prototype.removeRows = function() {
for (var i = this._rows.length - 1; i >= 0; i--) {
var rowSpec = this._rows[i];
this._onRowRemoved(rowSpec, i);
rowSpec.index = -1;
}
this._rows.length = 0;
this.invalidate();
};
GridLayout.prototype.onRowChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onRowSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype._onRowAdded = function(itemSpec) {};
GridLayout.prototype._onColumnAdded = function(itemSpec) {};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {};
GridLayout.prototype.getColumns = function() {
return this._cols.slice();
};
GridLayout.prototype.getRows = function() {
return this._rows.slice();
};
Object.defineProperty(GridLayout.prototype, "columnsInternal", {
get: function() {
return this._cols;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "rowsInternal", {
get: function() {
return this._rows;
},
enumerable: true,
configurable: true
});
GridLayout.prototype.invalidate = function() {
this.requestLayout();
};
GridLayout.prototype._applyXmlAttribute = function(attributeName, attributeValue) {
if (attributeName === "columns") {
this._setColumns(attributeValue);
return true;
} else if (attributeName === "rows") {
this._setRows(attributeValue);
return true;
}
return _super.prototype._applyXmlAttribute.call(this, attributeName, attributeValue);
};
GridLayout.parseItemSpecs = function(value) {
var result = new Array();
var arr = value.split(/[\s,]+/);
for (var i = 0; i < arr.length; i++) {
var str = arr[i].trim();
if (str.length > 0) {
result.push(GridLayout.convertGridLength(arr[i].trim()));
}
}
return result;
};
GridLayout.convertGridLength = function(value) {
if (value === "auto") {
return ItemSpec.create(1, GridUnitType.auto);
} else if (value.indexOf("*") !== -1) {
var starCount = parseInt(value.replace("*", "") || "1");
return ItemSpec.create(starCount, GridUnitType.star);
} else if (!isNaN(parseInt(value))) {
return ItemSpec.create(parseInt(value), GridUnitType.pixel);
} else {
throw new Error("Cannot parse item spec from string: " + value);
}
};
GridLayout.onRowPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onRowSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.validateItemSpec = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value cannot be undefined.");
}
if (itemSpec.owner) {
throw new Error("itemSpec is already added to GridLayout.");
}
};
GridLayout.getView = function(object) {
if (object instanceof view_1.View) {
return object;
}
throw new Error("Element is not View or its descendant.");
};
GridLayout.prototype._setColumns = function(value) {
this.removeColumns();
var columns = GridLayout.parseItemSpecs(value);
for (var i = 0, count = columns.length; i < count; i++) {
this.addColumn(columns[i]);
}
};
GridLayout.prototype._setRows = function(value) {
this.removeRows();
var rows = GridLayout.parseItemSpecs(value);
for (var i = 0, count = rows.length; i < count; i++) {
this.addRow(rows[i]);
}
};
GridLayout.columnProperty = new dependency_observable_1.Property("Column", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnPropertyChanged, numberUtils.notNegative));
GridLayout.columnSpanProperty = new dependency_observable_1.Property("ColumnSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnSpanPropertyChanged, numberUtils.greaterThanZero));
GridLayout.rowProperty = new dependency_observable_1.Property("Row", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowPropertyChanged, numberUtils.notNegative));
GridLayout.rowSpanProperty = new dependency_observable_1.Property("RowSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowSpanPropertyChanged, numberUtils.greaterThanZero));
return GridLayout;
}(layout_base_1.LayoutBase);
exports.GridLayout = GridLayout;
}, function(module, exports) {
var epsilon = 1e-5;
function areClose(value1, value2) {
return Math.abs(value1 - value2) < epsilon;
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
return value1 > value2 || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
return value1 > value2 && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
return value1 < value2 && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
return Math.abs(value) < epsilon;
}
exports.isZero = isZero;
function greaterThanZero(value) {
return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
return value >= 0;
}
exports.notNegative = notNegative;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(86);
var enums_1 = __webpack_require__(39);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var stackLayout = data.object;
var nativeView = stackLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
common.StackLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(StackLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
StackLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.StackLayout(this._context);
};
return StackLayout;
}(common.StackLayout);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(49);
var layout_base_1 = __webpack_require__(78);
var enums_1 = __webpack_require__(39);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function validateOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "orientation", {
get: function() {
return this._getValue(StackLayout.orientationProperty);
},
set: function(value) {
this._setValue(StackLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
StackLayout.orientationProperty = new dependency_observable_1.Property("orientation", "StackLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.vertical, AffectsLayout, undefined, validateOrientation));
return StackLayout;
}(layout_base_1.LayoutBase);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(88);
var types = __webpack_require__(14);
global.moduleMerge(common, exports);
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.apply(this, arguments);
}
Object.defineProperty(ListPicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListPicker.prototype._createUI = function() {
this._android = new android.widget.NumberPicker(this._context);
this._android.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
this._android.setMinValue(0);
this._android.setMaxValue(0);
this._android.setValue(0);
var that = new WeakRef(this);
this._formatter = new android.widget.NumberPicker.Formatter({
get owner() {
return that.get();
},
format: function(index) {
if (this.owner) {
return this.owner._getItemAsString(index);
}
return " ";
}
});
this._android.setFormatter(this._formatter);
this._valueChangedListener = new android.widget.NumberPicker.OnValueChangeListener({
get owner() {
return that.get();
},
onValueChange: function(picker, oldVal, newVal) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.ListPicker.selectedIndexProperty, newVal);
}
}
});
this._android.setOnValueChangedListener(this._valueChangedListener);
var mInputTextField = java.lang.Class.forName("android.widget.NumberPicker").getDeclaredField("mInputText");
mInputTextField.setAccessible(true);
this._editText = mInputTextField.get(this._android);
this._editText.setFilters([]);
this._editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
_super.prototype._onSelectedIndexPropertyChanged.call(this, data);
if (this.android && types.isNumber(data.newValue)) {
this.android.setValue(data.newValue);
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {
if (this.android) {
if (!data.newValue || !data.newValue.length) {
this.android.setMaxValue(0);
} else {
this.android.setMaxValue(data.newValue.length - 1);
}
this.android.setWrapSelectorWheel(false);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
this._fixNumberPickerRendering();
};
ListPicker.prototype._fixNumberPickerRendering = function() {
if (!this.android) {
return;
}
this.android.setFormatter(null);
this.android.setFormatter(this._formatter);
if (this._editText) {
this._editText.setFilters([]);
}
this._editText.invalidate();
this.android.invalidate();
};
return ListPicker;
}(common.ListPicker);
exports.ListPicker = ListPicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var view = __webpack_require__(12);
var types = __webpack_require__(14);
var trace = __webpack_require__(31);
exports.traceCategory = "ListPicker";
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.apply(this, arguments);
}
Object.defineProperty(ListPicker.prototype, "selectedIndex", {
get: function() {
return this._getValue(ListPicker.selectedIndexProperty);
},
set: function(value) {
this._setValue(ListPicker.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListPicker.prototype, "items", {
get: function() {
return this._getValue(ListPicker.itemsProperty);
},
set: function(value) {
this._setValue(ListPicker.itemsProperty, value);
},
enumerable: true,
configurable: true
});
ListPicker.prototype._getItemAsString = function(index) {
if (!this.items || !this.items.length) {
return " ";
}
if (types.isDefined(this.items)) {
var item = this.items.getItem ? this.items.getItem(index) : this.items[index];
return types.isString(item) ? item : types.isDefined(item) ? item.toString() : index.toString();
}
return index.toString();
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
if (trace.enabled) {
trace.write("ListPicker._onSelectedIndexPropertyChanged(" + data.oldValue + " => " + data.newValue + ");", exports.traceCategory);
}
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, items.length - 1]");
}
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {};
ListPicker.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
if (trace.enabled) {
trace.write("ListPicker._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
}
var newItemsCount = 0;
if (newItems && newItems.length) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
ListPicker.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "ListPicker", new proxy.PropertyMetadata(undefined));
ListPicker.itemsProperty = new dependencyObservable.Property("items", "ListPicker", new proxy.PropertyMetadata(undefined));
return ListPicker;
}(view.View);
exports.ListPicker = ListPicker;
function onSelectedIndexPropertyChanged(data) {
var picker = data.object;
picker._onSelectedIndexPropertyChanged(data);
}
function onItemsPropertyChanged(data) {
var picker = data.object;
picker._onItemsPropertyChanged(data);
}
ListPicker.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
ListPicker.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
}, function(module, exports, __webpack_require__) {
var pageCommon = __webpack_require__(90);
var enums = __webpack_require__(39);
var actionBar = __webpack_require__(50);
var gridLayout = __webpack_require__(82);
global.moduleMerge(pageCommon, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(31);
}
}
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(23);
}
}
exports.DIALOG_FRAGMENT_TAG = "dialog";
var DialogFragmentClass;
function ensureDialogFragmentClass() {
if (DialogFragmentClass) {
return;
}
var DialogFragmentClassInner = function(_super) {
__extends(DialogFragmentClassInner, _super);
function DialogFragmentClassInner(_owner, _fullscreen, _shownCallback, _dismissCallback) {
_super.call(this);
this._owner = _owner;
this._fullscreen = _fullscreen;
this._shownCallback = _shownCallback;
this._dismissCallback = _dismissCallback;
return global.__native(this);
}
DialogFragmentClassInner.prototype.onCreateDialog = function(savedInstanceState) {
var dialog = new android.app.Dialog(this._owner._context);
dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
this._owner.horizontalAlignment = this._fullscreen ? enums.HorizontalAlignment.stretch : enums.HorizontalAlignment.center;
this._owner.verticalAlignment = this._fullscreen ? enums.VerticalAlignment.stretch : enums.VerticalAlignment.center;
this._owner.actionBarHidden = true;
dialog.setContentView(this._owner._nativeView, this._owner._nativeView.getLayoutParams());
var window = dialog.getWindow();
window.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if (this._fullscreen) {
window.setLayout(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
}
return dialog;
};
DialogFragmentClassInner.prototype.onStart = function() {
_super.prototype.onStart.call(this);
if (!this._owner.isLoaded) {
this._owner.onLoaded();
}
this._shownCallback();
};
DialogFragmentClassInner.prototype.onDestroyView = function() {
_super.prototype.onDestroyView.call(this);
if (this._owner.isLoaded) {
this._owner.onUnloaded();
}
this._owner._isAddedToNativeVisualTree = false;
this._owner._onDetached(true);
};
DialogFragmentClassInner.prototype.onDismiss = function(dialog) {
_super.prototype.onDismiss.call(this, dialog);
this._dismissCallback();
};
return DialogFragmentClassInner;
}(android.app.DialogFragment);
DialogFragmentClass = DialogFragmentClassInner;
}
var Page = function(_super) {
__extends(Page, _super);
function Page() {
_super.apply(this, arguments);
this._isBackNavigation = false;
}
Object.defineProperty(Page.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "_nativeView", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Page.prototype._createUI = function() {
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
};
Page.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (this._nativeView && child._nativeView) {
if (child instanceof actionBar.ActionBar) {
gridLayout.GridLayout.setRow(child, 0);
child.horizontalAlignment = enums.HorizontalAlignment.stretch;
child.verticalAlignment = enums.VerticalAlignment.top;
} else {
gridLayout.GridLayout.setRow(child, 1);
}
}
return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
};
Page.prototype._onDetached = function(force) {
var skipDetached = !force && this.frame.android.cachePagesOnNavigate && !this._isBackNavigation;
if (skipDetached) {
ensureTrace();
if (trace.enabled) {
trace.write("Caching " + this, trace.categories.NativeLifecycle);
}
} else {
_super.prototype._onDetached.call(this);
}
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this._isBackNavigation = isBackNavigation;
_super.prototype.onNavigatedFrom.call(this, isBackNavigation);
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
var _this = this;
_super.prototype._showNativeModalView.call(this, parent, context, closeCallback, fullscreen);
if (!this.backgroundColor) {
ensureColor();
this.backgroundColor = new color.Color("White");
}
this._onAttached(parent._context);
this._isAddedToNativeVisualTree = true;
ensureDialogFragmentClass();
this._dialogFragment = new DialogFragmentClass(this, !!fullscreen, function() {
return _this._raiseShownModallyEvent();
}, function() {
return _this.closeModal();
});
_super.prototype._raiseShowingModallyEvent.call(this);
this._dialogFragment.show(parent.frame.android.activity.getFragmentManager(), exports.DIALOG_FRAGMENT_TAG);
};
Page.prototype._hideNativeModalView = function(parent) {
this._dialogFragment.dismissAllowingStateLoss();
this._dialogFragment = null;
parent._modal = undefined;
_super.prototype._hideNativeModalView.call(this, parent);
};
Page.prototype._updateActionBar = function(hidden) {
this.actionBar.update();
};
return Page;
}(pageCommon.Page);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var content_view_1 = __webpack_require__(60);
var view = __webpack_require__(12);
var styleScope = __webpack_require__(91);
var action_bar_1 = __webpack_require__(50);
var dependency_observable_1 = __webpack_require__(29);
var style = __webpack_require__(15);
var proxy = __webpack_require__(52);
var types = __webpack_require__(14);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(46);
}
}
var frame;
function ensureFrame() {
if (!frame) {
frame = __webpack_require__(10);
}
}
var AffectsLayout = global.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var backgroundSpanUnderStatusBarProperty = new dependency_observable_1.Property("backgroundSpanUnderStatusBar", "Page", new proxy.PropertyMetadata(false, AffectsLayout));
var actionBarHiddenProperty = new dependency_observable_1.Property("actionBarHidden", "Page", new proxy.PropertyMetadata(undefined, AffectsLayout));
function onActionBarHiddenPropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateActionBar(data.newValue);
}
}
actionBarHiddenProperty.metadata.onSetNativeValue = onActionBarHiddenPropertyChanged;
var enableSwipeBackNavigationProperty = new dependency_observable_1.Property("isoSwipeBackNavigationEnabled", "Page", new proxy.PropertyMetadata(true));
function enableSwipeBackNavigationPropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateEnableSwipeBackNavigation(data.newValue);
}
}
enableSwipeBackNavigationProperty.metadata.onSetNativeValue = enableSwipeBackNavigationPropertyChanged;
var Page = function(_super) {
__extends(Page, _super);
function Page() {
_super.call(this);
this._styleScope = new styleScope.StyleScope();
this._cssFiles = {};
this.actionBar = new action_bar_1.ActionBar();
}
Page.prototype.onLoaded = function() {
this.style._setValue(style.backgroundColorProperty, "white", dependency_observable_1.ValueSource.Inherited);
this._applyCss();
if (this.actionBarHidden !== undefined) {
this._updateActionBar(this.actionBarHidden);
}
_super.prototype.onLoaded.call(this);
};
Object.defineProperty(Page.prototype, "backgroundSpanUnderStatusBar", {
get: function() {
return this._getValue(Page.backgroundSpanUnderStatusBarProperty);
},
set: function(value) {
this._setValue(Page.backgroundSpanUnderStatusBarProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBarHidden", {
get: function() {
return this._getValue(Page.actionBarHiddenProperty);
},
set: function(value) {
this._setValue(Page.actionBarHiddenProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "enableSwipeBackNavigation", {
get: function() {
return this._getValue(Page.iosSwipeBackNavigationEnabledProperty);
},
set: function(value) {
this._setValue(Page.iosSwipeBackNavigationEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Page.prototype._updateActionBar = function(hidden) {};
Page.prototype._updateEnableSwipeBackNavigation = function(hidden) {};
Object.defineProperty(Page.prototype, "navigationContext", {
get: function() {
return this._navigationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "css", {
get: function() {
if (this._styleScope) {
return this._styleScope.css;
}
return undefined;
},
set: function(value) {
this._styleScope.css = value;
this._refreshCss();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (!value) {
throw new Error("ActionBar cannot be null or undefined.");
}
if (this._actionBar !== value) {
if (this._actionBar) {
this._actionBar.page = undefined;
this._removeView(this._actionBar);
}
this._actionBar = value;
this._actionBar.page = this;
this._addView(this._actionBar);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "page", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Page.prototype._refreshCss = function() {
if (this._cssApplied) {
this._resetCssValues();
}
this._cssApplied = false;
if (this.isLoaded) {
this._applyCss();
}
};
Page.prototype.addCss = function(cssString) {
this._addCssInternal(cssString, undefined);
};
Page.prototype._addCssInternal = function(cssString, cssFileName) {
this._styleScope.addCss(cssString, cssFileName);
this._refreshCss();
};
Page.prototype.addCssFile = function(cssFileName) {
ensureFS();
if (cssFileName.indexOf("~/") === 0) {
cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFileName.replace("~/", ""));
}
if (!this._cssFiles[cssFileName]) {
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var text = file.readTextSync();
if (text) {
this._addCssInternal(text, cssFileName);
this._cssFiles[cssFileName] = true;
}
}
}
};
Page.prototype.getKeyframeAnimationWithName = function(animationName) {
return this._styleScope.getKeyframeAnimationWithName(animationName);
};
Object.defineProperty(Page.prototype, "frame", {
get: function() {
return this.parent;
},
enumerable: true,
configurable: true
});
Page.prototype.createNavigatedData = function(eventName, isBackNavigation) {
return {
eventName: eventName,
object: this,
context: this.navigationContext,
isBackNavigation: isBackNavigation
};
};
Page.prototype.onNavigatingTo = function(context, isBackNavigation, bindingContext) {
this._navigationContext = context;
if (!isBackNavigation && !types.isNullOrUndefined(bindingContext)) {
this.bindingContext = bindingContext;
}
this.notify(this.createNavigatedData(Page.navigatingToEvent, isBackNavigation));
};
Page.prototype.onNavigatedTo = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedToEvent, isBackNavigation));
};
Page.prototype.onNavigatingFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatingFromEvent, isBackNavigation));
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedFromEvent, isBackNavigation));
this._navigationContext = undefined;
};
Page.prototype.showModal = function() {
ensureFrame();
if (arguments.length === 0) {
this._showNativeModalView(frame.topmost().currentPage, undefined, undefined, true);
return this;
} else {
var context_1 = arguments[1];
var closeCallback = arguments[2];
var fullscreen = arguments[3];
var page = void 0;
if (arguments[0] instanceof Page) {
page = arguments[0];
} else {
page = frame.resolvePageFromEntry({
moduleName: arguments[0]
});
}
page._showNativeModalView(this, context_1, closeCallback, fullscreen);
return page;
}
};
Page.prototype.closeModal = function() {
if (this._closeModalCallback) {
this._closeModalCallback.apply(undefined, arguments);
}
};
Object.defineProperty(Page.prototype, "modal", {
get: function() {
return this._modal;
},
enumerable: true,
configurable: true
});
Page.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof action_bar_1.ActionBar) {
this.actionBar = value;
} else {
_super.prototype._addChildFromBuilder.call(this, name, value);
}
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
parent._modal = this;
var that = this;
this._modalContext = context;
this._closeModalCallback = function() {
if (that._closeModalCallback) {
that._closeModalCallback = null;
that._modalContext = null;
that._hideNativeModalView(parent);
if (typeof closeCallback === "function") {
closeCallback.apply(undefined, arguments);
}
}
};
};
Page.prototype._hideNativeModalView = function(parent) {};
Page.prototype._raiseShownModallyEvent = function() {
var args = {
eventName: Page.shownModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
Page.prototype._raiseShowingModallyEvent = function() {
var args = {
eventName: Page.showingModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
Page.prototype._getStyleScope = function() {
return this._styleScope;
};
Page.prototype._eachChildView = function(callback) {
_super.prototype._eachChildView.call(this, callback);
callback(this.actionBar);
};
Object.defineProperty(Page.prototype, "_childrenCount", {
get: function() {
return (this.content ? 1 : 0) + (this.actionBar ? 1 : 0);
},
enumerable: true,
configurable: true
});
Page.prototype._applyCss = function() {
if (this._cssApplied) {
return;
}
this._styleScope.ensureSelectors();
var scope = this._styleScope;
var checkSelectors = function(view) {
scope.applySelectors(view);
return true;
};
checkSelectors(this);
view.eachDescendant(this, checkSelectors);
this._cssApplied = true;
};
Page.prototype._resetCssValues = function() {
var resetCssValuesFunc = function(view) {
view.style._resetCssValues();
return true;
};
resetCssValuesFunc(this);
view.eachDescendant(this, resetCssValuesFunc);
};
Page.backgroundSpanUnderStatusBarProperty = backgroundSpanUnderStatusBarProperty;
Page.actionBarHiddenProperty = actionBarHiddenProperty;
Page.iosSwipeBackNavigationEnabledProperty = enableSwipeBackNavigationProperty;
Page.navigatingToEvent = "navigatingTo";
Page.navigatedToEvent = "navigatedTo";
Page.navigatingFromEvent = "navigatingFrom";
Page.navigatedFromEvent = "navigatedFrom";
Page.shownModallyEvent = "shownModally";
Page.showingModallyEvent = "showingModally";
return Page;
}(content_view_1.ContentView);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(31);
var cssSelector = __webpack_require__(92);
var cssParser = __webpack_require__(94);
var application = __webpack_require__(16);
var keyframeAnimation = __webpack_require__(96);
var cssAnimationParser = __webpack_require__(97);
var observable = __webpack_require__(29);
var utils_1 = __webpack_require__(37);
var css_selector_1 = __webpack_require__(92);
var style_property_1 = __webpack_require__(98);
var special_properties_1 = __webpack_require__(36);
var animationsSymbol = Symbol("animations");
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(46);
}
}
var pattern = /('|")(.*?)\1/;
var CssState = function() {
function CssState(view, match) {
this.view = view;
this.match = match;
}
Object.defineProperty(CssState.prototype, "changeMap", {
get: function() {
return this.match.changeMap;
},
enumerable: true,
configurable: true
});
CssState.prototype.apply = function() {
var _this = this;
this.view.style._resetCssValues();
var matchingSelectors = this.match.selectors.filter(function(sel) {
return sel.dynamic ? sel.match(_this.view) : true;
});
matchingSelectors.forEach(function(s) {
return applyDescriptors(_this.view, s.ruleset);
});
};
return CssState;
}();
exports.CssState = CssState;
var StyleScope = function() {
function StyleScope() {
this._statesByKey = {};
this._viewIdToKey = {};
this._localCssSelectors = [];
this._localCssSelectorVersion = 0;
this._localCssSelectorsAppliedVersion = 0;
this._applicationCssSelectorsAppliedVersion = 0;
this._keyframes = {};
}
Object.defineProperty(StyleScope.prototype, "css", {
get: function() {
return this._css;
},
set: function(value) {
this._cssFileName = undefined;
this.setCss(value);
},
enumerable: true,
configurable: true
});
StyleScope.prototype.addCss = function(cssString, cssFileName) {
this.setCss(cssString, cssFileName, true);
};
StyleScope.prototype.setCss = function(cssString, cssFileName, append) {
if (append === void 0) {
append = false;
}
this._css = this._css && append ? this._css + cssString : cssString;
if (cssFileName) {
this._cssFileName = cssFileName;
}
this._reset();
var parsedSelectors = StyleScope.createSelectorsFromCss(this._css, cssFileName, this._keyframes);
if (append) {
this._localCssSelectors.push.apply(this._localCssSelectors, parsedSelectors);
} else {
this._localCssSelectors = parsedSelectors;
}
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.getKeyframeAnimationWithName = function(animationName) {
var keyframes = this._keyframes[animationName];
if (keyframes !== undefined) {
var animation = new keyframeAnimation.KeyframeAnimationInfo();
animation.keyframes = cssAnimationParser.CssAnimationParser.keyframesArrayFromCSS(keyframes);
return animation;
}
return undefined;
};
StyleScope.createSelectorsFromCss = function(css, cssFileName, keyframes) {
try {
var pageCssSyntaxTree = css ? cssParser.parse(css, {
source: cssFileName
}) : null;
var pageCssSelectors = [];
if (pageCssSyntaxTree) {
pageCssSelectors = pageCssSelectors.concat(StyleScope.createSelectorsFromImports(pageCssSyntaxTree, keyframes));
pageCssSelectors = pageCssSelectors.concat(StyleScope.createSelectorsFromSyntaxTree(pageCssSyntaxTree, keyframes));
}
return pageCssSelectors;
} catch (e) {
trace.write("Css styling failed: " + e, trace.categories.Error, trace.messageType.error);
}
};
StyleScope.createSelectorsFromImports = function(tree, keyframes) {
var selectors = [];
ensureTypes();
if (!types.isNullOrUndefined(tree)) {
var imports = tree["stylesheet"]["rules"].filter(function(r) {
return r.type === "import";
});
for (var i = 0; i < imports.length; i++) {
var importItem = imports[i]["import"];
var match = importItem && importItem.match(pattern);
var url = match && match[2];
if (!types.isNullOrUndefined(url)) {
ensureFS();
var appDirectory = fs.knownFolders.currentApp().path;
var fileName = resolveFileNameFromUrl(url, appDirectory, fs.File.exists);
if (fileName !== null) {
var file = fs.File.fromPath(fileName);
var text = file.readTextSync();
if (text) {
selectors = selectors.concat(StyleScope.createSelectorsFromCss(text, fileName, keyframes));
}
}
}
}
}
return selectors;
};
StyleScope.prototype.ensureSelectors = function() {
var toMerge = [];
if (this._applicationCssSelectorsAppliedVersion !== application.cssSelectorVersion || this._localCssSelectorVersion !== this._localCssSelectorsAppliedVersion || !this._mergedCssSelectors) {
toMerge.push(application.cssSelectors);
this._applicationCssSelectorsAppliedVersion = application.cssSelectorVersion;
toMerge.push(this._localCssSelectors);
this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;
for (var keyframe in application.keyframes) {
this._keyframes[keyframe] = application.keyframes[keyframe];
}
}
if (toMerge.length > 0) {
this._mergedCssSelectors = toMerge.filter(function(m) {
return !!m;
}).reduce(function(merged, next) {
return merged.concat(next);
}, []);
this._applyKeyframesOnSelectors();
} else {
return false;
}
this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
return true;
};
StyleScope.prototype.applySelectors = function(view) {
this.ensureSelectors();
var state = this._selectors.query(view);
var nextState = new CssState(view, state);
view._setCssState(nextState);
};
StyleScope.prototype.query = function(node) {
this.ensureSelectors();
return this._selectors.query(node).selectors;
};
StyleScope.createSelectorsFromSyntaxTree = function(ast, keyframes) {
var nodes = ast.stylesheet.rules;
nodes.filter(isKeyframe).forEach(function(node) {
return keyframes[node.name] = node;
});
var rulesets = cssSelector.fromAstNodes(nodes);
rulesets.forEach(function(rule) {
return rule[animationsSymbol] = cssAnimationParser.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
});
return rulesets;
};
StyleScope.prototype._reset = function() {
this._statesByKey = {};
this._viewIdToKey = {};
};
StyleScope.prototype._applyKeyframesOnSelectors = function() {
for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
var ruleset = this._mergedCssSelectors[i];
var animations = ruleset[animationsSymbol];
if (animations !== undefined) {
for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
var animation = animations_1[_i];
var keyframe = this._keyframes[animation.name];
if (keyframe !== undefined) {
animation.keyframes = cssAnimationParser.CssAnimationParser.keyframesArrayFromCSS(keyframe);
}
}
}
}
};
StyleScope.prototype.getAnimations = function(ruleset) {
return ruleset[animationsSymbol];
};
return StyleScope;
}();
exports.StyleScope = StyleScope;
function resolveFileNameFromUrl(url, appDirectory, fileExists) {
var fileName = types.isString(url) ? url.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fileName.replace("~/", "");
}
var local = fs.path.join(appDirectory, fileName);
if (fileExists(local)) {
return local;
}
var external = fs.path.join(appDirectory, "tns_modules", fileName);
if (fileExists(external)) {
return external;
}
return null;
}
exports.resolveFileNameFromUrl = resolveFileNameFromUrl;
function applyInlineSyle(view, style) {
try {
var syntaxTree = cssParser.parse("local { " + style + " }", undefined);
var filteredDeclarations = syntaxTree.stylesheet.rules.filter(isRule)[0].declarations.filter(isDeclaration);
applyInlineStyle(view, filteredDeclarations);
} catch (ex) {
trace.write("Applying local style failed: " + ex, trace.categories.Error, trace.messageType.error);
}
}
exports.applyInlineSyle = applyInlineSyle;
function isRule(node) {
return node.type === "rule";
}
function isDeclaration(node) {
return node.type === "declaration";
}
function isKeyframe(node) {
return node.type === "keyframes";
}
function applyDescriptors(view, ruleset) {
var modifier = observable.ValueSource.Css;
ruleset.declarations.forEach(function(d) {
return style_property_1.withStyleProperty(d.property, d.value, function(property, value) {
if (types.isString(property)) {
var propertyName = property;
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(view, value);
attrHandled = true;
}
if (!attrHandled && propertyName in view) {
view[propertyName] = utils_1.convertString(value);
}
} else {
var resolvedProperty = property;
try {
view.style._setValue(resolvedProperty, value, modifier);
} catch (ex) {
if (trace.enabled) {
trace.write("Error setting property: " + resolvedProperty.name + " view: " + view + " value: " + value + " " + ex, trace.categories.Style, trace.messageType.error);
}
}
}
});
});
var ruleAnimations = ruleset[animationsSymbol];
if (ruleAnimations && view.isLoaded && view._nativeView !== undefined) {
var _loop_1 = function(animationInfo) {
var animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo, modifier);
if (animation) {
view._registerAnimation(animation);
animation.play(view).then(function() {
view._unregisterAnimation(animation);
}).catch(function(e) {
view._unregisterAnimation(animation);
});
}
};
for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
var animationInfo = ruleAnimations_1[_i];
_loop_1(animationInfo);
}
}
}
function applyInlineStyle(view, declarations) {
declarations.forEach(function(d) {
return style_property_1.withStyleProperty(d.property, d.value, function(property, value) {
var resolvedProperty = property;
view.style._setValue(resolvedProperty, value, observable.ValueSource.Local);
});
});
}
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(14);
var utils_1 = __webpack_require__(37);
var selectorParser = __webpack_require__(93);
var Match;
(function(Match) {
Match.Dynamic = true;
Match.Static = false;
})(Match || (Match = {}));
function SelectorProperties(specificity, rarity, dynamic) {
if (dynamic === void 0) {
dynamic = false;
}
return function(cls) {
cls.prototype.specificity = specificity;
cls.prototype.rarity = rarity;
cls.prototype.combinator = "";
cls.prototype.dynamic = dynamic;
return cls;
};
}
var SelectorCore = function() {
function SelectorCore() {}
SelectorCore.prototype.lookupSort = function(sorter, base) {
sorter.sortAsUniversal(base || this);
};
SelectorCore = __decorate([ SelectorProperties(0, 0, Match.Static) ], SelectorCore);
return SelectorCore;
}();
exports.SelectorCore = SelectorCore;
var SimpleSelector = function(_super) {
__extends(SimpleSelector, _super);
function SimpleSelector() {
_super.apply(this, arguments);
}
SimpleSelector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
} else if (this.mayMatch(node)) {
this.trackChanges(node, map);
return true;
}
return false;
};
SimpleSelector.prototype.mayMatch = function(node) {
return this.match(node);
};
SimpleSelector.prototype.trackChanges = function(node, map) {};
return SimpleSelector;
}(SelectorCore);
exports.SimpleSelector = SimpleSelector;
function wrap(text) {
return text ? " " + text + " " : "";
}
var InvalidSelector = function(_super) {
__extends(InvalidSelector, _super);
function InvalidSelector(e) {
_super.call(this);
this.e = e;
}
InvalidSelector.prototype.toString = function() {
return "<error: " + this.e + ">";
};
InvalidSelector.prototype.match = function(node) {
return false;
};
InvalidSelector.prototype.lookupSort = function(sorter, base) {};
InvalidSelector = __decorate([ SelectorProperties(0, 4, Match.Static) ], InvalidSelector);
return InvalidSelector;
}(SimpleSelector);
exports.InvalidSelector = InvalidSelector;
var UniversalSelector = function(_super) {
__extends(UniversalSelector, _super);
function UniversalSelector() {
_super.apply(this, arguments);
}
UniversalSelector.prototype.toString = function() {
return "*" + wrap(this.combinator);
};
UniversalSelector.prototype.match = function(node) {
return true;
};
UniversalSelector = __decorate([ SelectorProperties(0, 0, Match.Static) ], UniversalSelector);
return UniversalSelector;
}(SimpleSelector);
exports.UniversalSelector = UniversalSelector;
var IdSelector = function(_super) {
__extends(IdSelector, _super);
function IdSelector(id) {
_super.call(this);
this.id = id;
}
IdSelector.prototype.toString = function() {
return "#" + this.id + wrap(this.combinator);
};
IdSelector.prototype.match = function(node) {
return node.id === this.id;
};
IdSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortById(this.id, base || this);
};
IdSelector = __decorate([ SelectorProperties(65536, 3, Match.Static) ], IdSelector);
return IdSelector;
}(SimpleSelector);
exports.IdSelector = IdSelector;
var TypeSelector = function(_super) {
__extends(TypeSelector, _super);
function TypeSelector(cssType) {
_super.call(this);
this.cssType = cssType;
}
TypeSelector.prototype.toString = function() {
return "" + this.cssType + wrap(this.combinator);
};
TypeSelector.prototype.match = function(node) {
return node.cssType === this.cssType;
};
TypeSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByType(this.cssType, base || this);
};
TypeSelector = __decorate([ SelectorProperties(1, 1, Match.Static) ], TypeSelector);
return TypeSelector;
}(SimpleSelector);
exports.TypeSelector = TypeSelector;
var ClassSelector = function(_super) {
__extends(ClassSelector, _super);
function ClassSelector(cssClass) {
_super.call(this);
this.cssClass = cssClass;
}
ClassSelector.prototype.toString = function() {
return "." + this.cssClass + wrap(this.combinator);
};
ClassSelector.prototype.match = function(node) {
return node.cssClasses && node.cssClasses.has(this.cssClass);
};
ClassSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByClass(this.cssClass, base || this);
};
ClassSelector = __decorate([ SelectorProperties(256, 2, Match.Static) ], ClassSelector);
return ClassSelector;
}(SimpleSelector);
exports.ClassSelector = ClassSelector;
var AttributeSelector = function(_super) {
__extends(AttributeSelector, _super);
function AttributeSelector(attribute, test, value) {
_super.call(this);
this.attribute = attribute;
this.test = test;
this.value = value;
if (!test) {
this.match = function(node) {
return !types_1.isNullOrUndefined(node[attribute]);
};
return;
}
if (!value) {
this.match = function(node) {
return false;
};
}
var escapedValue = utils_1.escapeRegexSymbols(value);
var regexp = null;
switch (test) {
case "^=":
regexp = new RegExp("^" + escapedValue);
break;

case "$=":
regexp = new RegExp(escapedValue + "$");
break;

case "*=":
regexp = new RegExp(escapedValue);
break;

case "=":
regexp = new RegExp("^" + escapedValue + "$");
break;

case "~=":
if (/\s/.test(value)) {
this.match = function(node) {
return false;
};
return;
}
regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
break;

case "|=":
regexp = new RegExp("^" + escapedValue + "(-|$)");
break;
}
if (regexp) {
this.match = function(node) {
return regexp.test(node[attribute] + "");
};
return;
} else {
this.match = function(node) {
return false;
};
return;
}
}
AttributeSelector.prototype.toString = function() {
return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
};
AttributeSelector.prototype.match = function(node) {
return false;
};
AttributeSelector.prototype.mayMatch = function(node) {
return true;
};
AttributeSelector.prototype.trackChanges = function(node, map) {
map.addAttribute(node, this.attribute);
};
AttributeSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], AttributeSelector);
return AttributeSelector;
}(SimpleSelector);
exports.AttributeSelector = AttributeSelector;
var PseudoClassSelector = function(_super) {
__extends(PseudoClassSelector, _super);
function PseudoClassSelector(cssPseudoClass) {
_super.call(this);
this.cssPseudoClass = cssPseudoClass;
}
PseudoClassSelector.prototype.toString = function() {
return ":" + this.cssPseudoClass + wrap(this.combinator);
};
PseudoClassSelector.prototype.match = function(node) {
return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
};
PseudoClassSelector.prototype.mayMatch = function(node) {
return true;
};
PseudoClassSelector.prototype.trackChanges = function(node, map) {
map.addPseudoClass(node, this.cssPseudoClass);
};
PseudoClassSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], PseudoClassSelector);
return PseudoClassSelector;
}(SimpleSelector);
exports.PseudoClassSelector = PseudoClassSelector;
var SimpleSelectorSequence = function(_super) {
__extends(SimpleSelectorSequence, _super);
function SimpleSelectorSequence(selectors) {
_super.call(this);
this.selectors = selectors;
this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
this.head = this.selectors.reduce(function(prev, curr) {
return !prev || curr.rarity > prev.rarity ? curr : prev;
}, null);
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
SimpleSelectorSequence.prototype.toString = function() {
return "" + this.selectors.join("") + wrap(this.combinator);
};
SimpleSelectorSequence.prototype.match = function(node) {
return this.selectors.every(function(sel) {
return sel.match(node);
});
};
SimpleSelectorSequence.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel) {
return sel.mayMatch(node);
});
};
SimpleSelectorSequence.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel) {
return sel.trackChanges(node, map);
});
};
SimpleSelectorSequence.prototype.lookupSort = function(sorter, base) {
this.head.lookupSort(sorter, base || this);
};
return SimpleSelectorSequence;
}(SimpleSelector);
exports.SimpleSelectorSequence = SimpleSelectorSequence;
var Selector = function(_super) {
__extends(Selector, _super);
function Selector(selectors) {
_super.call(this);
this.selectors = selectors;
var lastGroup;
var groups = [];
selectors.reverse().forEach(function(sel) {
switch (sel.combinator) {
case undefined:
case " ":
groups.push(lastGroup = []);

case ">":
lastGroup.push(sel);
break;

default:
throw new Error('Unsupported combinator "' + sel.combinator + '".');
}
});
this.groups = groups.map(function(g) {
return new Selector.ChildGroup(g);
});
this.last = selectors[0];
this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
Selector.prototype.toString = function() {
return this.selectors.join("");
};
Selector.prototype.match = function(node) {
return this.groups.every(function(group, i) {
if (i === 0) {
node = group.match(node);
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
if (node = group.match(ancestor)) {
return true;
}
}
return false;
}
});
};
Selector.prototype.lookupSort = function(sorter, base) {
this.last.lookupSort(sorter, this);
};
Selector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
}
var bounds = [];
var mayMatch = this.groups.every(function(group, i) {
if (i === 0) {
var nextNode = group.mayMatch(node);
bounds.push({
left: node,
right: node
});
node = nextNode;
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
var nextNode = group.mayMatch(ancestor);
if (nextNode) {
bounds.push({
left: ancestor,
right: null
});
node = nextNode;
return true;
}
}
return false;
}
});
if (!mayMatch) {
return false;
}
if (!map) {
return mayMatch;
}
for (var i = 0; i < this.groups.length; i++) {
var group_1 = this.groups[i];
if (!group_1.dynamic) {
continue;
}
var bound = bounds[i];
var node_1 = bound.left;
do {
if (group_1.mayMatch(node_1)) {
group_1.trackChanges(node_1, map);
}
} while (node_1 !== bound.right && (node_1 = node_1.parent));
}
return mayMatch;
};
return Selector;
}(SelectorCore);
exports.Selector = Selector;
var Selector;
(function(Selector) {
var ChildGroup = function() {
function ChildGroup(selectors) {
this.selectors = selectors;
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
ChildGroup.prototype.match = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.match(node);
}) ? node : null;
};
ChildGroup.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.mayMatch(node);
}) ? node : null;
};
ChildGroup.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
});
};
return ChildGroup;
}();
Selector.ChildGroup = ChildGroup;
})(Selector = exports.Selector || (exports.Selector = {}));
var RuleSet = function() {
function RuleSet(selectors, declarations) {
var _this = this;
this.selectors = selectors;
this.declarations = declarations;
this.selectors.forEach(function(sel) {
return sel.ruleset = _this;
});
}
RuleSet.prototype.toString = function() {
return this.selectors.join(", ") + " {" + this.declarations.map(function(d, i) {
return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
}).join("; ") + " }";
};
RuleSet.prototype.lookupSort = function(sorter) {
this.selectors.forEach(function(sel) {
return sel.lookupSort(sorter);
});
};
return RuleSet;
}();
exports.RuleSet = RuleSet;
function fromAstNodes(astRules) {
return astRules.filter(isRule).map(function(rule) {
var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
var selectors = rule.selectors.map(createSelector);
var ruleset = new RuleSet(selectors, declarations);
return ruleset;
});
}
exports.fromAstNodes = fromAstNodes;
function createDeclaration(decl) {
return {
property: decl.property.toLowerCase(),
value: decl.value
};
}
function createSelector(sel) {
try {
var ast = selectorParser.parse(sel);
if (ast.length === 0) {
return new InvalidSelector(new Error("Empty selector"));
}
var selectors = ast.map(createSimpleSelector);
var sequences = [];
for (var seqStart = 0, seqEnd = 0, last = selectors.length - 1; seqEnd <= last; seqEnd++) {
var sel_1 = selectors[seqEnd];
var astComb = ast[seqEnd].comb;
if (astComb || seqEnd === last) {
if (seqStart === seqEnd) {
sel_1.combinator = astComb;
sequences.push(sel_1);
} else {
var sequence = new SimpleSelectorSequence(selectors.slice(seqStart, seqEnd + 1));
sequence.combinator = astComb;
sequences.push(sequence);
}
seqStart = seqEnd + 1;
}
}
if (sequences.length === 1) {
return sequences[0];
} else {
return new Selector(sequences);
}
} catch (e) {
return new InvalidSelector(e);
}
}
function createSimpleSelector(sel) {
if (selectorParser.isUniversal(sel)) {
return new UniversalSelector();
} else if (selectorParser.isId(sel)) {
return new IdSelector(sel.ident);
} else if (selectorParser.isType(sel)) {
return new TypeSelector(sel.ident.replace(/-/, "").toLowerCase());
} else if (selectorParser.isClass(sel)) {
return new ClassSelector(sel.ident);
} else if (selectorParser.isPseudo(sel)) {
return new PseudoClassSelector(sel.ident);
} else if (selectorParser.isAttribute(sel)) {
if (sel.test) {
return new AttributeSelector(sel.prop, sel.test, sel.value);
} else {
return new AttributeSelector(sel.prop);
}
}
}
function isRule(node) {
return node.type === "rule";
}
function isDeclaration(node) {
return node.type === "declaration";
}
var SelectorsMap = function() {
function SelectorsMap(rulesets) {
var _this = this;
this.id = {};
this.class = {};
this.type = {};
this.universal = [];
this.position = 0;
rulesets.forEach(function(rule) {
return rule.lookupSort(_this);
});
}
SelectorsMap.prototype.query = function(node) {
var _this = this;
var selectorClasses = [ this.universal, this.id[node.id], this.type[node.cssType] ];
if (node.cssClasses) {
node.cssClasses.forEach(function(c) {
return selectorClasses.push(_this.class[c]);
});
}
var selectors = selectorClasses.filter(function(arr) {
return !!arr;
}).reduce(function(cur, next) {
return cur.concat(next);
}, []);
var selectorsMatch = new SelectorsMatch();
selectorsMatch.selectors = selectors.filter(function(sel) {
return sel.sel.accumulateChanges(node, selectorsMatch);
}).sort(function(a, b) {
return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
}).map(function(docSel) {
return docSel.sel;
});
return selectorsMatch;
};
SelectorsMap.prototype.sortById = function(id, sel) {
this.addToMap(this.id, id, sel);
};
SelectorsMap.prototype.sortByClass = function(cssClass, sel) {
this.addToMap(this.class, cssClass, sel);
};
SelectorsMap.prototype.sortByType = function(cssType, sel) {
this.addToMap(this.type, cssType, sel);
};
SelectorsMap.prototype.sortAsUniversal = function(sel) {
this.universal.push(this.makeDocSelector(sel));
};
SelectorsMap.prototype.addToMap = function(map, head, sel) {
this.position++;
var list = map[head];
if (list) {
list.push(this.makeDocSelector(sel));
} else {
map[head] = [ this.makeDocSelector(sel) ];
}
};
SelectorsMap.prototype.makeDocSelector = function(sel) {
return {
sel: sel,
pos: this.position++
};
};
return SelectorsMap;
}();
exports.SelectorsMap = SelectorsMap;
var SelectorsMatch = function() {
function SelectorsMatch() {
this.changeMap = new Map();
}
SelectorsMatch.prototype.addAttribute = function(node, attribute) {
var deps = this.properties(node);
if (!deps.attributes) {
deps.attributes = new Set();
}
deps.attributes.add(attribute);
};
SelectorsMatch.prototype.addPseudoClass = function(node, pseudoClass) {
var deps = this.properties(node);
if (!deps.pseudoClasses) {
deps.pseudoClasses = new Set();
}
deps.pseudoClasses.add(pseudoClass);
};
SelectorsMatch.prototype.properties = function(node) {
var set = this.changeMap.get(node);
if (!set) {
this.changeMap.set(node, set = {});
}
return set;
};
return SelectorsMatch;
}();
exports.SelectorsMatch = SelectorsMatch;
}, function(module, exports) {
function isUniversal(sel) {
return sel.type === "*";
}
exports.isUniversal = isUniversal;
function isType(sel) {
return sel.type === "";
}
exports.isType = isType;
function isClass(sel) {
return sel.type === ".";
}
exports.isClass = isClass;
function isId(sel) {
return sel.type === "#";
}
exports.isId = isId;
function isPseudo(sel) {
return sel.type === ":";
}
exports.isPseudo = isPseudo;
function isAttribute(sel) {
return sel.type === "[]";
}
exports.isAttribute = isAttribute;
var regex = /(\s*)(?:(\*)|(#|\.|:|\b)([_-\w][_-\w\d]*)|\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\])(?:\s*(\+|~|>|\s))?/g;
function parse(selector) {
var selectors = [];
var result;
var lastIndex = regex.lastIndex = 0;
while (result = regex.exec(selector)) {
var pos = result.index;
if (lastIndex !== pos) {
throw new Error("Unexpected characters at index, near: " + lastIndex + ": " + result.input.substr(lastIndex, 32));
} else if (!result[0] || result[0].length === 0) {
throw new Error("Last selector match got zero character result at index " + lastIndex + ", near: " + result.input.substr(lastIndex, 32));
}
pos += getLeadingWhiteSpace(result).length;
lastIndex = regex.lastIndex;
var type = getType(result);
var selector_1 = void 0;
switch (type) {
case "*":
selector_1 = {
pos: pos,
type: type
};
break;

case "#":
case ".":
case ":":
case "":
var ident = getIdentifier(result);
selector_1 = {
pos: pos,
type: type,
ident: ident
};
break;

case "[]":
var prop = getProperty(result);
var test = getPropertyTest(result);
var value = getPropertyValue(result);
selector_1 = test ? {
pos: pos,
type: type,
prop: prop,
test: test,
value: value
} : {
pos: pos,
type: type,
prop: prop
};
break;

default:
throw new Error("Unhandled type.");
}
var comb = getCombinator(result);
if (comb) {
selector_1.comb = comb;
}
selectors.push(selector_1);
}
if (selectors.length > 0) {
delete selectors[selectors.length - 1].comb;
}
return selectors;
}
exports.parse = parse;
function getLeadingWhiteSpace(result) {
return result[1] || "";
}
function getType(result) {
return result[5] && "[]" || result[2] || result[3];
}
function getIdentifier(result) {
return result[4];
}
function getProperty(result) {
return result[5];
}
function getPropertyTest(result) {
return result[6] || undefined;
}
function getPropertyValue(result) {
return result[7] || result[8] || result[9];
}
function getCombinator(result) {
return result[result.length - 1] || undefined;
}
}, function(module, exports, __webpack_require__) {
exports.parse = __webpack_require__(95);
}, function(module, exports) {
var commentre = /\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g;
module.exports = function(css, options) {
options = options || {};
var lineno = 1;
var column = 1;
function updatePosition(str) {
var lines = str.match(/\n/g);
if (lines) lineno += lines.length;
var i = str.lastIndexOf("\n");
column = ~i ? str.length - i : column + str.length;
}
function position() {
var start = {
line: lineno,
column: column
};
return function(node) {
node.position = new Position(start);
whitespace();
return node;
};
}
function Position(start) {
this.start = start;
this.end = {
line: lineno,
column: column
};
this.source = options.source;
}
Position.prototype.content = css;
var errorsList = [];
function error(msg) {
var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
err.reason = msg;
err.filename = options.source;
err.line = lineno;
err.column = column;
err.source = css;
if (options.silent) {
errorsList.push(err);
} else {
throw err;
}
}
function stylesheet() {
var rulesList = rules();
return {
type: "stylesheet",
stylesheet: {
rules: rulesList,
parsingErrors: errorsList
}
};
}
function open() {
return match(/^{\s*/);
}
function close() {
return match(/^}/);
}
function rules() {
var node;
var rules = [];
whitespace();
comments(rules);
while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
if (node !== false) {
rules.push(node);
comments(rules);
}
}
return rules;
}
function match(re) {
var m = re.exec(css);
if (!m) return;
var str = m[0];
updatePosition(str);
css = css.slice(str.length);
return m;
}
function whitespace() {
match(/^\s*/);
}
function comments(rules) {
var c;
rules = rules || [];
while (c = comment()) {
if (c !== false) {
rules.push(c);
}
}
return rules;
}
function comment() {
var pos = position();
if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
var i = 2;
while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
i += 2;
if ("" === css.charAt(i - 1)) {
return error("End of comment missing");
}
var str = css.slice(2, i - 2);
column += 2;
updatePosition(str);
css = css.slice(i);
column += 2;
return pos({
type: "comment",
comment: str
});
}
function selector() {
var m = match(/^([^{]+)/);
if (!m) return;
return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
return m.replace(/,/g, "‌");
}).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
return s.replace(/\u200C/g, ",");
});
}
function declaration() {
var pos = position();
var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
if (!prop) return;
prop = trim(prop[0]);
if (!match(/^:\s*/)) return error("property missing ':'");
var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
var ret = pos({
type: "declaration",
property: prop.replace(commentre, ""),
value: val ? trim(val[0]).replace(commentre, "") : ""
});
match(/^[;\s]*/);
return ret;
}
function declarations() {
var decls = [];
if (!open()) return error("missing '{'");
comments(decls);
var decl;
while (decl = declaration()) {
if (decl !== false) {
decls.push(decl);
comments(decls);
}
}
if (!close()) return error("missing '}'");
return decls;
}
function keyframe() {
var m;
var vals = [];
var pos = position();
while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
vals.push(m[1]);
match(/^,\s*/);
}
if (!vals.length) return;
return pos({
type: "keyframe",
values: vals,
declarations: declarations()
});
}
function atkeyframes() {
var pos = position();
var m = match(/^@([-\w]+)?keyframes\s*/);
if (!m) return;
var vendor = m[1];
var m = match(/^([-\w]+)\s*/);
if (!m) return error("@keyframes missing name");
var name = m[1];
if (!open()) return error("@keyframes missing '{'");
var frame;
var frames = comments();
while (frame = keyframe()) {
frames.push(frame);
frames = frames.concat(comments());
}
if (!close()) return error("@keyframes missing '}'");
return pos({
type: "keyframes",
name: name,
vendor: vendor,
keyframes: frames
});
}
function atsupports() {
var pos = position();
var m = match(/^@supports *([^{]+)/);
if (!m) return;
var supports = trim(m[1]);
if (!open()) return error("@supports missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@supports missing '}'");
return pos({
type: "supports",
supports: supports,
rules: style
});
}
function athost() {
var pos = position();
var m = match(/^@host\s*/);
if (!m) return;
if (!open()) return error("@host missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@host missing '}'");
return pos({
type: "host",
rules: style
});
}
function atmedia() {
var pos = position();
var m = match(/^@media *([^{]+)/);
if (!m) return;
var media = trim(m[1]);
if (!open()) return error("@media missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@media missing '}'");
return pos({
type: "media",
media: media,
rules: style
});
}
function atcustommedia() {
var pos = position();
var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
if (!m) return;
return pos({
type: "custom-media",
name: trim(m[1]),
media: trim(m[2])
});
}
function atpage() {
var pos = position();
var m = match(/^@page */);
if (!m) return;
var sel = selector() || [];
if (!open()) return error("@page missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@page missing '}'");
return pos({
type: "page",
selectors: sel,
declarations: decls
});
}
function atdocument() {
var pos = position();
var m = match(/^@([-\w]+)?document *([^{]+)/);
if (!m) return;
var vendor = trim(m[1]);
var doc = trim(m[2]);
if (!open()) return error("@document missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@document missing '}'");
return pos({
type: "document",
document: doc,
vendor: vendor,
rules: style
});
}
function atfontface() {
var pos = position();
var m = match(/^@font-face\s*/);
if (!m) return;
if (!open()) return error("@font-face missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@font-face missing '}'");
return pos({
type: "font-face",
declarations: decls
});
}
var atimport = _compileAtrule("import");
var atcharset = _compileAtrule("charset");
var atnamespace = _compileAtrule("namespace");
function _compileAtrule(name) {
var re = new RegExp("^@" + name + "\\s*([^;]+);");
return function() {
var pos = position();
var m = match(re);
if (!m) return;
var ret = {
type: name
};
ret[name] = m[1].trim();
return pos(ret);
};
}
function atrule() {
if (css[0] != "@") return;
return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
}
function rule() {
var pos = position();
var sel = selector();
if (!sel) return error("selector missing");
comments();
return pos({
type: "rule",
selectors: sel,
declarations: declarations()
});
}
return addParent(stylesheet());
};
function trim(str) {
return str ? str.replace(/^\s+|\s+$/g, "") : "";
}
function addParent(obj, parent) {
var isNode = obj && typeof obj.type === "string";
var childParent = isNode ? obj : parent;
for (var k in obj) {
var value = obj[k];
if (Array.isArray(value)) {
value.forEach(function(v) {
addParent(v, childParent);
});
} else if (value && typeof value === "object") {
addParent(value, childParent);
}
}
if (isNode) {
Object.defineProperty(obj, "parent", {
configurable: true,
writable: true,
enumerable: false,
value: parent || null
});
}
return obj;
}
}, function(module, exports, __webpack_require__) {
var animationModule = __webpack_require__(40);
var enums = __webpack_require__(39);
var style = __webpack_require__(15);
var KeyframeDeclaration = function() {
function KeyframeDeclaration() {}
return KeyframeDeclaration;
}();
exports.KeyframeDeclaration = KeyframeDeclaration;
var KeyframeInfo = function() {
function KeyframeInfo() {}
return KeyframeInfo;
}();
exports.KeyframeInfo = KeyframeInfo;
var KeyframeAnimationInfo = function() {
function KeyframeAnimationInfo() {
this.name = "";
this.duration = .3;
this.delay = 0;
this.iterations = 1;
this.curve = enums.AnimationCurve.ease;
this.isForwards = false;
this.isReverse = false;
}
return KeyframeAnimationInfo;
}();
exports.KeyframeAnimationInfo = KeyframeAnimationInfo;
var KeyframeAnimation = function() {
function KeyframeAnimation() {
this.delay = 0;
this.iterations = 1;
}
KeyframeAnimation.keyframeAnimationFromInfo = function(info, valueSourceModifier) {
var animations = new Array();
var length = info.keyframes.length;
var startDuration = 0;
if (info.isReverse) {
for (var index_1 = length - 1; index_1 >= 0; index_1--) {
var keyframe = info.keyframes[index_1];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration, valueSourceModifier);
}
} else {
for (var index_2 = 0; index_2 < length; index_2++) {
var keyframe = info.keyframes[index_2];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration, valueSourceModifier);
}
for (var index_3 = length - 1; index_3 > 0; index_3--) {
var a1 = animations[index_3];
var a2 = animations[index_3 - 1];
if (a2["curve"] !== undefined) {
a1["curve"] = a2["curve"];
a2["curve"] = undefined;
}
}
}
for (var index_4 = 1; index_4 < length; index_4++) {
var a = animations[index_4];
if (a["curve"] === undefined) {
a["curve"] = info.curve;
}
}
var animation = new KeyframeAnimation();
animation.delay = info.delay;
animation.iterations = info.iterations;
animation.animations = animations;
animation._isForwards = info.isForwards;
return animation;
};
KeyframeAnimation.parseKeyframe = function(info, keyframe, animations, startDuration, valueSourceModifier) {
var animation = {};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
animation[declaration.property] = declaration.value;
}
var duration = keyframe.duration;
if (duration === 0) {
duration = .01;
} else {
duration = info.duration * duration - startDuration;
startDuration += duration;
}
animation["duration"] = info.isReverse ? info.duration - duration : duration;
animation["curve"] = keyframe.curve;
animation["forceLayer"] = true;
animation["valueSource"] = valueSourceModifier;
animations.push(animation);
return startDuration;
};
Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
KeyframeAnimation.prototype.cancel = function() {
if (this._isPlaying) {
this._isPlaying = false;
for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
var animation = this._nativeAnimations[i];
if (animation.isPlaying) {
animation.cancel();
}
}
if (this._nativeAnimations.length > 0) {
var animation = this._nativeAnimations[0];
this._resetAnimationValues(this._target, animation);
}
this._rejectAnimationFinishedPromise();
}
};
KeyframeAnimation.prototype.play = function(view) {
var _this = this;
if (this._isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this._isPlaying = true;
this._nativeAnimations = new Array();
this._target = view;
if (this.delay !== 0) {
setTimeout(function() {
return _this.animate(view, 0, _this.iterations);
}, this.delay);
} else {
this.animate(view, 0, this.iterations);
}
return animationFinishedPromise;
};
KeyframeAnimation.prototype.animate = function(view, index, iterations) {
var _this = this;
if (!this._isPlaying) {
return;
}
if (index === 0) {
var animation = this.animations[0];
var modifier = animation["valueSource"];
if ("backgroundColor" in animation) {
view.style._setValue(style.backgroundColorProperty, animation["backgroundColor"], modifier);
}
if ("scale" in animation) {
view.style._setValue(style.scaleXProperty, animation["scale"].x, modifier);
view.style._setValue(style.scaleYProperty, animation["scale"].y, modifier);
}
if ("translate" in animation) {
view.style._setValue(style.translateXProperty, animation["translate"].x, modifier);
view.style._setValue(style.translateYProperty, animation["translate"].y, modifier);
}
if ("rotate" in animation) {
view.style._setValue(style.rotateProperty, animation["rotate"], modifier);
}
if ("opacity" in animation) {
view.style._setValue(style.opacityProperty, animation["opacity"], modifier);
}
setTimeout(function() {
return _this.animate(view, 1, iterations);
}, 1);
} else if (index < 0 || index >= this.animations.length) {
iterations -= 1;
if (iterations > 0) {
this.animate(view, 0, iterations);
} else {
if (this._isForwards === false) {
var animation = this.animations[this.animations.length - 1];
this._resetAnimationValues(view, animation);
}
this._resolveAnimationFinishedPromise();
}
} else {
var animationDef = this.animations[index];
animationDef.target = view;
var animation = new animationModule.Animation([ animationDef ]);
animation.play().then(function() {
_this.animate(view, index + 1, iterations);
});
this._nativeAnimations.push(animation);
}
};
KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._resolve();
};
KeyframeAnimation.prototype._rejectAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._reject(new Error("Animation cancelled."));
};
KeyframeAnimation.prototype._resetAnimationValues = function(view, animation) {
var modifier = animation["valueSource"];
if ("backgroundColor" in animation) {
view.style._resetValue(style.backgroundColorProperty, modifier);
}
if ("scale" in animation) {
view.style._resetValue(style.scaleXProperty, modifier);
view.style._resetValue(style.scaleYProperty, modifier);
}
if ("translate" in animation) {
view.style._resetValue(style.translateXProperty, modifier);
view.style._resetValue(style.translateYProperty, modifier);
}
if ("rotate" in animation) {
view.style._resetValue(style.rotateProperty, modifier);
}
if ("opacity" in animation) {
view.style._resetValue(style.opacityProperty, modifier);
}
};
return KeyframeAnimation;
}();
exports.KeyframeAnimation = KeyframeAnimation;
}, function(module, exports, __webpack_require__) {
var keyframeAnimationModule = __webpack_require__(96);
var converters = __webpack_require__(45);
var types = __webpack_require__(14);
var colorModule = __webpack_require__(23);
var styleProperty = __webpack_require__(98);
var animationProperties = {
"animation-name": function(info, declaration) {
return info.name = declaration.value;
},
"animation-duration": function(info, declaration) {
return info.duration = converters.timeConverter(declaration.value);
},
"animation-delay": function(info, declaration) {
return info.delay = converters.timeConverter(declaration.value);
},
"animation-timing-function": function(info, declaration) {
return info.curve = converters.animationTimingFunctionConverter(declaration.value);
},
"animation-iteration-count": function(info, declaration) {
return declaration.value === "infinite" ? info.iterations = Number.MAX_VALUE : info.iterations = converters.numberConverter(declaration.value);
},
"animation-direction": function(info, declaration) {
return info.isReverse = declaration.value === "reverse";
},
"animation-fill-mode": function(info, declaration) {
return info.isForwards = declaration.value === "forwards";
}
};
var CssAnimationParser = function() {
function CssAnimationParser() {}
CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function(declarations) {
var animations = new Array();
var animationInfo = undefined;
if (declarations === null || declarations === undefined) {
return undefined;
}
for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
var declaration = declarations_1[_i];
if (declaration.property === "animation") {
CssAnimationParser.keyframeAnimationsFromCSSProperty(declaration.value, animations);
} else {
var propertyHandler = animationProperties[declaration.property];
if (propertyHandler) {
if (animationInfo === undefined) {
animationInfo = new keyframeAnimationModule.KeyframeAnimationInfo();
animations.push(animationInfo);
}
propertyHandler(animationInfo, declaration);
}
}
}
return animations.length === 0 ? undefined : animations;
};
CssAnimationParser.keyframesArrayFromCSS = function(cssKeyframes) {
var parsedKeyframes = new Array();
for (var _i = 0, _a = cssKeyframes.keyframes; _i < _a.length; _i++) {
var keyframe = _a[_i];
var declarations = CssAnimationParser.parseKeyframeDeclarations(keyframe);
for (var _b = 0, _c = keyframe.values; _b < _c.length; _b++) {
var time_1 = _c[_b];
if (time_1 === "from") {
time_1 = 0;
} else if (time_1 === "to") {
time_1 = 1;
} else {
time_1 = parseFloat(time_1) / 100;
if (time_1 < 0) {
time_1 = 0;
}
if (time_1 > 100) {
time_1 = 100;
}
}
var current = parsedKeyframes[time_1];
if (current === undefined) {
current = {};
current.duration = time_1;
parsedKeyframes[time_1] = current;
}
for (var _d = 0, _e = keyframe.declarations; _d < _e.length; _d++) {
var declaration = _e[_d];
if (declaration.property === "animation-timing-function") {
current.curve = converters.animationTimingFunctionConverter(declaration.value);
}
}
current.declarations = declarations;
}
}
var array = new Array();
for (var parsedKeyframe in parsedKeyframes) {
array.push(parsedKeyframes[parsedKeyframe]);
}
array.sort(function(a, b) {
return a.duration - b.duration;
});
return array;
};
CssAnimationParser.keyframeAnimationsFromCSSProperty = function(value, animations) {
if (types.isString(value)) {
var values = value.split(/[,]+/);
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var parsedValue = values_1[_i];
var animationInfo = new keyframeAnimationModule.KeyframeAnimationInfo();
var arr = parsedValue.trim().split(/[ ]+/);
if (arr.length > 0) {
animationInfo.name = arr[0];
}
if (arr.length > 1) {
animationInfo.duration = converters.timeConverter(arr[1]);
}
if (arr.length > 2) {
animationInfo.curve = converters.animationTimingFunctionConverter(arr[2]);
}
if (arr.length > 3) {
animationInfo.delay = converters.timeConverter(arr[3]);
}
if (arr.length > 4) {
animationInfo.iterations = parseInt(arr[4]);
}
if (arr.length > 5) {
animationInfo.isReverse = arr[4] === "reverse";
}
if (arr.length > 6) {
animationInfo.isForwards = arr[5] === "forwards";
}
if (arr.length > 7) {
throw new Error("Invalid value for animation: " + value);
}
animations.push(animationInfo);
}
}
};
CssAnimationParser.parseKeyframeDeclarations = function(keyframe) {
var declarations = {};
var transforms = {
scale: undefined,
translate: undefined
};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
var property = styleProperty.getPropertyByCssName(declaration.property);
if (property) {
var val = declaration.value;
if (property.name === "opacity") {
val = parseFloat(val);
} else if (property.name === "backgroundColor") {
val = new colorModule.Color(val);
}
declarations[property.name] = val;
} else {
var pairs = styleProperty.getShorthandPairs(declaration.property, declaration.value);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
if (!this.preprocessAnimationValues(pair, transforms)) {
declarations[pair.property.name] = pair.value;
}
}
}
}
}
if (transforms.scale !== undefined) {
declarations["scale"] = transforms.scale;
}
if (transforms.translate !== undefined) {
declarations["translate"] = transforms.translate;
}
var array = new Array();
for (var declaration in declarations) {
var keyframeDeclaration = {};
keyframeDeclaration.property = declaration;
keyframeDeclaration.value = declarations[declaration];
array.push(keyframeDeclaration);
}
return array;
};
CssAnimationParser.preprocessAnimationValues = function(pair, transforms) {
if (pair.property.name === "scaleX") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.x = pair.value;
return true;
}
if (pair.property.name === "scaleY") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.y = pair.value;
return true;
}
if (pair.property.name === "translateX") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.x = pair.value;
return true;
}
if (pair.property.name === "translateY") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.y = pair.value;
return true;
}
return false;
};
return CssAnimationParser;
}();
exports.CssAnimationParser = CssAnimationParser;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var observable = __webpack_require__(29);
var propertiesByName = {};
var propertiesByCssName = {};
var callbackByShorthandName = new Map();
var inheritableProperties = [];
function registerProperty(property) {
if (propertiesByCssName[property.cssName]) {
throw new Error("Property with name " + property.cssName + " is already registered!");
}
propertiesByCssName[property.cssName] = property;
propertiesByName[property.name] = property;
if (property.inheritable) {
inheritableProperties.push(property);
}
}
function withStyleProperty(name, value, resolvedCallback) {
var property = getPropertyByCssName(name);
if (property) {
resolvedCallback(property, value);
} else {
var pairs = getShorthandPairs(name, value);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
resolvedCallback(pair.property, pair.value);
}
} else {
resolvedCallback(name, value);
}
}
}
exports.withStyleProperty = withStyleProperty;
function getShorthandPairs(name, value) {
var callback = callbackByShorthandName.get(name);
if (callback) {
return callback(value);
}
return undefined;
}
exports.getShorthandPairs = getShorthandPairs;
function registerShorthandCallback(name, callback) {
if (callbackByShorthandName.has(name)) {
throw new Error("Shorthand callback already registered for property: " + name);
}
callbackByShorthandName.set(name, callback);
}
exports.registerShorthandCallback = registerShorthandCallback;
function getPropertyByName(name) {
return propertiesByName[name];
}
exports.getPropertyByName = getPropertyByName;
function getPropertyByCssName(name) {
return propertiesByCssName[name];
}
exports.getPropertyByCssName = getPropertyByCssName;
function eachProperty(callback) {
types.verifyCallback(callback);
for (var i = 0, keys = Object.keys(propertiesByName); i < keys.length; i++) {
var key = keys[i];
callback(propertiesByName[key]);
}
}
exports.eachProperty = eachProperty;
function eachInheritableProperty(callback) {
types.verifyCallback(callback);
for (var i = 0; i < inheritableProperties.length; i++) {
callback(inheritableProperties[i]);
}
}
exports.eachInheritableProperty = eachInheritableProperty;
var Property = function(_super) {
__extends(Property, _super);
function Property(name, cssName, metadata, valueConverter) {
_super.call(this, name, "Style", metadata, valueConverter);
this.cssName = cssName;
this.cssName = cssName;
registerProperty(this);
}
return Property;
}(observable.Property);
exports.Property = Property;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(100);
global.moduleMerge(common, exports);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.prototype._createUI = function() {
var args = {
eventName: common.Placeholder.creatingViewEvent,
object: this,
view: undefined,
context: this._context
};
this.notify(args);
this._android = args.view;
};
Object.defineProperty(Placeholder.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Placeholder.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Placeholder;
}(common.Placeholder);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.creatingViewEvent = "creatingView";
return Placeholder;
}(view.View);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(102);
var style = __webpack_require__(15);
var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 16842872;
function onValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setProgress(data.newValue);
}
function onMaxValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setMax(data.newValue);
}
common.Progress.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Progress.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.apply(this, arguments);
}
Progress.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
};
Object.defineProperty(Progress.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Progress;
}(common.Progress);
exports.Progress = Progress;
var ProgressStyler = function() {
function ProgressStyler() {}
ProgressStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ProgressStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getProgressDrawable().clearColorFilter();
};
ProgressStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
var progressDrawable = bar.getProgressDrawable();
if (progressDrawable.getNumberOfLayers && progressDrawable.getNumberOfLayers() > 0) {
var backgroundDrawable = progressDrawable.getDrawable(0);
if (backgroundDrawable) {
backgroundDrawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
}
};
ProgressStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
ProgressStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setColorProperty, ProgressStyler.resetColorProperty), "Progress");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setBackgroundAndBorderProperty, ProgressStyler.resetBackgroundAndBorderProperty), "Progress");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Progress");
};
return ProgressStyler;
}();
exports.ProgressStyler = ProgressStyler;
ProgressStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(29);
var proxy = __webpack_require__(52);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.call(this);
this.maxValue = 100;
this.value = 0;
}
Object.defineProperty(Progress.prototype, "maxValue", {
get: function() {
return this._getValue(Progress.maxValueProperty);
},
set: function(newMaxValue) {
this._setValue(Progress.maxValueProperty, newMaxValue);
if (this.value > newMaxValue) {
this.value = newMaxValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Progress.prototype, "value", {
get: function() {
return this._getValue(Progress.valueProperty);
},
set: function(value) {
value = Math.min(value, this.maxValue);
this._setValue(Progress.valueProperty, value);
},
enumerable: true,
configurable: true
});
Progress.valueProperty = new dependency_observable_1.Property("value", "Progress", new proxy.PropertyMetadata(0));
Progress.maxValueProperty = new dependency_observable_1.Property("maxValue", "Progress", new proxy.PropertyMetadata(100));
return Progress;
}(view_1.View);
exports.Progress = Progress;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var trace = __webpack_require__(31);
var layout_base_1 = __webpack_require__(78);
var ProxyViewContainer = function(_super) {
__extends(ProxyViewContainer, _super);
function ProxyViewContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ProxyViewContainer.prototype, "ios", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "android", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "_nativeView", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
ProxyViewContainer.prototype._createUI = function() {};
ProxyViewContainer.prototype._getNativeViewsCount = function() {
var result = 0;
this._eachChildView(function(cv) {
result += cv._getNativeViewsCount();
return true;
});
return result;
};
ProxyViewContainer.prototype._eachLayoutView = function(callback) {
this._eachChildView(function(cv) {
cv._eachLayoutView(callback);
return true;
});
};
ProxyViewContainer.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (trace.enabled) {
trace.write("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
var baseIndex = 0;
var insideIndex = 0;
if (parent instanceof layout_base_1.LayoutBase) {
baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
}
if (types.isDefined(atIndex)) {
insideIndex = this._childIndexToNativeChildIndex(atIndex);
} else {
insideIndex = this._getNativeViewsCount();
}
if (trace.enabled) {
trace.write("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, trace.categories.ViewHierarchy);
}
return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
}
return false;
};
ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function(child) {
if (trace.enabled) {
trace.write("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
}
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
return parent._removeViewFromNativeVisualTree(child);
}
};
ProxyViewContainer.prototype._addToSuperview = function(superview, atIndex) {
var _this = this;
var index = 0;
this._eachChildView(function(cv) {
if (!cv._isAddedToNativeVisualTree) {
cv._isAddedToNativeVisualTree = _this._addViewToNativeVisualTree(cv, index++);
}
return true;
});
return true;
};
ProxyViewContainer.prototype._removeFromSuperview = function() {
var _this = this;
this._eachChildView(function(cv) {
if (cv._isAddedToNativeVisualTree) {
_this._removeViewFromNativeVisualTree(cv);
}
return true;
});
};
ProxyViewContainer.prototype._registerLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._registerLayoutChild(child);
}
};
ProxyViewContainer.prototype._unregisterLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._unregisterLayoutChild(child);
}
};
ProxyViewContainer.prototype._parentChanged = function(oldParent) {
var addingToParent = this.parent && !oldParent;
var newLayout = this.parent;
var oldLayout = oldParent;
if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
newLayout._registerLayoutChild(child);
return true;
});
} else if (oldLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
oldLayout._unregisterLayoutChild(child);
return true;
});
}
};
return ProxyViewContainer;
}(layout_base_1.LayoutBase);
exports.ProxyViewContainer = ProxyViewContainer;
}, function(module, exports, __webpack_require__) {
var proxy = __webpack_require__(52);
var dependencyObservable = __webpack_require__(29);
var viewModule = __webpack_require__(12);
var layoutBaseModule = __webpack_require__(78);
var utils = __webpack_require__(37);
var trace = __webpack_require__(31);
var platform = __webpack_require__(49);
var stackLayout = __webpack_require__(85);
var types = __webpack_require__(14);
var builder = __webpack_require__(105);
var observableArray = __webpack_require__(22);
var weakEvents = __webpack_require__(30);
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(72);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var LAYOUT = "layout";
var REPEATER = "Repeater";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
function onItemsPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var repeater = data.object;
repeater._onItemTemplatePropertyChanged(data);
}
function onItemsLayoutPropertyPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsLayoutPropertyPropertyChanged(data);
}
var Repeater = function(_super) {
__extends(Repeater, _super);
function Repeater() {
_super.call(this);
this._isDirty = false;
if (platform.device.os === platform.platformNames.ios) {
this._ios = UIView.new();
}
this.itemsLayout = new stackLayout.StackLayout();
}
Object.defineProperty(Repeater.prototype, "items", {
get: function() {
return this._getValue(Repeater.itemsProperty);
},
set: function(value) {
this._setValue(Repeater.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemTemplate", {
get: function() {
return this._getValue(Repeater.itemTemplateProperty);
},
set: function(value) {
this._setValue(Repeater.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemsLayout", {
get: function() {
return this._getValue(Repeater.itemsLayoutProperty);
},
set: function(value) {
this._setValue(Repeater.itemsLayoutProperty, value);
},
enumerable: true,
configurable: true
});
Repeater.prototype.onLoaded = function() {
if (trace.enabled) {
trace.write("Repeater.onLoaded()", "Repeater");
}
if (this._isDirty) {
this.refresh();
}
_super.prototype.onLoaded.call(this);
};
Repeater.prototype._requestRefresh = function() {
if (trace.enabled) {
trace.write("Repeater._requestRefresh()", "Repeater");
}
this._isDirty = true;
if (this.isLoaded) {
this.refresh();
}
};
Repeater.prototype.refresh = function() {
if (trace.enabled) {
trace.write("Repeater.refresh()", "Repeater");
}
if (this.itemsLayout) {
this.itemsLayout.removeChildren();
}
if (types.isNullOrUndefined(this.items) || !types.isNumber(this.items.length)) {
return;
}
var length = this.items.length;
for (var i = 0; i < length; i++) {
var viewToAdd = !types.isNullOrUndefined(this.itemTemplate) ? builder.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);
var dataItem = this._getDataItem(i);
viewToAdd.bindingContext = dataItem;
this.itemsLayout.addChild(viewToAdd);
}
this._isDirty = false;
};
Repeater.prototype._onItemsPropertyChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemsPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
}
if (data.oldValue instanceof observableArray.ObservableArray) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observableArray.ObservableArray) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this._requestRefresh();
};
Repeater.prototype._onItemTemplatePropertyChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemTemplatePropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
}
this._requestRefresh();
};
Repeater.prototype._onItemsLayoutPropertyPropertyChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemsLayoutPropertyPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
}
if (data.oldValue instanceof layoutBaseModule.LayoutBase) {
this._removeView(data.oldValue);
}
if (data.newValue instanceof layoutBaseModule.LayoutBase) {
this._addView(data.newValue);
}
this._requestRefresh();
};
Repeater.prototype._onItemsChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemsChanged(" + data + ")", "Repeater");
}
this._requestRefresh();
};
Repeater.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
Repeater.prototype._getDataItem = function(index) {
return this.items.getItem ? this.items.getItem(index) : this.items[index];
};
Object.defineProperty(Repeater.prototype, "ios", {
get: function() {
return this._ios;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "_childrenCount", {
get: function() {
var count = 0;
if (this.itemsLayout) {
count++;
}
return count;
},
enumerable: true,
configurable: true
});
Repeater.prototype._eachChildView = function(callback) {
if (this.itemsLayout) {
callback(this.itemsLayout);
}
};
Repeater.prototype.onLayout = function(left, top, right, bottom) {
viewModule.View.layoutChild(this, this.itemsLayout, 0, 0, right - left, bottom - top);
};
Repeater.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = viewModule.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Repeater.itemsProperty = new dependencyObservable.Property(ITEMS, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
Repeater.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
Repeater.itemsLayoutProperty = new dependencyObservable.Property(LAYOUT, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsLayoutPropertyPropertyChanged));
return Repeater;
}(viewModule.CustomLayoutView);
exports.Repeater = Repeater;
}, function(module, exports, __webpack_require__) {
var debug_1 = __webpack_require__(106);
var xml = __webpack_require__(108);
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(46);
var types_1 = __webpack_require__(14);
var component_builder_1 = __webpack_require__(110);
var platform_1 = __webpack_require__(49);
var page_1 = __webpack_require__(89);
var file_name_resolver_1 = __webpack_require__(111);
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(31);
}
}
function parse(value, context) {
if (types_1.isString(value)) {
var viewToReturn;
if (context instanceof view_1.View) {
context = getExports(context);
}
var componentModule = parseInternal(value, context);
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
} else if (types_1.isFunction(value)) {
return value();
}
}
exports.parse = parse;
function parseMultipleTemplates(value, context) {
var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
return parseInternal(dummyComponent, context).component["itemTemplates"];
}
exports.parseMultipleTemplates = parseMultipleTemplates;
function parseInternal(value, context, uri) {
var start;
var ui;
var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function() {};
(start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker)));
start.parse(value);
return ui.rootComponentModule;
}
function loadCustomComponent(componentPath, componentName, attributes, context, parentPage) {
var result;
componentPath = componentPath.replace("~/", "");
var moduleName = componentPath + "/" + componentName;
var fullComponentPathFilePathWithoutExt = componentPath;
if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
}
var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");
if (xmlFilePath) {
var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");
var subExports = context;
if (global.moduleExists(moduleName)) {
subExports = global.loadModule(moduleName);
} else {
if (jsFilePath) {
subExports = global.loadModule(jsFilePath);
}
}
result = loadInternal(xmlFilePath, subExports);
if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
var attr;
for (attr in attributes) {
component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
}
}
} else {
result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context);
}
var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");
if (cssFilePath) {
if (parentPage) {
parentPage.addCssFile(cssFilePath);
} else {
ensureTrace();
trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
}
}
return result;
}
function load(pathOrOptions, context) {
var viewToReturn;
var componentModule;
if (!context) {
if (!types_1.isString(pathOrOptions)) {
var options = pathOrOptions;
componentModule = loadCustomComponent(options.path, options.name, options.attributes, options.exports, options.page);
} else {
var path_1 = pathOrOptions;
componentModule = loadInternal(path_1);
}
} else {
var path_2 = pathOrOptions;
componentModule = loadInternal(path_2, context);
}
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
}
exports.load = load;
function loadInternal(fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule;
}
function getExports(instance) {
var parent = instance.parent;
while (parent && parent.exports === undefined) {
parent = parent.parent;
}
return parent ? parent.exports : undefined;
}
var xml2ui;
(function(xml2ui) {
var XmlProducerBase = function() {
function XmlProducerBase() {}
XmlProducerBase.prototype.pipe = function(next) {
this._next = next;
return next;
};
XmlProducerBase.prototype.next = function(args) {
this._next.parse(args);
};
return XmlProducerBase;
}();
xml2ui.XmlProducerBase = XmlProducerBase;
var XmlStringParser = function(_super) {
__extends(XmlStringParser, _super);
function XmlStringParser(error) {
_super.call(this);
this.error = error || PositionErrorFormat;
}
XmlStringParser.prototype.parse = function(value) {
var _this = this;
var xmlParser = new xml.XmlParser(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
}, function(e, p) {
throw _this.error(e, p);
}, true);
if (types_1.isString(value)) {
xmlParser.parse(value);
}
};
return XmlStringParser;
}(XmlProducerBase);
xml2ui.XmlStringParser = XmlStringParser;
function PositionErrorFormat(e, p) {
return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
}
xml2ui.PositionErrorFormat = PositionErrorFormat;
function SourceErrorFormat(uri) {
return function(e, p) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
e = new debug_1.SourceError(e, source, "Building UI from XML.");
return e;
};
}
xml2ui.SourceErrorFormat = SourceErrorFormat;
function ComponentSourceTracker(uri) {
return function(component, p) {
if (!debug_1.Source.get(component)) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
debug_1.Source.set(component, source);
}
};
}
xml2ui.ComponentSourceTracker = ComponentSourceTracker;
var PlatformFilter = function(_super) {
__extends(PlatformFilter, _super);
function PlatformFilter() {
_super.apply(this, arguments);
}
PlatformFilter.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
if (this.currentPlatformContext) {
throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
}
this.currentPlatformContext = args.elementName;
return;
}
}
if (args.eventType === xml.ParserEventType.EndElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
this.currentPlatformContext = undefined;
return;
}
}
if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
return;
}
this.next(args);
};
PlatformFilter.isPlatform = function(value) {
return value && (value.toLowerCase() === platform_1.platformNames.android.toLowerCase() || value.toLowerCase() === platform_1.platformNames.ios.toLowerCase());
};
PlatformFilter.isCurentPlatform = function(value) {
return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
};
return PlatformFilter;
}(XmlProducerBase);
xml2ui.PlatformFilter = PlatformFilter;
var XmlArgsReplay = function(_super) {
__extends(XmlArgsReplay, _super);
function XmlArgsReplay(args, errorFormat) {
_super.call(this);
this.args = args;
this.error = errorFormat;
}
XmlArgsReplay.prototype.replay = function() {
var _this = this;
this.args.forEach(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
});
};
return XmlArgsReplay;
}(XmlProducerBase);
xml2ui.XmlArgsReplay = XmlArgsReplay;
var XmlStateParser = function() {
function XmlStateParser(state) {
this.state = state;
}
XmlStateParser.prototype.parse = function(args) {
this.state = this.state.parse(args);
};
return XmlStateParser;
}();
xml2ui.XmlStateParser = XmlStateParser;
var TemplateParser = function() {
function TemplateParser(parent, templateProperty, setTemplateProperty) {
if (setTemplateProperty === void 0) {
setTemplateProperty = true;
}
this.parent = parent;
this._context = templateProperty.context;
this._recordedXmlStream = new Array();
this._templateProperty = templateProperty;
this._nestingLevel = 0;
this._state = 0;
this._setTemplateProperty = setTemplateProperty;
}
TemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
} else if (args.eventType === xml.ParserEventType.EndElement) {
this.parseEndElement(args.prefix, args.elementName);
}
this._recordedXmlStream.push(args);
return this._state === 2 ? this.parent : this;
};
Object.defineProperty(TemplateParser.prototype, "elementName", {
get: function() {
return this._templateProperty.elementName;
},
enumerable: true,
configurable: true
});
TemplateParser.prototype.parseStartElement = function(prefix, namespace, elementName, attributes) {
if (this._state === 0) {
this._state = 1;
} else if (this._state === 2) {
throw new Error("Template must have exactly one root element but multiple elements were found.");
}
this._nestingLevel++;
};
TemplateParser.prototype.parseEndElement = function(prefix, elementName) {
if (this._state === 0) {
throw new Error("Template must have exactly one root element but none was found.");
} else if (this._state === 2) {
throw new Error("No more closing elements expected for this template.");
}
this._nestingLevel--;
if (this._nestingLevel === 0) {
this._state = 2;
if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
var template = this._build();
this._templateProperty.parent.component[this._templateProperty.name] = template;
}
}
};
TemplateParser.prototype._build = function() {
var _this = this;
var context = this._context;
var errorFormat = this._templateProperty.errorFormat;
var sourceTracker = this._templateProperty.sourceTracker;
var template = function() {
var start;
var ui;
(start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
start.replay();
return ui.rootComponentModule.component;
};
return template;
};
return TemplateParser;
}();
xml2ui.TemplateParser = TemplateParser;
var MultiTemplateParser = function() {
function MultiTemplateParser(parent, templateProperty) {
this.parent = parent;
this.templateProperty = templateProperty;
this._childParsers = new Array();
}
MultiTemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
var childParser = new TemplateParser(this, this.templateProperty, false);
childParser["key"] = args.attributes["key"];
this._childParsers.push(childParser);
return childParser;
}
if (args.eventType === xml.ParserEventType.EndElement) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
if (name === this.templateProperty.name) {
var templates = new Array();
for (var i = 0; i < this._childParsers.length; i++) {
templates.push({
key: this._childParsers[i]["key"],
createView: this._childParsers[i]._build()
});
}
this.templateProperty.parent.component[this.templateProperty.name] = templates;
return this.parent;
}
}
return this;
};
return MultiTemplateParser;
}();
xml2ui.MultiTemplateParser = MultiTemplateParser;
var ComponentParser = function() {
function ComponentParser(context, errorFormat, sourceTracker) {
this.parents = new Array();
this.complexProperties = new Array();
this.context = context;
this.error = errorFormat;
this.sourceTracker = sourceTracker;
}
ComponentParser.prototype.parse = function(args) {
var parent = this.parents[this.parents.length - 1];
var complexProperty = this.complexProperties[this.complexProperties.length - 1];
if (args.eventType === xml.ParserEventType.StartElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
this.complexProperties.push({
parent: parent,
name: name,
items: []
});
if (ComponentParser.isKnownTemplate(name, parent.exports)) {
return new TemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
return new MultiTemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
} else {
var componentModule;
if (args.prefix && args.namespace) {
componentModule = loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentPage);
} else {
var namespace = args.namespace;
if (defaultNameSpaceMatcher.test(namespace || "")) {
namespace = undefined;
}
componentModule = component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context);
}
if (componentModule) {
this.sourceTracker(componentModule.component, args.position);
if (parent) {
if (complexProperty) {
ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
} else if (parent.component._addChildFromBuilder) {
parent.component._addChildFromBuilder(args.elementName, componentModule.component);
}
} else if (this.parents.length === 0) {
this.rootComponentModule = componentModule;
if (this.rootComponentModule && this.rootComponentModule.component instanceof page_1.Page) {
this.currentPage = this.rootComponentModule.component;
if (this.currentPage.exports) {
this.context = this.currentPage.exports;
}
}
}
this.parents.push(componentModule);
}
}
} else if (args.eventType === xml.ParserEventType.EndElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
if (complexProperty) {
if (parent && parent.component._addArrayFromBuilder) {
parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);
complexProperty.items = [];
}
}
this.complexProperties.pop();
} else {
this.parents.pop();
}
}
return this;
};
ComponentParser.isComplexProperty = function(name) {
return types_1.isString(name) && name.indexOf(".") !== -1;
};
ComponentParser.getComplexPropertyName = function(fullName) {
var name;
if (types_1.isString(fullName)) {
var names = fullName.split(".");
name = names[names.length - 1];
}
return name;
};
ComponentParser.isKnownTemplate = function(name, exports) {
return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
};
ComponentParser.isKnownMultiTemplate = function(name, exports) {
return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
};
ComponentParser.addToComplexProperty = function(parent, complexProperty, elementModule) {
var parentComponent = parent.component;
if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
complexProperty.items.push(elementModule.component);
} else if (parentComponent._addChildFromBuilder) {
parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
} else {
parentComponent[complexProperty.name] = elementModule.component;
}
};
ComponentParser.isKnownCollection = function(name, context) {
return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
};
ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
ComponentParser.KNOWNTEMPLATES = "knownTemplates";
ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";
return ComponentParser;
}();
xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(107));
var ScopeError = function(_super) {
__extends(ScopeError, _super);
function ScopeError(inner, message) {
var formattedMessage;
if (message && inner.message) {
formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
} else {
formattedMessage = message || inner.message || undefined;
}
_super.call(this, formattedMessage);
this.stack = "Error: " + this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1);
this.message = formattedMessage;
}
return ScopeError;
}(Error);
exports.ScopeError = ScopeError;
var SourceError = function(_super) {
__extends(SourceError, _super);
function SourceError(child, source, message) {
_super.call(this, child, message ? message + " @" + source + "" : source + "");
}
return SourceError;
}(ScopeError);
exports.SourceError = SourceError;
}, function(module, exports, __webpack_require__) {
var file_system_1 = __webpack_require__(46);
exports.debug = true;
var applicationRootPath;
function ensureAppRootPath() {
if (!applicationRootPath) {
applicationRootPath = file_system_1.knownFolders.currentApp().path;
applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
}
}
var Source = function() {
function Source(uri, line, column) {
ensureAppRootPath();
if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
this._uri = "file://" + uri.substr(applicationRootPath.length);
} else {
this._uri = uri;
}
this._line = line;
this._column = column;
}
Object.defineProperty(Source.prototype, "uri", {
get: function() {
return this._uri;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "line", {
get: function() {
return this._line;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "column", {
get: function() {
return this._column;
},
enumerable: true,
configurable: true
});
Source.prototype.toString = function() {
return this._uri + ":" + this._line + ":" + this._column;
};
Source.get = function(object) {
return object[Source._source];
};
Source.set = function(object, src) {
object[Source._source] = src;
};
Source._source = Symbol("source");
return Source;
}();
exports.Source = Source;
}, function(module, exports, __webpack_require__) {
"use strict";
var easysax = __webpack_require__(109);
var ParserEventType = function() {
function ParserEventType() {}
ParserEventType.StartElement = "StartElement";
ParserEventType.EndElement = "EndElement";
ParserEventType.Text = "Text";
ParserEventType.CDATA = "CDATA";
ParserEventType.Comment = "Comment";
return ParserEventType;
}();
exports.ParserEventType = ParserEventType;
var ParserEvent = function() {
function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
this._eventType = eventType;
this._position = position;
this._prefix = prefix;
this._namespace = namespace;
this._elementName = elementName;
this._attributes = attributes;
this._data = data;
}
ParserEvent.prototype.toString = function() {
return JSON.stringify({
eventType: this.eventType,
position: this.position,
prefix: this.prefix,
namespace: this.namespace,
elementName: this.elementName,
attributes: this.attributes,
data: this.data
});
};
Object.defineProperty(ParserEvent.prototype, "eventType", {
get: function() {
return this._eventType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "position", {
get: function() {
return this._position;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "prefix", {
get: function() {
return this._prefix;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "namespace", {
get: function() {
return this._namespace;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "elementName", {
get: function() {
return this._elementName;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "attributes", {
get: function() {
return this._attributes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "data", {
get: function() {
return this._data;
},
enumerable: true,
configurable: true
});
return ParserEvent;
}();
exports.ParserEvent = ParserEvent;
var _ampCodes;
var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi;
function _generateAmpMap() {
var objCodes = {
Tab: 9,
NewLine: 10,
excl: 33,
quot: 34,
QUOT: 34,
num: 35,
dollar: 36,
percent: 37,
amp: 38,
AMP: 38,
apos: 39,
lpar: 40,
rpar: 41,
ast: 42,
midast: 42,
plus: 43,
comma: 44,
period: 46,
sol: 47,
colon: 58,
semi: 59,
lt: 60,
LT: 60,
equals: 61,
gt: 62,
GT: 62,
quest: 63,
commat: 64,
lsqb: 91,
lbrack: 91,
bsol: 92,
rsqb: 92,
rbrack: 92,
Hat: 94,
lowbar: 95,
grave: 96,
DiacriticalGrave: 96,
lcub: 123,
lbrace: 123,
verbar: 124,
vert: 124,
VerticalLine: 124,
rcub: 125,
rbrace: 125,
nbsp: 160,
iexcl: 161,
cent: 162,
pound: 163,
curren: 164,
yen: 165,
brvbar: 166,
brkbar: 166,
sect: 167,
uml: 168,
copy: 169,
ordf: 170,
laquo: 171,
not: 172,
shy: 173,
reg: 174,
macr: 175,
hibar: 175,
deg: 176,
plusmn: 177,
sup2: 178,
sup3: 179,
acute: 180,
micro: 181,
para: 182,
middot: 183,
cedil: 184,
sup1: 185,
ordm: 186,
raquo: 187,
frac14: 188,
frac12: 189,
frac34: 190,
iquest: 191,
Agrave: 192,
Aacute: 193,
Acirc: 194,
Atilde: 195,
Auml: 196,
Aring: 197,
AElig: 198,
Ccedil: 199,
Egrave: 200,
Eacute: 201,
Ecirc: 202,
Euml: 203,
Igrave: 204,
Iacute: 205,
Icirc: 206,
Iuml: 207,
ETH: 208,
Dstrok: 208,
Ntilde: 209,
Ograve: 210,
Oacute: 211,
Ocirc: 212,
Otilde: 213,
Ouml: 214,
times: 215,
Oslash: 216,
Ugrave: 217,
Uacute: 218,
Ucirc: 219,
Uuml: 220,
Yacute: 221,
THORN: 222,
szlig: 223,
agrave: 224,
aacute: 225,
acirc: 226,
atilde: 227,
auml: 228,
aring: 229,
aelig: 230,
ccedil: 231,
egrave: 232,
eacute: 233,
ecirc: 234,
euml: 235,
igrave: 236,
iacute: 237,
icirc: 238,
iuml: 239,
eth: 240,
ntilde: 241,
ograve: 242,
oacute: 243,
ocirc: 244,
otilde: 245,
ouml: 246,
divide: 247,
oslash: 248,
ugrave: 249,
uacute: 250,
ucirc: 251,
uuml: 252,
yacute: 253,
thorn: 254,
yuml: 255,
fnof: 402,
imped: 437,
gacute: 501,
jmath: 567,
circ: 710,
caron: 711,
Hacek: 711,
breve: 728,
Breve: 728,
dot: 729,
DiacriticalDot: 729,
ring: 730,
ogon: 731,
tilde: 732,
DiacriticalTilde: 732,
dblac: 733,
DiacriticalDoubleAcute: 733,
DownBreve: 785,
UnderBar: 818,
Alpha: 913,
Beta: 914,
Gamma: 915,
Delta: 916,
Epsilon: 917,
Zeta: 918,
Eta: 919,
Theta: 920,
Iota: 921,
Kappa: 922,
Lambda: 923,
Mu: 924,
Nu: 925,
Xi: 926,
Omicron: 927,
Pi: 928,
Rho: 929,
Sigma: 931,
Tau: 932,
Upsilon: 933,
Phi: 934,
Chi: 935,
Psi: 936,
Omega: 937,
alpha: 945,
beta: 946,
gamma: 947,
delta: 948,
epsilon: 949,
epsiv: 949,
varepsilon: 949,
zeta: 950,
eta: 951,
theta: 952,
iota: 953,
kappa: 954,
lambda: 955,
mu: 956,
nu: 957,
xi: 958,
omicron: 959,
pi: 960,
rho: 961,
sigmaf: 962,
sigmav: 962,
varsigma: 962,
sigma: 963,
tau: 964,
upsilon: 965,
phi: 966,
chi: 967,
psi: 968,
omega: 969,
thetav: 977,
vartheta: 977,
thetasym: 977,
Upsi: 978,
upsih: 978,
straightphi: 981,
piv: 982,
varpi: 982,
Gammad: 988,
gammad: 989,
digamma: 989,
kappav: 1008,
varkappa: 1008,
rhov: 1009,
varrho: 1009,
epsi: 1013,
straightepsilon: 1013,
bepsi: 1014,
backepsilon: 1014,
euro: 8364,
trade: 8482,
TRADE: 8482,
forall: 8704,
part: 8706,
larr: 8592,
rarr: 8593,
hyphen: 8208,
dash: 8208,
ndash: 8211,
mdash: 8212,
horbar: 8213,
Vert: 8214,
Verbar: 8214,
lsquo: 8216,
OpenCurlyQuote: 8216,
rsquo: 8217,
rsquor: 8217,
CloseCurlyQuote: 8217,
lsquor: 8218,
sbquo: 8218,
ldquo: 8220,
OpenCurlyDoubleQuote: 8220,
rdquo: 8221,
rdquor: 8221,
CloseCurlyDoubleQuote: 8221,
ldquor: 8222,
bdquo: 8222,
dagger: 8224,
Dagger: 8225,
ddagger: 8225,
bull: 8226,
bullet: 8226,
nldr: 8229,
hellip: 8230,
mldr: 8230,
hybull: 8259,
tdot: 8411,
TripleDot: 8411,
DotDot: 8412,
star: 9734,
phone: 9742,
spades: 9824,
clubs: 9827,
hearts: 9829,
diams: 9830,
female: 9792,
male: 9794,
check: 10003,
checkmark: 10003,
cross: 10007,
VerticalSeparator: 10072,
EmptySmallSquare: 9723,
FilledSmallSquare: 9724,
starf: 9733,
bigstar: 9733,
square: 9633,
squ: 9633,
Square: 9633
};
var ampCodes = new Map();
for (var key in objCodes) {
if (objCodes.hasOwnProperty(key)) {
ampCodes.set(key, objCodes[key]);
}
}
return ampCodes;
}
if (true) {
_ampCodes = _generateAmpMap();
}
function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
if (wordValue) {
if (!_ampCodes) {
_ampCodes = _generateAmpMap();
}
var res = _ampCodes.get(wordValue);
if (res) {
return String.fromCharCode(res);
}
return found;
}
if (decimalValue) {
return String.fromCharCode(parseInt(decimalValue, 10));
}
return String.fromCharCode(parseInt(hexValue, 16));
}
var XmlParser = function() {
function XmlParser(onEvent, onError, processNamespaces) {
this._processNamespaces = processNamespaces;
this._parser = new easysax.EasySAXParser();
var that = this;
this._parser.on("startNode", function(elem, attr, uq, tagend, str, pos) {
var attributes = attr();
if (attributes === true) {
attributes = undefined;
}
if (attributes) {
var key;
for (key in attributes) {
if (attributes.hasOwnProperty(key)) {
attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
}
}
}
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var stackEntry = XmlParser._getNamespacesStackEntry(attributes);
that._namespaceStack.push(stackEntry);
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
});
this._parser.on("textNode", function(text, uq, pos) {
var data = uq(XmlParser._dereferenceEntities(text));
onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("endNode", function(elem, uq, tagstart, str, pos) {
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));
if (that._processNamespaces) {
that._namespaceStack.pop();
}
});
this._parser.on("cdata", function(data, res, pos) {
onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("comment", function(text, uq, pos) {
onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
});
if (onError) {
this._parser.on("error", function(msg, pos) {
onError(new Error(msg), pos());
});
}
}
Object.defineProperty(XmlParser.prototype, "angularSyntax", {
get: function() {
return this._parser.angularSyntax;
},
set: function(value) {
this._parser.angularSyntax = value;
},
enumerable: true,
configurable: true
});
XmlParser.prototype.parse = function(xmlString) {
if (this._processNamespaces) {
this._namespaceStack = [];
}
this._parser.parse(xmlString);
};
XmlParser._getNamespacesStackEntry = function(attributes) {
var stackEntry = {};
if (!attributes) {
return stackEntry;
}
for (var key in attributes) {
if (!attributes.hasOwnProperty(key)) {
continue;
}
var attributeName = key;
if (attributeName.indexOf("xmlns") !== 0) {
continue;
}
var namespacePrefix = "";
if (attributeName.indexOf(":") !== -1) {
namespacePrefix = attributeName.split(":")[1];
}
stackEntry[namespacePrefix] = attributes[key];
}
return stackEntry;
};
XmlParser.prototype._resolveNamespace = function(fullName) {
var result = {
prefix: undefined,
namespace: undefined,
name: undefined
};
result.prefix = "";
if (fullName.indexOf(":") !== -1) {
var split = fullName.split(":");
result.prefix = split[0];
result.name = split[1];
} else {
result.name = fullName;
}
var i;
var stackEntry;
for (i = this._namespaceStack.length - 1; i >= 0; i--) {
stackEntry = this._namespaceStack[i];
for (var key in stackEntry) {
if (!stackEntry.hasOwnProperty(key)) {
continue;
}
if (result.prefix === key) {
result.namespace = stackEntry[key];
return result;
}
}
}
return result;
};
XmlParser._dereferenceEntities = function(s) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
}
return s;
};
return XmlParser;
}();
exports.XmlParser = XmlParser;
}, function(module, exports, __webpack_require__) {
if (true) {
module.exports.EasySAXParser = EasySAXParser;
}
function EasySAXParser() {
"use strict";
if (!this) return null;
this.angularSyntax = false;
function nullFunc() {}
this.onTextNode = nullFunc;
this.onStartNode = nullFunc;
this.onEndNode = nullFunc;
this.onCDATA = nullFunc;
this.onError = nullFunc;
this.onComment = null;
this.onQuestion = null;
this.onAttention = null;
this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
this.isNamespace = false;
this.useNS = null;
this.default_xmlns = null;
this.xmlns = null;
this.nsmatrix = {
xmlns: this.xmlns
};
this.hasSurmiseNS = false;
this.attr_string = "";
this.attr_posstart = 0;
this.attr_res;
}
EasySAXParser.prototype.on = function(name, cb) {
if (typeof cb !== "function") {
if (cb !== null) return;
}
switch (name) {
case "error":
this.onError = cb || nullFunc;
break;

case "startNode":
this.onStartNode = cb || nullFunc;
break;

case "endNode":
this.onEndNode = cb || nullFunc;
break;

case "textNode":
this.onTextNode = cb || nullFunc;
break;

case "cdata":
this.onCDATA = cb || nullFunc;
break;

case "comment":
this.onComment = cb;
this.is_onComment = !!cb;
break;

case "question":
this.onQuestion = cb;
this.is_onQuestion = !!cb;
break;

case "attention":
this.onAttention = cb;
this.is_onAttention = !!cb;
break;
}
};
EasySAXParser.prototype.ns = function(root, ns) {
if (!root || typeof root !== "string" || !ns) {
return;
}
var u, x = {}, ok, v, i;
for (i in ns) {
v = ns[i];
if (typeof v === "string") {
if (root === v) ok = true;
x[i] = v;
}
}
if (ok) {
this.isNamespace = true;
this.default_xmlns = root;
this.useNS = x;
}
};
EasySAXParser.prototype.parse = function(xml) {
if (typeof xml !== "string") {
return;
}
if (this.isNamespace) {
this.nsmatrix = {
xmlns: this.default_xmlns
};
parse(xml);
this.nsmatrix = false;
} else {
parse(xml);
}
this.attr_res = true;
};
var xharsQuot = {
constructor: false,
hasOwnProperty: false,
isPrototypeOf: false,
propertyIsEnumerable: false,
toLocaleString: false,
toString: false,
valueOf: false,
quot: '"',
QUOT: '"',
amp: "&",
AMP: "&",
nbsp: " ",
apos: "'",
lt: "<",
LT: "<",
gt: ">",
GT: ">",
copy: "©",
laquo: "«",
raquo: "»",
reg: "®",
deg: "°",
plusmn: "±",
sup2: "²",
sup3: "³",
micro: "µ",
para: "¶"
};
function rpEntities(s, d, x, z) {
if (z) {
return xharsQuot[z] || "";
}
if (d) {
return String.fromCharCode(d);
}
return String.fromCharCode(parseInt(x, 16));
}
function unEntities(s, i) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
if (s.indexOf("&gt;") !== -1) s = s.replace(/&gt;/g, ">");
if (s.indexOf("&lt;") !== -1) s = s.replace(/&lt;/g, "<");
if (s.indexOf("&quot;") !== -1) s = s.replace(/&quot;/g, '"');
if (s.indexOf("&") !== -1) {
s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi, rpEntities);
}
}
return s;
}
EasySAXParser.prototype.allowedAngularAttributeChars = function(w) {
if (!this.angularSyntax) {
return false;
} else {
return w === 40 || w === 41 || w === 91 || w === 93 || w === 94 || w === 35;
}
};
EasySAXParser.prototype.getAttrs = function() {
if (this.attr_res !== null) {
return this.attr_res;
}
var u, res = {}, s = this.attr_string, i = this.attr_posstart, l = s.length, attr_list = this.hasSurmiseNS ? [] : false, name, value = "", ok = false, noValueAttribute = false, j, w, nn, n, hasNewMatrix, alias, newalias;
aa: for (;i < l; i++) {
w = s.charCodeAt(i);
if (w === 32 || w < 14 && w > 8) {
continue;
}
if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
return this.attr_res = false;
}
for (j = i + 1; j < l; j++) {
w = s.charCodeAt(j);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
if (noValueAttribute) {
j--;
break;
} else {
continue;
}
}
if (this.allowedAngularAttributeChars(w)) {
continue;
}
if (w === 32 || w > 8 && w < 14) {
noValueAttribute = true;
continue;
} else if (w === 61) {
noValueAttribute = false;
break;
} else {
if (!noValueAttribute) return this.attr_res = false;
}
break;
}
name = s.substring(i, j).trim();
ok = true;
if (name === "xmlns:xmlns") {
return this.attr_res = false;
}
w = s.charCodeAt(j + 1);
while (w = s.charCodeAt(j + 1)) {
if (w === 32 || w > 8 && w < 14) {
j++;
} else {
break;
}
}
if (!noValueAttribute) {
if (w === 34) {
j = s.indexOf('"', i = j + 2);
} else {
if (w === 39) {
j = s.indexOf("'", i = j + 2);
} else {
return this.attr_res = false;
}
}
}
if (j === -1) {
return this.attr_res = false;
}
if (j + 1 < l && !noValueAttribute) {
w = s.charCodeAt(j + 1);
if (w > 32 || w < 9 || w < 32 && w > 13) {
return this.attr_res = false;
}
}
if (noValueAttribute) {
value = "";
} else {
value = s.substring(i, j);
}
i = j;
if (this.isNamespace) {
if (this.hasSurmiseNS) {
if (newalias = name === "xmlns" ? "xmlns" : name.charCodeAt(0) === 120 && name.substr(0, 6) === "xmlns:" && name.substr(6)) {
alias = this.useNS[unEntities(value)];
if (alias) {
if (this.nsmatrix[newalias] !== alias) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = alias;
}
} else {
if (this.nsmatrix[newalias]) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = false;
}
}
res[name] = value;
continue;
}
attr_list.push(name, value);
continue;
}
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = value;
}
continue aa;
}
}
}
res[name] = value;
noValueAttribute = false;
}
if (!ok) {
return this.attr_res = true;
}
if (this.hasSurmiseNS) {
bb: for (i = 0, l = attr_list.length; i < l; i++) {
name = attr_list[i++];
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = attr_list[i];
}
continue bb;
break;
}
}
res[name] = attr_list[i];
}
}
return this.attr_res = res;
};
EasySAXParser.prototype.parse = function(xml) {
var u, xml = String(xml), nodestack = [], stacknsmatrix = [], elem, tagend = false, tagstart = false, j = 0, i = 0, k = 0, len, x, y, q, w, xmlns, stopIndex = 0, stop, _nsmatrix, ok, pos = 0, ln = 0, lnStart = -2, lnEnd = -1;
len = xml.length;
function getStringNode() {
return xml.substring(i, j + 1);
}
function findLineAndColumnFromPos() {
while (lnStart < lnEnd && lnEnd < pos) {
lnStart = lnEnd;
lnEnd = xml.indexOf("\n", lnEnd + 1);
++ln;
}
return {
line: ln,
column: pos - lnStart
};
}
function position(p) {
pos = p;
return findLineAndColumnFromPos;
}
while (j !== -1) {
stop = stopIndex > 0;
if (xml.charCodeAt(j) === 60) {
i = j;
} else {
i = xml.indexOf("<", j);
}
if (i === -1) {
if (nodestack.length) {
this.onError("end file", position(j));
return;
}
return;
}
if (j !== i && !stop) {
ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
if (ok === false) return;
}
w = xml.charCodeAt(i + 1);
if (w === 33) {
w = xml.charCodeAt(i + 2);
if (w === 91 && xml.substr(i + 3, 6) === "CDATA[") {
j = xml.indexOf("]]>", i);
if (j === -1) {
this.onError("cdata", position(i));
return;
}
if (!stop) {
ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
if (w === 45 && xml.charCodeAt(i + 3) === 45) {
j = xml.indexOf("-->", i);
if (j === -1) {
this.onError("expected -->", position(i));
return;
}
if (this.is_onComment && !stop) {
ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
j = xml.indexOf(">", i + 1);
if (j === -1) {
this.onError('expected ">"', position(i + 1));
return;
}
if (this.is_onAttention && !stop) {
ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
if (ok === false) return;
}
j += 1;
continue;
} else {
if (w === 63) {
j = xml.indexOf("?>", i);
if (j === -1) {
this.onError("...?>", position(i));
return;
}
if (this.is_onQuestion) {
ok = this.onQuestion(xml.substring(i, j + 2), position(i));
if (ok === false) return;
}
j += 2;
continue;
}
}
var inside = false;
for (k = i, j = -1; k < len; k++) {
var c = xml.charCodeAt(k);
if (!inside) {
if (c === 34) {
inside = c;
} else if (c === 39) {
inside = c;
} else if (c === 62) {
j = k;
break;
}
} else {
if (c === inside) {
inside = false;
}
}
}
if (j == -1) {
this.onError("...>", position(i + 1));
return;
}
this.attr_res = true;
if (w === 47) {
tagstart = false;
tagend = true;
x = elem = nodestack.pop();
q = i + 2 + x.length;
if (xml.substring(i + 2, q) !== x) {
this.onError("close tagname", position(i + 2));
return;
}
for (;q < j; q++) {
w = xml.charCodeAt(q);
if (w === 32 || w > 8 && w < 14) {
continue;
}
this.onError("close tag", position(i + 2));
return;
}
} else {
if (xml.charCodeAt(j - 1) === 47) {
x = elem = xml.substring(i + 1, j - 1);
tagstart = true;
tagend = true;
} else {
x = elem = xml.substring(i + 1, j);
tagstart = true;
tagend = false;
}
if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
this.onError("first char nodeName", position(i + 1));
return;
}
for (q = 1, y = x.length; q < y; q++) {
w = x.charCodeAt(q);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
continue;
}
if (w === 32 || w < 14 && w > 8) {
elem = x.substring(0, q);
this.attr_res = null;
break;
}
this.onError("invalid nodeName", position(i + 1));
return;
}
if (!tagend) {
nodestack.push(elem);
}
}
if (this.isNamespace) {
if (stop) {
if (tagend) {
if (!tagstart) {
if (--stopIndex === 0) {
this.nsmatrix = stacknsmatrix.pop();
}
}
} else {
stopIndex += 1;
}
j += 1;
continue;
}
_nsmatrix = this.nsmatrix;
if (!tagend) {
stacknsmatrix.push(this.nsmatrix);
if (this.attr_res !== true) {
if (this.hasSurmiseNS = x.indexOf("xmlns", q) !== -1) {
this.attr_string = x;
this.attr_posstart = q;
this.getAttrs();
this.hasSurmiseNS = false;
}
}
}
w = elem.indexOf(":");
if (w !== -1) {
xmlns = this.nsmatrix[elem.substring(0, w)];
elem = elem.substr(w + 1);
} else {
xmlns = this.nsmatrix.xmlns;
}
if (!xmlns) {
if (tagend) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
} else {
stopIndex = 1;
this.attr_res = true;
}
j += 1;
continue;
}
elem = xmlns + ":" + elem;
}
if (tagstart) {
this.attr_string = x;
this.attr_posstart = q;
var that = this;
ok = this.onStartNode(elem, function() {
return that.getAttrs();
}, unEntities, tagend, getStringNode, position(i));
if (ok === false) {
return;
}
this.attr_res = true;
}
if (tagend) {
ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));
if (ok === false) {
return;
}
if (this.isNamespace) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
}
}
j += 1;
}
};
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(14);
var page_1 = __webpack_require__(89);
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(46);
var binding_builder_1 = __webpack_require__(32);
var utils_1 = __webpack_require__(37);
__webpack_require__(80);
__webpack_require__(82);
__webpack_require__(76);
var special_properties_1 = __webpack_require__(36);
var UI_PATH = "ui/";
var MODULES = {
TabViewItem: "ui/tab-view",
FormattedString: "text/formatted-string",
Span: "text/span",
ActionItem: "ui/action-bar",
NavigationButton: "ui/action-bar",
SegmentedBarItem: "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(49);
}
}
function getComponentModule(elementName, namespace, attributes, exports) {
var instance;
var instanceModule;
var componentModule;
elementName = elementName.split("-").map(function(s) {
return s[0].toUpperCase() + s.substring(1);
}).join("");
var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();
try {
if (types_1.isString(namespace)) {
if (global.moduleExists(namespace)) {
moduleId = namespace;
} else {
var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);
try {
instanceModule = global.require(pathInsideTNSModules);
moduleId = pathInsideTNSModules;
} catch (e) {
moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
}
}
}
if (!instanceModule) {
instanceModule = global.loadModule(moduleId);
}
var instanceType = instanceModule[elementName] || Object;
instance = new instanceType();
} catch (ex) {
var debug = __webpack_require__(106);
throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
}
if (attributes) {
if (attributes[IMPORT]) {
var importPath = attributes[IMPORT].trim();
if (importPath.indexOf("~/") === 0) {
importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
}
exports = global.loadModule(importPath);
instance.exports = exports;
}
if (attributes[CODEFILE]) {
if (instance instanceof page_1.Page) {
var codeFilePath = attributes[CODEFILE].trim();
if (codeFilePath.indexOf("~/") === 0) {
codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
}
var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";
if (file_system_1.File.exists(codeFilePathWithExt)) {
exports = global.loadModule(codeFilePath);
instance.exports = exports;
} else {
throw new Error('Code file with path "' + codeFilePathWithExt + '" cannot be found!');
}
} else {
throw new Error("Code file atribute is valid only for pages!");
}
}
if (attributes[CSSFILE]) {
if (instance instanceof page_1.Page) {
var cssFilePath = attributes[CSSFILE].trim();
if (cssFilePath.indexOf("~/") === 0) {
cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
}
if (file_system_1.File.exists(cssFilePath)) {
instance.addCssFile(cssFilePath);
instance[CSSFILE] = true;
} else {
throw new Error('Css file with path "' + cssFilePath + '" cannot be found!');
}
} else {
throw new Error("Css file atribute is valid only for pages!");
}
}
}
if (instance && instanceModule) {
for (var attr in attributes) {
var attrValue = attributes[attr];
if (attr.indexOf(":") !== -1) {
var platformName = attr.split(":")[0].trim();
ensurePlatform();
if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
attr = attr.split(":")[1].trim();
} else {
continue;
}
}
if (attr.indexOf(".") !== -1) {
var subObj = instance;
var properties = attr.split(".");
var subPropName = properties[properties.length - 1];
var i;
for (i = 0; i < properties.length - 1; i++) {
if (types_1.isDefined(subObj)) {
subObj = subObj[properties[i]];
}
}
if (types_1.isDefined(subObj)) {
setPropertyValue(subObj, instanceModule, exports, subPropName, attrValue);
}
} else {
setPropertyValue(instance, instanceModule, exports, attr, attrValue);
}
}
componentModule = {
component: instance,
exports: instanceModule
};
}
return componentModule;
}
exports.getComponentModule = getComponentModule;
function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
if (isBinding(propertyValue) && instance.bind) {
var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
instance.bind({
sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
expression: bindOptions[binding_builder_1.bindingConstants.expression],
twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
}, bindOptions[binding_builder_1.bindingConstants.source]);
} else if (view_1.isEventOrGesture(propertyName, instance)) {
var handler = exports && exports[propertyValue];
if (types_1.isFunction(handler)) {
instance.on(propertyName, handler);
}
} else if (isKnownFunction(propertyName, instance) && types_1.isFunction(exports && exports[propertyValue])) {
instance[propertyName] = exports[propertyValue];
} else {
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(instance, propertyValue);
attrHandled = true;
}
if (!attrHandled && instance._applyXmlAttribute) {
attrHandled = instance._applyXmlAttribute(propertyName, propertyValue);
}
if (!attrHandled) {
instance[propertyName] = utils_1.convertString(propertyValue);
}
}
}
exports.setPropertyValue = setPropertyValue;
function getBindingExpressionFromAttribute(value) {
return value.replace("{{", "").replace("}}", "").trim();
}
function isBinding(value) {
var isBinding;
if (types_1.isString(value)) {
var str = value.trim();
isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
}
return isBinding;
}
var KNOWN_FUNCTIONS = "knownFunctions";
function isKnownFunction(name, instance) {
return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(46);
var types = __webpack_require__(14);
var trace = __webpack_require__(31);
var platform = __webpack_require__(49);
var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 1e4;
var minWidthHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_WH) === 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_WH.length));
if (isNaN(numVal)) {
return -1;
}
var actualLength = Math.min(context.width, context.height);
if (actualLength < numVal) {
return -1;
}
return PRIORITY_STEP - (actualLength - numVal);
}
};
var minWidthQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_W.length));
if (isNaN(numVal)) {
return -1;
}
var actualWidth = context.width;
if (actualWidth < numVal) {
return -1;
}
return PRIORITY_STEP - (actualWidth - numVal);
}
};
var minHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_H.length));
if (isNaN(numVal)) {
return -1;
}
var actualHeight = context.height;
if (actualHeight < numVal) {
return -1;
}
return PRIORITY_STEP - (actualHeight - numVal);
}
};
var paltformQualifier = {
isMatch: function(value) {
return value === "android" || value === "ios";
},
getMatchValue: function(value, context) {
return value === context.os.toLowerCase() ? 1 : -1;
}
};
var orientationQualifier = {
isMatch: function(value) {
return value === "land" || value === "port";
},
getMatchValue: function(value, context) {
var isLandscape = context.width > context.height ? 1 : -1;
return value === "land" ? isLandscape : -isLandscape;
}
};
var supportedQualifiers = [ minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, paltformQualifier ];
var FileNameResolver = function() {
function FileNameResolver(context) {
this._cache = {};
this._context = context;
}
FileNameResolver.prototype.resolveFileName = function(path, ext) {
var key = path + ext;
var result = this._cache[key];
if (types.isUndefined(result)) {
result = this.resolveFileNameImpl(path, ext);
this._cache[key] = result;
}
return result;
};
FileNameResolver.prototype.clearCache = function() {
this._cache = {};
};
FileNameResolver.prototype.resolveFileNameImpl = function(path, ext) {
var result = null;
path = fs.path.normalize(path);
ext = "." + ext;
var candidates = this.getFileCandidatesFromFolder(path, ext);
result = findFileMatch(path, ext, candidates, this._context);
if (trace.enabled) {
trace.write('Resolved file name for "' + path + ext + '" result: ' + (result ? result : "no match found"), trace.categories.Navigation);
}
return result;
};
FileNameResolver.prototype.getFileCandidatesFromFolder = function(path, ext) {
var candidates = new Array();
var folderPath = path.substring(0, path.lastIndexOf(fs.path.separator) + 1);
if (fs.Folder.exists(folderPath)) {
var folder = fs.Folder.fromPath(folderPath);
folder.eachEntity(function(e) {
if (e instanceof fs.File) {
var file = e;
if (file.path.indexOf(path) === 0 && file.extension === ext) {
candidates.push(file.path);
}
}
return true;
});
} else {
if (trace.enabled) {
trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
}
}
return candidates;
};
return FileNameResolver;
}();
exports.FileNameResolver = FileNameResolver;
function findFileMatch(path, ext, candidates, context) {
var bestValue = -1;
var result = null;
if (trace.enabled) {
trace.write("Candidates for " + path + ext + ": " + candidates.join(", "), trace.categories.Navigation);
}
for (var i = 0; i < candidates.length; i++) {
var filePath = candidates[i];
var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
var qualifiers = qualifiersStr.split(".");
var value = checkQualifiers(qualifiers, context);
if (value >= 0 && value > bestValue) {
bestValue = value;
result = candidates[i];
}
}
return result;
}
exports.findFileMatch = findFileMatch;
function checkQualifiers(qualifiers, context) {
var result = 0;
for (var i = 0; i < qualifiers.length; i++) {
if (qualifiers[i]) {
var value = checkQualifier(qualifiers[i], context);
if (value < 0) {
return -1;
}
result += value;
}
}
return result;
}
function checkQualifier(value, context) {
for (var i = 0; i < supportedQualifiers.length; i++) {
if (supportedQualifiers[i].isMatch(value)) {
var result = supportedQualifiers[i].getMatchValue(value, context);
if (result > 0) {
result += (supportedQualifiers.length - i) * PRIORITY_STEP;
}
return result;
}
}
return -1;
}
var appEventAttached = false;
var resolverInstance;
function resolveFileName(path, ext) {
if (!appEventAttached) {
var app = __webpack_require__(16);
app.on(app.orientationChangedEvent, function(data) {
resolverInstance = undefined;
});
appEventAttached = true;
}
if (!resolverInstance) {
resolverInstance = new FileNameResolver({
width: platform.screen.mainScreen.widthDIPs,
height: platform.screen.mainScreen.heightDIPs,
os: platform.device.os,
deviceType: platform.device.deviceType
});
}
return resolverInstance.resolveFileName(path, ext);
}
exports.resolveFileName = resolveFileName;
function clearCache() {
if (resolverInstance) {
resolverInstance.clearCache();
}
}
exports.clearCache = clearCache;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(113);
var utils = __webpack_require__(37);
var enums = __webpack_require__(39);
global.moduleMerge(common, exports);
common.orientationProperty.onValueChanged = function scrollViewOrientationChanged(data) {
data.object._onOrientationChanged(data.oldValue, data.newValue);
};
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._androidViewId = -1;
this._lastScrollX = -1;
this._lastScrollY = -1;
}
Object.defineProperty(ScrollView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollX() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollY() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.horizontal) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.vertical) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.vertical) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(0, value);
} else {
this._android.scrollTo(0, value);
}
}
};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.horizontal) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(value, 0);
} else {
this._android.scrollTo(value, 0);
}
}
};
ScrollView.prototype._createUI = function() {
if (this.orientation === enums.Orientation.horizontal) {
this._android = new org.nativescript.widgets.HorizontalScrollView(this._context);
} else {
this._android = new org.nativescript.widgets.VerticalScrollView(this._context);
}
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
};
ScrollView.prototype._onOrientationChanged = function(oldValue, newValue) {
if (this._android) {
var parent = this.parent;
if (parent) {
parent._removeView(this);
}
if (parent) {
parent._addView(this);
}
}
};
ScrollView.prototype.attachNative = function() {
var that = new WeakRef(this);
this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
onScrollChanged: function() {
var owner = that.get();
if (owner) {
owner._onScrollChanged();
}
}
});
this._android.getViewTreeObserver().addOnScrollChangedListener(this.handler);
};
ScrollView.prototype._onScrollChanged = function() {
if (this.android) {
var newScrollX = this.android.getScrollX();
var newScrollY = this.android.getScrollY();
if (newScrollX !== this._lastScrollX || newScrollY !== this._lastScrollY) {
this.notify({
object: this,
eventName: ScrollView.scrollEvent,
scrollX: newScrollX / utils.layout.getDisplayDensity(),
scrollY: newScrollY / utils.layout.getDisplayDensity()
});
this._lastScrollX = newScrollX;
this._lastScrollY = newScrollY;
}
}
};
ScrollView.prototype.dettachNative = function() {
this._android.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
this.handler = null;
};
return ScrollView;
}(common.ScrollView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var enums = __webpack_require__(39);
var contentView = __webpack_require__(60);
function isValidOrientation(value) {
return value === enums.Orientation.vertical || value === enums.Orientation.horizontal;
}
exports.orientationProperty = new dependencyObservable.Property("orientation", "ScrollView", new proxy.PropertyMetadata(enums.Orientation.vertical, dependencyObservable.PropertyMetadataSettings.AffectsLayout, undefined, isValidOrientation));
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._scrollChangeCount = 0;
}
Object.defineProperty(ScrollView.prototype, "orientation", {
get: function() {
return this._getValue(exports.orientationProperty);
},
set: function(value) {
this._setValue(exports.orientationProperty, value);
},
enumerable: true,
configurable: true
});
ScrollView.prototype.addEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount++;
this.attach();
}
};
ScrollView.prototype.removeEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount--;
this.dettach();
}
};
ScrollView.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.attach();
};
ScrollView.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this.dettach();
};
ScrollView.prototype.attach = function() {
if (this._scrollChangeCount > 0 && this.isLoaded) {
this.attachNative();
}
};
ScrollView.prototype.dettach = function() {
if (this._scrollChangeCount === 0 && this.isLoaded) {
this.dettachNative();
}
};
ScrollView.prototype.attachNative = function() {};
ScrollView.prototype.dettachNative = function() {};
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {};
ScrollView.scrollEvent = "scroll";
return ScrollView;
}(contentView.ContentView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(115);
var color = __webpack_require__(23);
var utils = __webpack_require__(37);
var style = __webpack_require__(15);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var SEARCHTEXT = "searchText";
var QUERY = "query";
var EMPTY = "";
function onTextPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
bar.android.setQuery(data.newValue, false);
}
common.SearchBar.textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onTextFieldBackgroundColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewBackgroundColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldBackgroundColorProperty.metadata.onSetNativeValue = onTextFieldBackgroundColorPropertyChanged;
function onTextFieldHintColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewHintColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldHintColorProperty.metadata.onSetNativeValue = onTextFieldHintColorPropertyChanged;
function onHintPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
var newValue = data.newValue;
ensureTypes();
if (types.isString(newValue)) {
bar.android.setQueryHint(newValue);
}
}
common.SearchBar.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
function getTextView(bar) {
if (bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
if (id) {
return bar.findViewById(id);
}
}
return undefined;
}
function _changeSearchViewBackgroundColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setBackgroundColor(color);
}
}
function _changeSearchViewHintColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setHintTextColor(color);
}
}
global.moduleMerge(common, exports);
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
SearchBar.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
SearchBar.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
SearchBar.prototype._createUI = function() {
this._android = new android.widget.SearchView(this._context);
this._android.setIconified(false);
var that = new WeakRef(this);
this._android.setOnQueryTextListener(new android.widget.SearchView.OnQueryTextListener({
get owner() {
return that.get();
},
onQueryTextChange: function(newText) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.SearchBar.textProperty, newText);
if (newText === EMPTY && this[SEARCHTEXT] !== newText) {
this.owner._emit(common.SearchBar.clearEvent);
}
this[SEARCHTEXT] = newText;
}
return true;
},
onQueryTextSubmit: function(query) {
if (this.owner) {
if (query !== EMPTY && this[QUERY] !== query) {
this.owner._emit(common.SearchBar.submitEvent);
}
this[QUERY] = query;
}
return true;
}
}));
this._android.setOnCloseListener(new android.widget.SearchView.OnCloseListener({
get owner() {
return that.get();
},
onClose: function() {
if (this.owner) {
this.owner._emit(common.SearchBar.clearEvent);
}
return true;
}
}));
if (this.textFieldBackgroundColor instanceof color.Color) {
_changeSearchViewBackgroundColor(this._android, this.textFieldBackgroundColor.android);
}
if (this.textFieldHintColor instanceof color.Color) {
_changeSearchViewHintColor(this._android, this.textFieldHintColor.android);
}
};
Object.defineProperty(SearchBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return SearchBar;
}(common.SearchBar);
exports.SearchBar = SearchBar;
var SearchBarStyler = function() {
function SearchBarStyler() {}
SearchBarStyler.getBackgroundColorProperty = function(v) {
var bar = v._nativeView;
return bar.getDrawingCacheBackgroundColor();
};
SearchBarStyler.setBackgroundColorProperty = function(v, newValue) {
var bar = v._nativeView;
bar.setBackgroundColor(newValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, newValue);
};
SearchBarStyler.resetBackgroundColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
bar.setBackgroundColor(nativeValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, nativeValue);
};
SearchBarStyler.getColorProperty = function(v) {
var bar = v._nativeView;
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
return textView.getCurrentTextColor();
}
return undefined;
};
SearchBarStyler.setColorProperty = function(v, newValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, newValue);
};
SearchBarStyler.resetColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, nativeValue);
};
SearchBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
textView.setTypeface(typeface);
} else {
textView.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
textView.setTextSize(fontValue.fontSize);
} else {
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
SearchBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
textView.setTypeface(nativeValue.typeface);
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
};
SearchBarStyler.getNativeFontInternalValue = function(v) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SearchBarStyler.registerHandlers = function() {
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setBackgroundColorProperty, SearchBarStyler.resetBackgroundColorProperty, SearchBarStyler.getBackgroundColorProperty), "SearchBar");
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setColorProperty, SearchBarStyler.resetColorProperty, SearchBarStyler.getColorProperty), "SearchBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setFontInternalProperty, SearchBarStyler.resetFontInternalProperty, SearchBarStyler.getNativeFontInternalValue), "SearchBar");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "SearchBar");
};
SearchBarStyler._getSearchViewTextView = function(bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
return bar.findViewById(id);
};
SearchBarStyler._changeSearchViewTextColor = function(bar, color) {
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
textView.setTextColor(color);
}
};
SearchBarStyler._changeSearchViewPlateBackgroundColor = function(bar, color) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
var textView = bar.findViewById(id);
if (textView) {
textView.setBackgroundColor(color);
}
};
return SearchBarStyler;
}();
exports.SearchBarStyler = SearchBarStyler;
SearchBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(29);
var proxy_1 = __webpack_require__(52);
var color_1 = __webpack_require__(23);
var platform_1 = __webpack_require__(49);
var AffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
Object.defineProperty(SearchBar.prototype, "text", {
get: function() {
return this._getValue(SearchBar.textProperty);
},
set: function(value) {
this._setValue(SearchBar.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "hint", {
get: function() {
return this._getValue(SearchBar.hintProperty);
},
set: function(value) {
this._setValue(SearchBar.hintProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldBackgroundColor", {
get: function() {
return this._getValue(SearchBar.textFieldBackgroundColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldBackgroundColorProperty, value instanceof color_1.Color ? value : new color_1.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldHintColor", {
get: function() {
return this._getValue(SearchBar.textFieldHintColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldHintColorProperty, value instanceof color_1.Color ? value : new color_1.Color(value));
},
enumerable: true,
configurable: true
});
SearchBar.prototype.dismissSoftInput = function() {};
SearchBar.submitEvent = "submit";
SearchBar.clearEvent = "clear";
SearchBar.textFieldBackgroundColorProperty = new dependency_observable_1.Property("textFieldBackgroundColor", "SearchBar", new proxy_1.PropertyMetadata(undefined));
SearchBar.textFieldHintColorProperty = new dependency_observable_1.Property("textFieldHintColor", "SearchBar", new proxy_1.PropertyMetadata(undefined));
SearchBar.hintProperty = new dependency_observable_1.Property("hint", "SearchBar", new proxy_1.PropertyMetadata(""));
SearchBar.textProperty = new dependency_observable_1.Property("text", "SearchBar", new proxy_1.PropertyMetadata("", AffectsLayout));
return SearchBar;
}(view_1.View);
exports.SearchBar = SearchBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(117);
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var R_ID_TABS = 16908307;
var R_ID_TABCONTENT = 16908305;
var R_ATTR_STATE_SELECTED = 16842913;
global.moduleMerge(common, exports);
function onSelectedIndexPropertyChanged(data) {
var view = data.object;
if (!view.android || !view.items) {
return;
}
var index = data.newValue;
if (types.isNumber(index)) {
if (index >= 0 && index <= view.items.length - 1) {
view.android.setCurrentTab(index);
view.notify({
eventName: SegmentedBar.selectedIndexChangedEvent,
object: view,
oldIndex: data.oldValue,
newIndex: data.newValue
});
} else {
view.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, " + (view.items.length - 1) + "]");
}
}
}
common.SegmentedBar.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
function onItemsPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var oldItems = data.oldValue;
if (oldItems && oldItems.length) {
for (var i = 0; i < oldItems.length; i++) {
oldItems[i]._parent = null;
}
}
view.android.clearAllTabs();
var newItems = data.newValue;
view._adjustSelectedIndex(newItems);
if (newItems && newItems.length) {
for (var i = 0; i < newItems.length; i++) {
view.insertTab(newItems[i], i);
}
if (types.isNumber(view.selectedIndex) && view.android.getCurrentTab() !== view.selectedIndex) {
view.android.setCurrentTab(view.selectedIndex);
}
var tabHost = view.android;
var tabIndex;
for (tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tabChild = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tabChild.getChildAt(1);
if (view.color) {
t.setTextColor(view.color.android);
}
t.setMaxLines(1);
t.setEllipsize(android.text.TextUtils.TruncateAt.END);
}
}
}
common.SegmentedBar.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
var SegmentedBarColorDrawableClass;
function ensureSegmentedBarColorDrawableClass() {
if (SegmentedBarColorDrawableClass) {
return;
}
var SegmentedBarColorDrawable = function(_super) {
__extends(SegmentedBarColorDrawable, _super);
function SegmentedBarColorDrawable(arg) {
_super.call(this, arg);
return global.__native(this);
}
SegmentedBarColorDrawable.prototype.draw = function(canvas) {
var p = new android.graphics.Paint();
p.setColor(this.getColor());
p.setStyle(android.graphics.Paint.Style.FILL);
canvas.drawRect(0, this.getBounds().height() - 15, this.getBounds().width(), this.getBounds().height(), p);
};
return SegmentedBarColorDrawable;
}(android.graphics.drawable.ColorDrawable);
SegmentedBarColorDrawableClass = SegmentedBarColorDrawable;
}
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
}
SegmentedBarItem.prototype._update = function() {
if (this._parent && this._parent.android) {
var tabIndex = this._parent.items.indexOf(this);
var titleTextViewId = 16908310;
var titleTextView = this._parent.android.getTabWidget().getChildAt(tabIndex).findViewById(titleTextViewId);
titleTextView.setText(this.title || "");
}
};
return SegmentedBarItem;
}(common.SegmentedBarItem);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._createUI = function() {
ensureTabHostClass();
this._android = new TabHostClass(this._context, null);
if (types.isNumber(this.selectedIndex) && this._android.getCurrentTab() !== this.selectedIndex) {
this._android.setCurrentTab(this.selectedIndex);
}
var that = new WeakRef(this);
this._listener = new android.widget.TabHost.OnTabChangeListener({
onTabChanged: function(id) {
var bar = that.get();
if (bar) {
bar.selectedIndex = parseInt(id);
}
}
});
var tabHostLayout = new android.widget.LinearLayout(this._context);
tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
var tabWidget = new android.widget.TabWidget(this._context);
tabWidget.setId(R_ID_TABS);
tabHostLayout.addView(tabWidget);
var frame = new android.widget.FrameLayout(this._context);
frame.setId(R_ID_TABCONTENT);
frame.setVisibility(android.view.View.GONE);
tabHostLayout.addView(frame);
this._android.addView(tabHostLayout);
this._android.setup();
};
Object.defineProperty(SegmentedBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype.insertTab = function(tabItem, index) {
_super.prototype.insertTab.call(this, tabItem, index);
tabItem._parent = this;
var tab = this.android.newTabSpec(this.getValidIndex(index) + "");
tab.setIndicator(tabItem.title || "");
var that = this;
tab.setContent(new android.widget.TabHost.TabContentFactory({
createTabContent: function(tag) {
var tv = new android.widget.TextView(that._context);
tv.setVisibility(android.view.View.GONE);
return tv;
}
}));
this.android.addTab(tab);
this.resetNativeListener();
};
SegmentedBar.prototype.resetNativeListener = function() {
this.android.setOnTabChangedListener(null);
this.android.setOnTabChangedListener(this._listener);
};
return SegmentedBar;
}(common.SegmentedBar);
exports.SegmentedBar = SegmentedBar;
var TabHostClass;
function ensureTabHostClass() {
if (TabHostClass) {
return;
}
var OurTabHost = function(_super) {
__extends(OurTabHost, _super);
function OurTabHost(context, attrs) {
_super.call(this, context, attrs);
return global.__native(this);
}
OurTabHost.prototype.onAttachedToWindow = function() {};
return OurTabHost;
}(android.widget.TabHost);
TabHostClass = OurTabHost;
}
var SegmentedBarStyler = function() {
function SegmentedBarStyler() {}
SegmentedBarStyler.setColorProperty = function(v, newValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(newValue);
}
};
SegmentedBarStyler.resetColorProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(nativeValue);
}
};
SegmentedBarStyler.getColorProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return textView.getCurrentTextColor();
};
SegmentedBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tabHost = v._nativeView;
var fontValue = newValue;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
t.setTypeface(typeface);
} else {
t.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
t.setTextSize(fontValue.fontSize);
} else {
t.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
SegmentedBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTypeface(nativeValue.typeface);
t.setTextSize(nativeValue.size);
}
};
SegmentedBarStyler.getFontInternalProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SegmentedBarStyler.setSelectedBackgroundColorProperty = function(v, newValue) {
ensureSegmentedBarColorDrawableClass();
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var vg = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var stateDrawable = new android.graphics.drawable.StateListDrawable();
var arr = Array.create("int", 1);
arr[0] = R_ATTR_STATE_SELECTED;
var colorDrawable = new SegmentedBarColorDrawableClass(newValue);
stateDrawable.addState(arr, colorDrawable);
stateDrawable.setBounds(0, 15, vg.getRight(), vg.getBottom());
vg.setBackground(stateDrawable);
}
};
SegmentedBarStyler.resetSelectedBackgroundColorProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
ensureSegmentedBarColorDrawableClass();
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var vg = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
vg.setBackground(nativeValue[tabIndex]);
}
};
SegmentedBarStyler.getSelectedBackgroundColorProperty = function(v) {
var tabHost = v._nativeView;
var result = [];
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var background = tabHost.getTabWidget().getChildTabViewAt(tabIndex).getBackground();
result.push(background);
}
return result;
};
SegmentedBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setColorProperty, SegmentedBarStyler.resetColorProperty, SegmentedBarStyler.getColorProperty), "SegmentedBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setFontInternalProperty, SegmentedBarStyler.resetFontInternalProperty, SegmentedBarStyler.getFontInternalProperty), "SegmentedBar");
style.registerHandler(style.selectedBackgroundColorProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setSelectedBackgroundColorProperty, SegmentedBarStyler.resetSelectedBackgroundColorProperty, SegmentedBarStyler.getSelectedBackgroundColorProperty), "SegmentedBar");
};
return SegmentedBarStyler;
}();
exports.SegmentedBarStyler = SegmentedBarStyler;
SegmentedBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var proxy = __webpack_require__(52);
var dependencyObservable = __webpack_require__(29);
var bindable = __webpack_require__(28);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SEGMENTED_BAR_ITEM = "SegmentedBarItem";
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(SegmentedBarItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
SegmentedBarItem.prototype._update = function() {};
return SegmentedBarItem;
}(bindable.Bindable);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this._setValue(SegmentedBar.itemsProperty, value);
}
};
SegmentedBar.prototype._adjustSelectedIndex = function(items) {
if (this.items) {
if (this.items.length > 0) {
ensureTypes();
if (types.isUndefined(this.selectedIndex) || this.selectedIndex > this.items.length - 1) {
this._setValue(SegmentedBar.selectedIndexProperty, 0);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
};
Object.defineProperty(SegmentedBar.prototype, "selectedIndex", {
get: function() {
return this._getValue(SegmentedBar.selectedIndexProperty);
},
set: function(value) {
this._setValue(SegmentedBar.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "items", {
get: function() {
return this._getValue(SegmentedBar.itemsProperty);
},
set: function(value) {
this._setValue(SegmentedBar.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "selectedBackgroundColor", {
get: function() {
return this.style.selectedBackgroundColor;
},
set: function(value) {
this.style.selectedBackgroundColor = value;
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
SegmentedBar.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SEGMENTED_BAR_ITEM) {
if (!this.items) {
this.items = new Array();
}
this.items.push(value);
this.insertTab(value);
}
};
SegmentedBar.prototype.insertTab = function(tabItem, index) {};
SegmentedBar.prototype.getValidIndex = function(index) {
ensureTypes();
var idx;
var itemsLength = this.items ? this.items.length : 0;
if (types.isNullOrUndefined(index)) {
idx = itemsLength - 1;
} else {
if (index < 0 || index > itemsLength) {
idx = itemsLength - 1;
} else {
idx = index;
}
}
return idx;
};
SegmentedBar.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.itemsProperty = new dependencyObservable.Property("items", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.selectedIndexChangedEvent = "selectedIndexChanged";
return SegmentedBar;
}(view.View);
exports.SegmentedBar = SegmentedBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(119);
var style = __webpack_require__(15);
function onValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(data.newValue - slider.minValue, slider.maxValue - slider.minValue);
}
function onMinValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(slider.value - data.newValue, slider.maxValue - data.newValue);
}
function onMaxValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider.android.setMax(data.newValue - slider.minValue);
}
common.Slider.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Slider.minValueProperty.metadata.onSetNativeValue = onMinValuePropertyChanged;
common.Slider.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.apply(this, arguments);
}
Slider.prototype._createUI = function() {
this._android = new android.widget.SeekBar(this._context);
var that = new WeakRef(this);
this._changeListener = new android.widget.SeekBar.OnSeekBarChangeListener({
onProgressChanged: function(seekBar, progress, fromUser) {
var owner = that.get();
if (owner) {
if (!owner._supressNativeValue) {
var newValue = seekBar.getProgress() + owner.minValue;
owner._onPropertyChangedFromNative(common.Slider.valueProperty, newValue);
}
}
},
onStartTrackingTouch: function(seekBar) {},
onStopTrackingTouch: function(seekBar) {}
});
this._android.setOnSeekBarChangeListener(this._changeListener);
};
Object.defineProperty(Slider.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Slider.prototype._setNativeValuesSilently = function(newValue, newMaxValue) {
if (!this.android) {
return;
}
this._supressNativeValue = true;
try {
this.android.setMax(newMaxValue);
this.android.setProgress(newValue);
} finally {
this._supressNativeValue = false;
}
};
return Slider;
}(common.Slider);
exports.Slider = Slider;
var SliderStyler = function() {
function SliderStyler() {}
SliderStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getThumb().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getThumb().clearColorFilter();
};
SliderStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SliderStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SliderStyler.setColorProperty, SliderStyler.resetColorProperty), "Slider");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SliderStyler.setBackgroundAndBorderProperty, SliderStyler.resetBackgroundAndBorderProperty), "Slider");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Slider");
};
return SliderStyler;
}();
exports.SliderStyler = SliderStyler;
SliderStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.call(this);
}
Object.defineProperty(Slider.prototype, "value", {
get: function() {
return this._getValue(Slider.valueProperty);
},
set: function(value) {
var newValue = value;
newValue = Math.max(newValue, this.minValue);
newValue = Math.min(newValue, this.maxValue);
this._setValue(Slider.valueProperty, newValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "minValue", {
get: function() {
return this._getValue(Slider.minValueProperty);
},
set: function(newValue) {
this._setValue(Slider.minValueProperty, newValue);
if (newValue > this.maxValue) {
this._setValue(Slider.maxValueProperty, newValue);
}
if (newValue > this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "maxValue", {
get: function() {
return this._getValue(Slider.maxValueProperty);
},
set: function(newValue) {
this._setValue(Slider.maxValueProperty, newValue);
if (newValue < this.minValue) {
this._setValue(Slider.minValueProperty, newValue);
}
if (newValue < this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Slider.valueProperty = new dependencyObservable.Property("value", "Slider", new proxy.PropertyMetadata(0));
Slider.minValueProperty = new dependencyObservable.Property("minValue", "Slider", new proxy.PropertyMetadata(0));
Slider.maxValueProperty = new dependencyObservable.Property("maxValue", "Slider", new proxy.PropertyMetadata(100));
return Slider;
}(view.View);
exports.Slider = Slider;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(121);
var style = __webpack_require__(15);
function onCheckedPropertyChanged(data) {
var swtch = data.object;
if (!swtch.android) {
return;
}
swtch.android.setChecked(data.newValue);
}
common.Switch.checkedProperty.metadata.onSetNativeValue = onCheckedPropertyChanged;
global.moduleMerge(common, exports);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Switch.prototype._createUI = function() {
this._android = new android.widget.Switch(this._context);
var that = new WeakRef(this);
this._android.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
get owner() {
return that.get();
},
onCheckedChanged: function(sender, isChecked) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.Switch.checkedProperty, isChecked);
}
}
}));
};
return Switch;
}(common.Switch);
exports.Switch = Switch;
var SwitchStyler = function() {
function SwitchStyler() {}
SwitchStyler.setColorProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getThumbDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetColorProperty = function(view, nativeValue) {};
SwitchStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getTrackDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SwitchStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setColorProperty, SwitchStyler.resetColorProperty), "Switch");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setBackgroundAndBorderProperty, SwitchStyler.resetBackgroundAndBorderProperty), "Switch");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Switch");
};
return SwitchStyler;
}();
exports.SwitchStyler = SwitchStyler;
SwitchStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "checked", {
get: function() {
return this._getValue(Switch.checkedProperty);
},
set: function(value) {
this._setValue(Switch.checkedProperty, value);
},
enumerable: true,
configurable: true
});
Switch.checkedProperty = new dependencyObservable.Property("checked", "Switch", new proxy.PropertyMetadata(false));
return Switch;
}(view.View);
exports.Switch = Switch;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(123);
var trace = __webpack_require__(31);
var types = __webpack_require__(14);
var utils = __webpack_require__(37);
var style = __webpack_require__(15);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(53);
}
}
var VIEWS_STATES = "_viewStates";
var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
global.moduleMerge(common, exports);
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
}
TabViewItem.prototype._update = function() {
if (this._parent) {
this._parent._updateTabForItem(this);
}
};
return TabViewItem;
}(common.TabViewItem);
exports.TabViewItem = TabViewItem;
var PagerAdapterClass;
function ensurePagerAdapterClass() {
if (PagerAdapterClass) {
return;
}
var PagerAdapterClassInner = function(_super) {
__extends(PagerAdapterClassInner, _super);
function PagerAdapterClassInner(owner, items) {
_super.call(this);
this.owner = owner;
this.items = items;
return global.__native(this);
}
PagerAdapterClassInner.prototype.getCount = function() {
return this.items ? this.items.length : 0;
};
PagerAdapterClassInner.prototype.getPageTitle = function(index) {
if (index < 0 || index >= this.items.length) {
return "";
}
return this.items[index].title;
};
PagerAdapterClassInner.prototype.instantiateItem = function(container, index) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.instantiateItem; container: " + container + "; index: " + index, common.traceCategory);
}
var item = this.items[index];
if (item.view.parent !== this.owner) {
this.owner._addView(item.view);
}
if (this[VIEWS_STATES]) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.instantiateItem; restoreHierarchyState: " + item.view, common.traceCategory);
}
item.view._nativeView.restoreHierarchyState(this[VIEWS_STATES]);
}
container.addView(item.view._nativeView);
return item.view._nativeView;
};
PagerAdapterClassInner.prototype.destroyItem = function(container, index, _object) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.destroyItem; container: " + container + "; index: " + index + "; _object: " + _object, common.traceCategory);
}
var item = this.items[index];
var nativeView = item.view._nativeView;
if (nativeView.toString() !== _object.toString()) {
throw new Error("Expected " + nativeView.toString() + " to equal " + _object.toString());
}
container.removeView(nativeView);
if (item.view.parent === this.owner) {
this.owner._removeView(item.view);
}
};
PagerAdapterClassInner.prototype.isViewFromObject = function(view, _object) {
return view === _object;
};
PagerAdapterClassInner.prototype.saveState = function() {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.saveState", common.traceCategory);
}
var owner = this.owner;
if (!owner || owner._childrenCount === 0) {
return null;
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
var viewStates = this[VIEWS_STATES];
var childCallback = function(view) {
var nativeView = view._nativeView;
if (nativeView && nativeView.isSaveFromParentEnabled && nativeView.isSaveFromParentEnabled()) {
nativeView.saveHierarchyState(viewStates);
}
return true;
};
owner._eachChildView(childCallback);
var bundle = new android.os.Bundle();
bundle.putSparseParcelableArray(VIEWS_STATES, viewStates);
return bundle;
};
PagerAdapterClassInner.prototype.restoreState = function(state, loader) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.restoreState", common.traceCategory);
}
var bundle = state;
bundle.setClassLoader(loader);
this[VIEWS_STATES] = bundle.getSparseParcelableArray(VIEWS_STATES);
};
return PagerAdapterClassInner;
}(android.support.v4.view.PagerAdapter);
PagerAdapterClass = PagerAdapterClassInner;
}
var PageChangedListenerClass;
function ensurePageChangedListenerClass() {
if (PageChangedListenerClass) {
return;
}
var PageChangedListener = function(_super) {
__extends(PageChangedListener, _super);
function PageChangedListener(owner) {
_super.call(this);
this._owner = owner;
return global.__native(this);
}
PageChangedListener.prototype.onPageSelected = function(position) {
this._owner.selectedIndex = position;
};
return PageChangedListener;
}(android.support.v4.view.ViewPager.SimpleOnPageChangeListener);
PageChangedListenerClass = PageChangedListener;
}
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
this._androidViewId = -1;
}
Object.defineProperty(TabView.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
TabView.prototype._createUI = function() {
if (trace.enabled) {
trace.write("TabView._createUI(" + this + ");", common.traceCategory);
}
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
this._tabLayout = new org.nativescript.widgets.TabLayout(this._context);
this._grid.addView(this._tabLayout);
this.setElevation();
var accentColor = utils.ad.resources.getPalleteColor(ACCENT_COLOR, this._context);
if (accentColor) {
this._tabLayout.setSelectedIndicatorColors([ accentColor ]);
}
var primaryColor = utils.ad.resources.getPalleteColor(PRIMARY_COLOR, this._context);
if (primaryColor) {
this._tabLayout.setBackgroundColor(primaryColor);
}
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._viewPager = new android.support.v4.view.ViewPager(this._context);
this._viewPager.setId(this._androidViewId);
var lp = new org.nativescript.widgets.CommonLayoutParams();
lp.row = 1;
this._viewPager.setLayoutParams(lp);
this._grid.addView(this._viewPager);
ensurePageChangedListenerClass();
this._pageChagedListener = new PageChangedListenerClass(this);
this._viewPager.addOnPageChangeListener(this._pageChagedListener);
};
TabView.prototype.setElevation = function() {
var compat = android.support.v4.view.ViewCompat;
if (compat.setElevation) {
var val = DEFAULT_ELEVATION * utils.layout.getDisplayDensity();
compat.setElevation(this._grid, val);
compat.setElevation(this._tabLayout, val);
}
};
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
var _this = this;
if (trace.enabled) {
trace.write("TabView._onItemsPropertyChangedSetNativeValue(" + data.oldValue + " ---> " + data.newValue + ");", common.traceCategory);
}
if (data.oldValue) {
var oldItems = data.oldValue;
oldItems.forEach(function(oldItem) {
oldItem._parent = null;
});
this._viewPager.setAdapter(null);
this._pagerAdapter = null;
this._tabLayout.setItems(null, null);
}
if (data.newValue) {
var items = data.newValue;
var tabItems = new Array();
items.forEach(function(item, idx, arr) {
if (types.isNullOrUndefined(item.view)) {
throw new Error("View of TabViewItem at index " + idx + " is " + item.view);
}
item._parent = _this;
if (item.view.parent !== _this) {
_this._addView(item.view, idx);
}
tabItems.push(_this.createTabItem(item));
});
ensurePagerAdapterClass();
this._pagerAdapter = new PagerAdapterClass(this, data.newValue);
this._viewPager.setAdapter(this._pagerAdapter);
this._tabLayout.setItems(tabItems, this._viewPager);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateTabForItem = function(item) {
if (this.items && this.items.length > 0) {
var index = this.items.indexOf(item);
if (index >= 0) {
this._tabLayout.updateItemAt(index, this.createTabItem(item));
}
}
};
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
if (trace.enabled) {
trace.write("TabView._onSelectedIndexPropertyChangedSetNativeValue(" + data.oldValue + " ---> " + data.newValue + ");", common.traceCategory);
}
_super.prototype._onSelectedIndexPropertyChangedSetNativeValue.call(this, data);
var index = data.newValue;
if (!types.isNullOrUndefined(index)) {
var viewPagerSelectedIndex = this._viewPager.getCurrentItem();
if (viewPagerSelectedIndex !== index) {
if (trace.enabled) {
trace.write("TabView this._viewPager.setCurrentItem(" + index + ", true);", common.traceCategory);
}
this._viewPager.setCurrentItem(index, true);
}
}
var args = {
eventName: TabView.selectedIndexChangedEvent,
object: this,
oldIndex: data.oldValue,
newIndex: data.newValue
};
this.notify(args);
};
TabView.prototype.createTabItem = function(item) {
var result = new org.nativescript.widgets.TabItemSpec();
result.title = item.title;
if (item.iconSource) {
if (item.iconSource.indexOf(utils.RESOURCE_PREFIX) === 0) {
result.iconId = utils.ad.resources.getDrawableId(item.iconSource.substr(utils.RESOURCE_PREFIX.length));
} else {
ensureImageSource();
var is = imageSource.fromFileOrResource(item.iconSource);
if (is) {
result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
}
}
return result;
};
TabView.prototype._getAndroidTabView = function() {
return this._tabLayout;
};
return TabView;
}(common.TabView);
exports.TabView = TabView;
var TabViewStyler = function() {
function TabViewStyler() {}
TabViewStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tab = v;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
}
};
TabViewStyler.resetFontInternalProperty = function(v, nativeValue) {
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
TabViewStyler.getNativeFontInternalValue = function(v) {
var tab = v;
var tv = tab._getAndroidTabView().getTextViewForItemAt(0);
if (tv) {
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
} else {
return null;
}
};
TabViewStyler.setTabTextColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setTabTextColor(types.isNumber(newValue) ? new java.lang.Integer(newValue) : newValue);
};
TabViewStyler.resetTabTextColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setTabTextColor(types.isNumber(nativeValue) ? new java.lang.Integer(nativeValue) : nativeValue);
};
TabViewStyler.getTabTextColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
return tabLayout.getTabTextColor();
};
TabViewStyler.setTabBackgroundColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setBackgroundColor(newValue);
};
TabViewStyler.resetTabBackgroundColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setBackgroundColor(nativeValue);
};
TabViewStyler.getTabBackgroundColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
var background = tabLayout.getBackground();
if (background instanceof android.graphics.drawable.ColorDrawable) {
return background.getColor();
}
return null;
};
TabViewStyler.setSelectedTabTextColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedTabTextColor(types.isNumber(newValue) ? new java.lang.Integer(newValue) : newValue);
};
TabViewStyler.resetSelectedTabTextColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedTabTextColor(types.isNumber(nativeValue) ? new java.lang.Integer(nativeValue) : nativeValue);
};
TabViewStyler.getSelectedTabTextColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
return tabLayout.getSelectedTabTextColor();
};
TabViewStyler.setAndroidSelectedTabHighlightColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedIndicatorColors([ newValue ]);
};
TabViewStyler.resetAndroidSelectedTabHighlightColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedIndicatorColors([ nativeValue ]);
};
TabViewStyler.getAndroidSelectedTabHighlightColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
var selectedIndicatorColors = tabLayout.getSelectedIndicatorColors();
return selectedIndicatorColors.length > 0 ? selectedIndicatorColors[0] : null;
};
TabViewStyler.setTextTransformProperty = function(v, newValue) {
var tabView = v;
var tabLayout = tabView._getAndroidTabView();
for (var i = 0; i < tabView.items.length; i++) {
var textView = tabLayout.getTextViewForItemAt(i);
var str = tabView.items[i].title;
var result = utils.ad.getTransformedString(newValue, textView, str);
textView.setText(result);
}
};
TabViewStyler.resetTextTransformProperty = function(v, nativeValue) {
var tabView = v;
var tabLayout = tabView._getAndroidTabView();
for (var i = 0; i < tabView.items.length; i++) {
var textView = tabLayout.getTextViewForItemAt(i);
var str = tabView.items[i].title;
var result = utils.ad.getTransformedString(nativeValue, textView, str);
textView.setText(result);
}
};
TabViewStyler.registerHandlers = function() {
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TabViewStyler.setFontInternalProperty, TabViewStyler.resetFontInternalProperty, TabViewStyler.getNativeFontInternalValue), "TabView");
style.registerHandler(style.tabTextColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setTabTextColorProperty, TabViewStyler.resetTabTextColorProperty, TabViewStyler.getTabTextColorProperty), "TabView");
style.registerHandler(style.tabBackgroundColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setTabBackgroundColorProperty, TabViewStyler.resetTabBackgroundColorProperty, TabViewStyler.getTabBackgroundColorProperty), "TabView");
style.registerHandler(style.selectedTabTextColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setSelectedTabTextColorProperty, TabViewStyler.resetSelectedTabTextColorProperty, TabViewStyler.getSelectedTabTextColorProperty), "TabView");
style.registerHandler(style.androidSelectedTabHighlightColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setAndroidSelectedTabHighlightColorProperty, TabViewStyler.resetAndroidSelectedTabHighlightColorProperty, TabViewStyler.getAndroidSelectedTabHighlightColorProperty), "TabView");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TabViewStyler.setTextTransformProperty, TabViewStyler.resetTextTransformProperty), "TabView");
};
return TabViewStyler;
}();
exports.TabViewStyler = TabViewStyler;
TabViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(29);
var bindable_1 = __webpack_require__(28);
var platform_1 = __webpack_require__(49);
var proxy_1 = __webpack_require__(52);
var types = __webpack_require__(14);
var trace = __webpack_require__(31);
var AffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
exports.traceCategory = "TabView";
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(TabViewItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "view", {
get: function() {
return this._view;
},
set: function(value) {
if (this._view !== value) {
if (this._view) {
throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
}
this._view = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this._update();
}
},
enumerable: true,
configurable: true
});
TabViewItem.prototype._update = function() {};
return TabViewItem;
}(bindable_1.Bindable);
exports.TabViewItem = TabViewItem;
var TAB_VIEW = "TabView";
var ITEMS = "items";
var SELECTED_INDEX = "selectedIndex";
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var itemsProperty = new dependency_observable_1.Property(ITEMS, TAB_VIEW, new proxy_1.PropertyMetadata(undefined, AffectsLayout));
var selectedIndexProperty = new dependency_observable_1.Property(SELECTED_INDEX, TAB_VIEW, new proxy_1.PropertyMetadata(undefined, AffectsLayout));
selectedIndexProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onSelectedIndexPropertyChangedSetNativeValue(data);
};
itemsProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onItemsPropertyChangedSetNativeValue(data);
};
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
}
TabView.prototype._addArrayFromBuilder = function(name, value) {
if (name === ITEMS) {
this.items = value;
}
};
Object.defineProperty(TabView.prototype, "items", {
get: function() {
return this._getValue(TabView.itemsProperty);
},
set: function(value) {
this._setValue(TabView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
if (trace.enabled) {
trace.write("TabView.__onItemsPropertyChangedSetNativeValue(" + data.oldValue + " -> " + data.newValue + ");", exports.traceCategory);
}
if (data.oldValue) {
this._removeTabs(data.oldValue);
}
if (data.newValue) {
this._addTabs(data.newValue);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
if (trace.enabled) {
trace.write("TabView._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
}
var newItemsCount = 0;
if (newItems) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
TabView.prototype._removeTabs = function(oldItems) {
var i;
var length = oldItems.length;
var oldItem;
for (i = 0; i < length; i++) {
oldItem = oldItems[i];
if (!oldItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!oldItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._removeView(oldItem.view);
}
};
TabView.prototype._addTabs = function(newItems) {
var i;
var length = newItems.length;
var newItem;
for (i = 0; i < length; i++) {
newItem = newItems[i];
if (!newItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!newItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._addView(newItem.view, i);
}
};
Object.defineProperty(TabView.prototype, "selectedIndex", {
get: function() {
return this._getValue(TabView.selectedIndexProperty);
},
set: function(value) {
this._setValue(TabView.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "selectedColor", {
get: function() {
if (platform_1.isAndroid) {
return this.style.androidSelectedTabHighlightColor;
} else {
return this.style.selectedTabTextColor;
}
},
set: function(value) {
if (platform_1.isAndroid) {
this.style.androidSelectedTabHighlightColor = value;
} else {
this.style.selectedTabTextColor = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabsBackgroundColor", {
get: function() {
return this.style.tabBackgroundColor;
},
set: function(value) {
this.style.tabBackgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabTextColor", {
get: function() {
return this.style.tabTextColor;
},
set: function(value) {
this.style.tabTextColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabBackgroundColor", {
get: function() {
return this.style.tabBackgroundColor;
},
set: function(value) {
this.style.tabBackgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "selectedTabTextColor", {
get: function() {
return this.style.selectedTabTextColor;
},
set: function(value) {
this.style.selectedTabTextColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "androidSelectedTabHighlightColor", {
get: function() {
return this.style.androidSelectedTabHighlightColor;
},
set: function(value) {
this.style.androidSelectedTabHighlightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "textTransform", {
get: function() {
return this.style.textTransform;
},
set: function(value) {
this.style.textTransform = value;
},
enumerable: true,
configurable: true
});
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("SelectedIndex should be between [0, items.length)");
}
}
};
Object.defineProperty(TabView.prototype, "_selectedView", {
get: function() {
var _items = this.items;
var _selectedIndex = this.selectedIndex;
if (!_items) {
return undefined;
}
if (_items.length === 0) {
return undefined;
}
if (_selectedIndex === undefined) {
return undefined;
}
return _items[_selectedIndex].view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "_childrenCount", {
get: function() {
if (this.items) {
return this.items.length;
}
return 0;
},
enumerable: true,
configurable: true
});
TabView.prototype._eachChildView = function(callback) {
var _items = this.items;
if (!_items) {
return;
}
var i;
var length = _items.length;
var item;
var retVal;
for (i = 0; i < length; i++) {
item = _items[i];
if (item.view) {
retVal = callback(item.view);
if (retVal === false) {
break;
}
}
}
};
TabView.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
TabView.prototype._getAndroidTabView = function() {
return undefined;
};
TabView.prototype._updateIOSTabBarColorsAndFonts = function() {};
TabView.itemsProperty = itemsProperty;
TabView.selectedIndexProperty = selectedIndexProperty;
TabView.selectedIndexChangedEvent = "selectedIndexChanged";
return TabView;
}(view_1.View);
exports.TabView = TabView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(125);
var trace = __webpack_require__(31);
global.moduleMerge(common, exports);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(46);
}
}
var WebViewClientClass;
function ensureWebViewClientClass() {
if (WebViewClientClass) {
return;
}
var WebViewClientClassInner = function(_super) {
__extends(WebViewClientClassInner, _super);
function WebViewClientClassInner(view) {
_super.call(this);
this._view = view;
return global.__native(this);
}
WebViewClientClassInner.prototype.shouldOverrideUrlLoading = function(view, url) {
if (trace.enabled) {
trace.write("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", trace.categories.Debug);
}
return false;
};
WebViewClientClassInner.prototype.onPageStarted = function(view, url, favicon) {
_super.prototype.onPageStarted.call(this, view, url, favicon);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", trace.categories.Debug);
}
this._view._onLoadStarted(url, common.WebView.navigationTypes[common.WebView.navigationTypes.indexOf("linkClicked")]);
}
};
WebViewClientClassInner.prototype.onPageFinished = function(view, url) {
_super.prototype.onPageFinished.call(this, view, url);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onPageFinished(" + url + ")", trace.categories.Debug);
}
this._view._onLoadFinished(url, undefined);
}
};
WebViewClientClassInner.prototype.onReceivedError = function() {
var view = arguments[0];
if (arguments.length === 4) {
var errorCode = arguments[1];
var description = arguments[2];
var failingUrl = arguments[3];
_super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", trace.categories.Debug);
}
this._view._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
}
} else {
var request = arguments[1];
var error = arguments[2];
_super.prototype.onReceivedError.call(this, view, request, error);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", trace.categories.Debug);
}
this._view._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
}
}
};
return WebViewClientClassInner;
}(android.webkit.WebViewClient);
WebViewClientClass = WebViewClientClassInner;
}
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.call(this);
ensureWebViewClientClass();
this._webViewClient = new WebViewClientClass(this);
}
Object.defineProperty(WebView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
WebView.prototype._createUI = function() {
this._android = new android.webkit.WebView(this._context);
this._android.getSettings().setJavaScriptEnabled(true);
this._android.getSettings().setBuiltInZoomControls(true);
this._android.setWebViewClient(this._webViewClient);
};
WebView.prototype._onDetached = function(force) {
if (this.android) {
this.android.destroy();
}
_super.prototype._onDetached.call(this, force);
};
WebView.prototype._loadUrl = function(url) {
if (!this._android) {
return;
}
if (trace.enabled) {
trace.write("WebView._loadUrl(" + url + ")", trace.categories.Debug);
}
this._android.stopLoading();
this._android.loadUrl(url);
};
WebView.prototype._loadFileOrResource = function(path, content) {
if (!this._android) {
return;
}
var baseUrl = "file:///" + path.substring(0, path.lastIndexOf("/") + 1);
this._android.loadDataWithBaseURL(baseUrl, content, "text/html", "utf-8", null);
};
WebView.prototype._loadHttp = function(src) {
if (!this._android) {
return;
}
this._android.loadUrl(src);
};
WebView.prototype._loadData = function(src) {
if (!this._android) {
return;
}
ensureFS();
var baseUrl = "file:///" + fs.knownFolders.currentApp().path + "/";
this._android.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
return this._android.canGoBack();
},
enumerable: true,
configurable: true
});
WebView.prototype.stopLoading = function() {
if (this._android) {
this._android.stopLoading();
}
};
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
return this._android.canGoForward();
},
enumerable: true,
configurable: true
});
WebView.prototype.goBack = function() {
this._android.goBack();
};
WebView.prototype.goForward = function() {
this._android.goForward();
};
WebView.prototype.reload = function() {
this._android.reload();
};
return WebView;
}(common.WebView);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var utils = __webpack_require__(37);
var trace = __webpack_require__(31);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(46);
}
}
var urlProperty = new dependencyObservable.Property("url", "WebView", new proxy.PropertyMetadata(""));
function onUrlPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView._loadUrl(data.newValue);
}
urlProperty.metadata.onSetNativeValue = onUrlPropertyChanged;
var srcProperty = new dependencyObservable.Property("src", "WebView", new proxy.PropertyMetadata(""));
function onSrcPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView.stopLoading();
var src = data.newValue;
if (trace.enabled) {
trace.write("WebView._loadSrc(" + src + ")", trace.categories.Debug);
}
if (utils.isFileOrResourcePath(src)) {
ensureFS();
if (src.indexOf("~/") === 0) {
src = fs.path.join(fs.knownFolders.currentApp().path, src.replace("~/", ""));
}
if (fs.File.exists(src)) {
var file = fs.File.fromPath(src);
var content = file.readTextSync();
webView._loadFileOrResource(src, content);
}
} else if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0) {
webView._loadHttp(src);
} else {
webView._loadData(src);
}
}
srcProperty.metadata.onSetNativeValue = onSrcPropertyChanged;
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.apply(this, arguments);
}
Object.defineProperty(WebView.prototype, "url", {
get: function() {
return this._getValue(WebView.urlProperty);
},
set: function(value) {
this._setValue(WebView.urlProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "src", {
get: function() {
return this._getValue(WebView.srcProperty);
},
set: function(value) {
this._setValue(WebView.srcProperty, value);
},
enumerable: true,
configurable: true
});
WebView.prototype._onLoadFinished = function(url, error) {
this._suspendLoading = true;
this.url = url;
this._suspendLoading = false;
var args = {
eventName: WebView.loadFinishedEvent,
object: this,
url: url,
navigationType: undefined,
error: error
};
this.notify(args);
};
WebView.prototype._onLoadStarted = function(url, navigationType) {
var args = {
eventName: WebView.loadStartedEvent,
object: this,
url: url,
navigationType: navigationType,
error: undefined
};
this.notify(args);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
WebView.loadStartedEvent = "loadStarted";
WebView.loadFinishedEvent = "loadFinished";
WebView.navigationTypes = [ "linkClicked", "formSubmitted", "backForward", "reload", "formResubmitted", "other" ];
WebView.urlProperty = urlProperty;
WebView.srcProperty = srcProperty;
return WebView;
}(view.View);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(127);
function onSecurePropertyChanged(data) {
var textField = data.object;
if (!textField.android) {
return;
}
var currentInputType = textField.android.getInputType();
var currentClass = currentInputType & android.text.InputType.TYPE_MASK_CLASS;
var currentFlags = currentInputType & android.text.InputType.TYPE_MASK_FLAGS;
var newInputType = currentInputType;
if (data.newValue) {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
}
newInputType = newInputType & ~28672;
} else {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL;
}
}
textField.android.setInputType(newInputType);
}
common.secureProperty.metadata.onSetNativeValue = onSecurePropertyChanged;
global.moduleMerge(common, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
TextField.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
this.android.setLines(1);
this.android.setMaxLines(1);
this.android.setHorizontallyScrolling(true);
};
TextField.prototype._onReturnPress = function() {
this.notify({
eventName: TextField.returnPressEvent,
object: this
});
};
return TextField;
}(common.TextField);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var textBase = __webpack_require__(74);
var editableTextBase = __webpack_require__(128);
exports.secureProperty = new dependencyObservable.Property("secure", "TextField", new proxy.PropertyMetadata(false));
global.moduleMerge(textBase, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
Object.defineProperty(TextField.prototype, "secure", {
get: function() {
return this._getValue(exports.secureProperty);
},
set: function(value) {
this._setValue(exports.secureProperty, value);
},
enumerable: true,
configurable: true
});
TextField.returnPressEvent = "returnPress";
return TextField;
}(editableTextBase.EditableTextBase);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(129);
var enums = __webpack_require__(39);
var utils = __webpack_require__(37);
var types = __webpack_require__(14);
var dismissKeyboardTimeoutId;
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
_super.apply(this, arguments);
}
Object.defineProperty(EditableTextBase.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype._createUI = function() {
this._android = new android.widget.EditText(this._context);
this._configureEditText();
this._keyListenerCache = this.android.getKeyListener();
var that = new WeakRef(this);
this._textWatcher = new android.text.TextWatcher({
beforeTextChanged: function(text, start, count, after) {},
onTextChanged: function(text, start, before, count) {
var owner = that.get();
if (!owner) {
return;
}
var selectionStart = owner.android.getSelectionStart();
owner.android.removeTextChangedListener(owner._textWatcher);
owner.style._updateTextDecoration();
owner.style._updateTextTransform();
owner.android.addTextChangedListener(owner._textWatcher);
owner.android.setSelection(selectionStart);
},
afterTextChanged: function(editable) {
var owner = that.get();
if (!owner) {
return;
}
switch (owner.updateTextTrigger) {
case enums.UpdateTextTrigger.focusLost:
owner._dirtyTextAccumulator = editable.toString();
break;

case enums.UpdateTextTrigger.textChanged:
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, editable.toString());
break;

default:
throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
}
}
});
this._android.addTextChangedListener(this._textWatcher);
var focusChangeListener = new android.view.View.OnFocusChangeListener({
onFocusChange: function(view, hasFocus) {
var owner = that.get();
if (!owner) {
return;
}
if (hasFocus) {
if (dismissKeyboardTimeoutId) {
clearTimeout(dismissKeyboardTimeoutId);
dismissKeyboardTimeoutId = undefined;
}
} else {
if (owner._dirtyTextAccumulator) {
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, owner._dirtyTextAccumulator);
owner._dirtyTextAccumulator = undefined;
}
dismissKeyboardTimeoutId = setTimeout(function() {
owner.dismissSoftInput();
dismissKeyboardTimeoutId = null;
}, 1);
}
}
});
this._android.setOnFocusChangeListener(focusChangeListener);
var editorActionListener = new android.widget.TextView.OnEditorActionListener({
onEditorAction: function(textView, actionId, event) {
var owner = that.get();
if (owner) {
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_GO || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEND || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
owner.dismissSoftInput();
owner._onReturnPress();
}
}
return false;
}
});
this._android.setOnEditorActionListener(editorActionListener);
};
EditableTextBase.prototype._configureEditText = function() {};
EditableTextBase.prototype._onReturnPress = function() {};
EditableTextBase.prototype._onDetached = function(force) {
if (this._android && this._textWatcher) {
this._android.removeTextChangedListener(this._textWatcher);
}
this._android = undefined;
_super.prototype._onDetached.call(this, force);
};
EditableTextBase.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
EditableTextBase.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
EditableTextBase.prototype._onTextPropertyChanged = function(data) {
if (this._android) {
var newValue = types.toUIString(data.newValue);
this.android.setText(newValue, android.widget.TextView.BufferType.EDITABLE);
}
};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newInputType;
switch (data.newValue) {
case enums.KeyboardType.datetime:
newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
break;

case enums.KeyboardType.phone:
newInputType = android.text.InputType.TYPE_CLASS_PHONE;
break;

case enums.KeyboardType.number:
newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
break;

case enums.KeyboardType.url:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
break;

case enums.KeyboardType.email:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
break;

default:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
break;
}
this._setInputType(newInputType);
};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newImeOptions;
switch (data.newValue) {
case enums.ReturnKeyType.done:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
break;

case enums.ReturnKeyType.go:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
break;

case enums.ReturnKeyType.next:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
break;

case enums.ReturnKeyType.search:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
break;

case enums.ReturnKeyType.send:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
break;

default:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
break;
}
this._android.setImeOptions(newImeOptions);
};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {
if (!this._android) {
return;
}
if (data.newValue) {
this.android.setKeyListener(this._keyListenerCache);
} else {
this.android.setKeyListener(null);
}
};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
inputType = inputType & ~28672;
switch (data.newValue) {
case enums.AutocapitalizationType.none:
break;

case enums.AutocapitalizationType.words:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
break;

case enums.AutocapitalizationType.sentences:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;

case enums.AutocapitalizationType.allCharacters:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
break;

default:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;
}
editableTextBase._setInputType(inputType);
};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
switch (data.newValue) {
case true:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

case false:
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

default:
break;
}
editableTextBase._setInputType(inputType);
};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
editableTextBase.android.setHint(data.newValue + "");
};
EditableTextBase.prototype._setInputType = function(inputType) {
this.android.setInputType(inputType);
var listener = this.android.getKeyListener();
if (listener) {
this._keyListenerCache = listener;
}
if (!this.editable) {
this.android.setKeyListener(null);
}
};
return EditableTextBase;
}(common.EditableTextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(74);
var proxy = __webpack_require__(52);
var dependencyObservable = __webpack_require__(29);
var enums = __webpack_require__(39);
var keyboardTypeProperty = new dependencyObservable.Property("keyboardType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var returnKeyTypeProperty = new dependencyObservable.Property("returnKeyType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var editableProperty = new dependencyObservable.Property("editable", "EditableTextBase", new proxy.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
var updateTextTriggerProperty = new dependencyObservable.Property("updateTextTrigger", "EditableTextBase", new proxy.PropertyMetadata(enums.UpdateTextTrigger.textChanged, dependencyObservable.PropertyMetadataSettings.None));
var autocapitalizationTypeProperty = new dependencyObservable.Property("autocapitalizationType", "EditableTextBase", new proxy.PropertyMetadata(enums.AutocapitalizationType.sentences, dependencyObservable.PropertyMetadataSettings.None));
var autocorrectProperty = new dependencyObservable.Property("autocorrect", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
exports.hintProperty = new dependencyObservable.Property("hint", "EditableTextBase", new proxy.PropertyMetadata(""));
function onKeyboardTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onKeyboardTypePropertyChanged(data);
}
keyboardTypeProperty.metadata.onSetNativeValue = onKeyboardTypePropertyChanged;
function onReturnKeyTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onReturnKeyTypePropertyChanged(data);
}
returnKeyTypeProperty.metadata.onSetNativeValue = onReturnKeyTypePropertyChanged;
function onEditablePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onEditablePropertyChanged(data);
}
editableProperty.metadata.onSetNativeValue = onEditablePropertyChanged;
function onAutocapitalizationTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocapitalizationTypePropertyChanged(data);
}
autocapitalizationTypeProperty.metadata.onSetNativeValue = onAutocapitalizationTypePropertyChanged;
function onAutocorrectPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocorrectPropertyChanged(data);
}
autocorrectProperty.metadata.onSetNativeValue = onAutocorrectPropertyChanged;
function onHintPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onHintPropertyChanged(data);
}
exports.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
_super.apply(this, arguments);
}
Object.defineProperty(EditableTextBase.prototype, "keyboardType", {
get: function() {
return this._getValue(EditableTextBase.keyboardTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.keyboardTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "returnKeyType", {
get: function() {
return this._getValue(EditableTextBase.returnKeyTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.returnKeyTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "editable", {
get: function() {
return this._getValue(EditableTextBase.editableProperty);
},
set: function(value) {
this._setValue(EditableTextBase.editableProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "updateTextTrigger", {
get: function() {
return this._getValue(EditableTextBase.updateTextTriggerProperty);
},
set: function(value) {
this._setValue(EditableTextBase.updateTextTriggerProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocapitalizationType", {
get: function() {
return this._getValue(EditableTextBase.autocapitalizationTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocapitalizationTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocorrect", {
get: function() {
return this._getValue(EditableTextBase.autocorrectProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocorrectProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "hint", {
get: function() {
return this._getValue(EditableTextBase.hintProperty);
},
set: function(value) {
this._setValue(EditableTextBase.hintProperty, value);
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype.dismissSoftInput = function() {};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {};
EditableTextBase.keyboardTypeProperty = keyboardTypeProperty;
EditableTextBase.returnKeyTypeProperty = returnKeyTypeProperty;
EditableTextBase.editableProperty = editableProperty;
EditableTextBase.updateTextTriggerProperty = updateTextTriggerProperty;
EditableTextBase.autocapitalizationTypeProperty = autocapitalizationTypeProperty;
EditableTextBase.autocorrectProperty = autocorrectProperty;
EditableTextBase.hintProperty = exports.hintProperty;
return EditableTextBase;
}(textBase.TextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(131);
global.moduleMerge(common, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
TextView.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
this.android.setGravity(android.view.Gravity.TOP | android.view.Gravity.LEFT);
};
return TextView;
}(common.TextView);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(74);
var editableTextBase = __webpack_require__(128);
global.moduleMerge(textBase, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
return TextView;
}(editableTextBase.EditableTextBase);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(133);
global.moduleMerge(common, exports);
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
TimePicker.prototype._createUI = function() {
this._android = new android.widget.TimePicker(this._context);
var that = new WeakRef(this);
this._listener = new android.widget.TimePicker.OnTimeChangedListener({
get owner() {
return that.get();
},
onTimeChanged: function(picker, hour, minute) {
if (this.owner) {
var validTime = common.getValidTime(this.owner, hour, minute);
this.owner._setNativeValueSilently(validTime.hour, validTime.minute);
this.owner._onPropertyChangedFromNative(common.TimePicker.timeProperty, new Date(0, 0, 0, validTime.hour, validTime.minute));
}
}
});
this._android.setOnTimeChangedListener(this._listener);
var c = java.util.Calendar.getInstance();
if (this.hour === common.TimePicker.hourProperty.defaultValue) {
this.hour = c.get(java.util.Calendar.HOUR_OF_DAY);
}
if (this.minute === common.TimePicker.minuteProperty.defaultValue) {
this.minute = c.get(java.util.Calendar.MINUTE);
}
var validTime = common.getValidTime(this, this.hour, this.minute);
this._setNativeValueSilently(validTime.hour, validTime.minute);
};
TimePicker.prototype._setNativeValueSilently = function(hour, minute) {
if (this.android) {
this.android.setOnTimeChangedListener(null);
this.android.setCurrentHour(new java.lang.Integer(hour));
this.android.setCurrentMinute(new java.lang.Integer(minute));
this.minute = minute;
this.hour = hour;
this.android.setOnTimeChangedListener(this._listener);
}
};
TimePicker.prototype._setNativeTime = function() {
this._setNativeValueSilently(this.hour, this.minute);
};
return TimePicker;
}(common.TimePicker);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(29);
var proxy = __webpack_require__(52);
var view = __webpack_require__(12);
var types = __webpack_require__(14);
function isHourValid(value) {
return types.isNumber(value) && value >= 0 && value <= 23;
}
function isMinuteValid(value) {
return types.isNumber(value) && value >= 0 && value <= 59;
}
function isMinuteIntervalValid(value) {
return types.isNumber(value) && value >= 1 && value <= 30 && 60 % value === 0;
}
function getMinutes(hour) {
return hour * 60;
}
function isGreaterThanMinTime(picker, hour, minute) {
if (!types.isDefined(picker.minHour) || !types.isDefined(picker.minMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}
exports.isGreaterThanMinTime = isGreaterThanMinTime;
function isLessThanMaxTime(picker, hour, minute) {
if (!types.isDefined(picker.maxHour) || !types.isDefined(picker.maxMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}
exports.isLessThanMaxTime = isLessThanMaxTime;
function isValidTime(picker) {
return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}
exports.isValidTime = isValidTime;
function getValidTime(picker, hour, minute) {
if (picker.minuteInterval > 1) {
var minuteFloor = minute - minute % picker.minuteInterval;
minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);
if (minute === 60) {
hour++;
minute = 0;
}
}
var time = {
hour: hour,
minute: minute
};
if (!isGreaterThanMinTime(picker, hour, minute)) {
time = {
hour: picker.minHour,
minute: picker.minMinute
};
}
if (!isLessThanMaxTime(picker, hour, minute)) {
time = {
hour: picker.maxHour,
minute: picker.maxMinute
};
}
return time;
}
exports.getValidTime = getValidTime;
function toString(value) {
return value < 10 ? "0" + value : "" + value;
}
function getMinMaxTimeErrorMessage(picker) {
return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}
function getErrorMessage(picker, propertyName, newValue) {
return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}
function onHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setHours(picker.hour);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setMinutes(picker.minute);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onTimePropertyChanged(data) {
var picker = data.object;
var newTime = data.newValue;
picker.hour = newTime.getHours();
picker.minute = newTime.getMinutes();
if (isValidTime(picker)) {
picker._setNativeTime();
} else {
throw new Error(getErrorMessage(picker, "Time", data.newValue));
}
}
function onMinMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMaxMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMinHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMaxHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinuteIntervalPropertyChanged(data) {
var picker = data.object;
picker._setNativeMinuteIntervalTime();
}
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "hour", {
get: function() {
return this._getValue(TimePicker.hourProperty);
},
set: function(value) {
this._setValue(TimePicker.hourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minute", {
get: function() {
return this._getValue(TimePicker.minuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "time", {
get: function() {
return this._getValue(TimePicker.timeProperty);
},
set: function(value) {
this._setValue(TimePicker.timeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minuteInterval", {
get: function() {
return this._getValue(TimePicker.minuteIntervalProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteIntervalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxHour", {
get: function() {
return this._getValue(TimePicker.maxHourProperty);
},
set: function(value) {
this._setValue(TimePicker.maxHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxMinute", {
get: function() {
return this._getValue(TimePicker.maxMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.maxMinuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minHour", {
get: function() {
return this._getValue(TimePicker.minHourProperty);
},
set: function(value) {
this._setValue(TimePicker.minHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minMinute", {
get: function() {
return this._getValue(TimePicker.minMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minMinuteProperty, value);
},
enumerable: true,
configurable: true
});
TimePicker.prototype._setNativeTime = function() {};
TimePicker.prototype._setNativeMinTime = function() {};
TimePicker.prototype._setNativeMaxTime = function() {};
TimePicker.prototype._setNativeMinuteIntervalTime = function() {};
TimePicker.hourProperty = new dependencyObservable.Property("hour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onHourPropertyChanged, isHourValid));
TimePicker.minHourProperty = new dependencyObservable.Property("minHour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinHourPropertyChanged, isHourValid));
TimePicker.maxHourProperty = new dependencyObservable.Property("maxHour", "TimePicker", new proxy.PropertyMetadata(23, dependencyObservable.PropertyMetadataSettings.None, onMaxHourPropertyChanged, isHourValid));
TimePicker.minuteProperty = new dependencyObservable.Property("minute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinutePropertyChanged, isMinuteValid));
TimePicker.minMinuteProperty = new dependencyObservable.Property("minMinute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinMinutePropertyChanged, isMinuteValid));
TimePicker.maxMinuteProperty = new dependencyObservable.Property("maxMinute", "TimePicker", new proxy.PropertyMetadata(59, dependencyObservable.PropertyMetadataSettings.None, onMaxMinutePropertyChanged, isMinuteValid));
TimePicker.minuteIntervalProperty = new dependencyObservable.Property("minuteInterval", "TimePicker", new proxy.PropertyMetadata(1, dependencyObservable.PropertyMetadataSettings.None, onMinuteIntervalPropertyChanged, isMinuteIntervalValid));
TimePicker.timeProperty = new dependencyObservable.Property("time", "TimePicker", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTimePropertyChanged, isValidTime));
return TimePicker;
}(view.View);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var common = __webpack_require__(135);
var stackLayout = __webpack_require__(85);
var proxy_view_container_1 = __webpack_require__(103);
var layoutBase = __webpack_require__(78);
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(23);
}
}
var ITEMLOADING = common.ListView.itemLoadingEvent;
var LOADMOREITEMS = common.ListView.loadMoreItemsEvent;
var ITEMTAP = common.ListView.itemTapEvent;
global.moduleMerge(common, exports);
function onSeparatorColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
ensureColor();
if (data.newValue instanceof color.Color) {
bar.android.setDivider(new android.graphics.drawable.ColorDrawable(data.newValue.android));
bar.android.setDividerHeight(1);
}
}
common.ListView.separatorColorProperty.metadata.onSetNativeValue = onSeparatorColorPropertyChanged;
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
_super.apply(this, arguments);
this._androidViewId = -1;
this._realizedItems = new Map();
this._realizedTemplates = new Map();
}
ListView.prototype._createUI = function() {
this._android = new android.widget.ListView(this._context);
this._android.setDescendantFocusability(android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS);
this._android.setCacheColorHint(android.graphics.Color.TRANSPARENT);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
ensureListViewAdapterClass();
this.android.setAdapter(new ListViewAdapterClass(this));
var that = new WeakRef(this);
this.android.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener({
onItemClick: function(parent, convertView, index, id) {
var owner = that.get();
if (owner) {
var view = owner._realizedTemplates.get(owner._getItemTemplate(index).key).get(convertView);
owner.notify({
eventName: ITEMTAP,
object: owner,
index: index,
view: view
});
}
}
}));
};
Object.defineProperty(ListView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {
if (!this._android || !this._android.getAdapter()) {
return;
}
this._realizedItems.forEach(function(view, nativeView, map) {
if (!(view.bindingContext instanceof observable.Observable)) {
view.bindingContext = null;
}
});
this.android.getAdapter().notifyDataSetChanged();
};
ListView.prototype.scrollToIndex = function(index) {
if (this._android) {
this._android.setSelection(index);
}
};
ListView.prototype._onDetached = function(force) {
_super.prototype._onDetached.call(this, force);
this.clearRealizedCells();
};
Object.defineProperty(ListView.prototype, "_childrenCount", {
get: function() {
return this._realizedItems.size;
},
enumerable: true,
configurable: true
});
ListView.prototype._eachChildView = function(callback) {
this._realizedItems.forEach(function(view, nativeView, map) {
if (view.parent instanceof ListView) {
callback(view);
} else {
if (view.parent) {
callback(view.parent);
}
}
});
};
ListView.prototype._dumpRealizedTemplates = function() {
console.log("Realized Templates:");
this._realizedTemplates.forEach(function(value, index, map) {
console.log("\t" + index + ":");
value.forEach(function(value, index, map) {
console.log("\t\t" + index.hashCode() + ": " + value);
});
});
console.log("Realized Items Size: " + this._realizedItems.size);
};
ListView.prototype.clearRealizedCells = function() {
var _this = this;
this._realizedItems.forEach(function(view, nativeView, map) {
if (view.parent) {
if (!(view.parent instanceof ListView)) {
_this._removeView(view.parent);
}
view.parent._removeView(view);
}
});
this._realizedItems.clear();
this._realizedTemplates.clear();
};
ListView.prototype._onItemTemplatesPropertyChanged = function(data) {
this._itemTemplatesInternal = new Array(this._defaultTemplate);
if (data.newValue) {
this._itemTemplatesInternal = this._itemTemplatesInternal.concat(data.newValue);
}
if (this.android) {
ensureListViewAdapterClass();
this.android.setAdapter(new ListViewAdapterClass(this));
}
this.refresh();
};
return ListView;
}(common.ListView);
exports.ListView = ListView;
var ListViewAdapterClass;
function ensureListViewAdapterClass() {
if (ListViewAdapterClass) {
return;
}
var ListViewAdapter = function(_super) {
__extends(ListViewAdapter, _super);
function ListViewAdapter(listView) {
_super.call(this);
this._listView = listView;
return global.__native(this);
}
ListViewAdapter.prototype.getCount = function() {
return this._listView && this._listView.items && this._listView.items.length ? this._listView.items.length : 0;
};
ListViewAdapter.prototype.getItem = function(i) {
if (this._listView && this._listView.items && i < this._listView.items.length) {
return this._listView.items.getItem ? this._listView.items.getItem(i) : this._listView.items[i];
}
return null;
};
ListViewAdapter.prototype.getItemId = function(i) {
return long(i);
};
ListViewAdapter.prototype.hasStableIds = function() {
return true;
};
ListViewAdapter.prototype.getViewTypeCount = function() {
return this._listView._itemTemplatesInternal.length;
};
ListViewAdapter.prototype.getItemViewType = function(index) {
var template = this._listView._getItemTemplate(index);
var itemViewType = this._listView._itemTemplatesInternal.indexOf(template);
return itemViewType;
};
ListViewAdapter.prototype.getView = function(index, convertView, parent) {
if (!this._listView) {
return null;
}
var totalItemCount = this._listView.items ? this._listView.items.length : 0;
if (index === totalItemCount - 1) {
this._listView.notify({
eventName: LOADMOREITEMS,
object: this._listView
});
}
var template = this._listView._getItemTemplate(index);
var view;
if (convertView) {
view = this._listView._realizedTemplates.get(template.key).get(convertView);
if (!view) {
throw new Error("There is no entry with key '" + convertView + "' in the realized views cache for template with key'" + template.key + "'.");
}
} else {
view = template.createView();
}
var args = {
eventName: ITEMLOADING,
object: this._listView,
index: index,
view: view,
android: parent,
ios: undefined
};
this._listView.notify(args);
if (!args.view) {
args.view = this._listView._getDefaultItemContent(index);
}
if (args.view) {
if (this._listView.rowHeight > -1) {
args.view.height = this._listView.rowHeight;
} else {
args.view.height = Number.NaN;
}
this._listView._prepareItem(args.view, index);
if (!args.view.parent) {
if (args.view instanceof layoutBase.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
this._listView._addView(args.view);
convertView = args.view.android;
} else {
var sp = new stackLayout.StackLayout();
sp.addChild(args.view);
this._listView._addView(sp);
convertView = sp.android;
}
}
var realizedItemsForTemplateKey = this._listView._realizedTemplates.get(template.key);
if (!realizedItemsForTemplateKey) {
realizedItemsForTemplateKey = new Map();
this._listView._realizedTemplates.set(template.key, realizedItemsForTemplateKey);
}
realizedItemsForTemplateKey.set(convertView, args.view);
this._listView._realizedItems.set(convertView, args.view);
}
return convertView;
};
return ListViewAdapter;
}(android.widget.BaseAdapter);
ListViewAdapterClass = ListViewAdapter;
}
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var view = __webpack_require__(12);
var proxy = __webpack_require__(52);
var dependencyObservable = __webpack_require__(29);
var color = __webpack_require__(23);
var types_1 = __webpack_require__(14);
var bindable_1 = __webpack_require__(28);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(105);
}
}
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(72);
}
}
var observableArray;
function ensureObservableArray() {
if (!observableArray) {
observableArray = __webpack_require__(22);
}
}
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(30);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var ITEMTEMPLATES = "itemTemplates";
var ISSCROLLING = "isScrolling";
var LISTVIEW = "ListView";
var SEPARATORCOLOR = "separatorColor";
var ROWHEIGHT = "rowHeight";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var knownMultiTemplates;
(function(knownMultiTemplates) {
knownMultiTemplates.itemTemplates = "itemTemplates";
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));
function onItemsPropertyChanged(data) {
var listView = data.object;
listView._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var listView = data.object;
listView.refresh();
}
function onItemTemplatesPropertyChanged(data) {
var listView = data.object;
listView._onItemTemplatesPropertyChanged(data);
}
function onRowHeightPropertyChanged(data) {
var listView = data.object;
listView._onRowHeightPropertyChanged(data);
}
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
var _this = this;
_super.apply(this, arguments);
this._itemTemplateSelectorBindable = new bindable_1.Bindable();
this._defaultTemplate = {
key: "default",
createView: function() {
if (_this.itemTemplate) {
ensureBuilder();
return builder.parse(_this.itemTemplate, _this);
}
return undefined;
}
};
this._itemTemplatesInternal = new Array(this._defaultTemplate);
}
Object.defineProperty(ListView.prototype, "items", {
get: function() {
return this._getValue(ListView.itemsProperty);
},
set: function(value) {
this._setValue(ListView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplate", {
get: function() {
return this._getValue(ListView.itemTemplateProperty);
},
set: function(value) {
this._setValue(ListView.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplates", {
get: function() {
return this._getValue(ListView.itemTemplatesProperty);
},
set: function(value) {
var newValue = value;
if (types_1.isString(newValue)) {
ensureBuilder();
newValue = builder.parseMultipleTemplates(newValue, this);
}
this._setValue(ListView.itemTemplatesProperty, newValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplateSelector", {
get: function() {
return this._itemTemplateSelector;
},
set: function(value) {
var _this = this;
if (types_1.isString(value)) {
this._itemTemplateSelectorBindable.bind({
sourceProperty: null,
targetProperty: "templateKey",
expression: value
});
this._itemTemplateSelector = function(item, index, items) {
item["$index"] = index;
_this._itemTemplateSelectorBindable.bindingContext = item;
return _this._itemTemplateSelectorBindable.get("templateKey");
};
} else if (types_1.isFunction(value)) {
this._itemTemplateSelector = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "isScrolling", {
get: function() {
return false;
},
set: function(value) {},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "separatorColor", {
get: function() {
return this._getValue(ListView.separatorColorProperty);
},
set: function(value) {
this._setValue(ListView.separatorColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "rowHeight", {
get: function() {
return this._getValue(ListView.rowHeightProperty);
},
set: function(value) {
this._setValue(ListView.rowHeightProperty, value);
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {};
ListView.prototype.scrollToIndex = function(index) {};
ListView.prototype._getItemTemplate = function(index) {
var templateKey = "default";
if (this.itemTemplateSelector) {
var dataItem = this._getDataItem(index);
templateKey = this._itemTemplateSelector(dataItem, index, this.items);
}
for (var i = 0, length = this._itemTemplatesInternal.length; i < length; i++) {
if (this._itemTemplatesInternal[i].key === templateKey) {
return this._itemTemplatesInternal[i];
}
}
return this._itemTemplatesInternal[0];
};
ListView.prototype._prepareItem = function(item, index) {
if (item) {
item.bindingContext = this._getDataItem(index);
}
};
ListView.prototype._getDataItem = function(index) {
var thisItems = this.items;
return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
};
ListView.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
ListView.prototype._onItemsPropertyChanged = function(data) {
ensureObservableArray();
ensureWeakEvents();
if (data.oldValue instanceof observable.Observable) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observable.Observable) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this.refresh();
};
ListView.prototype._onItemsChanged = function(args) {
this.refresh();
};
ListView.prototype._onRowHeightPropertyChanged = function(data) {
this.refresh();
};
ListView.prototype._onItemTemplatesPropertyChanged = function(data) {};
ListView.itemLoadingEvent = "itemLoading";
ListView.itemTapEvent = "itemTap";
ListView.loadMoreItemsEvent = "loadMoreItems";
ListView.knownFunctions = [ "itemTemplateSelector" ];
ListView.separatorColorProperty = new dependencyObservable.Property(SEPARATORCOLOR, LISTVIEW, new proxy.PropertyMetadata(undefined));
ListView.itemsProperty = new dependencyObservable.Property(ITEMS, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
ListView.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
ListView.itemTemplatesProperty = new dependencyObservable.Property(ITEMTEMPLATES, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatesPropertyChanged));
ListView.isScrollingProperty = new dependencyObservable.Property(ISSCROLLING, LISTVIEW, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
ListView.rowHeightProperty = new dependencyObservable.Property(ROWHEIGHT, LISTVIEW, new proxy.PropertyMetadata(-1, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onRowHeightPropertyChanged));
return ListView;
}(view.View);
exports.ListView = ListView;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var common = __webpack_require__(137);
var types = __webpack_require__(14);
var cssValue = __webpack_require__(138);
var button;
var style;
function ensureLazyRequires() {
if (!button) {
button = __webpack_require__(61);
}
if (!style) {
style = __webpack_require__(15);
}
}
global.moduleMerge(common, exports);
var ad;
(function(ad) {
var SDK;
function getSDK() {
if (!SDK) {
SDK = android.os.Build.VERSION.SDK_INT;
}
return SDK;
}
var _defaultBackgrounds = new Map();
function onBackgroundOrBorderPropertyChanged(v) {
var nativeView = v._nativeView;
if (!nativeView) {
return;
}
ensureLazyRequires();
var background = v.style._getValue(style.backgroundInternalProperty);
var backgroundDrawable = nativeView.getBackground();
var density = utils.layout.getDisplayDensity();
var cache = v._nativeView;
if (v instanceof button.Button && !types.isNullOrUndefined(backgroundDrawable) && types.isFunction(backgroundDrawable.setColorFilter) && !background.hasBorderWidth() && !background.hasBorderRadius() && !background.clipPath && types.isNullOrUndefined(background.image) && !types.isNullOrUndefined(background.color)) {
var backgroundColor = backgroundDrawable.backgroundColor = background.color.android;
backgroundDrawable.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
backgroundDrawable.backgroundColor = backgroundColor;
} else if (!background.isEmpty()) {
if (!(backgroundDrawable instanceof org.nativescript.widgets.BorderDrawable)) {
var viewClass = types.getClass(v);
if (!(v instanceof button.Button) && !_defaultBackgrounds.has(viewClass)) {
_defaultBackgrounds.set(viewClass, nativeView.getBackground());
}
backgroundDrawable = new org.nativescript.widgets.BorderDrawable(density);
refreshBorderDrawable(v, backgroundDrawable);
nativeView.setBackground(backgroundDrawable);
} else {
refreshBorderDrawable(v, backgroundDrawable);
}
if ((background.hasBorderWidth() || background.hasBorderRadius() || background.clipPath) && getSDK() < 18) {
cache.layerType = cache.getLayerType();
cache.setLayerType(android.view.View.LAYER_TYPE_SOFTWARE, null);
}
} else {
if (v instanceof button.Button) {
var nativeButton = new android.widget.Button(nativeView.getContext());
nativeView.setBackground(nativeButton.getBackground());
} else {
var viewClass = types.getClass(v);
if (_defaultBackgrounds.has(viewClass)) {
nativeView.setBackground(_defaultBackgrounds.get(viewClass));
}
}
if (cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
var leftPadding = Math.round(((background.borderLeftWidth || 0) + (v.style.paddingLeft || 0)) * density);
var topPadding = Math.round(((background.borderTopWidth || 0) + (v.style.paddingTop || 0)) * density);
var rightPadding = Math.round(((background.borderRightWidth || 0) + (v.style.paddingRight || 0)) * density);
var bottomPadding = Math.round(((background.borderBottomWidth || 0) + (v.style.paddingBottom || 0)) * density);
nativeView.setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
}
ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));
function refreshBorderDrawable(view, borderDrawable) {
var background = view.style._getValue(style.backgroundInternalProperty);
if (background) {
var backgroundPositionParsedCSSValues = null;
var backgroundSizeParsedCSSValues = null;
if (background.position) {
backgroundPositionParsedCSSValues = createNativeCSSValueArray(background.position);
}
if (background.size) {
backgroundSizeParsedCSSValues = createNativeCSSValueArray(background.size);
}
borderDrawable.refresh(background.borderTopColor && background.borderTopColor.android ? background.borderTopColor.android : 0, background.borderRightColor && background.borderRightColor.android ? background.borderRightColor.android : 0, background.borderBottomColor && background.borderBottomColor.android ? background.borderBottomColor.android : 0, background.borderLeftColor && background.borderLeftColor.android ? background.borderLeftColor.android : 0, background.borderTopWidth, background.borderRightWidth, background.borderBottomWidth, background.borderLeftWidth, background.borderTopLeftRadius, background.borderTopRightRadius, background.borderBottomRightRadius, background.borderBottomLeftRadius, background.clipPath, background.color && background.color.android ? background.color.android : 0, background.image && background.image.android ? background.image.android : null, background.repeat, background.position, backgroundPositionParsedCSSValues, background.size, backgroundSizeParsedCSSValues);
}
}
function createNativeCSSValueArray(css) {
if (!css) {
return null;
}
var cssValues = cssValue(css);
var nativeArray = Array.create(org.nativescript.widgets.CSSValue, cssValues.length);
for (var i = 0, length = cssValues.length; i < length; i++) {
nativeArray[i] = new org.nativescript.widgets.CSSValue(cssValues[i].type, cssValues[i].string, cssValues[i].unit, cssValues[i].value);
}
return nativeArray;
}
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(23);
var enums = __webpack_require__(39);
var cssValue = __webpack_require__(138);
var utils = __webpack_require__(37);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var Background = function() {
function Background() {
this.borderTopWidth = 0;
this.borderRightWidth = 0;
this.borderBottomWidth = 0;
this.borderLeftWidth = 0;
this.borderTopLeftRadius = 0;
this.borderTopRightRadius = 0;
this.borderBottomLeftRadius = 0;
this.borderBottomRightRadius = 0;
}
Background.prototype.clone = function() {
var clone = new Background();
clone.color = this.color;
clone.image = this.image;
clone.repeat = this.repeat;
clone.position = this.position;
clone.size = this.size;
clone.borderTopColor = this.borderTopColor;
clone.borderRightColor = this.borderRightColor;
clone.borderBottomColor = this.borderBottomColor;
clone.borderLeftColor = this.borderLeftColor;
clone.borderTopWidth = this.borderTopWidth;
clone.borderRightWidth = this.borderRightWidth;
clone.borderBottomWidth = this.borderBottomWidth;
clone.borderLeftWidth = this.borderLeftWidth;
clone.borderTopLeftRadius = this.borderTopLeftRadius;
clone.borderTopRightRadius = this.borderTopRightRadius;
clone.borderBottomRightRadius = this.borderBottomRightRadius;
clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
clone.clipPath = this.clipPath;
return clone;
};
Background.prototype.withColor = function(value) {
var clone = this.clone();
clone.color = value;
return clone;
};
Background.prototype.withImage = function(value) {
var clone = this.clone();
clone.image = value;
return clone;
};
Background.prototype.withRepeat = function(value) {
var clone = this.clone();
clone.repeat = value;
return clone;
};
Background.prototype.withPosition = function(value) {
var clone = this.clone();
clone.position = value;
return clone;
};
Background.prototype.withSize = function(value) {
var clone = this.clone();
clone.size = value;
return clone;
};
Background.prototype.withBorderTopColor = function(value) {
var clone = this.clone();
clone.borderTopColor = value;
return clone;
};
Background.prototype.withBorderRightColor = function(value) {
var clone = this.clone();
clone.borderRightColor = value;
return clone;
};
Background.prototype.withBorderBottomColor = function(value) {
var clone = this.clone();
clone.borderBottomColor = value;
return clone;
};
Background.prototype.withBorderLeftColor = function(value) {
var clone = this.clone();
clone.borderLeftColor = value;
return clone;
};
Background.prototype.withBorderTopWidth = function(value) {
var clone = this.clone();
clone.borderTopWidth = value;
return clone;
};
Background.prototype.withBorderRightWidth = function(value) {
var clone = this.clone();
clone.borderRightWidth = value;
return clone;
};
Background.prototype.withBorderBottomWidth = function(value) {
var clone = this.clone();
clone.borderBottomWidth = value;
return clone;
};
Background.prototype.withBorderLeftWidth = function(value) {
var clone = this.clone();
clone.borderLeftWidth = value;
return clone;
};
Background.prototype.withBorderTopLeftRadius = function(value) {
var clone = this.clone();
clone.borderTopLeftRadius = value;
return clone;
};
Background.prototype.withBorderTopRightRadius = function(value) {
var clone = this.clone();
clone.borderTopRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomRightRadius = function(value) {
var clone = this.clone();
clone.borderBottomRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomLeftRadius = function(value) {
var clone = this.clone();
clone.borderBottomLeftRadius = value;
return clone;
};
Background.prototype.withClipPath = function(value) {
var clone = this.clone();
clone.clipPath = value;
return clone;
};
Background.prototype.getDrawParams = function(width, height) {
if (!this.image) {
return null;
}
var res = {
repeatX: true,
repeatY: true,
posX: 0,
posY: 0
};
if (this.repeat) {
switch (this.repeat.toLowerCase()) {
case enums.BackgroundRepeat.noRepeat:
res.repeatX = false;
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatX:
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatY:
res.repeatX = false;
break;
}
}
var imageWidth = this.image.width;
var imageHeight = this.image.height;
if (this.size) {
var values = cssValue(this.size);
if (values.length === 2) {
var vx = values[0];
var vy = values[1];
if (vx.unit === "%" && vy.unit === "%") {
imageWidth = width * vx.value / 100;
imageHeight = height * vy.value / 100;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
} else if (vx.type === "number" && vy.type === "number" && (vx.unit === "px" && vy.unit === "px" || vx.unit === "" && vy.unit === "")) {
imageWidth = vx.value;
imageHeight = vy.value;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
} else if (values.length === 1 && values[0].type === "ident") {
var scale = 0;
if (values[0].string === "cover") {
scale = Math.max(width / imageWidth, height / imageHeight);
} else if (values[0].string === "contain") {
scale = Math.min(width / imageWidth, height / imageHeight);
}
if (scale > 0) {
imageWidth *= scale;
imageHeight *= scale;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
}
}
if (this.position) {
var v = Background.parsePosition(this.position);
if (v) {
var spaceX = width - imageWidth;
var spaceY = height - imageHeight;
if (v.x.unit === "%" && v.y.unit === "%") {
res.posX = spaceX * v.x.value / 100;
res.posY = spaceY * v.y.value / 100;
} else if (v.x.type === "number" && v.y.type === "number" && (v.x.unit === "px" && v.y.unit === "px" || v.x.unit === "" && v.y.unit === "")) {
res.posX = v.x.value;
res.posY = v.y.value;
} else if (v.x.type === "ident" && v.y.type === "ident") {
if (v.x.string.toLowerCase() === "center") {
res.posX = spaceX / 2;
} else if (v.x.string.toLowerCase() === "right") {
res.posX = spaceX;
}
if (v.y.string.toLowerCase() === "center") {
res.posY = spaceY / 2;
} else if (v.y.string.toLowerCase() === "bottom") {
res.posY = spaceY;
}
}
}
}
return res;
};
Background.parsePosition = function(pos) {
var values = cssValue(pos);
if (values.length === 2) {
return {
x: values[0],
y: values[1]
};
}
if (values.length === 1 && values[0].type === "ident") {
var val = values[0].string.toLocaleLowerCase();
var center = {
type: "ident",
string: "center"
};
if (val === "left" || val === "right") {
return {
x: values[0],
y: center
};
} else if (val === "top" || val === "bottom") {
return {
x: center,
y: values[0]
};
} else if (val === "center") {
return {
x: center,
y: center
};
}
}
return null;
};
Background.prototype.isEmpty = function() {
ensureTypes();
return types.isNullOrUndefined(this.color) && types.isNullOrUndefined(this.image) && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
};
Background.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return colorModule.Color.equals(value1.color, value2.color) && value1.image === value2.image && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && colorModule.Color.equals(value1.borderTopColor, value2.borderTopColor) && colorModule.Color.equals(value1.borderRightColor, value2.borderRightColor) && colorModule.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && colorModule.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
};
Background.prototype.hasBorderColor = function() {
return !types.isNullOrUndefined(this.borderTopColor) || !types.isNullOrUndefined(this.borderRightColor) || !types.isNullOrUndefined(this.borderBottomColor) || !types.isNullOrUndefined(this.borderLeftColor);
};
Background.prototype.hasBorderWidth = function() {
return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
};
Background.prototype.hasBorderRadius = function() {
return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
};
Background.prototype.hasUniformBorderColor = function() {
return colorModule.Color.equals(this.borderTopColor, this.borderRightColor) && colorModule.Color.equals(this.borderTopColor, this.borderBottomColor) && colorModule.Color.equals(this.borderTopColor, this.borderLeftColor);
};
Background.prototype.hasUniformBorderWidth = function() {
return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
};
Background.prototype.hasUniformBorderRadius = function() {
return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
};
Background.prototype.hasUniformBorder = function() {
return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
};
Background.prototype.getUniformBorderColor = function() {
if (this.hasUniformBorderColor()) {
return this.borderTopColor;
}
return undefined;
};
Background.prototype.getUniformBorderWidth = function() {
if (this.hasUniformBorderWidth()) {
return this.borderTopWidth;
}
return 0;
};
Background.prototype.getUniformBorderRadius = function() {
if (this.hasUniformBorderRadius()) {
return this.borderTopLeftRadius;
}
return 0;
};
Background.prototype.toString = function() {
return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
};
Background.default = new Background();
return Background;
}();
exports.Background = Background;
function cssValueToDevicePixels(source, total) {
var result;
source = source.trim();
if (source.indexOf("px") !== -1) {
result = parseFloat(source.replace("px", ""));
} else if (source.indexOf("%") !== -1 && total > 0) {
result = parseFloat(source.replace("%", "")) / 100 * utils.layout.toDeviceIndependentPixels(total);
} else {
result = parseFloat(source);
}
return utils.layout.toDevicePixels(result);
}
exports.cssValueToDevicePixels = cssValueToDevicePixels;
}, function(module, exports) {
module.exports = parse;
function parse(str) {
return new Parser(str).parse();
}
function Parser(str) {
this.str = str;
}
Parser.prototype.skip = function(m) {
this.str = this.str.slice(m[0].length);
};
Parser.prototype.comma = function() {
var m = /^, */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "comma",
string: ","
};
};
Parser.prototype.ident = function() {
var m = /^([\w-]+) */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "ident",
string: m[1]
};
};
Parser.prototype.int = function() {
var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = ~~m[2];
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.float = function() {
var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = parseFloat(m[2]);
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.number = function() {
return this.float() || this.int();
};
Parser.prototype.double = function() {
var m = /^"([^"]*)" */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: '"',
string: '"' + m[1] + '"',
value: m[1]
};
};
Parser.prototype.single = function() {
var m = /^'([^']*)' */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: "'",
string: "'" + m[1] + "'",
value: m[1]
};
};
Parser.prototype.string = function() {
return this.single() || this.double();
};
Parser.prototype.value = function() {
return this.number() || this.ident() || this.string() || this.comma();
};
Parser.prototype.parse = function() {
var vals = [];
while (this.str.length) {
var obj = this.value();
if (!obj) throw new Error("failed to parse near `" + this.str.slice(0, 10) + "...`");
vals.push(obj);
}
return vals;
};
}, function(module, exports, __webpack_require__) {
var styleModule = __webpack_require__(15);
var stylePropertyModule = __webpack_require__(98);
var convertersModule = __webpack_require__(45);
exports.Property = stylePropertyModule.Property;
exports.Style = styleModule.Style;
var properties;
(function(properties) {
properties.fontSizeProperty = styleModule.fontSizeProperty;
properties.colorProperty = styleModule.colorProperty;
properties.placeholderColorProperty = styleModule.placeholderColorProperty;
properties.backgroundColorProperty = styleModule.backgroundColorProperty;
properties.textAlignmentProperty = styleModule.textAlignmentProperty;
properties.getPropertyByName = stylePropertyModule.getPropertyByName;
properties.getPropertyByCssName = stylePropertyModule.getPropertyByCssName;
properties.eachProperty = stylePropertyModule.eachProperty;
properties.eachInheritableProperty = stylePropertyModule.eachInheritableProperty;
})(properties = exports.properties || (exports.properties = {}));
var converters;
(function(converters) {
converters.colorConverter = convertersModule.colorConverter;
converters.fontSizeConverter = convertersModule.fontSizeConverter;
converters.textAlignConverter = convertersModule.textAlignConverter;
converters.numberConverter = convertersModule.numberConverter;
converters.visibilityConverter = convertersModule.visibilityConverter;
})(converters = exports.converters || (exports.converters = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(141);
var definition = __webpack_require__(140);
var view = __webpack_require__(12);
var trace = __webpack_require__(31);
var utils = __webpack_require__(37);
global.moduleMerge(common, exports);
var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;
var GesturesObserver = function(_super) {
__extends(GesturesObserver, _super);
function GesturesObserver() {
_super.apply(this, arguments);
}
GesturesObserver.prototype.observe = function(type) {
var _this = this;
if (this.target) {
this.type = type;
this._onTargetLoaded = function(args) {
if (trace.enabled) {
trace.write(_this.target + ".target loaded. android:" + _this.target._nativeView, "gestures");
}
_this._attach(_this.target, type);
};
this._onTargetUnloaded = function(args) {
if (trace.enabled) {
trace.write(_this.target + ".target unloaded. android:" + _this.target._nativeView, "gestures");
}
_this._detach();
};
this.target.on(view.View.loadedEvent, this._onTargetLoaded);
this.target.on(view.View.unloadedEvent, this._onTargetUnloaded);
if (this.target.isLoaded) {
this._attach(this.target, type);
}
}
};
GesturesObserver.prototype.disconnect = function() {
this._detach();
if (this.target) {
this.target.off(view.View.loadedEvent, this._onTargetLoaded);
this.target.off(view.View.unloadedEvent, this._onTargetUnloaded);
this._onTargetLoaded = null;
this._onTargetUnloaded = null;
}
_super.prototype.disconnect.call(this);
};
GesturesObserver.prototype._detach = function() {
if (trace.enabled) {
trace.write(this.target + "._detach() android:" + this.target._nativeView, "gestures");
}
this._notifyTouch = false;
this._simpleGestureDetector = null;
this._scaleGestureDetector = null;
this._swipeGestureDetector = null;
this._panGestureDetector = null;
this._rotateGestureDetector = null;
this._eventData = null;
};
GesturesObserver.prototype._attach = function(target, type) {
if (trace.enabled) {
trace.write(this.target + "._attach() android:" + this.target._nativeView, "gestures");
}
this._detach();
if (type & definition.GestureTypes.tap || type & definition.GestureTypes.doubleTap || type & definition.GestureTypes.longPress) {
ensureTapAndDoubleTapGestureListenerClass();
this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListenerClass(this, this.target, type));
}
if (type & definition.GestureTypes.pinch) {
ensurePinchGestureListenerClass();
this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.swipe) {
ensureSwipeGestureListenerClass();
this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.pan) {
this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.rotation) {
this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.touch) {
this._notifyTouch = true;
}
};
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {
if (this._notifyTouch) {
if (!this._eventData) {
this._eventData = new TouchGestureEventData();
}
this._eventData.prepare(this.target, motionEvent);
_executeCallback(this, this._eventData);
}
if (this._simpleGestureDetector) {
this._simpleGestureDetector.onTouchEvent(motionEvent);
}
if (this._scaleGestureDetector) {
this._scaleGestureDetector.onTouchEvent(motionEvent);
}
if (this._swipeGestureDetector) {
this._swipeGestureDetector.onTouchEvent(motionEvent);
}
if (this._panGestureDetector) {
this._panGestureDetector.onTouchEvent(motionEvent);
}
if (this._rotateGestureDetector) {
this._rotateGestureDetector.onTouchEvent(motionEvent);
}
};
return GesturesObserver;
}(common.GesturesObserver);
exports.GesturesObserver = GesturesObserver;
function _getArgs(type, view, e) {
return {
type: type,
view: view,
android: e,
ios: undefined,
object: view,
eventName: definition.toString(type)
};
}
function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.swipe,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
direction: direction,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.swipe)
};
}
function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.pan,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
deltaX: deltaX,
deltaY: deltaY,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.pan),
state: state
};
}
function _executeCallback(observer, args) {
if (observer && observer.callback) {
observer.callback.call(observer._context, args);
}
}
var TapAndDoubleTapGestureListenerClass;
function ensureTapAndDoubleTapGestureListenerClass() {
if (TapAndDoubleTapGestureListenerClass) {
return;
}
var TapAndDoubleTapGestureListener = function(_super) {
__extends(TapAndDoubleTapGestureListener, _super);
function TapAndDoubleTapGestureListener(observer, target, type) {
_super.call(this);
this._observer = observer;
this._target = target;
this._type = type;
return global.__native(this);
}
TapAndDoubleTapGestureListener.prototype.onSingleTapUp = function(motionEvent) {
if (this._type & definition.GestureTypes.tap) {
var args = _getArgs(definition.GestureTypes.tap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDoubleTap = function(motionEvent) {
if (this._type & definition.GestureTypes.doubleTap) {
var args = _getArgs(definition.GestureTypes.doubleTap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
TapAndDoubleTapGestureListener.prototype.onLongPress = function(motionEvent) {
if (this._type & definition.GestureTypes.longPress) {
var args = _getArgs(definition.GestureTypes.longPress, this._target, motionEvent);
_executeCallback(this._observer, args);
}
};
return TapAndDoubleTapGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
TapAndDoubleTapGestureListenerClass = TapAndDoubleTapGestureListener;
}
var PinchGestureEventData = function() {
function PinchGestureEventData(view, android, scale, object, state) {
this.view = view;
this.android = android;
this.scale = scale;
this.object = object;
this.state = state;
this.type = definition.GestureTypes.pinch;
this.eventName = definition.toString(definition.GestureTypes.pinch);
}
PinchGestureEventData.prototype.getFocusX = function() {
return this.android.getFocusX() / utils.layout.getDisplayDensity();
};
PinchGestureEventData.prototype.getFocusY = function() {
return this.android.getFocusY() / utils.layout.getDisplayDensity();
};
return PinchGestureEventData;
}();
var PinchGestureListenerClass;
function ensurePinchGestureListenerClass() {
if (PinchGestureListenerClass) {
return;
}
var PinchGestureListener = function(_super) {
__extends(PinchGestureListener, _super);
function PinchGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
this._density = utils.layout.getDisplayDensity();
return global.__native(this);
}
PinchGestureListener.prototype.onScaleBegin = function(detector) {
this._scale = detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.began);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScale = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.changed);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScaleEnd = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.ended);
_executeCallback(this._observer, args);
};
return PinchGestureListener;
}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);
PinchGestureListenerClass = PinchGestureListener;
}
var SwipeGestureListenerClass;
function ensureSwipeGestureListenerClass() {
if (SwipeGestureListenerClass) {
return;
}
var SwipeGestureListener = function(_super) {
__extends(SwipeGestureListener, _super);
function SwipeGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
return global.__native(this);
}
SwipeGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
SwipeGestureListener.prototype.onFling = function(initialEvent, currentEvent, velocityX, velocityY) {
var result = false;
var args;
try {
var deltaY = currentEvent.getY() - initialEvent.getY();
var deltaX = currentEvent.getX() - initialEvent.getX();
if (Math.abs(deltaX) > Math.abs(deltaY)) {
if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaX > 0) {
args = _getSwipeArgs(definition.SwipeDirection.right, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.left, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
} else {
if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaY > 0) {
args = _getSwipeArgs(definition.SwipeDirection.down, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.up, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
}
} catch (ex) {}
return result;
};
return SwipeGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
SwipeGestureListenerClass = SwipeGestureListener;
}
var CustomPanGestureDetector = function() {
function CustomPanGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.isTracking = false;
this.density = utils.layout.getDisplayDensity();
}
CustomPanGestureDetector.prototype.onTouchEvent = function(event) {
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
this.trackStop(event, false);
break;

case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
case android.view.MotionEvent.ACTION_POINTER_UP:
this.trackStop(event, true);
break;

case android.view.MotionEvent.ACTION_MOVE:
if (!this.isTracking) {
this.trackStart(event);
}
this.trackChange(event);
break;
}
return true;
};
CustomPanGestureDetector.prototype.trackStop = function(currentEvent, cahceEvent) {
if (this.isTracking) {
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.ended, null, currentEvent);
_executeCallback(this.observer, args);
this.deltaX = undefined;
this.deltaY = undefined;
this.isTracking = false;
}
if (cahceEvent) {
this.lastEventCache = currentEvent;
} else {
this.lastEventCache = undefined;
}
};
CustomPanGestureDetector.prototype.trackStart = function(currentEvent) {
var inital = this.getEventCoordinates(this.lastEventCache ? this.lastEventCache : currentEvent);
this.initialX = inital.x;
this.initialY = inital.y;
this.isTracking = true;
var args = _getPanArgs(0, 0, this.target, common.GestureStateTypes.began, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.trackChange = function(currentEvent) {
var current = this.getEventCoordinates(currentEvent);
this.deltaX = current.x - this.initialX;
this.deltaY = current.y - this.initialY;
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.changed, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.getEventCoordinates = function(event) {
var count = event.getPointerCount();
if (count === 1) {
return {
x: event.getRawX() / this.density,
y: event.getRawY() / this.density
};
} else {
var offX = event.getRawX() - event.getX();
var offY = event.getRawY() - event.getY();
var res = {
x: 0,
y: 0
};
for (var i = 0; i < count; i++) {
res.x += event.getX(i) + offX;
res.y += event.getY(i) + offY;
}
res.x /= count * this.density;
res.y /= count * this.density;
return res;
}
};
return CustomPanGestureDetector;
}();
var CustomRotateGestureDetector = function() {
function CustomRotateGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
}
Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
get: function() {
return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
},
enumerable: true,
configurable: true
});
CustomRotateGestureDetector.prototype.onTouchEvent = function(event) {
var pointerID = event.getPointerId(event.getActionIndex());
var wasTracking = this.isTracking;
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
var assigned = false;
if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
this.trackedPtrId1 = pointerID;
assigned = true;
} else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
this.trackedPtrId2 = pointerID;
assigned = true;
}
if (assigned && this.isTracking) {
this.angle = 0;
this.initalPointersAngle = this.getPointersAngle(event);
this.executeCallback(event, common.GestureStateTypes.began);
}
break;

case android.view.MotionEvent.ACTION_MOVE:
if (this.isTracking) {
this.updateAngle(event);
this.executeCallback(event, common.GestureStateTypes.changed);
}
break;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
if (pointerID === this.trackedPtrId1) {
this.trackedPtrId1 = INVALID_POINTER_ID;
} else if (pointerID === this.trackedPtrId2) {
this.trackedPtrId2 = INVALID_POINTER_ID;
}
if (wasTracking && !this.isTracking) {
this.executeCallback(event, common.GestureStateTypes.ended);
}
break;

case android.view.MotionEvent.ACTION_CANCEL:
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
if (wasTracking) {
this.executeCallback(event, common.GestureStateTypes.cancelled);
}
break;
}
return true;
};
CustomRotateGestureDetector.prototype.executeCallback = function(event, state) {
var args = {
type: definition.GestureTypes.rotation,
view: this.target,
android: event,
rotation: this.angle,
ios: undefined,
object: this.target,
eventName: definition.toString(definition.GestureTypes.rotation),
state: state
};
_executeCallback(this.observer, args);
};
CustomRotateGestureDetector.prototype.updateAngle = function(event) {
var newPointersAngle = this.getPointersAngle(event);
var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;
if (result < -180) {
result += 360;
}
if (result > 180) {
result -= 360;
}
this.angle = result;
};
CustomRotateGestureDetector.prototype.getPointersAngle = function(event) {
var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
return Math.atan2(secondY - firstY, secondX - firstX);
};
return CustomRotateGestureDetector;
}();
var Pointer = function() {
function Pointer(id, event) {
this.event = event;
this.ios = undefined;
this.android = id;
}
Pointer.prototype.getX = function() {
return this.event.getX(this.android) / utils.layout.getDisplayDensity();
};
Pointer.prototype.getY = function() {
return this.event.getY(this.android) / utils.layout.getDisplayDensity();
};
return Pointer;
}();
var TouchGestureEventData = function() {
function TouchGestureEventData() {
this.eventName = definition.toString(definition.GestureTypes.touch);
this.type = definition.GestureTypes.touch;
this.ios = undefined;
}
TouchGestureEventData.prototype.prepare = function(view, e) {
this.view = view;
this.object = view;
this.android = e;
this.action = this.getActionType(e);
this._activePointers = undefined;
this._allPointers = undefined;
};
TouchGestureEventData.prototype.getPointerCount = function() {
return this.android.getPointerCount();
};
TouchGestureEventData.prototype.getActivePointers = function() {
if (!this._activePointers) {
this._activePointers = [ new Pointer(this.android.getActionIndex(), this.android) ];
}
return this._activePointers;
};
TouchGestureEventData.prototype.getAllPointers = function() {
if (!this._allPointers) {
this._allPointers = [];
for (var i = 0; i < this.getPointerCount(); i++) {
this._allPointers.push(new Pointer(i, this.android));
}
}
return this._allPointers;
};
TouchGestureEventData.prototype.getX = function() {
return this.getActivePointers()[0].getX();
};
TouchGestureEventData.prototype.getY = function() {
return this.getActivePointers()[0].getY();
};
TouchGestureEventData.prototype.getActionType = function(e) {
switch (e.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
return common.TouchAction.down;

case android.view.MotionEvent.ACTION_MOVE:
return common.TouchAction.move;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
return common.TouchAction.up;

case android.view.MotionEvent.ACTION_CANCEL:
return common.TouchAction.cancel;
}
return "";
};
return TouchGestureEventData;
}();
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(140);
(function(GestureTypes) {
GestureTypes[GestureTypes["tap"] = 1] = "tap";
GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
GestureTypes[GestureTypes["pan"] = 8] = "pan";
GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(exports.GestureTypes || (exports.GestureTypes = {}));
var GestureTypes = exports.GestureTypes;
(function(GestureStateTypes) {
GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(exports.GestureStateTypes || (exports.GestureStateTypes = {}));
var GestureStateTypes = exports.GestureStateTypes;
(function(SwipeDirection) {
SwipeDirection[SwipeDirection["right"] = 1] = "right";
SwipeDirection[SwipeDirection["left"] = 2] = "left";
SwipeDirection[SwipeDirection["up"] = 4] = "up";
SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(exports.SwipeDirection || (exports.SwipeDirection = {}));
var SwipeDirection = exports.SwipeDirection;
var TouchAction;
(function(TouchAction) {
TouchAction.down = "down";
TouchAction.up = "up";
TouchAction.move = "move";
TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));
function observe(target, type, callback, context) {
var observer = new definition.GesturesObserver(target, callback, context);
observer.observe(type);
return observer;
}
exports.observe = observe;
function toString(type, separator) {
var types = new Array();
if (type & definition.GestureTypes.tap) {
types.push("tap");
}
if (type & definition.GestureTypes.doubleTap) {
types.push("doubleTap");
}
if (type & definition.GestureTypes.pinch) {
types.push("pinch");
}
if (type & definition.GestureTypes.pan) {
types.push("pan");
}
if (type & definition.GestureTypes.swipe) {
types.push("swipe");
}
if (type & definition.GestureTypes.rotation) {
types.push("rotation");
}
if (type & definition.GestureTypes.longPress) {
types.push("longPress");
}
if (type & definition.GestureTypes.touch) {
types.push("touch");
}
return types.join(separator);
}
exports.toString = toString;
function fromString(type) {
var t = type.trim().toLowerCase();
if (t === "tap") {
return definition.GestureTypes.tap;
} else if (t === "doubletap") {
return definition.GestureTypes.doubleTap;
} else if (t === "pinch") {
return definition.GestureTypes.pinch;
} else if (t === "pan") {
return definition.GestureTypes.pan;
} else if (t === "swipe") {
return definition.GestureTypes.swipe;
} else if (t === "rotation") {
return definition.GestureTypes.rotation;
} else if (t === "longpress") {
return definition.GestureTypes.longPress;
} else if (t === "touch") {
return definition.GestureTypes.touch;
}
return undefined;
}
exports.fromString = fromString;
var GesturesObserver = function() {
function GesturesObserver(target, callback, context) {
this._target = target;
this._callback = callback;
this._context = context;
}
Object.defineProperty(GesturesObserver.prototype, "callback", {
get: function() {
return this._callback;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "target", {
get: function() {
return this._target;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {};
GesturesObserver.prototype.observe = function(type) {};
GesturesObserver.prototype.disconnect = function() {
if (this.target) {
var list = this.target.getGestureObservers(this.type);
if (list && list.length > 0) {
for (var i = 0; i < list.length; i++) {
if (list[i].callback === this.callback) {
break;
}
}
list.length = 0;
this.target._gestureObservers[this.type] = undefined;
delete this.target._gestureObservers[this.type];
}
}
this._target = null;
this._callback = null;
this._context = null;
};
return GesturesObserver;
}();
exports.GesturesObserver = GesturesObserver;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var flexbox_layout_common_1 = __webpack_require__(143);
var utils_1 = __webpack_require__(37);
function setLayoutParamsProperty(view, setter) {
var nativeView = view._nativeView;
if (nativeView) {
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.FlexboxLayout.LayoutParams();
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
setter(lp);
nativeView.setLayoutParams(lp);
}
}
}
function _onNativeOrderPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.order = newValue;
});
}
exports._onNativeOrderPropertyChanged = _onNativeOrderPropertyChanged;
function _onNativeFlexGrowPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.flexGrow = newValue;
});
}
exports._onNativeFlexGrowPropertyChanged = _onNativeFlexGrowPropertyChanged;
function _onNativeFlexShrinkPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.flexShrink = newValue;
});
}
exports._onNativeFlexShrinkPropertyChanged = _onNativeFlexShrinkPropertyChanged;
function _onNativeAlignSelfPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.alignSelf = alignSelfMap[newValue];
});
}
exports._onNativeAlignSelfPropertyChanged = _onNativeAlignSelfPropertyChanged;
function _onNativeFlexWrapBeforePropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.wrapBefore = newValue;
});
}
exports._onNativeFlexWrapBeforePropertyChanged = _onNativeFlexWrapBeforePropertyChanged;
__export(__webpack_require__(143));
var FlexboxLayoutWidget = org.nativescript.widgets.FlexboxLayout;
var flexDirectionMap = (_a = {}, _a[flexbox_layout_common_1.FlexDirection.ROW] = FlexboxLayoutWidget.FLEX_DIRECTION_ROW, 
_a[flexbox_layout_common_1.FlexDirection.ROW_REVERSE] = FlexboxLayoutWidget.FLEX_DIRECTION_ROW_REVERSE, 
_a[flexbox_layout_common_1.FlexDirection.COLUMN] = FlexboxLayoutWidget.FLEX_DIRECTION_COLUMN, 
_a[flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE] = FlexboxLayoutWidget.FLEX_DIRECTION_COLUMN_REVERSE, 
_a);
var flexWrapMap = (_b = {}, _b[flexbox_layout_common_1.FlexWrap.NOWRAP] = FlexboxLayoutWidget.FLEX_WRAP_NOWRAP, 
_b[flexbox_layout_common_1.FlexWrap.WRAP] = FlexboxLayoutWidget.FLEX_WRAP_WRAP, 
_b[flexbox_layout_common_1.FlexWrap.WRAP_REVERSE] = FlexboxLayoutWidget.FLEX_WRAP_WRAP_REVERSE, 
_b);
var justifyContentMap = (_c = {}, _c[flexbox_layout_common_1.JustifyContent.CENTER] = FlexboxLayoutWidget.JUSTIFY_CONTENT_CENTER, 
_c[flexbox_layout_common_1.JustifyContent.FLEX_END] = FlexboxLayoutWidget.JUSTIFY_CONTENT_FLEX_END, 
_c[flexbox_layout_common_1.JustifyContent.FLEX_START] = FlexboxLayoutWidget.JUSTIFY_CONTENT_FLEX_START, 
_c[flexbox_layout_common_1.JustifyContent.SPACE_AROUND] = FlexboxLayoutWidget.JUSTIFY_CONTENT_SPACE_AROUND, 
_c[flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN] = FlexboxLayoutWidget.JUSTIFY_CONTENT_SPACE_BETWEEN, 
_c);
var alignItemsMap = (_d = {}, _d[flexbox_layout_common_1.AlignItems.BASELINE] = FlexboxLayoutWidget.ALIGN_ITEMS_BASELINE, 
_d[flexbox_layout_common_1.AlignItems.CENTER] = FlexboxLayoutWidget.ALIGN_ITEMS_CENTER, 
_d[flexbox_layout_common_1.AlignItems.FLEX_END] = FlexboxLayoutWidget.ALIGN_ITEMS_FLEX_END, 
_d[flexbox_layout_common_1.AlignItems.FLEX_START] = FlexboxLayoutWidget.ALIGN_ITEMS_FLEX_START, 
_d[flexbox_layout_common_1.AlignItems.STRETCH] = FlexboxLayoutWidget.ALIGN_ITEMS_STRETCH, 
_d);
var alignContentMap = (_e = {}, _e[flexbox_layout_common_1.AlignContent.CENTER] = FlexboxLayoutWidget.ALIGN_CONTENT_CENTER, 
_e[flexbox_layout_common_1.AlignContent.FLEX_END] = FlexboxLayoutWidget.ALIGN_CONTENT_FLEX_END, 
_e[flexbox_layout_common_1.AlignContent.FLEX_START] = FlexboxLayoutWidget.ALIGN_CONTENT_FLEX_START, 
_e[flexbox_layout_common_1.AlignContent.SPACE_AROUND] = FlexboxLayoutWidget.ALIGN_CONTENT_SPACE_AROUND, 
_e[flexbox_layout_common_1.AlignContent.SPACE_BETWEEN] = FlexboxLayoutWidget.ALIGN_CONTENT_SPACE_BETWEEN, 
_e[flexbox_layout_common_1.AlignContent.STRETCH] = FlexboxLayoutWidget.ALIGN_CONTENT_STRETCH, 
_e);
var alignSelfMap = (_f = {}, _f[flexbox_layout_common_1.AlignSelf.AUTO] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_AUTO, 
_f[flexbox_layout_common_1.AlignSelf.FLEX_START] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_FLEX_START, 
_f[flexbox_layout_common_1.AlignSelf.FLEX_END] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_FLEX_END, 
_f[flexbox_layout_common_1.AlignSelf.CENTER] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_CENTER, 
_f[flexbox_layout_common_1.AlignSelf.BASELINE] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_BASELINE, 
_f[flexbox_layout_common_1.AlignSelf.STRETCH] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_STRETCH, 
_f);
var FlexboxLayout = function(_super) {
__extends(FlexboxLayout, _super);
function FlexboxLayout() {
_super.call(this);
}
Object.defineProperty(FlexboxLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
FlexboxLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.FlexboxLayout(this._context);
};
FlexboxLayout.prototype._setNativeFlexDirection = function(flexDirection) {
var value = flexDirectionMap[flexDirection];
this.android.setFlexDirection(value);
};
FlexboxLayout.prototype._setNativeFlexWrap = function(flexWrap) {
this.android.setFlexWrap(flexWrapMap[flexWrap]);
};
FlexboxLayout.prototype._setNativeJustifyContent = function(justifyContent) {
this.android.setJustifyContent(justifyContentMap[justifyContent]);
};
FlexboxLayout.prototype._setNativeAlignItems = function(alignItems) {
this.android.setAlignItems(alignItemsMap[alignItems]);
};
FlexboxLayout.prototype._setNativeAlignContent = function(alignContent) {
this.android.setAlignContent(alignContentMap[alignContent]);
};
return FlexboxLayout;
}(flexbox_layout_common_1.FlexboxLayoutBase);
exports.FlexboxLayout = FlexboxLayout;
function _setAndroidLayoutParams(lp, view) {
lp.order = FlexboxLayout.getOrder(view);
lp.flexGrow = FlexboxLayout.getFlexGrow(view);
lp.flexShrink = FlexboxLayout.getFlexShrink(view);
lp.alignSelf = alignSelfMap[FlexboxLayout.getAlignSelf(view)];
lp.wrapBefore = FlexboxLayout.getFlexWrapBefore(view);
lp.minWidth = utils_1.layout.toDevicePixels(view.minWidth);
lp.minHeight = utils_1.layout.toDevicePixels(view.minHeight);
}
exports._setAndroidLayoutParams = _setAndroidLayoutParams;
var _a, _b, _c, _d, _e, _f;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(78);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var special_properties_1 = __webpack_require__(36);
var platform_1 = __webpack_require__(49);
var types_1 = __webpack_require__(14);
var styleProperty = __webpack_require__(98);
var style = __webpack_require__(15);
var flexbox = __webpack_require__(142);
var ORDER_DEFAULT = 1;
var FLEX_GROW_DEFAULT = 0;
var FLEX_SHRINK_DEFAULT = 1;
function makeValidator() {
var values = [];
for (var _i = 0; _i < arguments.length; _i++) {
values[_i - 0] = arguments[_i];
}
var set = new Set(values);
return function(value) {
return set.has(value);
};
}
function makeParser(isValid, def) {
return function(value) {
var lower = value && value.toLowerCase();
return isValid(lower) ? lower : def;
};
}
var FlexDirection;
(function(FlexDirection) {
FlexDirection.ROW = "row";
FlexDirection.ROW_REVERSE = "row-reverse";
FlexDirection.COLUMN = "column";
FlexDirection.COLUMN_REVERSE = "column-reverse";
FlexDirection.isValid = makeValidator(FlexDirection.ROW, FlexDirection.ROW_REVERSE, FlexDirection.COLUMN, FlexDirection.COLUMN_REVERSE);
FlexDirection.parse = makeParser(FlexDirection.isValid, FlexDirection.ROW);
})(FlexDirection = exports.FlexDirection || (exports.FlexDirection = {}));
var FlexWrap;
(function(FlexWrap) {
FlexWrap.NOWRAP = "nowrap";
FlexWrap.WRAP = "wrap";
FlexWrap.WRAP_REVERSE = "wrap-reverse";
FlexWrap.isValid = makeValidator(FlexWrap.NOWRAP, FlexWrap.WRAP, FlexWrap.WRAP_REVERSE);
FlexWrap.parse = makeParser(FlexWrap.isValid, FlexWrap.NOWRAP);
})(FlexWrap = exports.FlexWrap || (exports.FlexWrap = {}));
var JustifyContent;
(function(JustifyContent) {
JustifyContent.FLEX_START = "flex-start";
JustifyContent.FLEX_END = "flex-end";
JustifyContent.CENTER = "center";
JustifyContent.SPACE_BETWEEN = "space-between";
JustifyContent.SPACE_AROUND = "space-around";
JustifyContent.isValid = makeValidator(JustifyContent.FLEX_START, JustifyContent.FLEX_END, JustifyContent.CENTER, JustifyContent.SPACE_BETWEEN, JustifyContent.SPACE_AROUND);
JustifyContent.parse = makeParser(JustifyContent.isValid, JustifyContent.FLEX_START);
})(JustifyContent = exports.JustifyContent || (exports.JustifyContent = {}));
var FlexBasisPercent;
(function(FlexBasisPercent) {
FlexBasisPercent.DEFAULT = -1;
})(FlexBasisPercent = exports.FlexBasisPercent || (exports.FlexBasisPercent = {}));
var AlignItems;
(function(AlignItems) {
AlignItems.FLEX_START = "flex-start";
AlignItems.FLEX_END = "flex-end";
AlignItems.CENTER = "center";
AlignItems.BASELINE = "baseline";
AlignItems.STRETCH = "stretch";
AlignItems.isValid = makeValidator(AlignItems.FLEX_START, AlignItems.FLEX_END, AlignItems.CENTER, AlignItems.BASELINE, AlignItems.STRETCH);
AlignItems.parse = makeParser(AlignItems.isValid, AlignItems.FLEX_START);
})(AlignItems = exports.AlignItems || (exports.AlignItems = {}));
var AlignContent;
(function(AlignContent) {
AlignContent.FLEX_START = "flex-start";
AlignContent.FLEX_END = "flex-end";
AlignContent.CENTER = "center";
AlignContent.SPACE_BETWEEN = "space-between";
AlignContent.SPACE_AROUND = "space-around";
AlignContent.STRETCH = "stretch";
AlignContent.isValid = makeValidator(AlignContent.FLEX_START, AlignContent.FLEX_END, AlignContent.CENTER, AlignContent.SPACE_BETWEEN, AlignContent.SPACE_AROUND, AlignContent.STRETCH);
AlignContent.parse = makeParser(AlignContent.isValid, AlignContent.FLEX_START);
})(AlignContent = exports.AlignContent || (exports.AlignContent = {}));
var Order;
(function(Order) {
function isValid(value) {
return isFinite(parseInt(value));
}
Order.isValid = isValid;
Order.parse = parseInt;
})(Order = exports.Order || (exports.Order = {}));
var FlexGrow;
(function(FlexGrow) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexGrow.isValid = isValid;
FlexGrow.parse = parseFloat;
})(FlexGrow = exports.FlexGrow || (exports.FlexGrow = {}));
var FlexShrink;
(function(FlexShrink) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexShrink.isValid = isValid;
FlexShrink.parse = parseFloat;
})(FlexShrink = exports.FlexShrink || (exports.FlexShrink = {}));
var FlexWrapBefore;
(function(FlexWrapBefore) {
function isValid(value) {
if (types_1.isBoolean(value)) {
return true;
}
if (types_1.isString(value)) {
var str = value.trim().toLowerCase();
return str === "true" || str === "false";
}
return false;
}
FlexWrapBefore.isValid = isValid;
function parse(value) {
return value && value.toString().trim().toLowerCase() === "true";
}
FlexWrapBefore.parse = parse;
})(FlexWrapBefore = exports.FlexWrapBefore || (exports.FlexWrapBefore = {}));
var AlignSelf;
(function(AlignSelf) {
AlignSelf.AUTO = "auto";
AlignSelf.FLEX_START = "flex-start";
AlignSelf.FLEX_END = "flex-end";
AlignSelf.CENTER = "center";
AlignSelf.BASELINE = "baseline";
AlignSelf.STRETCH = "stretch";
AlignSelf.isValid = makeValidator(AlignSelf.AUTO, AlignSelf.FLEX_START, AlignSelf.FLEX_END, AlignSelf.CENTER, AlignSelf.BASELINE, AlignSelf.STRETCH);
AlignSelf.parse = makeParser(AlignSelf.isValid, AlignSelf.AUTO);
})(AlignSelf = exports.AlignSelf || (exports.AlignSelf = {}));
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var FlexboxLayoutBase = function(_super) {
__extends(FlexboxLayoutBase, _super);
function FlexboxLayoutBase() {
_super.call(this);
}
Object.defineProperty(FlexboxLayoutBase.prototype, "flexDirection", {
get: function() {
return this.style._getValue(exports.flexDirectionProperty);
},
set: function(value) {
this.style._setValue(exports.flexDirectionProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "flexWrap", {
get: function() {
return this.style._getValue(exports.flexWrapProperty);
},
set: function(value) {
this.style._setValue(exports.flexWrapProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "justifyContent", {
get: function() {
return this.style._getValue(exports.justifyContentProperty);
},
set: function(value) {
this.style._setValue(exports.justifyContentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignItems", {
get: function() {
return this.style._getValue(exports.alignItemsProperty);
},
set: function(value) {
this.style._setValue(exports.alignItemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignContent", {
get: function() {
return this.style._getValue(exports.alignContentProperty);
},
set: function(value) {
this.style._setValue(exports.alignContentProperty, value);
},
enumerable: true,
configurable: true
});
FlexboxLayoutBase.setOrder = function(view, order) {
validateArgs(view).style._setValue(exports.orderProperty, order);
};
FlexboxLayoutBase.getOrder = function(view) {
return validateArgs(view).style._getValue(exports.orderProperty);
};
FlexboxLayoutBase.setFlexGrow = function(view, grow) {
validateArgs(view).style._setValue(exports.flexGrowProperty, grow);
};
FlexboxLayoutBase.getFlexGrow = function(view) {
return validateArgs(view).style._getValue(exports.flexGrowProperty);
};
FlexboxLayoutBase.setFlexShrink = function(view, shrink) {
validateArgs(view).style._setValue(exports.flexShrinkProperty, shrink);
};
FlexboxLayoutBase.getFlexShrink = function(view) {
return validateArgs(view).style._getValue(exports.flexShrinkProperty);
};
FlexboxLayoutBase.setAlignSelf = function(view, align) {
validateArgs(view).style._setValue(exports.alignSelfProperty, align);
};
FlexboxLayoutBase.getAlignSelf = function(view) {
return validateArgs(view).style._getValue(exports.alignSelfProperty);
};
FlexboxLayoutBase.setFlexWrapBefore = function(view, wrap) {
validateArgs(view).style._setValue(exports.flexWrapBeforeProperty, wrap);
};
FlexboxLayoutBase.getFlexWrapBefore = function(view) {
return validateArgs(view).style._getValue(exports.flexWrapBeforeProperty);
};
return FlexboxLayoutBase;
}(layout_base_1.LayoutBase);
exports.FlexboxLayoutBase = FlexboxLayoutBase;
var flexboxAffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
exports.flexDirectionProperty = new styleProperty.Property("flexDirection", "flex-direction", new proxy_1.PropertyMetadata(FlexDirection.ROW, flexboxAffectsLayout, undefined, FlexDirection.isValid), FlexDirection.parse);
exports.flexWrapProperty = new styleProperty.Property("flexWrap", "flex-wrap", new proxy_1.PropertyMetadata(FlexWrap.NOWRAP, flexboxAffectsLayout, undefined, FlexWrap.isValid), FlexWrap.parse);
exports.justifyContentProperty = new styleProperty.Property("justifyContent", "justify-content", new proxy_1.PropertyMetadata(JustifyContent.FLEX_START, flexboxAffectsLayout, undefined, JustifyContent.isValid), JustifyContent.parse);
exports.alignItemsProperty = new styleProperty.Property("alignItems", "align-items", new proxy_1.PropertyMetadata(AlignItems.STRETCH, flexboxAffectsLayout, undefined, AlignItems.isValid), AlignItems.parse);
exports.alignContentProperty = new styleProperty.Property("alignContent", "align-content", new proxy_1.PropertyMetadata(AlignContent.STRETCH, flexboxAffectsLayout, undefined, AlignContent.isValid), AlignContent.parse);
exports.orderProperty = new styleProperty.Property("order", "order", new proxy_1.PropertyMetadata(ORDER_DEFAULT, dependency_observable_1.PropertyMetadataSettings.None, undefined, Order.isValid), Order.parse);
exports.flexGrowProperty = new styleProperty.Property("flexGrow", "flex-grow", new proxy_1.PropertyMetadata(FLEX_GROW_DEFAULT, dependency_observable_1.PropertyMetadataSettings.None, undefined, FlexGrow.isValid), FlexGrow.parse);
exports.flexShrinkProperty = new styleProperty.Property("flexShrink", "flex-shrink", new proxy_1.PropertyMetadata(FLEX_SHRINK_DEFAULT, dependency_observable_1.PropertyMetadataSettings.None, undefined, FlexShrink.isValid), FlexShrink.parse);
exports.flexWrapBeforeProperty = new styleProperty.Property("flexWrapBefore", "flex-wrap-before", new proxy_1.PropertyMetadata(false, dependency_observable_1.PropertyMetadataSettings.None, undefined, FlexWrapBefore.isValid), FlexWrapBefore.parse);
exports.alignSelfProperty = new styleProperty.Property("alignSelf", "align-self", new proxy_1.PropertyMetadata(AlignSelf.AUTO, dependency_observable_1.PropertyMetadataSettings.None, undefined, AlignSelf.isValid), AlignSelf.parse);
special_properties_1.registerSpecialProperty("order", function(instance, propertyValue) {
FlexboxLayoutBase.setOrder(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("flexGrow", function(instance, propertyValue) {
FlexboxLayoutBase.setFlexGrow(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("flexShrink", function(instance, propertyValue) {
FlexboxLayoutBase.setFlexShrink(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("alignSelf", function(instance, propertyValue) {
FlexboxLayoutBase.setAlignSelf(instance, propertyValue);
});
special_properties_1.registerSpecialProperty("flexWrapBefore", function(instance, propertyValue) {
FlexboxLayoutBase.setFlexWrapBefore(instance, types_1.isString(propertyValue) ? FlexWrapBefore.parse(propertyValue) : propertyValue);
});
var flexboxGuard = function(handler) {
return function(view, newValue) {
return view instanceof FlexboxLayoutBase ? handler(view, newValue) : void 0;
};
};
style.registerHandler(exports.flexDirectionProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexDirection(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexDirection(FlexDirection.ROW);
})), "FlexboxLayout");
style.registerHandler(exports.flexWrapProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexWrap(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexWrap(FlexWrap.NOWRAP);
})), "FlexboxLayout");
style.registerHandler(exports.justifyContentProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeJustifyContent(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeJustifyContent(JustifyContent.FLEX_START);
})), "FlexboxLayout");
style.registerHandler(exports.alignItemsProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignItems(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignItems(AlignItems.STRETCH);
})), "FlexboxLayout");
style.registerHandler(exports.alignContentProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignContent(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignContent(AlignContent.STRETCH);
})), "FlexboxLayout");
style.registerHandler(exports.orderProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeOrderPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeOrderPropertyChanged(view, 1);
}), "View");
style.registerHandler(exports.flexGrowProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeFlexGrowPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeFlexGrowPropertyChanged(view, 0);
}), "View");
style.registerHandler(exports.flexShrinkProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeFlexShrinkPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeFlexShrinkPropertyChanged(view, 1);
}), "View");
style.registerHandler(exports.flexWrapBeforeProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeFlexWrapBeforePropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeFlexWrapBeforePropertyChanged(view, false);
}), "View");
style.registerHandler(exports.alignSelfProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeAlignSelfPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeAlignSelfPropertyChanged(view, AlignSelf.AUTO);
}), "View");
styleProperty.registerShorthandCallback("flex-flow", function(value) {
var properties = [];
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length >= 1 && FlexDirection.isValid(values[0])) {
properties.push({
property: exports.flexDirectionProperty,
value: FlexDirection.parse(values[0])
});
}
if (value.length >= 2 && FlexWrap.isValid(values[1])) {
properties.push({
property: exports.flexWrapProperty,
value: FlexWrap.parse(values[1])
});
}
}
return properties;
});
styleProperty.registerShorthandCallback("flex", function(value) {
var properties = [];
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length === 1) {
switch (values[0]) {
case "inital":
properties.push({
property: exports.flexGrowProperty,
value: 0
});
properties.push({
property: exports.flexShrinkProperty,
value: 1
});
break;

case "auto":
properties.push({
property: exports.flexGrowProperty,
value: 1
});
properties.push({
property: exports.flexShrinkProperty,
value: 1
});
break;

case "none":
properties.push({
property: exports.flexGrowProperty,
value: 0
});
properties.push({
property: exports.flexShrinkProperty,
value: 0
});
break;

default:
if (FlexGrow.isValid(values[0])) {
properties.push({
property: exports.flexGrowProperty,
value: FlexGrow.parse(values[0])
});
properties.push({
property: exports.flexShrinkProperty,
value: 1
});
}
}
}
if (values.length >= 2) {
if (FlexGrow.isValid(values[0]) && FlexShrink.isValid(values[1])) {
properties.push({
property: exports.flexGrowProperty,
value: FlexGrow.parse(values[0])
});
properties.push({
property: exports.flexShrinkProperty,
value: FlexShrink.parse(values[1])
});
}
}
}
return properties;
});
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var types_1 = __webpack_require__(14);
var platform_1 = __webpack_require__(49);
var lazy_1 = __webpack_require__(42);
var trace = __webpack_require__(31);
var slideTransition;
function ensureSlideTransition() {
if (!slideTransition) {
slideTransition = __webpack_require__(145);
}
}
var fadeTransition;
function ensureFadeTransition() {
if (!fadeTransition) {
fadeTransition = __webpack_require__(146);
}
}
var flipTransition;
function ensureFlipTransition() {
if (!flipTransition) {
flipTransition = __webpack_require__(147);
}
}
var animation;
function ensureAnimationModule() {
if (!animation) {
animation = __webpack_require__(40);
}
}
var _sdkVersion = lazy_1.default(function() {
return parseInt(platform_1.device.sdkVersion);
});
var _defaultInterpolator = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var enterFakeResourceId = -10;
var exitFakeResourceId = -20;
var popEnterFakeResourceId = -30;
var popExitFakeResourceId = -40;
var AndroidTransitionType;
(function(AndroidTransitionType) {
AndroidTransitionType.enter = "enter";
AndroidTransitionType.exit = "exit";
AndroidTransitionType.popEnter = "popEnter";
AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));
function _clearBackwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.enterPopExitTransition) {
if (trace.enabled) {
trace.write("Cleared enterPopExitTransition " + expandedFragment.enterPopExitTransition + " for " + fragment, trace.categories.Transition);
}
if (expandedFragment.enterPopExitTransitionListener) {
expandedFragment.enterPopExitTransitionListener.remove();
}
expandedFragment.enterPopExitTransition = undefined;
}
if (_sdkVersion() >= 21) {
var enterTransition = fragment.getEnterTransition();
if (enterTransition) {
if (trace.enabled) {
trace.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (enterTransition.transitionListener) {
enterTransition.transitionListener.remove();
}
fragment.setEnterTransition(null);
}
var returnTransition = fragment.getReturnTransition();
if (returnTransition) {
if (trace.enabled) {
trace.write("Cleared Pop Exit " + returnTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (returnTransition.transitionListener) {
returnTransition.transitionListener.remove();
}
fragment.setReturnTransition(null);
}
}
}
exports._clearBackwardTransitions = _clearBackwardTransitions;
function _clearForwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.exitPopEnterTransition) {
if (trace.enabled) {
trace.write("Cleared exitPopEnterTransition " + expandedFragment.exitPopEnterTransition + " for " + fragment, trace.categories.Transition);
}
if (expandedFragment.exitPopEnterTransitionListener) {
expandedFragment.exitPopEnterTransitionListener.remove();
}
expandedFragment.exitPopEnterTransition = undefined;
}
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
if (exitTransition) {
if (trace.enabled) {
trace.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (exitTransition.transitionListener) {
exitTransition.transitionListener.remove();
}
fragment.setExitTransition(null);
}
var reenterTransition = fragment.getReenterTransition();
if (reenterTransition) {
if (trace.enabled) {
trace.write("Cleared Pop Enter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (reenterTransition.transitionListener) {
reenterTransition.transitionListener.remove();
}
fragment.setReenterTransition(null);
}
}
}
exports._clearForwardTransitions = _clearForwardTransitions;
function _setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction) {
trace.write("Setting Android Fragment Transitions...", trace.categories.Transition);
var name;
if (navigationTransition.name) {
name = navigationTransition.name.toLowerCase();
}
var useLollipopTransition = name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && _sdkVersion() >= 21;
if (frame_1.topmost().android.cachePagesOnNavigate && _sdkVersion() === 23) {
useLollipopTransition = false;
}
if (useLollipopTransition) {
newFragment.setAllowEnterTransitionOverlap(true);
newFragment.setAllowReturnTransitionOverlap(true);
if (currentFragment) {
currentFragment.setAllowEnterTransitionOverlap(true);
currentFragment.setAllowReturnTransitionOverlap(true);
}
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
switch (direction) {
case "left":
var rightEdge = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge);
_addNativeTransitionListener(newFragment, rightEdge);
newFragment.setEnterTransition(rightEdge);
if (currentFragment) {
var leftEdge_1 = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge_1);
_addNativeTransitionListener(currentFragment, leftEdge_1);
currentFragment.setExitTransition(leftEdge_1);
}
break;

case "right":
var leftEdge = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge);
_addNativeTransitionListener(newFragment, leftEdge);
newFragment.setEnterTransition(leftEdge);
if (currentFragment) {
var rightEdge_1 = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge_1);
_addNativeTransitionListener(currentFragment, rightEdge_1);
currentFragment.setExitTransition(rightEdge_1);
}
break;

case "top":
var bottomEdge = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge);
_addNativeTransitionListener(newFragment, bottomEdge);
newFragment.setEnterTransition(bottomEdge);
if (currentFragment) {
var topEdge_1 = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge_1);
_addNativeTransitionListener(currentFragment, topEdge_1);
currentFragment.setExitTransition(topEdge_1);
}
break;

case "bottom":
var topEdge = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge);
_addNativeTransitionListener(newFragment, topEdge);
newFragment.setEnterTransition(topEdge);
if (currentFragment) {
var bottomEdge_1 = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge_1);
_addNativeTransitionListener(currentFragment, bottomEdge_1);
currentFragment.setExitTransition(bottomEdge_1);
}
break;
}
} else if (name === "fade") {
var fadeEnter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeEnter);
_addNativeTransitionListener(newFragment, fadeEnter);
newFragment.setEnterTransition(fadeEnter);
var fadeReturn = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeReturn);
_addNativeTransitionListener(newFragment, fadeReturn);
newFragment.setReturnTransition(fadeReturn);
if (currentFragment) {
var fadeExit = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeExit);
_addNativeTransitionListener(currentFragment, fadeExit);
currentFragment.setExitTransition(fadeExit);
var fadeReenter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeReenter);
_addNativeTransitionListener(currentFragment, fadeReenter);
currentFragment.setReenterTransition(fadeReenter);
}
} else if (name === "explode") {
var explodeEnter = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeEnter);
_addNativeTransitionListener(newFragment, explodeEnter);
newFragment.setEnterTransition(explodeEnter);
if (currentFragment) {
var explodeExit = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeExit);
_addNativeTransitionListener(currentFragment, explodeExit);
currentFragment.setExitTransition(explodeExit);
}
}
} else {
var transition = void 0;
if (name) {
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
ensureSlideTransition();
transition = new slideTransition.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
} else if (name === "fade") {
ensureFadeTransition();
transition = new fadeTransition.FadeTransition(navigationTransition.duration, navigationTransition.curve);
} else if (name.indexOf("flip") === 0) {
var direction = name.substr("flip".length) || "right";
ensureFlipTransition();
transition = new flipTransition.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
}
} else {
transition = navigationTransition.instance;
}
if (transition) {
var newExpandedFragment = newFragment;
newExpandedFragment.enterPopExitTransition = transition;
if (currentFragment) {
var currentExpandedFragment = currentFragment;
currentExpandedFragment.exitPopEnterTransition = transition;
}
fragmentTransaction.setCustomAnimations(enterFakeResourceId, exitFakeResourceId, popEnterFakeResourceId, popExitFakeResourceId);
}
}
_printTransitions(currentFragment);
_printTransitions(newFragment);
}
exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;
function _setUpNativeTransition(navigationTransition, nativeTransition) {
if (navigationTransition.duration) {
nativeTransition.setDuration(navigationTransition.duration);
}
if (navigationTransition.curve) {
ensureAnimationModule();
var interpolator = animation._resolveAnimationCurve(navigationTransition.curve);
nativeTransition.setInterpolator(interpolator);
} else {
nativeTransition.setInterpolator(_defaultInterpolator());
}
}
function _onFragmentShown(fragment, isBack) {
if (trace.enabled) {
trace.write("_onFragmentShown(" + fragment + ", isBack: " + isBack + ")", trace.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Enter" : "Enter";
var relevantTransition = isBack ? expandedFragment.exitPopEnterTransition : expandedFragment.enterPopExitTransition;
if (relevantTransition) {
if (trace.enabled) {
trace.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page addition when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReenterTransition() : fragment.getEnterTransition();
if (nativeTransition) {
if (trace.enabled) {
trace.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page addition when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
}
}
if (!expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, isBack);
}
}
exports._onFragmentShown = _onFragmentShown;
function _onFragmentHidden(fragment, isBack, destroyed) {
if (trace.enabled) {
trace.write("_onFragmentHidden(" + fragment + ", isBack: " + isBack + ", destroyed: " + destroyed + ")", trace.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Exit" : "Exit";
var relevantTransition = isBack ? expandedFragment.enterPopExitTransition : expandedFragment.exitPopEnterTransition;
if (relevantTransition) {
if (trace.enabled) {
trace.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page removal when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReturnTransition() : fragment.getExitTransition();
if (nativeTransition) {
if (trace.enabled) {
trace.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page removal when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
}
}
expandedFragment.isDestroyed = destroyed;
if (expandedFragment.completePageRemovalWhenTransitionEnds === undefined) {
_completePageRemoval(fragment, isBack);
}
}
exports._onFragmentHidden = _onFragmentHidden;
function _completePageAddition(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageAdditionWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace.enabled) {
trace.write("STARTING ADDITION of " + page + "...", trace.categories.Transition);
}
frame._currentEntry = entry;
page.onNavigatedTo(isBack);
frame._processNavigationQueue(page);
entry.isNavigation = undefined;
if (trace.enabled) {
trace.write("ADDITION of " + page + " completed", trace.categories.Transition);
}
}
function _completePageRemoval(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageRemovalWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace.enabled) {
trace.write("STARTING REMOVAL of " + page + "...", trace.categories.Transition);
}
if (page.frame) {
frame._removeView(page);
if (entry.isNavigation) {
page.onNavigatedFrom(isBack);
}
if (trace.enabled) {
trace.write("REMOVAL of " + page + " completed", trace.categories.Transition);
}
} else {
if (trace.enabled) {
trace.write("REMOVAL of " + page + " has already been done", trace.categories.Transition);
}
}
if (expandedFragment.isDestroyed) {
expandedFragment.isDestroyed = undefined;
if (page._context) {
page._onDetached(true);
if (trace.enabled) {
trace.write("DETACHMENT of " + page + " completed", trace.categories.Transition);
}
} else {
if (trace.enabled) {
trace.write("DETACHMENT of " + page + " has already been done", trace.categories.Transition);
}
_removePageNativeViewFromAndroidParent(page);
}
}
entry.isNavigation = undefined;
}
function _removePageNativeViewFromAndroidParent(page) {
if (page._nativeView && page._nativeView.getParent) {
var androidParent = page._nativeView.getParent();
if (androidParent && androidParent.removeView) {
if (trace.enabled) {
trace.write("REMOVED " + page + "._nativeView from its Android parent", trace.categories.Transition);
}
page._onDetached(true);
androidParent.removeView(page._nativeView);
}
}
}
exports._removePageNativeViewFromAndroidParent = _removePageNativeViewFromAndroidParent;
function _toShortString(nativeTransition) {
return nativeTransition.getClass().getSimpleName() + "@" + nativeTransition.hashCode().toString(16);
}
function _addNativeTransitionListener(fragment, nativeTransition) {
var transitionListener = new android.transition.Transition.TransitionListener({
onTransitionCancel: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace.enabled) {
trace.write("CANCEL " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionEnd: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace.enabled) {
trace.write("END " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionPause: function(transition) {
var expandedFragment = this.fragment;
if (trace.enabled) {
trace.write("PAUSE " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
},
onTransitionResume: function(transition) {
var expandedFragment = this.fragment;
if (trace.enabled) {
trace.write("RESUME " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
},
onTransitionStart: function(transition) {
var expandedFragment = this.fragment;
if (trace.enabled) {
trace.write("START " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
}
});
transitionListener.fragment = fragment;
transitionListener.count = 2;
transitionListener.transition = nativeTransition;
transitionListener.listener = transitionListener;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.transition.removeListener(this.listener);
this.fragment = null;
this.listener = null;
this.transition.transitionListener = null;
this.transition = null;
};
nativeTransition.addListener(transitionListener);
nativeTransition.transitionListener = transitionListener;
}
function _onFragmentCreateAnimator(fragment, nextAnim) {
var transitionType;
switch (nextAnim) {
case enterFakeResourceId:
transitionType = AndroidTransitionType.enter;
break;

case exitFakeResourceId:
transitionType = AndroidTransitionType.exit;
break;

case popEnterFakeResourceId:
transitionType = AndroidTransitionType.popEnter;
break;

case popExitFakeResourceId:
transitionType = AndroidTransitionType.popExit;
break;
}
if ((nextAnim === popExitFakeResourceId || !nextAnim) && fragment.exitHack) {
trace.write("HACK EXIT FOR " + fragment, trace.categories.Transition);
transitionType = AndroidTransitionType.exit;
}
var transition;
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
transition = fragment.enterPopExitTransition;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
transition = fragment.exitPopEnterTransition;
break;
}
var animator;
if (transition) {
animator = transition.createAndroidAnimator(transitionType);
trace.write(transition + ".createAndroidAnimator(" + transitionType + "): " + animator, trace.categories.Transition);
var transitionListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (trace.enabled) {
trace.write("START " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
},
onAnimationRepeat: function(animator) {
if (trace.enabled) {
trace.write("REPEAT " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
},
onAnimationEnd: function(animator) {
if (trace.enabled) {
trace.write("END " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onAnimationCancel: function(animator) {
if (trace.enabled) {
trace.write("CANCEL " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
}
});
transitionListener.fragment = fragment;
transitionListener.transitionType = transitionType;
transitionListener.count = 2;
transitionListener.listener = transitionListener;
transitionListener.animator = animator;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.animator.removeListener(this.listener);
switch (this.transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
this.fragment.enterPopExitTransitionListener = null;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
this.fragment.exitPopEnterTransitionListener = null;
break;
}
this.transitionType = null;
this.fragment = null;
this.listener = null;
this.animator.transitionListener = null;
this.animator = null;
this.transitionType = null;
};
animator.transitionListener = transitionListener;
animator.addListener(transitionListener);
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
fragment.enterPopExitTransitionListener = transitionListener;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
fragment.exitPopEnterTransitionListener = transitionListener;
break;
}
}
if (transitionType && !animator) {
animator = _createDummyZeroDurationAnimator();
}
return animator;
}
exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;
function _prepareCurrentFragmentForClearHistory(fragment) {
trace.write("Preparing " + fragment + " transitions fro clear history...", trace.categories.Transition);
var expandedFragment = fragment;
expandedFragment.exitHack = true;
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
fragment.setReturnTransition(exitTransition);
}
_printTransitions(fragment);
}
exports._prepareCurrentFragmentForClearHistory = _prepareCurrentFragmentForClearHistory;
var intEvaluator;
function ensureIntEvaluator() {
if (!intEvaluator) {
intEvaluator = new android.animation.IntEvaluator();
}
}
function _createDummyZeroDurationAnimator() {
if (trace.enabled) {
trace.write("_createDummyZeroDurationAnimator()", trace.categories.Transition);
}
ensureIntEvaluator();
var nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = java.lang.Integer.valueOf(0);
nativeArray[1] = java.lang.Integer.valueOf(1);
var animator = android.animation.ValueAnimator.ofObject(intEvaluator, nativeArray);
animator.setDuration(0);
return animator;
}
function _printTransitions(f) {
if (f && trace.enabled) {
var ef = f;
var result = ef + " Transitions:";
result += "" + (ef.enterPopExitTransition ? " enterPopExit=" + ef.enterPopExitTransition : "");
result += "" + (ef.exitPopEnterTransition ? " exitPopEnter=" + ef.exitPopEnterTransition : "");
if (_sdkVersion() >= 21) {
result += "" + (f.getEnterTransition() ? " enter=" + _toShortString(f.getEnterTransition()) : "");
result += "" + (f.getExitTransition() ? " exit=" + _toShortString(f.getExitTransition()) : "");
result += "" + (f.getReenterTransition() ? " popEnter=" + _toShortString(f.getReenterTransition()) : "");
result += "" + (f.getReturnTransition() ? " popExit=" + _toShortString(f.getReturnTransition()) : "");
}
trace.write(result, trace.categories.Transition);
}
}
var Transition = function() {
function Transition(duration, curve) {
this._duration = duration;
if (curve) {
var animation_1 = __webpack_require__(40);
this._interpolator = animation_1._resolveAnimationCurve(curve);
} else {
this._interpolator = _defaultInterpolator();
}
this._id = Transition.transitionId++;
}
Transition.prototype.getDuration = function() {
return this._duration;
};
Transition.prototype.getCurve = function() {
return this._interpolator;
};
Transition.prototype.animateIOSTransition = function(containerView, fromView, toView, operation, completion) {
throw new Error("Abstract method call");
};
Transition.prototype.createAndroidAnimator = function(transitionType) {
throw new Error("Abstract method call");
};
Transition.prototype.toString = function() {
return types_1.getClass(this) + "@" + this._id;
};
Transition.transitionId = 0;
return Transition;
}();
exports.Transition = Transition;
}, function(module, exports, __webpack_require__) {
var transition = __webpack_require__(144);
var platform = __webpack_require__(49);
var lazy_1 = __webpack_require__(42);
var screenWidth = lazy_1.default(function() {
return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function() {
return platform.screen.mainScreen.heightPixels;
});
var SlideTransition = function(_super) {
__extends(SlideTransition, _super);
function SlideTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
SlideTransition.prototype.createAndroidAnimator = function(transitionType) {
var translationValues = Array.create("float", 2);
switch (this._direction) {
case "left":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;
}
break;

case "right":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;
}
break;

case "top":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;
}
break;

case "bottom":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;
}
break;
}
var prop;
if (this._direction === "left" || this._direction === "right") {
prop = "translationX";
} else {
prop = "translationY";
}
var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
SlideTransition.prototype.toString = function() {
return _super.prototype.toString.call(this) + " " + this._direction;
};
return SlideTransition;
}(transition.Transition);
exports.SlideTransition = SlideTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(144);
var FadeTransition = function(_super) {
__extends(FadeTransition, _super);
function FadeTransition() {
_super.apply(this, arguments);
}
FadeTransition.prototype.createAndroidAnimator = function(transitionType) {
var alphaValues = Array.create("float", 2);
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
case transition_1.AndroidTransitionType.popEnter:
alphaValues[0] = 0;
alphaValues[1] = 1;
break;

case transition_1.AndroidTransitionType.exit:
case transition_1.AndroidTransitionType.popExit:
alphaValues[0] = 1;
alphaValues[1] = 0;
break;
}
var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return FadeTransition;
}(transition_1.Transition);
exports.FadeTransition = FadeTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(144);
var FlipTransition = function(_super) {
__extends(FlipTransition, _super);
function FlipTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
FlipTransition.prototype.createAndroidAnimator = function(transitionType) {
var objectAnimators;
var values;
var animator;
var animatorSet = new android.animation.AnimatorSet();
var fullDuration = this.getDuration() || 300;
var interpolator = this.getCurve();
var rotationY = this._direction === "right" ? 180 : -180;
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.exit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = -rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;

case transition_1.AndroidTransitionType.popEnter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = -rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.popExit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;
}
animatorSet.playTogether(objectAnimators);
return animatorSet;
};
return FlipTransition;
}(transition_1.Transition);
exports.FlipTransition = FlipTransition;
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var FragmentClass = function(_super) {
__extends(FragmentClass, _super);
function FragmentClass() {
_super.call(this);
return global.__native(this);
}
FragmentClass.prototype.onHiddenChanged = function(hidden) {
this._callbacks.onHiddenChanged(this, hidden, _super.prototype.onHiddenChanged);
};
FragmentClass.prototype.onCreateAnimator = function(transit, enter, nextAnim) {
var result = this._callbacks.onCreateAnimator(this, transit, enter, nextAnim, _super.prototype.onCreateAnimator);
return result;
};
FragmentClass.prototype.onCreate = function(savedInstanceState) {
if (!this._callbacks) {
frame_1.setFragmentCallbacks(this);
}
this.setHasOptionsMenu(true);
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
FragmentClass.prototype.onCreateView = function(inflater, container, savedInstanceState) {
var result = this._callbacks.onCreateView(this, inflater, container, savedInstanceState, _super.prototype.onCreateView);
return result;
};
FragmentClass.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
FragmentClass.prototype.onDestroyView = function() {
this._callbacks.onDestroyView(this, _super.prototype.onDestroyView);
};
FragmentClass.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
FragmentClass.prototype.toString = function() {
return this._callbacks.toStringOverride(this, _super.prototype.toString);
};
FragmentClass = __decorate([ JavaProxy("com.tns.FragmentClass") ], FragmentClass);
return FragmentClass;
}(android.app.Fragment);
frame_1.setFragmentClass(FragmentClass);
}, function(module, exports, __webpack_require__) {
var http = __webpack_require__(55);
var types = __webpack_require__(14);
var XMLHttpRequestResponseType;
(function(XMLHttpRequestResponseType) {
XMLHttpRequestResponseType.empty = "";
XMLHttpRequestResponseType.text = "text";
XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));
var XMLHttpRequest = function() {
function XMLHttpRequest() {
this.UNSENT = 0;
this.OPENED = 1;
this.HEADERS_RECEIVED = 2;
this.LOADING = 3;
this.DONE = 4;
this._responseType = "";
this.textTypes = [ "text/plain", "application/xml", "text/html" ];
this._listeners = new Map();
this._readyState = this.UNSENT;
}
XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
if (types.isString(method) && types.isString(url)) {
this._options = {
url: url,
method: method
};
this._options.headers = {};
if (types.isString(user)) {
this._options.headers["user"] = user;
}
if (types.isString(password)) {
this._options.headers["password"] = password;
}
this._setReadyState(this.OPENED);
}
};
XMLHttpRequest.prototype.abort = function() {
this._errorFlag = true;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
this._readyState = this.UNSENT;
} else {
this._setReadyState(this.DONE);
}
};
XMLHttpRequest.prototype.send = function(data) {
var _this = this;
this._errorFlag = false;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (types.isDefined(this._options)) {
if (types.isString(data) && this._options.method !== "GET") {
this._options.content = data;
} else if (data instanceof FormData) {
this._options.content = data.toString();
}
http.request(this._options).then(function(r) {
if (!_this._errorFlag) {
_this._loadResponse(r);
}
}).catch(function(e) {
_this._errorFlag = true;
_this._setReadyState(_this.DONE, e);
});
}
};
XMLHttpRequest.prototype._loadResponse = function(r) {
this._status = r.statusCode;
this._response = r.content.raw + "";
this._headers = r.headers;
this._setReadyState(this.HEADERS_RECEIVED);
this._setReadyState(this.LOADING);
this._setResponseType();
this._responseTextReader = function() {
return r.content.toString();
};
this._addToStringOnResponse();
if (this.responseType === XMLHttpRequestResponseType.json) {
this._response = JSON.parse(this.responseText);
} else if (this.responseType === XMLHttpRequestResponseType.text) {
this._response = this.responseText;
}
this._setReadyState(this.DONE);
};
XMLHttpRequest.prototype._addToStringOnResponse = function() {
var _this = this;
if (types.isObject(this.response)) {
Object.defineProperty(this._response, "toString", {
configurable: true,
enumerable: false,
writable: true,
value: function() {
return _this.responseText;
}
});
}
};
XMLHttpRequest.prototype.isTextContentType = function(contentType) {
var result = false;
for (var i = 0; i < this.textTypes.length; i++) {
if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
result = true;
break;
}
}
return result;
};
XMLHttpRequest.prototype._setResponseType = function() {
var header = this.getResponseHeader("Content-Type");
var contentType = header && header.toLowerCase();
if (contentType) {
if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
this.responseType = XMLHttpRequestResponseType.json;
} else if (this.isTextContentType(contentType)) {
this.responseType = XMLHttpRequestResponseType.text;
}
} else {
this.responseType = XMLHttpRequestResponseType.text;
}
};
XMLHttpRequest.prototype.addEventListener = function(eventName, handler) {
if (eventName !== "load" && eventName !== "error") {
throw new Error("Event not supported: " + eventName);
}
var handlers = this._listeners.get(eventName) || [];
handlers.push(handler);
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.removeEventListener = function(eventName, toDetach) {
var handlers = this._listeners.get(eventName) || [];
handlers = handlers.filter(function(handler) {
return handler !== toDetach;
});
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.emitEvent = function(eventName) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var handlers = this._listeners.get(eventName) || [];
handlers.forEach(function(handler) {
handler.apply(void 0, args);
});
};
XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
this._options.headers[header] = value;
}
};
XMLHttpRequest.prototype.getAllResponseHeaders = function() {
if (this._readyState < 2 || this._errorFlag) {
return "";
}
var result = "";
for (var i in this._headers) {
if (i !== "set-cookie" && i !== "set-cookie2") {
result += i + ": " + this._headers[i] + "\r\n";
}
}
return result.substr(0, result.length - 2);
};
XMLHttpRequest.prototype.getResponseHeader = function(header) {
if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
header = header.toLowerCase();
for (var i in this._headers) {
if (i.toLowerCase() === header) {
return this._headers[i];
}
}
}
return null;
};
XMLHttpRequest.prototype.overrideMimeType = function(mime) {};
Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
get: function() {
return this._readyState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
get: function() {
return this._responseType;
},
set: function(value) {
if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
this._responseType = value;
} else {
throw new Error("Response type of '" + value + "' not supported.");
}
},
enumerable: true,
configurable: true
});
XMLHttpRequest.prototype._setReadyState = function(value, error) {
if (this._readyState !== value) {
this._readyState = value;
if (types.isFunction(this.onreadystatechange)) {
this.onreadystatechange();
}
}
if (this._readyState === this.DONE) {
if (this._errorFlag) {
if (types.isFunction(this.onerror)) {
this.onerror(error);
}
this.emitEvent("error", error);
} else {
if (types.isFunction(this.onload)) {
this.onload();
}
this.emitEvent("load");
}
}
};
Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
get: function() {
if (types.isFunction(this._responseTextReader)) {
return this._responseTextReader();
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "response", {
get: function() {
return this._response;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
get: function() {
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
return "";
}
return statuses[this._status];
},
enumerable: true,
configurable: true
});
return XMLHttpRequest;
}();
exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
100: "Continue",
101: "Switching Protocols",
200: "OK",
201: "Created",
202: "Accepted",
203: "Non - Authoritative Information",
204: "No Content",
205: "Reset Content",
206: "Partial Content",
300: "Multiple Choices",
301: "Moved Permanently",
302: "Found",
303: "See Other",
304: "Not Modified",
305: "Use Proxy",
307: "Temporary Redirect",
400: "Bad Request",
401: "Unauthorized",
402: "Payment Required",
403: "Forbidden",
404: "Not Found",
405: "Method Not Allowed",
406: "Not Acceptable",
407: "Proxy Authentication Required",
408: "Request Timeout",
409: "Conflict",
410: "Gone",
411: "Length Required",
412: "Precondition Failed",
413: "Request Entity Too Large",
414: "Request - URI Too Long",
415: "Unsupported Media Type",
416: "Requested Range Not Satisfiable",
417: "Expectation Failed",
500: "Internal Server Error",
501: "Not Implemented",
502: "Bad Gateway",
503: "Service Unavailable",
504: "Gateway Timeout",
505: "HTTP Version Not Supported"
};
var FormData = function() {
function FormData() {
this._data = new Map();
}
FormData.prototype.append = function(name, value) {
this._data.set(name, value);
};
FormData.prototype.toString = function() {
var arr = new Array();
this._data.forEach(function(value, name, map) {
arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
});
return arr.join("&");
};
return FormData;
}();
exports.FormData = FormData;
}, function(module, exports, __webpack_require__) {
(function() {
"use strict";
exports.XMLHttpRequest = global.XMLHttpRequest;
exports.FormData = global.FormData;
if (!exports.XMLHttpRequest) {
var xhr = __webpack_require__(149);
exports.XMLHttpRequest = xhr.XMLHttpRequest;
exports.FormData = xhr.FormData;
}
function normalizeName(name) {
if (typeof name !== "string") {
name = name.toString();
}
if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
throw new TypeError("Invalid character in header field name");
}
return name.toLowerCase();
}
function normalizeValue(value) {
if (typeof value !== "string") {
value = value.toString();
}
return value;
}
function Headers(headers) {
this.map = {};
if (headers instanceof Headers) {
headers.forEach(function(value, name) {
this.append(name, value);
}, this);
} else if (headers) {
Object.getOwnPropertyNames(headers).forEach(function(name) {
this.append(name, headers[name]);
}, this);
}
}
Headers.prototype.append = function(name, value) {
name = normalizeName(name);
value = normalizeValue(value);
var list = this.map[name];
if (!list) {
list = [];
this.map[name] = list;
}
list.push(value);
};
Headers.prototype["delete"] = function(name) {
delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
var values = this.map[normalizeName(name)];
return values ? values[0] : null;
};
Headers.prototype.getAll = function(name) {
return this.map[normalizeName(name)] || [];
};
Headers.prototype.has = function(name) {
return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
this.map[normalizeName(name)] = [ normalizeValue(value) ];
};
Headers.prototype.forEach = function(callback, thisArg) {
Object.getOwnPropertyNames(this.map).forEach(function(name) {
this.map[name].forEach(function(value) {
callback.call(thisArg, value, name, this);
}, this);
}, this);
};
function consumed(body) {
if (body.bodyUsed) {
return Promise.reject(new TypeError("Already read"));
}
body.bodyUsed = true;
}
function fileReaderReady(reader) {
return new Promise(function(resolve, reject) {
reader.onload = function() {
resolve(reader.result);
};
reader.onerror = function() {
reject(reader.error);
};
});
}
function readBlobAsArrayBuffer(blob) {
var reader = new FileReader();
reader.readAsArrayBuffer(blob);
return fileReaderReady(reader);
}
function readBlobAsText(blob) {
var reader = new FileReader();
reader.readAsText(blob);
return fileReaderReady(reader);
}
var support = {
blob: "FileReader" in exports && "Blob" in exports && function() {
try {
new Blob();
return true;
} catch (e) {
return false;
}
}(),
formData: "FormData" in exports
};
function Body() {
this.bodyUsed = false;
this._initBody = function(body) {
this._bodyInit = body;
if (typeof body === "string") {
this._bodyText = body;
} else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
this._bodyBlob = body;
} else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
this._bodyFormData = body;
} else if (!body) {
this._bodyText = "";
} else {
throw new Error("unsupported BodyInit type");
}
};
if (support.blob) {
this.blob = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return Promise.resolve(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as blob");
} else {
return Promise.resolve(new Blob([ this._bodyText ]));
}
};
this.arrayBuffer = function() {
return this.blob().then(readBlobAsArrayBuffer);
};
this.text = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return readBlobAsText(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as text");
} else {
return Promise.resolve(this._bodyText);
}
};
} else {
this.text = function() {
var rejected = consumed(this);
return rejected ? rejected : Promise.resolve(this._bodyText);
};
}
if (support.formData) {
this.formData = function() {
return this.text().then(decode);
};
}
this.json = function() {
return this.text().then(JSON.parse);
};
return this;
}
var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
function normalizeMethod(method) {
var upcased = method.toUpperCase();
return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(url, options) {
options = options || {};
this.url = url;
this.credentials = options.credentials || "omit";
this.headers = new Headers(options.headers);
this.method = normalizeMethod(options.method || "GET");
this.mode = options.mode || null;
this.referrer = null;
if ((this.method === "GET" || this.method === "HEAD") && options.body) {
throw new TypeError("Body not allowed for GET or HEAD requests");
}
this._initBody(options.body);
}
function decode(body) {
var form = new exports.FormData();
body.trim().split("&").forEach(function(bytes) {
if (bytes) {
var split = bytes.split("=");
var name = split.shift().replace(/\+/g, " ");
var value = split.join("=").replace(/\+/g, " ");
form.append(decodeURIComponent(name), decodeURIComponent(value));
}
});
return form;
}
function headers(xhr) {
var head = new Headers();
var pairs = xhr.getAllResponseHeaders().trim().split("\n");
pairs.forEach(function(header) {
var split = header.trim().split(":");
var key = split.shift().trim();
var value = split.join(":").trim();
head.append(key, value);
});
return head;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
if (!options) {
options = {};
}
this._initBody(bodyInit);
this.type = "default";
this.url = null;
this.status = options.status;
this.ok = this.status >= 200 && this.status < 300;
this.statusText = options.statusText;
this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
this.url = options.url || "";
}
Body.call(Response.prototype);
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.fetch = function(input, init) {
var request;
if (Request.prototype.isPrototypeOf(input) && !init) {
request = input;
} else {
request = new Request(input, init);
}
return new Promise(function(resolve, reject) {
var xhr = new exports.XMLHttpRequest();
function responseURL() {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
xhr.onload = function() {
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status < 100 || status > 599) {
reject(new TypeError("Network request failed"));
return;
}
var options = {
status: status,
statusText: xhr.statusText,
headers: headers(xhr),
url: responseURL()
};
resolve(new Response(xhr.responseText, options));
};
xhr.onerror = function(error) {
reject(new TypeError([ "Network request failed:", error.message ].join(" ")));
};
xhr.open(request.method, request.url, true);
if (request.credentials === "include") {
xhr.withCredentials = true;
}
if ("responseType" in xhr && support.blob) {
xhr.responseType = "blob";
}
request.headers.forEach(function(value, name) {
xhr.setRequestHeader(name, value);
});
xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
});
};
exports.fetch.polyfill = true;
})();
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(31);
var platform = __webpack_require__(49);
var Console = function() {
function Console() {
this.TAG = "JS";
this.dir = this.dump;
this._timers = {};
this._stripFirstTwoLinesRegEx = /^([^\n]*?\n){2}((.|\n)*)$/gim;
}
Console.prototype.sprintf = function(message) {
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgGj])/g;
var a = arguments;
var i = 0;
var format = a[i++];
var pad = function(str, len, chr, leftJustify) {
if (!chr) {
chr = " ";
}
var padding = str.length >= len ? "" : new Array(1 + len - str.length >>> 0).join(chr);
return leftJustify ? str + padding : padding + str;
};
var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {
var diff = minWidth - value.length;
if (diff > 0) {
if (leftJustify || !zeroPad) {
value = pad(value, minWidth, customPadChar, leftJustify);
} else {
value = value.slice(0, prefix.length) + pad("", diff, "0", true) + value.slice(prefix.length);
}
}
return value;
};
var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
var number = value >>> 0;
prefix = prefix && number && {
2: "0b",
8: "0",
16: "0x"
}[base] || "";
value = prefix + pad(number.toString(base), precision || 0, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);
};
var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {
if (precision != null) {
value = value.slice(0, precision);
}
return justify(value, "", leftJustify, minWidth, zeroPad, customPadChar);
};
var that = this;
var doFormat = function(substring, valueIndex, flags, minWidth, _, precision, type) {
var number, prefix, method, textTransform, value;
if (substring === "%%") {
return "%";
}
var leftJustify = false;
var positivePrefix = "";
var zeroPad = false;
var prefixBaseX = false;
var customPadChar = " ";
var flagsl = flags.length;
for (var j = 0; flags && j < flagsl; j++) {
switch (flags.charAt(j)) {
case " ":
positivePrefix = " ";
break;

case "+":
positivePrefix = "+";
break;

case "-":
leftJustify = true;
break;

case "'":
customPadChar = flags.charAt(j + 1);
break;

case "0":
zeroPad = true;
customPadChar = "0";
break;

case "#":
prefixBaseX = true;
break;
}
}
if (!minWidth) {
minWidth = 0;
} else if (minWidth === "*") {
minWidth = +a[i++];
} else if (minWidth.charAt(0) === "*") {
minWidth = +a[minWidth.slice(1, -1)];
} else {
minWidth = +minWidth;
}
if (minWidth < 0) {
minWidth = -minWidth;
leftJustify = true;
}
if (!isFinite(minWidth)) {
throw new Error("sprintf: (minimum-)width must be finite");
}
if (!precision) {
precision = "fFeE".indexOf(type) > -1 ? 6 : type === "d" ? 0 : undefined;
} else if (precision === "*") {
precision = +a[i++];
} else if (precision.charAt(0) === "*") {
precision = +a[precision.slice(1, -1)];
} else {
precision = +precision;
}
value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];
switch (type) {
case "s":
return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);

case "c":
return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);

case "b":
return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "o":
return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "x":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "X":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();

case "u":
return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "i":
case "d":
number = +value || 0;
number = Math.round(number - number % 1);
prefix = number < 0 ? "-" : positivePrefix;
value = prefix + pad(String(Math.abs(number)), precision, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);

case "e":
case "E":
case "f":
case "F":
case "g":
case "G":
number = +value;
prefix = number < 0 ? "-" : positivePrefix;
method = [ "toExponential", "toFixed", "toPrecision" ]["efg".indexOf(type.toLowerCase())];
textTransform = [ "toString", "toUpperCase" ]["eEfFgG".indexOf(type) % 2];
value = prefix + Math.abs(number)[method](precision);
return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();

case "j":
return that.createDump(value);

default:
return substring;
}
};
return format.replace(regex, doFormat);
};
Console.prototype.formatParams = function(message) {
if (arguments.length <= 1) {
return "" + message;
}
var res = this.sprintf.apply(this, arguments);
if (res === message) {
var args = Array.prototype.slice.call(arguments);
return args.join(" ");
}
return res;
};
Console.prototype.timeMillis = function() {
return java.lang.System.nanoTime() / 1e6;
};
Console.prototype.time = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if ("undefined" === typeof this._timers[name] || this._timers.hasOwnProperty(name)) {
this._timers[name] = this.timeMillis();
} else {
this.warn("invalid name for timer console.time(" + reportName + ")");
}
};
Console.prototype.timeEnd = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers.hasOwnProperty(name)) {
var val = this._timers[name];
if (val) {
var time = this.timeMillis();
this.info("console.time(" + reportName + "): %.6f ms", time - val);
this._timers[name] = undefined;
} else {
this.warn("undefined console.time(" + reportName + ")");
}
}
};
Console.prototype.assert = function(test, message) {
var formatParams = [];
for (var _i = 2; _i < arguments.length; _i++) {
formatParams[_i - 2] = arguments[_i];
}
if (!test) {
Array.prototype.shift.apply(arguments);
var formatedMessage = this.formatParams.apply(this, arguments);
this.error(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
}
};
Console.prototype.info = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
this.logMessage(this.formatParams.apply(this, arguments), trace.messageType.info);
};
Console.prototype.warn = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.warn);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "warning");
}
};
Console.prototype.error = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
};
Console.prototype.log = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.log);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "log");
}
};
Console.prototype.logMessage = function(message, messageType) {
if (!global.android) {
return;
}
var arrayToLog = [];
if (message.length > 4e3) {
var i;
for (i = 0; i * 4e3 < message.length; i++) {
arrayToLog.push(message.substr(i * 4e3, 4e3));
}
} else {
arrayToLog.push(message);
}
for (i = 0; i < arrayToLog.length; i++) {
switch (messageType) {
case trace.messageType.log:
{
android.util.Log.v(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.warn:
{
android.util.Log.w(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.error:
{
android.util.Log.e(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.info:
{
android.util.Log.i(this.TAG, arrayToLog[i]);
break;
}
}
}
};
Console.prototype.trace = function() {
var stack;
stack = new Error().stack.toString();
stack = stack.replace(this._stripFirstTwoLinesRegEx, "$2");
stack = "Stack Trace:\n" + stack;
this.log(stack);
};
Console.prototype.createDump = function(obj) {
var result = [];
if (null == obj) {
result.push("=== dump(): object is 'null' ===");
return result.join("");
}
if ("undefined" === typeof obj) {
result.push("=== dump(): object is 'undefined' ===");
return result.join("");
}
result.push("=== dump(): dumping members ===\n");
var stringifyValueCache = [];
var stringifyKeyCache = [];
result.push(JSON.stringify(obj, function(k, v) {
stringifyKeyCache.push(k);
if (typeof v === "object" && v !== null) {
if (stringifyValueCache.indexOf(v) !== -1) {
return "#CR:" + (v.toString ? v.toString() : v);
}
stringifyValueCache.push(v);
}
if (typeof v === "function") {
return k + "()" + v;
}
return v;
}, 4));
result.push("\n=== dump(): dumping function and properties names ===\n");
for (var id in obj) {
try {
if (typeof obj[id] === "function") {
result.push(id + "()\n");
} else {
if (typeof obj[id] !== "object" && stringifyKeyCache.indexOf(id) === -1) {
result.push(id + ": " + (obj[id] + "\n"));
}
}
} catch (err) {
result.push(id + ": inaccessible");
}
}
stringifyValueCache = null;
stringifyKeyCache = null;
result.push("=== dump(): finished ===");
return result.join("");
};
Console.prototype.dump = function(obj) {
var dump = this.createDump(obj);
if (platform.device.os === platform.platformNames.android) {
this.log(dump);
} else if (platform.device.os === platform.platformNames.ios) {
console.log(dump);
}
};
return Console;
}();
exports.Console = Console;
}, function(module, exports) {
var Zone$1 = function(global) {
if (global.Zone) {
throw new Error("Zone already loaded.");
}
var Zone = function() {
function Zone(parent, zoneSpec) {
this._properties = null;
this._parent = parent;
this._name = zoneSpec ? zoneSpec.name || "unnamed" : "<root>";
this._properties = zoneSpec && zoneSpec.properties || {};
this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
}
Zone.assertZonePatched = function() {
if (global.Promise !== ZoneAwarePromise) {
throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` " + "has been overwritten.\n" + "Most likely cause is that a Promise polyfill has been loaded " + "after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. " + "If you must load one, do so before loading zone.js.)");
}
};
Object.defineProperty(Zone, "current", {
get: function() {
return _currentZone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "currentTask", {
get: function() {
return _currentTask;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Zone.prototype.get = function(key) {
var zone = this.getZoneWith(key);
if (zone) return zone._properties[key];
};
Zone.prototype.getZoneWith = function(key) {
var current = this;
while (current) {
if (current._properties.hasOwnProperty(key)) {
return current;
}
current = current._parent;
}
return null;
};
Zone.prototype.fork = function(zoneSpec) {
if (!zoneSpec) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, zoneSpec);
};
Zone.prototype.wrap = function(callback, source) {
if (typeof callback !== "function") {
throw new Error("Expecting function got: " + callback);
}
var _callback = this._zoneDelegate.intercept(this, callback, source);
var zone = this;
return function() {
return zone.runGuarded(_callback, this, arguments, source);
};
};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
var oldZone = _currentZone;
_currentZone = this;
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} finally {
_currentZone = oldZone;
}
};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
var oldZone = _currentZone;
_currentZone = this;
try {
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZone = oldZone;
}
};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {
task.runCount++;
if (task.zone != this) throw new Error("A task can only be run in the zone which created it! (Creation: " + task.zone.name + "; Execution: " + this.name + ")");
var previousTask = _currentTask;
_currentTask = task;
var oldZone = _currentZone;
_currentZone = this;
try {
if (task.type == "macroTask" && task.data && !task.data.isPeriodic) {
task.cancelFn = null;
}
try {
return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZone = oldZone;
_currentTask = previousTask;
}
};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {
return this._zoneDelegate.scheduleTask(this, new ZoneTask("microTask", this, source, callback, data, customSchedule, null));
};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {
return this._zoneDelegate.scheduleTask(this, new ZoneTask("macroTask", this, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {
return this._zoneDelegate.scheduleTask(this, new ZoneTask("eventTask", this, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.cancelTask = function(task) {
var value = this._zoneDelegate.cancelTask(this, task);
task.runCount = -1;
task.cancelFn = null;
return value;
};
Zone.__symbol__ = __symbol__;
return Zone;
}();
var ZoneDelegate = function() {
function ZoneDelegate(zone, parentDelegate, zoneSpec) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
};
this.zone = zone;
this._parentDelegate = parentDelegate;
this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
}
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source) : callback;
};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.handleError = function(targetZone, error) {
return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error) : true;
};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {
try {
if (this._scheduleTaskZS) {
return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
} else if (task.scheduleFn) {
task.scheduleFn(task);
} else if (task.type == "microTask") {
scheduleMicroTask(task);
} else {
throw new Error("Task is missing scheduleFn.");
}
return task;
} finally {
if (targetZone == this.zone) {
this._updateTaskCount(task.type, 1);
}
}
};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {
try {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
} finally {
if (targetZone == this.zone && task.type != "eventTask" && !(task.data && task.data.isPeriodic)) {
this._updateTaskCount(task.type, -1);
}
}
};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {
var value;
if (this._cancelTaskZS) {
value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
} else if (!task.cancelFn) {
throw new Error("Task does not support cancellation, or is already canceled.");
} else {
value = task.cancelFn(task);
}
if (targetZone == this.zone) {
this._updateTaskCount(task.type, -1);
}
return value;
};
ZoneDelegate.prototype.hasTask = function(targetZone, isEmpty) {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
};
ZoneDelegate.prototype._updateTaskCount = function(type, count) {
var counts = this._taskCounts;
var prev = counts[type];
var next = counts[type] = prev + count;
if (next < 0) {
throw new Error("More tasks executed then were scheduled.");
}
if (prev == 0 || next == 0) {
var isEmpty = {
microTask: counts.microTask > 0,
macroTask: counts.macroTask > 0,
eventTask: counts.eventTask > 0,
change: type
};
try {
this.hasTask(this.zone, isEmpty);
} finally {
if (this._parentDelegate) {
this._parentDelegate._updateTaskCount(type, count);
}
}
}
};
return ZoneDelegate;
}();
var ZoneTask = function() {
function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
this.runCount = 0;
this.type = type;
this.zone = zone;
this.source = source;
this.data = options;
this.scheduleFn = scheduleFn;
this.cancelFn = cancelFn;
this.callback = callback;
var self = this;
this.invoke = function() {
_numberOfNestedTaskFrames++;
try {
return zone.runTask(self, this, arguments);
} finally {
if (_numberOfNestedTaskFrames == 1) {
drainMicroTaskQueue();
}
_numberOfNestedTaskFrames--;
}
};
}
ZoneTask.prototype.toString = function() {
if (this.data && typeof this.data.handleId !== "undefined") {
return this.data.handleId;
} else {
return this.toString();
}
};
return ZoneTask;
}();
function __symbol__(name) {
return "__zone_symbol__" + name;
}
var symbolSetTimeout = __symbol__("setTimeout");
var symbolPromise = __symbol__("Promise");
var symbolThen = __symbol__("then");
var _currentZone = new Zone(null, null);
var _currentTask = null;
var _microTaskQueue = [];
var _isDrainingMicrotaskQueue = false;
var _uncaughtPromiseErrors = [];
var _numberOfNestedTaskFrames = 0;
function scheduleQueueDrain() {
if (_numberOfNestedTaskFrames == 0 && _microTaskQueue.length == 0) {
if (global[symbolPromise]) {
global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
} else {
global[symbolSetTimeout](drainMicroTaskQueue, 0);
}
}
}
function scheduleMicroTask(task) {
scheduleQueueDrain();
_microTaskQueue.push(task);
}
function consoleError(e) {
var rejection = e && e.rejection;
if (rejection) {
console.error("Unhandled Promise rejection:", rejection instanceof Error ? rejection.message : rejection, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", rejection, rejection instanceof Error ? rejection.stack : undefined);
}
console.error(e);
}
function drainMicroTaskQueue() {
if (!_isDrainingMicrotaskQueue) {
_isDrainingMicrotaskQueue = true;
while (_microTaskQueue.length) {
var queue = _microTaskQueue;
_microTaskQueue = [];
for (var i = 0; i < queue.length; i++) {
var task = queue[i];
try {
task.zone.runTask(task, null, null);
} catch (e) {
consoleError(e);
}
}
}
while (_uncaughtPromiseErrors.length) {
var _loop_1 = function() {
var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
try {
uncaughtPromiseError.zone.runGuarded(function() {
throw uncaughtPromiseError;
});
} catch (e) {
consoleError(e);
}
};
while (_uncaughtPromiseErrors.length) {
_loop_1();
}
}
_isDrainingMicrotaskQueue = false;
}
}
function isThenable(value) {
return value && value.then;
}
function forwardResolution(value) {
return value;
}
function forwardRejection(rejection) {
return ZoneAwarePromise.reject(rejection);
}
var symbolState = __symbol__("state");
var symbolValue = __symbol__("value");
var source = "Promise.then";
var UNRESOLVED = null;
var RESOLVED = true;
var REJECTED = false;
var REJECTED_NO_CATCH = 0;
function makeResolver(promise, state) {
return function(v) {
resolvePromise(promise, state, v);
};
}
function resolvePromise(promise, state, value) {
if (promise[symbolState] === UNRESOLVED) {
if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
clearRejectedNoCatch(value);
resolvePromise(promise, value[symbolState], value[symbolValue]);
} else if (isThenable(value)) {
value.then(makeResolver(promise, state), makeResolver(promise, false));
} else {
promise[symbolState] = state;
var queue = promise[symbolValue];
promise[symbolValue] = value;
for (var i = 0; i < queue.length; ) {
scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
}
if (queue.length == 0 && state == REJECTED) {
promise[symbolState] = REJECTED_NO_CATCH;
try {
throw new Error("Uncaught (in promise): " + value);
} catch (e) {
var error = e;
error.rejection = value;
error.promise = promise;
error.zone = Zone.current;
error.task = Zone.currentTask;
_uncaughtPromiseErrors.push(error);
scheduleQueueDrain();
}
}
}
}
return promise;
}
function clearRejectedNoCatch(promise) {
if (promise[symbolState] === REJECTED_NO_CATCH) {
promise[symbolState] = REJECTED;
for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
if (promise === _uncaughtPromiseErrors[i].promise) {
_uncaughtPromiseErrors.splice(i, 1);
break;
}
}
}
}
function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
clearRejectedNoCatch(promise);
var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
zone.scheduleMicroTask(source, function() {
try {
resolvePromise(chainPromise, true, zone.run(delegate, null, [ promise[symbolValue] ]));
} catch (error) {
resolvePromise(chainPromise, false, error);
}
});
}
var ZoneAwarePromise = function() {
function ZoneAwarePromise(executor) {
var promise = this;
if (!(promise instanceof ZoneAwarePromise)) {
throw new Error("Must be an instanceof Promise.");
}
promise[symbolState] = UNRESOLVED;
promise[symbolValue] = [];
try {
executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
} catch (e) {
resolvePromise(promise, false, e);
}
}
ZoneAwarePromise.resolve = function(value) {
return resolvePromise(new this(null), RESOLVED, value);
};
ZoneAwarePromise.reject = function(error) {
return resolvePromise(new this(null), REJECTED, error);
};
ZoneAwarePromise.race = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
function onResolve(value) {
promise && (promise = null || resolve(value));
}
function onReject(error) {
promise && (promise = null || reject(error));
}
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var value = values_1[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(onResolve, onReject);
}
return promise;
};
ZoneAwarePromise.all = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
var count = 0;
var resolvedValues = [];
for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
var value = values_2[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(function(index) {
return function(value) {
resolvedValues[index] = value;
count--;
if (!count) {
resolve(resolvedValues);
}
};
}(count), reject);
count++;
}
if (!count) resolve(resolvedValues);
return promise;
};
ZoneAwarePromise.prototype.then = function(onFulfilled, onRejected) {
var chainPromise = new this.constructor(null);
var zone = Zone.current;
if (this[symbolState] == UNRESOLVED) {
this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
} else {
scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
}
return chainPromise;
};
ZoneAwarePromise.prototype.catch = function(onRejected) {
return this.then(null, onRejected);
};
return ZoneAwarePromise;
}();
ZoneAwarePromise["resolve"] = ZoneAwarePromise.resolve;
ZoneAwarePromise["reject"] = ZoneAwarePromise.reject;
ZoneAwarePromise["race"] = ZoneAwarePromise.race;
ZoneAwarePromise["all"] = ZoneAwarePromise.all;
var NativePromise = global[__symbol__("Promise")] = global.Promise;
global.Promise = ZoneAwarePromise;
function patchThen(NativePromise) {
var NativePromiseProtototype = NativePromise.prototype;
var NativePromiseThen = NativePromiseProtototype[__symbol__("then")] = NativePromiseProtototype.then;
NativePromiseProtototype.then = function(onResolve, onReject) {
var nativePromise = this;
return new ZoneAwarePromise(function(resolve, reject) {
NativePromiseThen.call(nativePromise, resolve, reject);
}).then(onResolve, onReject);
};
}
if (NativePromise) {
patchThen(NativePromise);
if (typeof global["fetch"] !== "undefined") {
var fetchPromise = global["fetch"]();
fetchPromise.then(function() {
return null;
}, function() {
return null;
});
if (fetchPromise.constructor != NativePromise && fetchPromise.constructor != ZoneAwarePromise) {
patchThen(fetchPromise.constructor);
}
}
}
Promise[Zone.__symbol__("uncaughtPromiseErrors")] = _uncaughtPromiseErrors;
return global.Zone = Zone;
}(typeof window === "object" && window || typeof self === "object" && self || global);
var zoneSymbol = Zone["__symbol__"];
var _global = typeof window === "object" && window || typeof self === "object" && self || global;
function bindArguments(args, source) {
for (var i = args.length - 1; i >= 0; i--) {
if (typeof args[i] === "function") {
args[i] = Zone.current.wrap(args[i], source + "_" + i);
}
}
return args;
}
var isNode = typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
delete desc.writable;
delete desc.value;
var eventName = prop.substr(2);
var _prop = "_" + prop;
desc.set = function(fn) {
if (this[_prop]) {
this.removeEventListener(eventName, this[_prop]);
}
if (typeof fn === "function") {
var wrapFn = function(event) {
var result;
result = fn.apply(this, arguments);
if (result != undefined && !result) event.preventDefault();
};
this[_prop] = wrapFn;
this.addEventListener(eventName, wrapFn, false);
} else {
this[_prop] = null;
}
};
desc.get = function() {
return this[_prop] || null;
};
Object.defineProperty(obj, prop, desc);
}
var EVENT_TASKS = zoneSymbol("eventTasks");
var ADD_EVENT_LISTENER = "addEventListener";
var REMOVE_EVENT_LISTENER = "removeEventListener";
function findExistingRegisteredTask(target, handler, name, capture, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
if (data.handler === handler && data.useCapturing === capture && data.eventName === name) {
if (remove) {
eventTasks.splice(i, 1);
}
return eventTask;
}
}
}
return null;
}
function attachRegisteredEvent(target, eventTask) {
var eventTasks = target[EVENT_TASKS];
if (!eventTasks) {
eventTasks = target[EVENT_TASKS] = [];
}
eventTasks.push(eventTask);
}
function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (allowDuplicates === void 0) {
allowDuplicates = false;
}
var addFnSymbol = zoneSymbol(addFnName);
var removeFnSymbol = zoneSymbol(removeFnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
function scheduleEventListener(eventTask) {
var meta = eventTask.data;
attachRegisteredEvent(meta.target, eventTask);
return meta.target[addFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
}
function cancelEventListener(eventTask) {
var meta = eventTask.data;
findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
meta.target[removeFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
}
return function zoneAwareAddListener(self, args) {
var eventName = args[0];
var handler = args[1];
var useCapturing = args[2] || defaultUseCapturing;
var target = self || _global;
var delegate = null;
if (typeof handler == "function") {
delegate = handler;
} else if (handler && handler.handleEvent) {
delegate = function(event) {
return handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = handler && handler.toString() === "[object FunctionWrapper]";
} catch (e) {
return;
}
if (!delegate || validZoneHandler) {
return target[addFnSymbol](eventName, handler, useCapturing);
}
if (!allowDuplicates) {
var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
if (eventTask) {
return target[addFnSymbol](eventName, eventTask.invoke, useCapturing);
}
}
var zone = Zone.current;
var source = target.constructor["name"] + "." + addFnName + ":" + eventName;
var data = {
target: target,
eventName: eventName,
name: eventName,
useCapturing: useCapturing,
handler: handler
};
zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
};
}
function makeZoneAwareRemoveListener(fnName, useCapturingParam) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
var symbol = zoneSymbol(fnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
return function zoneAwareRemoveListener(self, args) {
var eventName = args[0];
var handler = args[1];
var useCapturing = args[2] || defaultUseCapturing;
var target = self || _global;
var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
if (eventTask) {
eventTask.zone.cancelTask(eventTask);
} else {
target[symbol](eventName, handler, useCapturing);
}
};
}
var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
var originalInstanceKey = zoneSymbol("originalInstance");
function createNamedFn(name, delegate) {
try {
return Function("f", "return function " + name + "(){return f(this, arguments)}")(delegate);
} catch (e) {
return function() {
return delegate(this, arguments);
};
}
}
function patchMethod(target, name, patchFn) {
var proto = target;
while (proto && !proto.hasOwnProperty(name)) {
proto = Object.getPrototypeOf(proto);
}
if (!proto && target[name]) {
proto = target;
}
var delegateName = zoneSymbol(name);
var delegate;
if (proto && !(delegate = proto[delegateName])) {
delegate = proto[delegateName] = proto[name];
proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
}
return delegate;
}
function patchTimer(window, setName, cancelName, nameSuffix) {
var setNative = null;
var clearNative = null;
setName += nameSuffix;
cancelName += nameSuffix;
function scheduleTask(task) {
var data = task.data;
data.args[0] = task.invoke;
data.handleId = setNative.apply(window, data.args);
return task;
}
function clearTask(task) {
return clearNative(task.data.handleId);
}
setNative = patchMethod(window, setName, function(delegate) {
return function(self, args) {
if (typeof args[0] === "function") {
var zone = Zone.current;
var options = {
handleId: null,
isPeriodic: nameSuffix === "Interval",
delay: nameSuffix === "Timeout" || nameSuffix === "Interval" ? args[1] || 0 : null,
args: args
};
var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
if (!task) {
return task;
}
var handle = task.data.handleId;
if (handle.ref && handle.unref) {
task.ref = handle.ref.bind(handle);
task.unref = handle.unref.bind(handle);
}
return task;
} else {
return delegate.apply(window, args);
}
};
});
clearNative = patchMethod(window, cancelName, function(delegate) {
return function(self, args) {
var task = args[0];
if (task && typeof task.type === "string") {
if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
task.zone.cancelTask(task);
}
} else {
delegate.apply(window, args);
}
};
});
}
var set = "set";
var clear = "clear";
patchTimer(global, set, clear, "Timeout");
patchTimer(global, set, clear, "Interval");
patchTimer(global, set, clear, "Immediate");
}, function(module, exports) {
var Reflect;
(function(Reflect) {
"use strict";
var hasOwn = Object.prototype.hasOwnProperty;
var supportsCreate = typeof Object.create === "function";
var supportsProto = function() {
var sentinel = {};
function __() {}
__.prototype = sentinel;
var instance = new __();
return instance.__proto__ === sentinel;
}();
var createDictionary = supportsCreate ? function() {
return MakeDictionary(Object.create(null));
} : supportsProto ? function() {
return MakeDictionary({
__proto__: null
});
} : function() {
return MakeDictionary({});
};
var HashMap;
(function(HashMap) {
var downLevel = !supportsCreate && !supportsProto;
HashMap.has = downLevel ? function(map, key) {
return hasOwn.call(map, key);
} : function(map, key) {
return key in map;
};
HashMap.get = downLevel ? function(map, key) {
return hasOwn.call(map, key) ? map[key] : undefined;
} : function(map, key) {
return map[key];
};
})(HashMap || (HashMap = {}));
var functionPrototype = Object.getPrototypeOf(Function);
var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
var Metadata = new _WeakMap();
function decorate(decorators, target, targetKey, targetDescriptor) {
if (!IsUndefined(targetDescriptor)) {
if (!IsArray(decorators)) throw new TypeError();
if (!IsObject(target)) throw new TypeError();
if (IsUndefined(targetKey)) throw new TypeError();
if (!IsObject(targetDescriptor)) throw new TypeError();
targetKey = ToPropertyKey(targetKey);
return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
} else if (!IsUndefined(targetKey)) {
if (!IsArray(decorators)) throw new TypeError();
if (!IsObject(target)) throw new TypeError();
targetKey = ToPropertyKey(targetKey);
return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
} else {
if (!IsArray(decorators)) throw new TypeError();
if (!IsConstructor(target)) throw new TypeError();
return DecorateConstructor(decorators, target);
}
}
Reflect.decorate = decorate;
function metadata(metadataKey, metadataValue) {
function decorator(target, targetKey) {
if (!IsUndefined(targetKey)) {
if (!IsObject(target)) throw new TypeError();
targetKey = ToPropertyKey(targetKey);
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
} else {
if (!IsConstructor(target)) throw new TypeError();
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
}
}
return decorator;
}
Reflect.metadata = metadata;
function defineMetadata(metadataKey, metadataValue, target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
}
Reflect.defineMetadata = defineMetadata;
function hasMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryHasMetadata(metadataKey, target, targetKey);
}
Reflect.hasMetadata = hasMetadata;
function hasOwnMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
}
Reflect.hasOwnMetadata = hasOwnMetadata;
function getMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryGetMetadata(metadataKey, target, targetKey);
}
Reflect.getMetadata = getMetadata;
function getOwnMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
}
Reflect.getOwnMetadata = getOwnMetadata;
function getMetadataKeys(target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryMetadataKeys(target, targetKey);
}
Reflect.getMetadataKeys = getMetadataKeys;
function getOwnMetadataKeys(target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
return OrdinaryOwnMetadataKeys(target, targetKey);
}
Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
function deleteMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
if (IsUndefined(metadataMap)) return false;
if (!metadataMap.delete(metadataKey)) return false;
if (metadataMap.size > 0) return true;
var targetMetadata = Metadata.get(target);
targetMetadata.delete(targetKey);
if (targetMetadata.size > 0) return true;
Metadata.delete(target);
return true;
}
Reflect.deleteMetadata = deleteMetadata;
function DecorateConstructor(decorators, target) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target);
if (!IsUndefined(decorated)) {
if (!IsConstructor(decorated)) throw new TypeError();
target = decorated;
}
}
return target;
}
function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target, propertyKey, descriptor);
if (!IsUndefined(decorated)) {
if (!IsObject(decorated)) throw new TypeError();
descriptor = decorated;
}
}
return descriptor;
}
function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
decorator(target, propertyKey);
}
}
function GetOrCreateMetadataMap(target, targetKey, create) {
var targetMetadata = Metadata.get(target);
if (!targetMetadata) {
if (!create) return undefined;
targetMetadata = new _Map();
Metadata.set(target, targetMetadata);
}
var keyMetadata = targetMetadata.get(targetKey);
if (!keyMetadata) {
if (!create) return undefined;
keyMetadata = new _Map();
targetMetadata.set(targetKey, keyMetadata);
}
return keyMetadata;
}
function OrdinaryHasMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) return true;
var parent = GetPrototypeOf(O);
return parent !== null ? OrdinaryHasMetadata(MetadataKey, parent, P) : false;
}
function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
return metadataMap !== undefined && Boolean(metadataMap.has(MetadataKey));
}
function OrdinaryGetMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
var parent = GetPrototypeOf(O);
return parent !== null ? OrdinaryGetMetadata(MetadataKey, parent, P) : undefined;
}
function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
}
function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, true);
metadataMap.set(MetadataKey, MetadataValue);
}
function OrdinaryMetadataKeys(O, P) {
var ownKeys = OrdinaryOwnMetadataKeys(O, P);
var parent = GetPrototypeOf(O);
if (parent === null) return ownKeys;
var parentKeys = OrdinaryMetadataKeys(parent, P);
if (parentKeys.length <= 0) return ownKeys;
if (ownKeys.length <= 0) return parentKeys;
var keys = new _Set();
for (var _i = 0; _i < ownKeys.length; _i++) {
var key = ownKeys[_i];
keys.add(key);
}
for (var _a = 0; _a < parentKeys.length; _a++) {
var key = parentKeys[_a];
keys.add(key);
}
return getKeys(keys);
}
function OrdinaryOwnMetadataKeys(target, targetKey) {
var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
var keys = [];
if (metadataMap) forEach(metadataMap, function(_, key) {
return keys.push(key);
});
return keys;
}
function IsUndefined(x) {
return x === undefined;
}
function IsArray(x) {
return Array.isArray ? Array.isArray(x) : x instanceof Array || Object.prototype.toString.call(x) === "[object Array]";
}
function IsObject(x) {
return typeof x === "object" ? x !== null : typeof x === "function";
}
function IsConstructor(x) {
return typeof x === "function";
}
function IsSymbol(x) {
return typeof x === "symbol";
}
function ToPropertyKey(value) {
return IsSymbol(value) ? value : String(value);
}
function GetPrototypeOf(O) {
var proto = Object.getPrototypeOf(O);
if (typeof O !== "function" || O === functionPrototype) return proto;
if (proto !== functionPrototype) return proto;
var prototype = O.prototype;
var prototypeProto = prototype && Object.getPrototypeOf(prototype);
if (prototypeProto == null || prototypeProto === Object.prototype) return proto;
var constructor = prototypeProto.constructor;
if (typeof constructor !== "function") return proto;
if (constructor === O) return proto;
return constructor;
}
function IteratorStep(iterator) {
var result = iterator.next();
return result.done ? undefined : result;
}
function IteratorClose(iterator) {
var f = iterator["return"];
if (f) f.call(iterator);
}
function forEach(source, callback, thisArg) {
var entries = source.entries;
if (typeof entries === "function") {
var iterator = entries.call(source);
var result;
try {
while (result = IteratorStep(iterator)) {
var _a = result.value, key = _a[0], value = _a[1];
callback.call(thisArg, value, key, source);
}
} finally {
if (result) IteratorClose(iterator);
}
} else {
var forEach_1 = source.forEach;
if (typeof forEach_1 === "function") {
forEach_1.call(source, callback, thisArg);
}
}
}
function getKeys(source) {
var keys = [];
forEach(source, function(_, key) {
keys.push(key);
});
return keys;
}
function CreateMapIterator(keys, values, kind) {
var index = 0;
return {
next: function() {
if ((keys || values) && index < (keys || values).length) {
var current = index++;
switch (kind) {
case "key":
return {
value: keys[current],
done: false
};

case "value":
return {
value: values[current],
done: false
};

case "key+value":
return {
value: [ keys[current], values[current] ],
done: false
};
}
}
keys = undefined;
values = undefined;
return {
value: undefined,
done: true
};
},
throw: function(error) {
if (keys || values) {
keys = undefined;
values = undefined;
}
throw error;
},
return: function(value) {
if (keys || values) {
keys = undefined;
values = undefined;
}
return {
value: value,
done: true
};
}
};
}
function CreateMapPolyfill() {
var cacheSentinel = {};
return function() {
function Map() {
this._keys = [];
this._values = [];
this._cacheKey = cacheSentinel;
this._cacheIndex = -2;
}
Object.defineProperty(Map.prototype, "size", {
get: function() {
return this._keys.length;
},
enumerable: true,
configurable: true
});
Map.prototype.has = function(key) {
return this._find(key, false) >= 0;
};
Map.prototype.get = function(key) {
var index = this._find(key, false);
return index >= 0 ? this._values[index] : undefined;
};
Map.prototype.set = function(key, value) {
var index = this._find(key, true);
this._values[index] = value;
return this;
};
Map.prototype.delete = function(key) {
var index = this._find(key, false);
if (index >= 0) {
var size = this._keys.length;
for (var i = index + 1; i < size; i++) {
this._keys[i - 1] = this._keys[i];
this._values[i - 1] = this._values[i];
}
this._keys.length--;
this._values.length--;
this._cacheKey = cacheSentinel;
this._cacheIndex = -2;
return true;
}
return false;
};
Map.prototype.clear = function() {
this._keys.length = 0;
this._values.length = 0;
this._cacheKey = cacheSentinel;
this._cacheIndex = -2;
};
Map.prototype.keys = function() {
return CreateMapIterator(this._keys, undefined, "key");
};
Map.prototype.values = function() {
return CreateMapIterator(undefined, this._values, "value");
};
Map.prototype.entries = function() {
return CreateMapIterator(this._keys, this._values, "key+value");
};
Map.prototype._find = function(key, insert) {
if (this._cacheKey === key) return this._cacheIndex;
var index = this._keys.indexOf(key);
if (index < 0 && insert) {
index = this._keys.length;
this._keys.push(key);
this._values.push(undefined);
}
return this._cacheKey = key, this._cacheIndex = index;
};
return Map;
}();
}
function CreateSetPolyfill() {
return function() {
function Set() {
this._map = new _Map();
}
Object.defineProperty(Set.prototype, "size", {
get: function() {
return this._map.size;
},
enumerable: true,
configurable: true
});
Set.prototype.has = function(value) {
return this._map.has(value);
};
Set.prototype.add = function(value) {
return this._map.set(value, value), this;
};
Set.prototype.delete = function(value) {
return this._map.delete(value);
};
Set.prototype.clear = function() {
this._map.clear();
};
Set.prototype.keys = function() {
return this._map.keys();
};
Set.prototype.values = function() {
return this._map.values();
};
Set.prototype.entries = function() {
return this._map.entries();
};
return Set;
}();
}
function CreateWeakMapPolyfill() {
var UUID_SIZE = 16;
var keys = createDictionary();
var rootKey = CreateUniqueKey();
return function() {
function WeakMap() {
this._key = CreateUniqueKey();
}
WeakMap.prototype.has = function(target) {
var table = GetOrCreateWeakMapTable(target, false);
return table !== undefined ? HashMap.has(table, this._key) : false;
};
WeakMap.prototype.get = function(target) {
var table = GetOrCreateWeakMapTable(target, false);
return table !== undefined ? HashMap.get(table, this._key) : undefined;
};
WeakMap.prototype.set = function(target, value) {
var table = GetOrCreateWeakMapTable(target, true);
table[this._key] = value;
return this;
};
WeakMap.prototype.delete = function(target) {
var table = GetOrCreateWeakMapTable(target, false);
return table !== undefined ? delete table[this._key] : false;
};
WeakMap.prototype.clear = function() {
this._key = CreateUniqueKey();
};
return WeakMap;
}();
function FillRandomBytes(buffer, size) {
for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 255 | 0;
return buffer;
}
function GenRandomBytes(size) {
if (typeof Uint8Array === "function") {
if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
return FillRandomBytes(new Uint8Array(size), size);
}
return FillRandomBytes(new Array(size), size);
}
function CreateUUID() {
var data = GenRandomBytes(UUID_SIZE);
data[6] = data[6] & 79 | 64;
data[8] = data[8] & 191 | 128;
var result = "";
for (var offset = 0; offset < UUID_SIZE; ++offset) {
var byte = data[offset];
if (offset === 4 || offset === 6 || offset === 8) result += "-";
if (byte < 16) result += "0";
result += byte.toString(16).toLowerCase();
}
return result;
}
function CreateUniqueKey() {
var key;
do key = "@@WeakMap@@" + CreateUUID(); while (HashMap.has(keys, key));
keys[key] = true;
return key;
}
function GetOrCreateWeakMapTable(target, create) {
if (!hasOwn.call(target, rootKey)) {
if (!create) return undefined;
Object.defineProperty(target, rootKey, {
value: createDictionary()
});
}
return target[rootKey];
}
}
function MakeDictionary(obj) {
obj.__DICTIONARY_MODE__ = 1;
delete obj.____DICTIONARY_MODE__;
return obj;
}
(function(__global) {
if (typeof __global.Reflect !== "undefined") {
if (__global.Reflect !== Reflect) {
for (var p in Reflect) {
if (hasOwn.call(Reflect, p)) {
__global.Reflect[p] = Reflect[p];
}
}
}
} else {
__global.Reflect = Reflect;
}
})(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
})(Reflect || (Reflect = {}));
}, function(module, exports) {
if (!Array.prototype.fill) {
Array.prototype.fill = function(value) {
var O = Object(this);
var len = parseInt(O.length, 10);
var start = arguments[1];
var relativeStart = parseInt(start, 10) || 0;
var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
var end = arguments[2];
var relativeEnd = end === undefined ? len : parseInt(end, 10) || 0;
var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
for (;k < final; k++) {
O[k] = value;
}
return O;
};
}
if (!Array.from) {
Array.from = function(iterable, mapFn, thisArg) {
var results = [];
if (iterable.next) {
for (var step = null; ;step = iterable.next()) {
if (step.done) {
break;
} else {
results.push(step.value);
}
}
} else {
results = [].slice.call(iterable);
}
if (mapFn) {
results = results.forEach(mapFn, thisArg);
}
return results;
};
}
}, function(module, exports) {
if (!console.group) {
console.group = function() {};
}
if (!console.groupEnd) {
console.groupEnd = function() {};
}
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(157), __webpack_require__(158)) : typeof define === "function" && define.amd ? define([ "exports", "rxjs/Subject", "rxjs/Observable" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.core = global.ng.core || {}), global.Rx, global.Rx);
})(this, function(exports, rxjs_Subject, rxjs_Observable) {
"use strict";
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
var global$1 = globalScope;
function getTypeNameForDebugging(type) {
return type["name"] || typeof type;
}
global$1.assert = function assert(condition) {};
function isPresent(obj) {
return obj != null;
}
function isBlank(obj) {
return obj == null;
}
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token == null) {
return "" + token;
}
if (token.overriddenName) {
return token.overriddenName;
}
if (token.name) {
return token.name;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
function print(obj) {
console.log(obj);
}
function warn(obj) {
console.warn(obj);
}
var _symbolIterator = null;
function getSymbolIterator() {
if (!_symbolIterator) {
if (globalScope.Symbol && Symbol.iterator) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
function isPrimitive(obj) {
return !isJsObject(obj);
}
var _nextClassId = 0;
var Reflect = global$1.Reflect;
function extractAnnotation(annotation) {
if (typeof annotation === "function" && annotation.hasOwnProperty("annotation")) {
annotation = annotation.annotation;
}
return annotation;
}
function applyParams(fnOrArray, key) {
if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
}
if (typeof fnOrArray === "function") {
return fnOrArray;
}
if (Array.isArray(fnOrArray)) {
var annotations = fnOrArray;
var annoLength = annotations.length - 1;
var fn = fnOrArray[annoLength];
if (typeof fn !== "function") {
throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
}
if (annoLength != fn.length) {
throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
}
var paramsAnnotations = [];
for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
var paramAnnotations = [];
paramsAnnotations.push(paramAnnotations);
var annotation = annotations[i];
if (Array.isArray(annotation)) {
for (var j = 0; j < annotation.length; j++) {
paramAnnotations.push(extractAnnotation(annotation[j]));
}
} else if (typeof annotation === "function") {
paramAnnotations.push(extractAnnotation(annotation));
} else {
paramAnnotations.push(annotation);
}
}
Reflect.defineMetadata("parameters", paramsAnnotations, fn);
return fn;
}
throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
}
function Class(clsDef) {
var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : undefined, "constructor");
var proto = constructor.prototype;
if (clsDef.hasOwnProperty("extends")) {
if (typeof clsDef.extends === "function") {
constructor.prototype = proto = Object.create(clsDef.extends.prototype);
} else {
throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
}
}
for (var key in clsDef) {
if (key !== "extends" && key !== "prototype" && clsDef.hasOwnProperty(key)) {
proto[key] = applyParams(clsDef[key], key);
}
}
if (this && this.annotations instanceof Array) {
Reflect.defineMetadata("annotations", this.annotations, constructor);
}
var constructorName = constructor["name"];
if (!constructorName || constructorName === "constructor") {
constructor["overriddenName"] = "class" + _nextClassId++;
}
return constructor;
}
function makeDecorator(name, props, parentClass, chainFn) {
if (chainFn === void 0) {
chainFn = null;
}
var metaCtor = makeMetadataCtor([ props ]);
function DecoratorFactory(objOrType) {
if (!(Reflect && Reflect.getMetadata)) {
throw "reflect-metadata shim is required when using class decorators";
}
if (this instanceof DecoratorFactory) {
metaCtor.call(this, objOrType);
return this;
}
var annotationInstance = new DecoratorFactory(objOrType);
var chainAnnotation = typeof this === "function" && Array.isArray(this.annotations) ? this.annotations : [];
chainAnnotation.push(annotationInstance);
var TypeDecorator = function TypeDecorator(cls) {
var annotations = Reflect.getOwnMetadata("annotations", cls) || [];
annotations.push(annotationInstance);
Reflect.defineMetadata("annotations", annotations, cls);
return cls;
};
TypeDecorator.annotations = chainAnnotation;
TypeDecorator.Class = Class;
if (chainFn) chainFn(TypeDecorator);
return TypeDecorator;
}
if (parentClass) {
DecoratorFactory.prototype = Object.create(parentClass.prototype);
}
DecoratorFactory.prototype.toString = function() {
return "@" + name;
};
DecoratorFactory.annotationCls = DecoratorFactory;
return DecoratorFactory;
}
function makeMetadataCtor(props) {
return function ctor() {
var _this = this;
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
props.forEach(function(prop, i) {
var argVal = args[i];
if (Array.isArray(prop)) {
_this[prop[0]] = argVal === undefined ? prop[1] : argVal;
} else {
for (var propName in prop) {
_this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
}
}
});
};
}
function makeParamDecorator(name, props, parentClass) {
var metaCtor = makeMetadataCtor(props);
function ParamDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
if (this instanceof ParamDecoratorFactory) {
metaCtor.apply(this, args);
return this;
}
var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [ void 0 ].concat(args)))();
ParamDecorator.annotation = annotationInstance;
return ParamDecorator;
function ParamDecorator(cls, unusedKey, index) {
var parameters = Reflect.getMetadata("parameters", cls) || [];
while (parameters.length <= index) {
parameters.push(null);
}
parameters[index] = parameters[index] || [];
parameters[index].push(annotationInstance);
Reflect.defineMetadata("parameters", parameters, cls);
return cls;
}
var _a;
}
if (parentClass) {
ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
}
ParamDecoratorFactory.prototype.toString = function() {
return "@" + name;
};
ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
return ParamDecoratorFactory;
}
function makePropDecorator(name, props, parentClass) {
var metaCtor = makeMetadataCtor(props);
function PropDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
if (this instanceof PropDecoratorFactory) {
metaCtor.apply(this, args);
return this;
}
var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [ void 0 ].concat(args)))();
return function PropDecorator(target, name) {
var meta = Reflect.getOwnMetadata("propMetadata", target.constructor) || {};
meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
meta[name].unshift(decoratorInstance);
Reflect.defineMetadata("propMetadata", meta, target.constructor);
};
var _a;
}
if (parentClass) {
PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
}
PropDecoratorFactory.prototype.toString = function() {
return "@" + name;
};
PropDecoratorFactory.annotationCls = PropDecoratorFactory;
return PropDecoratorFactory;
}
var Inject = makeParamDecorator("Inject", [ [ "token", undefined ] ]);
var Optional = makeParamDecorator("Optional", []);
var Injectable = makeParamDecorator("Injectable", []);
var Self = makeParamDecorator("Self", []);
var SkipSelf = makeParamDecorator("SkipSelf", []);
var Host = makeParamDecorator("Host", []);
var OpaqueToken = function() {
function OpaqueToken(_desc) {
this._desc = _desc;
}
OpaqueToken.prototype.toString = function() {
return "Token " + this._desc;
};
OpaqueToken.decorators = [ {
type: Injectable
} ];
OpaqueToken.ctorParameters = [ null ];
return OpaqueToken;
}();
var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken("AnalyzeForEntryComponents");
var Attribute = makeParamDecorator("Attribute", [ [ "attributeName", undefined ] ]);
var Query = function() {
function Query() {}
return Query;
}();
var ContentChildren = makePropDecorator("ContentChildren", [ [ "selector", undefined ], {
first: false,
isViewQuery: false,
descendants: false,
read: undefined
} ], Query);
var ContentChild = makePropDecorator("ContentChild", [ [ "selector", undefined ], {
first: true,
isViewQuery: false,
descendants: true,
read: undefined
} ], Query);
var ViewChildren = makePropDecorator("ViewChildren", [ [ "selector", undefined ], {
first: false,
isViewQuery: true,
descendants: true,
read: undefined
} ], Query);
var ViewChild = makePropDecorator("ViewChild", [ [ "selector", undefined ], {
first: true,
isViewQuery: true,
descendants: true,
read: undefined
} ], Query);
exports.ChangeDetectionStrategy;
(function(ChangeDetectionStrategy) {
ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
var ChangeDetectorStatus;
(function(ChangeDetectorStatus) {
ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
return isBlank(changeDetectionStrategy) || changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
}
var Directive = makeDecorator("Directive", {
selector: undefined,
inputs: undefined,
outputs: undefined,
host: undefined,
providers: undefined,
exportAs: undefined,
queries: undefined
});
var Component = makeDecorator("Component", {
selector: undefined,
inputs: undefined,
outputs: undefined,
host: undefined,
exportAs: undefined,
moduleId: undefined,
providers: undefined,
viewProviders: undefined,
changeDetection: exports.ChangeDetectionStrategy.Default,
queries: undefined,
templateUrl: undefined,
template: undefined,
styleUrls: undefined,
styles: undefined,
animations: undefined,
encapsulation: undefined,
interpolation: undefined,
entryComponents: undefined
}, Directive);
var Pipe = makeDecorator("Pipe", {
name: undefined,
pure: true
});
var Input = makePropDecorator("Input", [ [ "bindingPropertyName", undefined ] ]);
var Output = makePropDecorator("Output", [ [ "bindingPropertyName", undefined ] ]);
var HostBinding = makePropDecorator("HostBinding", [ [ "hostPropertyName", undefined ] ]);
var HostListener = makePropDecorator("HostListener", [ [ "eventName", undefined ], [ "args", [] ] ]);
var LifecycleHooks;
(function(LifecycleHooks) {
LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
})(LifecycleHooks || (LifecycleHooks = {}));
var LIFECYCLE_HOOKS_VALUES = [ LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked ];
var OnChanges = function() {
function OnChanges() {}
return OnChanges;
}();
var OnInit = function() {
function OnInit() {}
return OnInit;
}();
var DoCheck = function() {
function DoCheck() {}
return DoCheck;
}();
var OnDestroy = function() {
function OnDestroy() {}
return OnDestroy;
}();
var AfterContentInit = function() {
function AfterContentInit() {}
return AfterContentInit;
}();
var AfterContentChecked = function() {
function AfterContentChecked() {}
return AfterContentChecked;
}();
var AfterViewInit = function() {
function AfterViewInit() {}
return AfterViewInit;
}();
var AfterViewChecked = function() {
function AfterViewChecked() {}
return AfterViewChecked;
}();
var CUSTOM_ELEMENTS_SCHEMA = {
name: "custom-elements"
};
var NO_ERRORS_SCHEMA = {
name: "no-errors-schema"
};
var NgModule = makeDecorator("NgModule", {
providers: undefined,
declarations: undefined,
imports: undefined,
exports: undefined,
entryComponents: undefined,
bootstrap: undefined,
schemas: undefined,
id: undefined
});
exports.ViewEncapsulation;
(function(ViewEncapsulation) {
ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
var ViewMetadata = function() {
function ViewMetadata(_a) {
var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
this.templateUrl = templateUrl;
this.template = template;
this.styleUrls = styleUrls;
this.styles = styles;
this.encapsulation = encapsulation;
this.animations = animations;
this.interpolation = interpolation;
}
return ViewMetadata;
}();
function forwardRef(forwardRefFn) {
forwardRefFn.__forward_ref__ = forwardRef;
forwardRefFn.toString = function() {
return stringify(this());
};
return forwardRefFn;
}
function resolveForwardRef(type) {
if (typeof type === "function" && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef) {
return type();
} else {
return type;
}
}
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function unimplemented() {
throw new Error("unimplemented");
}
var BaseError = function(_super) {
__extends(BaseError, _super);
function BaseError(message) {
var nativeError = _super.call(this, message);
this._nativeError = nativeError;
}
Object.defineProperty(BaseError.prototype, "message", {
get: function() {
return this._nativeError.message;
},
set: function(message) {
this._nativeError.message = message;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseError.prototype, "name", {
get: function() {
return this._nativeError.name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseError.prototype, "stack", {
get: function() {
return this._nativeError.stack;
},
set: function(value) {
this._nativeError.stack = value;
},
enumerable: true,
configurable: true
});
BaseError.prototype.toString = function() {
return this._nativeError.toString();
};
return BaseError;
}(Error);
var WrappedError = function(_super) {
__extends(WrappedError, _super);
function WrappedError(message, error) {
_super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
this.originalError = error;
}
Object.defineProperty(WrappedError.prototype, "stack", {
get: function() {
return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
},
enumerable: true,
configurable: true
});
return WrappedError;
}(BaseError);
var _THROW_IF_NOT_FOUND = new Object();
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var _NullInjector = function() {
function _NullInjector() {}
_NullInjector.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = _THROW_IF_NOT_FOUND;
}
if (notFoundValue === _THROW_IF_NOT_FOUND) {
throw new Error("No provider for " + stringify(token) + "!");
}
return notFoundValue;
};
return _NullInjector;
}();
var Injector = function() {
function Injector() {}
Injector.prototype.get = function(token, notFoundValue) {
return unimplemented();
};
Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
Injector.NULL = new _NullInjector();
return Injector;
}();
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function findFirstClosedCycle(keys) {
var res = [];
for (var i = 0; i < keys.length; ++i) {
if (res.indexOf(keys[i]) > -1) {
res.push(keys[i]);
return res;
}
res.push(keys[i]);
}
return res;
}
function constructResolvingPath(keys) {
if (keys.length > 1) {
var reversed = findFirstClosedCycle(keys.slice().reverse());
var tokenStrs = reversed.map(function(k) {
return stringify(k.token);
});
return " (" + tokenStrs.join(" -> ") + ")";
}
return "";
}
var AbstractProviderError = function(_super) {
__extends$1(AbstractProviderError, _super);
function AbstractProviderError(injector, key, constructResolvingMessage) {
_super.call(this, "DI Error");
this.keys = [ key ];
this.injectors = [ injector ];
this.constructResolvingMessage = constructResolvingMessage;
this.message = this.constructResolvingMessage(this.keys);
}
AbstractProviderError.prototype.addKey = function(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
this.message = this.constructResolvingMessage(this.keys);
};
return AbstractProviderError;
}(BaseError);
var NoProviderError = function(_super) {
__extends$1(NoProviderError, _super);
function NoProviderError(injector, key) {
_super.call(this, injector, key, function(keys) {
var first = stringify(keys[0].token);
return "No provider for " + first + "!" + constructResolvingPath(keys);
});
}
return NoProviderError;
}(AbstractProviderError);
var CyclicDependencyError = function(_super) {
__extends$1(CyclicDependencyError, _super);
function CyclicDependencyError(injector, key) {
_super.call(this, injector, key, function(keys) {
return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
});
}
return CyclicDependencyError;
}(AbstractProviderError);
var InstantiationError = function(_super) {
__extends$1(InstantiationError, _super);
function InstantiationError(injector, originalException, originalStack, key) {
_super.call(this, "DI Error", originalException);
this.keys = [ key ];
this.injectors = [ injector ];
}
InstantiationError.prototype.addKey = function(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
};
Object.defineProperty(InstantiationError.prototype, "message", {
get: function() {
var first = stringify(this.keys[0].token);
return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
},
enumerable: true,
configurable: true
});
Object.defineProperty(InstantiationError.prototype, "causeKey", {
get: function() {
return this.keys[0];
},
enumerable: true,
configurable: true
});
return InstantiationError;
}(WrappedError);
var InvalidProviderError = function(_super) {
__extends$1(InvalidProviderError, _super);
function InvalidProviderError(provider) {
_super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
}
return InvalidProviderError;
}(BaseError);
var NoAnnotationError = function(_super) {
__extends$1(NoAnnotationError, _super);
function NoAnnotationError(typeOrFunc, params) {
_super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
}
NoAnnotationError._genMessage = function(typeOrFunc, params) {
var signature = [];
for (var i = 0, ii = params.length; i < ii; i++) {
var parameter = params[i];
if (!parameter || parameter.length == 0) {
signature.push("?");
} else {
signature.push(parameter.map(stringify).join(" "));
}
}
return "Cannot resolve all parameters for '" + stringify(typeOrFunc) + "'(" + signature.join(", ") + "). " + "Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + stringify(typeOrFunc) + "' is decorated with Injectable.";
};
return NoAnnotationError;
}(BaseError);
var OutOfBoundsError = function(_super) {
__extends$1(OutOfBoundsError, _super);
function OutOfBoundsError(index) {
_super.call(this, "Index " + index + " is out-of-bounds.");
}
return OutOfBoundsError;
}(BaseError);
var MixingMultiProvidersWithRegularProvidersError = function(_super) {
__extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
_super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " + provider2.toString());
}
return MixingMultiProvidersWithRegularProvidersError;
}(BaseError);
var ReflectiveKey = function() {
function ReflectiveKey(token, id) {
this.token = token;
this.id = id;
if (!token) {
throw new Error("Token must be defined!");
}
}
Object.defineProperty(ReflectiveKey.prototype, "displayName", {
get: function() {
return stringify(this.token);
},
enumerable: true,
configurable: true
});
ReflectiveKey.get = function(token) {
return _globalKeyRegistry.get(resolveForwardRef(token));
};
Object.defineProperty(ReflectiveKey, "numberOfKeys", {
get: function() {
return _globalKeyRegistry.numberOfKeys;
},
enumerable: true,
configurable: true
});
return ReflectiveKey;
}();
var KeyRegistry = function() {
function KeyRegistry() {
this._allKeys = new Map();
}
KeyRegistry.prototype.get = function(token) {
if (token instanceof ReflectiveKey) return token;
if (this._allKeys.has(token)) {
return this._allKeys.get(token);
}
var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
this._allKeys.set(token, newKey);
return newKey;
};
Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
get: function() {
return this._allKeys.size;
},
enumerable: true,
configurable: true
});
return KeyRegistry;
}();
var _globalKeyRegistry = new KeyRegistry();
var Type = Function;
var ReflectionCapabilities = function() {
function ReflectionCapabilities(reflect) {
this._reflect = reflect || global$1.Reflect;
}
ReflectionCapabilities.prototype.isReflectionEnabled = function() {
return true;
};
ReflectionCapabilities.prototype.factory = function(t) {
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
return new (t.bind.apply(t, [ void 0 ].concat(args)))();
};
};
ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
var result;
if (typeof paramTypes === "undefined") {
result = new Array(paramAnnotations.length);
} else {
result = new Array(paramTypes.length);
}
for (var i = 0; i < result.length; i++) {
if (typeof paramTypes === "undefined") {
result[i] = [];
} else if (paramTypes[i] != Object) {
result[i] = [ paramTypes[i] ];
} else {
result[i] = [];
}
if (paramAnnotations && isPresent(paramAnnotations[i])) {
result[i] = result[i].concat(paramAnnotations[i]);
}
}
return result;
};
ReflectionCapabilities.prototype.parameters = function(type) {
if (type.parameters) {
return type.parameters;
}
var tsickleCtorParams = type.ctorParameters;
if (tsickleCtorParams) {
var ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
var paramTypes = ctorParameters.map(function(ctorParam) {
return ctorParam && ctorParam.type;
});
var paramAnnotations = ctorParameters.map(function(ctorParam) {
return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
});
return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
}
if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
var paramAnnotations = this._reflect.getMetadata("parameters", type);
var paramTypes = this._reflect.getMetadata("design:paramtypes", type);
if (paramTypes || paramAnnotations) {
return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
}
}
return new Array(type.length).fill(undefined);
};
ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
if (typeOrFunc.annotations) {
var annotations = typeOrFunc.annotations;
if (typeof annotations === "function" && annotations.annotations) {
annotations = annotations.annotations;
}
return annotations;
}
if (typeOrFunc.decorators) {
return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
}
if (this._reflect && this._reflect.getMetadata) {
var annotations = this._reflect.getMetadata("annotations", typeOrFunc);
if (annotations) return annotations;
}
return [];
};
ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
if (typeOrFunc.propMetadata) {
var propMetadata = typeOrFunc.propMetadata;
if (typeof propMetadata === "function" && propMetadata.propMetadata) {
propMetadata = propMetadata.propMetadata;
}
return propMetadata;
}
if (typeOrFunc.propDecorators) {
var propDecorators_1 = typeOrFunc.propDecorators;
var propMetadata_1 = {};
Object.keys(propDecorators_1).forEach(function(prop) {
propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
});
return propMetadata_1;
}
if (this._reflect && this._reflect.getMetadata) {
var propMetadata = this._reflect.getMetadata("propMetadata", typeOrFunc);
if (propMetadata) return propMetadata;
}
return {};
};
ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
return type instanceof Type && lcProperty in type.prototype;
};
ReflectionCapabilities.prototype.getter = function(name) {
return new Function("o", "return o." + name + ";");
};
ReflectionCapabilities.prototype.setter = function(name) {
return new Function("o", "v", "return o." + name + " = v;");
};
ReflectionCapabilities.prototype.method = function(name) {
var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
return new Function("o", "args", functionBody);
};
ReflectionCapabilities.prototype.importUri = function(type) {
if (typeof type === "object" && type["filePath"]) {
return type["filePath"];
}
return "./" + stringify(type);
};
ReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
return runtime;
};
ReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
return enumIdentifier[name];
};
return ReflectionCapabilities;
}();
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
if (!decoratorInvocations) {
return [];
}
return decoratorInvocations.map(function(decoratorInvocation) {
var decoratorType = decoratorInvocation.type;
var annotationCls = decoratorType.annotationCls;
var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
return new (annotationCls.bind.apply(annotationCls, [ void 0 ].concat(annotationArgs)))();
});
}
var ReflectorReader = function() {
function ReflectorReader() {}
return ReflectorReader;
}();
var __extends$2 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Reflector = function(_super) {
__extends$2(Reflector, _super);
function Reflector(reflectionCapabilities) {
_super.call(this);
this.reflectionCapabilities = reflectionCapabilities;
}
Reflector.prototype.updateCapabilities = function(caps) {
this.reflectionCapabilities = caps;
};
Reflector.prototype.factory = function(type) {
return this.reflectionCapabilities.factory(type);
};
Reflector.prototype.parameters = function(typeOrFunc) {
return this.reflectionCapabilities.parameters(typeOrFunc);
};
Reflector.prototype.annotations = function(typeOrFunc) {
return this.reflectionCapabilities.annotations(typeOrFunc);
};
Reflector.prototype.propMetadata = function(typeOrFunc) {
return this.reflectionCapabilities.propMetadata(typeOrFunc);
};
Reflector.prototype.hasLifecycleHook = function(type, lcProperty) {
return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
};
Reflector.prototype.getter = function(name) {
return this.reflectionCapabilities.getter(name);
};
Reflector.prototype.setter = function(name) {
return this.reflectionCapabilities.setter(name);
};
Reflector.prototype.method = function(name) {
return this.reflectionCapabilities.method(name);
};
Reflector.prototype.importUri = function(type) {
return this.reflectionCapabilities.importUri(type);
};
Reflector.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
};
Reflector.prototype.resolveEnum = function(identifier, name) {
return this.reflectionCapabilities.resolveEnum(identifier, name);
};
return Reflector;
}(ReflectorReader);
var reflector = new Reflector(new ReflectionCapabilities());
var ReflectiveDependency = function() {
function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
this.key = key;
this.optional = optional;
this.lowerBoundVisibility = lowerBoundVisibility;
this.upperBoundVisibility = upperBoundVisibility;
this.properties = properties;
}
ReflectiveDependency.fromKey = function(key) {
return new ReflectiveDependency(key, false, null, null, []);
};
return ReflectiveDependency;
}();
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = function() {
function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
this.key = key;
this.resolvedFactories = resolvedFactories;
this.multiProvider = multiProvider;
}
Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
get: function() {
return this.resolvedFactories[0];
},
enumerable: true,
configurable: true
});
return ResolvedReflectiveProvider_;
}();
var ResolvedReflectiveFactory = function() {
function ResolvedReflectiveFactory(factory, dependencies) {
this.factory = factory;
this.dependencies = dependencies;
}
return ResolvedReflectiveFactory;
}();
function resolveReflectiveFactory(provider) {
var factoryFn;
var resolvedDeps;
if (provider.useClass) {
var useClass = resolveForwardRef(provider.useClass);
factoryFn = reflector.factory(useClass);
resolvedDeps = _dependenciesFor(useClass);
} else if (provider.useExisting) {
factoryFn = function(aliasInstance) {
return aliasInstance;
};
resolvedDeps = [ ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting)) ];
} else if (provider.useFactory) {
factoryFn = provider.useFactory;
resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
} else {
factoryFn = function() {
return provider.useValue;
};
resolvedDeps = _EMPTY_LIST;
}
return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
function resolveReflectiveProvider(provider) {
return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [ resolveReflectiveFactory(provider) ], provider.multi);
}
function resolveReflectiveProviders(providers) {
var normalized = _normalizeProviders(providers, []);
var resolved = normalized.map(resolveReflectiveProvider);
var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
return Array.from(resolvedProviderMap.values());
}
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
for (var i = 0; i < providers.length; i++) {
var provider = providers[i];
var existing = normalizedProvidersMap.get(provider.key.id);
if (existing) {
if (provider.multiProvider !== existing.multiProvider) {
throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
}
if (provider.multiProvider) {
for (var j = 0; j < provider.resolvedFactories.length; j++) {
existing.resolvedFactories.push(provider.resolvedFactories[j]);
}
} else {
normalizedProvidersMap.set(provider.key.id, provider);
}
} else {
var resolvedProvider = void 0;
if (provider.multiProvider) {
resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
} else {
resolvedProvider = provider;
}
normalizedProvidersMap.set(provider.key.id, resolvedProvider);
}
}
return normalizedProvidersMap;
}
function _normalizeProviders(providers, res) {
providers.forEach(function(b) {
if (b instanceof Type) {
res.push({
provide: b,
useClass: b
});
} else if (b && typeof b == "object" && b.provide !== undefined) {
res.push(b);
} else if (b instanceof Array) {
_normalizeProviders(b, res);
} else {
throw new InvalidProviderError(b);
}
});
return res;
}
function constructDependencies(typeOrFunc, dependencies) {
if (!dependencies) {
return _dependenciesFor(typeOrFunc);
} else {
var params_1 = dependencies.map(function(t) {
return [ t ];
});
return dependencies.map(function(t) {
return _extractToken(typeOrFunc, t, params_1);
});
}
}
function _dependenciesFor(typeOrFunc) {
var params = reflector.parameters(typeOrFunc);
if (!params) return [];
if (params.some(function(p) {
return p == null;
})) {
throw new NoAnnotationError(typeOrFunc, params);
}
return params.map(function(p) {
return _extractToken(typeOrFunc, p, params);
});
}
function _extractToken(typeOrFunc, metadata, params) {
var depProps = [];
var token = null;
var optional = false;
if (!Array.isArray(metadata)) {
if (metadata instanceof Inject) {
return _createDependency(metadata.token, optional, null, null, depProps);
} else {
return _createDependency(metadata, optional, null, null, depProps);
}
}
var lowerBoundVisibility = null;
var upperBoundVisibility = null;
for (var i = 0; i < metadata.length; ++i) {
var paramMetadata = metadata[i];
if (paramMetadata instanceof Type) {
token = paramMetadata;
} else if (paramMetadata instanceof Inject) {
token = paramMetadata.token;
} else if (paramMetadata instanceof Optional) {
optional = true;
} else if (paramMetadata instanceof Self) {
upperBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof Host) {
upperBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof SkipSelf) {
lowerBoundVisibility = paramMetadata;
}
}
token = resolveForwardRef(token);
if (token != null) {
return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
} else {
throw new NoAnnotationError(typeOrFunc, params);
}
}
function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
}
var _MAX_CONSTRUCTION_COUNTER = 10;
var UNDEFINED = new Object();
var ReflectiveProtoInjectorInlineStrategy = function() {
function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
this.provider0 = null;
this.provider1 = null;
this.provider2 = null;
this.provider3 = null;
this.provider4 = null;
this.provider5 = null;
this.provider6 = null;
this.provider7 = null;
this.provider8 = null;
this.provider9 = null;
this.keyId0 = null;
this.keyId1 = null;
this.keyId2 = null;
this.keyId3 = null;
this.keyId4 = null;
this.keyId5 = null;
this.keyId6 = null;
this.keyId7 = null;
this.keyId8 = null;
this.keyId9 = null;
var length = providers.length;
if (length > 0) {
this.provider0 = providers[0];
this.keyId0 = providers[0].key.id;
}
if (length > 1) {
this.provider1 = providers[1];
this.keyId1 = providers[1].key.id;
}
if (length > 2) {
this.provider2 = providers[2];
this.keyId2 = providers[2].key.id;
}
if (length > 3) {
this.provider3 = providers[3];
this.keyId3 = providers[3].key.id;
}
if (length > 4) {
this.provider4 = providers[4];
this.keyId4 = providers[4].key.id;
}
if (length > 5) {
this.provider5 = providers[5];
this.keyId5 = providers[5].key.id;
}
if (length > 6) {
this.provider6 = providers[6];
this.keyId6 = providers[6].key.id;
}
if (length > 7) {
this.provider7 = providers[7];
this.keyId7 = providers[7].key.id;
}
if (length > 8) {
this.provider8 = providers[8];
this.keyId8 = providers[8].key.id;
}
if (length > 9) {
this.provider9 = providers[9];
this.keyId9 = providers[9].key.id;
}
}
ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
if (index == 0) return this.provider0;
if (index == 1) return this.provider1;
if (index == 2) return this.provider2;
if (index == 3) return this.provider3;
if (index == 4) return this.provider4;
if (index == 5) return this.provider5;
if (index == 6) return this.provider6;
if (index == 7) return this.provider7;
if (index == 8) return this.provider8;
if (index == 9) return this.provider9;
throw new OutOfBoundsError(index);
};
ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
return new ReflectiveInjectorInlineStrategy(injector, this);
};
return ReflectiveProtoInjectorInlineStrategy;
}();
var ReflectiveProtoInjectorDynamicStrategy = function() {
function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
this.providers = providers;
var len = providers.length;
this.keyIds = new Array(len);
for (var i = 0; i < len; i++) {
this.keyIds[i] = providers[i].key.id;
}
}
ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
if (index < 0 || index >= this.providers.length) {
throw new OutOfBoundsError(index);
}
return this.providers[index];
};
ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
return new ReflectiveInjectorDynamicStrategy(this, ei);
};
return ReflectiveProtoInjectorDynamicStrategy;
}();
var ReflectiveProtoInjector = function() {
function ReflectiveProtoInjector(providers) {
this.numberOfProviders = providers.length;
this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
}
ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
return new ReflectiveProtoInjector(providers);
};
ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
return this._strategy.getProviderAtIndex(index);
};
return ReflectiveProtoInjector;
}();
var ReflectiveInjectorInlineStrategy = function() {
function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
this.injector = injector;
this.protoStrategy = protoStrategy;
this.obj0 = UNDEFINED;
this.obj1 = UNDEFINED;
this.obj2 = UNDEFINED;
this.obj3 = UNDEFINED;
this.obj4 = UNDEFINED;
this.obj5 = UNDEFINED;
this.obj6 = UNDEFINED;
this.obj7 = UNDEFINED;
this.obj8 = UNDEFINED;
this.obj9 = UNDEFINED;
}
ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
this.injector._constructionCounter = 0;
};
ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
return this.injector._new(provider);
};
ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
var p = this.protoStrategy;
var inj = this.injector;
if (p.keyId0 === keyId) {
if (this.obj0 === UNDEFINED) {
this.obj0 = inj._new(p.provider0);
}
return this.obj0;
}
if (p.keyId1 === keyId) {
if (this.obj1 === UNDEFINED) {
this.obj1 = inj._new(p.provider1);
}
return this.obj1;
}
if (p.keyId2 === keyId) {
if (this.obj2 === UNDEFINED) {
this.obj2 = inj._new(p.provider2);
}
return this.obj2;
}
if (p.keyId3 === keyId) {
if (this.obj3 === UNDEFINED) {
this.obj3 = inj._new(p.provider3);
}
return this.obj3;
}
if (p.keyId4 === keyId) {
if (this.obj4 === UNDEFINED) {
this.obj4 = inj._new(p.provider4);
}
return this.obj4;
}
if (p.keyId5 === keyId) {
if (this.obj5 === UNDEFINED) {
this.obj5 = inj._new(p.provider5);
}
return this.obj5;
}
if (p.keyId6 === keyId) {
if (this.obj6 === UNDEFINED) {
this.obj6 = inj._new(p.provider6);
}
return this.obj6;
}
if (p.keyId7 === keyId) {
if (this.obj7 === UNDEFINED) {
this.obj7 = inj._new(p.provider7);
}
return this.obj7;
}
if (p.keyId8 === keyId) {
if (this.obj8 === UNDEFINED) {
this.obj8 = inj._new(p.provider8);
}
return this.obj8;
}
if (p.keyId9 === keyId) {
if (this.obj9 === UNDEFINED) {
this.obj9 = inj._new(p.provider9);
}
return this.obj9;
}
return UNDEFINED;
};
ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
if (index == 0) return this.obj0;
if (index == 1) return this.obj1;
if (index == 2) return this.obj2;
if (index == 3) return this.obj3;
if (index == 4) return this.obj4;
if (index == 5) return this.obj5;
if (index == 6) return this.obj6;
if (index == 7) return this.obj7;
if (index == 8) return this.obj8;
if (index == 9) return this.obj9;
throw new OutOfBoundsError(index);
};
ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
return _MAX_CONSTRUCTION_COUNTER;
};
return ReflectiveInjectorInlineStrategy;
}();
var ReflectiveInjectorDynamicStrategy = function() {
function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
this.protoStrategy = protoStrategy;
this.injector = injector;
this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
}
ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
this.injector._constructionCounter = 0;
};
ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
return this.injector._new(provider);
};
ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
var p = this.protoStrategy;
for (var i = 0; i < p.keyIds.length; i++) {
if (p.keyIds[i] === keyId) {
if (this.objs[i] === UNDEFINED) {
this.objs[i] = this.injector._new(p.providers[i]);
}
return this.objs[i];
}
}
return UNDEFINED;
};
ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
if (index < 0 || index >= this.objs.length) {
throw new OutOfBoundsError(index);
}
return this.objs[index];
};
ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
return this.objs.length;
};
return ReflectiveInjectorDynamicStrategy;
}();
var ReflectiveInjector = function() {
function ReflectiveInjector() {}
ReflectiveInjector.resolve = function(providers) {
return resolveReflectiveProviders(providers);
};
ReflectiveInjector.resolveAndCreate = function(providers, parent) {
if (parent === void 0) {
parent = null;
}
var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
};
ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
if (parent === void 0) {
parent = null;
}
return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
};
Object.defineProperty(ReflectiveInjector.prototype, "parent", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
return unimplemented();
};
ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
return unimplemented();
};
ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
return unimplemented();
};
ReflectiveInjector.prototype.instantiateResolved = function(provider) {
return unimplemented();
};
return ReflectiveInjector;
}();
var ReflectiveInjector_ = function() {
function ReflectiveInjector_(_proto, _parent) {
if (_parent === void 0) {
_parent = null;
}
this._constructionCounter = 0;
this._proto = _proto;
this._parent = _parent;
this._strategy = _proto._strategy.createInjectorStrategy(this);
}
ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = THROW_IF_NOT_FOUND;
}
return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
};
ReflectiveInjector_.prototype.getAt = function(index) {
return this._strategy.getObjAtIndex(index);
};
Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
get: function() {
return this._strategy;
},
enumerable: true,
configurable: true
});
ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
return this.createChildFromResolved(ResolvedReflectiveProviders);
};
ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
var proto = new ReflectiveProtoInjector(providers);
var inj = new ReflectiveInjector_(proto);
inj._parent = this;
return inj;
};
ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
return this.instantiateResolved(ReflectiveInjector.resolve([ provider ])[0]);
};
ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
return this._instantiateProvider(provider);
};
ReflectiveInjector_.prototype._new = function(provider) {
if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
throw new CyclicDependencyError(this, provider.key);
}
return this._instantiateProvider(provider);
};
ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
if (provider.multiProvider) {
var res = new Array(provider.resolvedFactories.length);
for (var i = 0; i < provider.resolvedFactories.length; ++i) {
res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
}
return res;
} else {
return this._instantiate(provider, provider.resolvedFactories[0]);
}
};
ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
var factory = ResolvedReflectiveFactory.factory;
var deps = ResolvedReflectiveFactory.dependencies;
var length = deps.length;
var d0;
var d1;
var d2;
var d3;
var d4;
var d5;
var d6;
var d7;
var d8;
var d9;
var d10;
var d11;
var d12;
var d13;
var d14;
var d15;
var d16;
var d17;
var d18;
var d19;
try {
d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
} catch (e) {
if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
e.addKey(this, provider.key);
}
throw e;
}
var obj;
try {
switch (length) {
case 0:
obj = factory();
break;

case 1:
obj = factory(d0);
break;

case 2:
obj = factory(d0, d1);
break;

case 3:
obj = factory(d0, d1, d2);
break;

case 4:
obj = factory(d0, d1, d2, d3);
break;

case 5:
obj = factory(d0, d1, d2, d3, d4);
break;

case 6:
obj = factory(d0, d1, d2, d3, d4, d5);
break;

case 7:
obj = factory(d0, d1, d2, d3, d4, d5, d6);
break;

case 8:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
break;

case 9:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
break;

case 10:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
break;

case 11:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
break;

case 12:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
break;

case 13:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
break;

case 14:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
break;

case 15:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
break;

case 16:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
break;

case 17:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
break;

case 18:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
break;

case 19:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
break;

case 20:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
break;

default:
throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
}
} catch (e) {
throw new InstantiationError(this, e, e.stack, provider.key);
}
return obj;
};
ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
};
ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
if (key === INJECTOR_KEY) {
return this;
}
if (upperBoundVisibility instanceof Self) {
return this._getByKeySelf(key, notFoundValue);
} else {
return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
}
};
ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
if (notFoundValue !== THROW_IF_NOT_FOUND) {
return notFoundValue;
} else {
throw new NoProviderError(this, key);
}
};
ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
var obj = this._strategy.getObjByKeyId(key.id);
return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
};
ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
var inj;
if (lowerBoundVisibility instanceof SkipSelf) {
inj = this._parent;
} else {
inj = this;
}
while (inj instanceof ReflectiveInjector_) {
var inj_ = inj;
var obj = inj_._strategy.getObjByKeyId(key.id);
if (obj !== UNDEFINED) return obj;
inj = inj_._parent;
}
if (inj !== null) {
return inj.get(key.token, notFoundValue);
} else {
return this._throwOrNull(key, notFoundValue);
}
};
Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
get: function() {
var providers = _mapProviders(this, function(b) {
return ' "' + b.key.displayName + '" ';
}).join(", ");
return "ReflectiveInjector(providers: [" + providers + "])";
},
enumerable: true,
configurable: true
});
ReflectiveInjector_.prototype.toString = function() {
return this.displayName;
};
return ReflectiveInjector_;
}();
var INJECTOR_KEY = ReflectiveKey.get(Injector);
function _mapProviders(injector, fn) {
var res = new Array(injector._proto.numberOfProviders);
for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
res[i] = fn(injector._proto.getProviderAtIndex(i));
}
return res;
}
var ErrorHandler = function() {
function ErrorHandler(rethrowError) {
if (rethrowError === void 0) {
rethrowError = true;
}
this._console = console;
this.rethrowError = rethrowError;
}
ErrorHandler.prototype.handleError = function(error) {
var originalError = this._findOriginalError(error);
var originalStack = this._findOriginalStack(error);
var context = this._findContext(error);
this._console.error("EXCEPTION: " + this._extractMessage(error));
if (originalError) {
this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
}
if (originalStack) {
this._console.error("ORIGINAL STACKTRACE:");
this._console.error(originalStack);
}
if (context) {
this._console.error("ERROR CONTEXT:");
this._console.error(context);
}
if (this.rethrowError) throw error;
};
ErrorHandler.prototype._extractMessage = function(error) {
return error instanceof Error ? error.message : error.toString();
};
ErrorHandler.prototype._findContext = function(error) {
if (error) {
return error.context ? error.context : this._findContext(error.originalError);
}
return null;
};
ErrorHandler.prototype._findOriginalError = function(error) {
var e = error.originalError;
while (e && e.originalError) {
e = e.originalError;
}
return e;
};
ErrorHandler.prototype._findOriginalStack = function(error) {
if (!(error instanceof Error)) return null;
var e = error;
var stack = e.stack;
while (e instanceof Error && e.originalError) {
e = e.originalError;
if (e instanceof Error && e.stack) {
stack = e.stack;
}
}
return stack;
};
return ErrorHandler;
}();
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
var k = _a[_i];
m[k] = m1[k];
}
for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
var k = _c[_b];
m[k] = m2[k];
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
for (var i = 0; i < k1.length; i++) {
var key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
if (index > -1) {
list.splice(index, 1);
}
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.flatten = function(list) {
return list.reduce(function(flat, item) {
var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
return flat.concat(flatItem);
}, []);
};
return ListWrapper;
}();
function isListLikeIterable(obj) {
if (!isJsObject(obj)) return false;
return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj;
}
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[getSymbolIterator()]();
var iterator2 = b[getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
function iterateListLike(obj, fn) {
if (Array.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[getSymbolIterator()]();
var item = void 0;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
function isPromise(obj) {
return !!obj && typeof obj.then === "function";
}
var APP_INITIALIZER = new OpaqueToken("Application Initializer");
var ApplicationInitStatus = function() {
function ApplicationInitStatus(appInits) {
var _this = this;
this._done = false;
var asyncInitPromises = [];
if (appInits) {
for (var i = 0; i < appInits.length; i++) {
var initResult = appInits[i]();
if (isPromise(initResult)) {
asyncInitPromises.push(initResult);
}
}
}
this._donePromise = Promise.all(asyncInitPromises).then(function() {
_this._done = true;
});
if (asyncInitPromises.length === 0) {
this._done = true;
}
}
Object.defineProperty(ApplicationInitStatus.prototype, "done", {
get: function() {
return this._done;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
get: function() {
return this._donePromise;
},
enumerable: true,
configurable: true
});
ApplicationInitStatus.decorators = [ {
type: Injectable
} ];
ApplicationInitStatus.ctorParameters = [ {
type: Array,
decorators: [ {
type: Inject,
args: [ APP_INITIALIZER ]
}, {
type: Optional
} ]
} ];
return ApplicationInitStatus;
}();
var APP_ID = new OpaqueToken("AppId");
function _appIdRandomProviderFactory() {
return "" + _randomChar() + _randomChar() + _randomChar();
}
var APP_ID_RANDOM_PROVIDER = {
provide: APP_ID,
useFactory: _appIdRandomProviderFactory,
deps: []
};
function _randomChar() {
return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
var PLATFORM_INITIALIZER = new OpaqueToken("Platform Initializer");
var APP_BOOTSTRAP_LISTENER = new OpaqueToken("appBootstrapListener");
var PACKAGE_ROOT_URL = new OpaqueToken("Application Packages Root URL");
var Console = function() {
function Console() {}
Console.prototype.log = function(message) {
print(message);
};
Console.prototype.warn = function(message) {
warn(message);
};
Console.decorators = [ {
type: Injectable
} ];
Console.ctorParameters = [];
return Console;
}();
var __extends$4 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ComponentStillLoadingError = function(_super) {
__extends$4(ComponentStillLoadingError, _super);
function ComponentStillLoadingError(compType) {
_super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
this.compType = compType;
}
return ComponentStillLoadingError;
}(BaseError);
var ModuleWithComponentFactories = function() {
function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
this.ngModuleFactory = ngModuleFactory;
this.componentFactories = componentFactories;
}
return ModuleWithComponentFactories;
}();
function _throwError() {
throw new Error("Runtime compiler is not loaded");
}
var Compiler = function() {
function Compiler() {}
Compiler.prototype.compileModuleSync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.compileModuleAsync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.clearCache = function() {};
Compiler.prototype.clearCacheFor = function(type) {};
return Compiler;
}();
var COMPILER_OPTIONS = new OpaqueToken("compilerOptions");
var CompilerFactory = function() {
function CompilerFactory() {}
return CompilerFactory;
}();
var ElementRef = function() {
function ElementRef(nativeElement) {
this.nativeElement = nativeElement;
}
return ElementRef;
}();
var DefaultIterableDifferFactory = function() {
function DefaultIterableDifferFactory() {}
DefaultIterableDifferFactory.prototype.supports = function(obj) {
return isListLikeIterable(obj);
};
DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
return new DefaultIterableDiffer(trackByFn);
};
return DefaultIterableDifferFactory;
}();
var trackByIdentity = function(index, item) {
return item;
};
var DefaultIterableDiffer = function() {
function DefaultIterableDiffer(_trackByFn) {
this._trackByFn = _trackByFn;
this._length = null;
this._collection = null;
this._linkedRecords = null;
this._unlinkedRecords = null;
this._previousItHead = null;
this._itHead = null;
this._itTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._movesHead = null;
this._movesTail = null;
this._removalsHead = null;
this._removalsTail = null;
this._identityChangesHead = null;
this._identityChangesTail = null;
this._trackByFn = this._trackByFn || trackByIdentity;
}
Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
get: function() {
return this._collection;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
get: function() {
return this._length;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._itHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
var nextIt = this._itHead;
var nextRemove = this._removalsHead;
var addRemoveOffset = 0;
var moveOffsets = null;
while (nextIt || nextRemove) {
var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
var currentIndex = record.currentIndex;
if (record === nextRemove) {
addRemoveOffset--;
nextRemove = nextRemove._nextRemoved;
} else {
nextIt = nextIt._next;
if (record.previousIndex == null) {
addRemoveOffset++;
} else {
if (!moveOffsets) moveOffsets = [];
var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
var localCurrentIndex = currentIndex - addRemoveOffset;
if (localMovePreviousIndex != localCurrentIndex) {
for (var i = 0; i < localMovePreviousIndex; i++) {
var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
var index = offset + i;
if (localCurrentIndex <= index && index < localMovePreviousIndex) {
moveOffsets[i] = offset + 1;
}
}
var previousIndex = record.previousIndex;
moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
}
}
}
if (adjPreviousIndex !== currentIndex) {
fn(record, adjPreviousIndex, currentIndex);
}
}
};
DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
var record;
for (record = this._movesHead; record !== null; record = record._nextMoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
var record;
for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
fn(record);
}
};
DefaultIterableDiffer.prototype.diff = function(collection) {
if (isBlank(collection)) collection = [];
if (!isListLikeIterable(collection)) {
throw new Error("Error trying to diff '" + collection + "'");
}
if (this.check(collection)) {
return this;
} else {
return null;
}
};
DefaultIterableDiffer.prototype.onDestroy = function() {};
DefaultIterableDiffer.prototype.check = function(collection) {
var _this = this;
this._reset();
var record = this._itHead;
var mayBeDirty = false;
var index;
var item;
var itemTrackBy;
if (Array.isArray(collection)) {
var list = collection;
this._length = collection.length;
for (var index_1 = 0; index_1 < this._length; index_1++) {
item = list[index_1];
itemTrackBy = this._trackByFn(index_1, item);
if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
record = this._mismatch(record, item, itemTrackBy, index_1);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
}
if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
}
record = record._next;
}
} else {
index = 0;
iterateListLike(collection, function(item) {
itemTrackBy = _this._trackByFn(index, item);
if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
record = _this._mismatch(record, item, itemTrackBy, index);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = _this._verifyReinsertion(record, item, itemTrackBy, index);
}
if (!looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
}
record = record._next;
index++;
});
this._length = index;
}
this._truncate(record);
this._collection = collection;
return this.isDirty;
};
Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype._reset = function() {
if (this.isDirty) {
var record = void 0;
var nextRecord = void 0;
for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
record.previousIndex = record.currentIndex;
}
this._additionsHead = this._additionsTail = null;
for (record = this._movesHead; record !== null; record = nextRecord) {
record.previousIndex = record.currentIndex;
nextRecord = record._nextMoved;
}
this._movesHead = this._movesTail = null;
this._removalsHead = this._removalsTail = null;
this._identityChangesHead = this._identityChangesTail = null;
}
};
DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
var previousRecord;
if (record === null) {
previousRecord = this._itTail;
} else {
previousRecord = record._prev;
this._remove(record);
}
record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
if (record !== null) {
if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._moveAfter(record, previousRecord, index);
} else {
record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
if (record !== null) {
if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._reinsertAfter(record, previousRecord, index);
} else {
record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
}
}
return record;
};
DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
if (reinsertRecord !== null) {
record = this._reinsertAfter(reinsertRecord, record._prev, index);
} else if (record.currentIndex != index) {
record.currentIndex = index;
this._addToMoves(record, index);
}
return record;
};
DefaultIterableDiffer.prototype._truncate = function(record) {
while (record !== null) {
var nextRecord = record._next;
this._addToRemovals(this._unlink(record));
record = nextRecord;
}
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.clear();
}
if (this._additionsTail !== null) {
this._additionsTail._nextAdded = null;
}
if (this._movesTail !== null) {
this._movesTail._nextMoved = null;
}
if (this._itTail !== null) {
this._itTail._next = null;
}
if (this._removalsTail !== null) {
this._removalsTail._nextRemoved = null;
}
if (this._identityChangesTail !== null) {
this._identityChangesTail._nextIdentityChange = null;
}
};
DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.remove(record);
}
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
this._unlink(record);
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
this._insertAfter(record, prevRecord, index);
if (this._additionsTail === null) {
this._additionsTail = this._additionsHead = record;
} else {
this._additionsTail = this._additionsTail._nextAdded = record;
}
return record;
};
DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
var next = prevRecord === null ? this._itHead : prevRecord._next;
record._next = next;
record._prev = prevRecord;
if (next === null) {
this._itTail = record;
} else {
next._prev = record;
}
if (prevRecord === null) {
this._itHead = record;
} else {
prevRecord._next = record;
}
if (this._linkedRecords === null) {
this._linkedRecords = new _DuplicateMap();
}
this._linkedRecords.put(record);
record.currentIndex = index;
return record;
};
DefaultIterableDiffer.prototype._remove = function(record) {
return this._addToRemovals(this._unlink(record));
};
DefaultIterableDiffer.prototype._unlink = function(record) {
if (this._linkedRecords !== null) {
this._linkedRecords.remove(record);
}
var prev = record._prev;
var next = record._next;
if (prev === null) {
this._itHead = next;
} else {
prev._next = next;
}
if (next === null) {
this._itTail = prev;
} else {
next._prev = prev;
}
return record;
};
DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
if (record.previousIndex === toIndex) {
return record;
}
if (this._movesTail === null) {
this._movesTail = this._movesHead = record;
} else {
this._movesTail = this._movesTail._nextMoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addToRemovals = function(record) {
if (this._unlinkedRecords === null) {
this._unlinkedRecords = new _DuplicateMap();
}
this._unlinkedRecords.put(record);
record.currentIndex = null;
record._nextRemoved = null;
if (this._removalsTail === null) {
this._removalsTail = this._removalsHead = record;
record._prevRemoved = null;
} else {
record._prevRemoved = this._removalsTail;
this._removalsTail = this._removalsTail._nextRemoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
record.item = item;
if (this._identityChangesTail === null) {
this._identityChangesTail = this._identityChangesHead = record;
} else {
this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
}
return record;
};
DefaultIterableDiffer.prototype.toString = function() {
var list = [];
this.forEachItem(function(record) {
return list.push(record);
});
var previous = [];
this.forEachPreviousItem(function(record) {
return previous.push(record);
});
var additions = [];
this.forEachAddedItem(function(record) {
return additions.push(record);
});
var moves = [];
this.forEachMovedItem(function(record) {
return moves.push(record);
});
var removals = [];
this.forEachRemovedItem(function(record) {
return removals.push(record);
});
var identityChanges = [];
this.forEachIdentityChange(function(record) {
return identityChanges.push(record);
});
return "collection: " + list.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "moves: " + moves.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n" + "identityChanges: " + identityChanges.join(", ") + "\n";
};
return DefaultIterableDiffer;
}();
var CollectionChangeRecord = function() {
function CollectionChangeRecord(item, trackById) {
this.item = item;
this.trackById = trackById;
this.currentIndex = null;
this.previousIndex = null;
this._nextPrevious = null;
this._prev = null;
this._next = null;
this._prevDup = null;
this._nextDup = null;
this._prevRemoved = null;
this._nextRemoved = null;
this._nextAdded = null;
this._nextMoved = null;
this._nextIdentityChange = null;
}
CollectionChangeRecord.prototype.toString = function() {
return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + "[" + stringify(this.previousIndex) + "->" + stringify(this.currentIndex) + "]";
};
return CollectionChangeRecord;
}();
var _DuplicateItemRecordList = function() {
function _DuplicateItemRecordList() {
this._head = null;
this._tail = null;
}
_DuplicateItemRecordList.prototype.add = function(record) {
if (this._head === null) {
this._head = this._tail = record;
record._nextDup = null;
record._prevDup = null;
} else {
this._tail._nextDup = record;
record._prevDup = this._tail;
record._nextDup = null;
this._tail = record;
}
};
_DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
var record;
for (record = this._head; record !== null; record = record._nextDup) {
if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
return record;
}
}
return null;
};
_DuplicateItemRecordList.prototype.remove = function(record) {
var prev = record._prevDup;
var next = record._nextDup;
if (prev === null) {
this._head = next;
} else {
prev._nextDup = next;
}
if (next === null) {
this._tail = prev;
} else {
next._prevDup = prev;
}
return this._head === null;
};
return _DuplicateItemRecordList;
}();
var _DuplicateMap = function() {
function _DuplicateMap() {
this.map = new Map();
}
_DuplicateMap.prototype.put = function(record) {
var key = record.trackById;
var duplicates = this.map.get(key);
if (!duplicates) {
duplicates = new _DuplicateItemRecordList();
this.map.set(key, duplicates);
}
duplicates.add(record);
};
_DuplicateMap.prototype.get = function(trackById, afterIndex) {
if (afterIndex === void 0) {
afterIndex = null;
}
var key = trackById;
var recordList = this.map.get(key);
return recordList ? recordList.get(trackById, afterIndex) : null;
};
_DuplicateMap.prototype.remove = function(record) {
var key = record.trackById;
var recordList = this.map.get(key);
if (recordList.remove(record)) {
this.map.delete(key);
}
return record;
};
Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
get: function() {
return this.map.size === 0;
},
enumerable: true,
configurable: true
});
_DuplicateMap.prototype.clear = function() {
this.map.clear();
};
_DuplicateMap.prototype.toString = function() {
return "_DuplicateMap(" + stringify(this.map) + ")";
};
return _DuplicateMap;
}();
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
var previousIndex = item.previousIndex;
if (previousIndex === null) return previousIndex;
var moveOffset = 0;
if (moveOffsets && previousIndex < moveOffsets.length) {
moveOffset = moveOffsets[previousIndex];
}
return previousIndex + addRemoveOffset + moveOffset;
}
var DefaultKeyValueDifferFactory = function() {
function DefaultKeyValueDifferFactory() {}
DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
return obj instanceof Map || isJsObject(obj);
};
DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
return new DefaultKeyValueDiffer();
};
return DefaultKeyValueDifferFactory;
}();
var DefaultKeyValueDiffer = function() {
function DefaultKeyValueDiffer() {
this._records = new Map();
this._mapHead = null;
this._previousMapHead = null;
this._changesHead = null;
this._changesTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._removalsHead = null;
this._removalsTail = null;
}
Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
},
enumerable: true,
configurable: true
});
DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._mapHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
var record;
for (record = this._changesHead; record !== null; record = record._nextChanged) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.diff = function(map) {
if (!map) {
map = new Map();
} else if (!(map instanceof Map || isJsObject(map))) {
throw new Error("Error trying to diff '" + map + "'");
}
return this.check(map) ? this : null;
};
DefaultKeyValueDiffer.prototype.onDestroy = function() {};
DefaultKeyValueDiffer.prototype.check = function(map) {
var _this = this;
this._reset();
var records = this._records;
var oldSeqRecord = this._mapHead;
var lastOldSeqRecord = null;
var lastNewSeqRecord = null;
var seqChanged = false;
this._forEach(map, function(value, key) {
var newSeqRecord;
if (oldSeqRecord && key === oldSeqRecord.key) {
newSeqRecord = oldSeqRecord;
_this._maybeAddToChanges(newSeqRecord, value);
} else {
seqChanged = true;
if (oldSeqRecord !== null) {
_this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
_this._addToRemovals(oldSeqRecord);
}
if (records.has(key)) {
newSeqRecord = records.get(key);
_this._maybeAddToChanges(newSeqRecord, value);
} else {
newSeqRecord = new KeyValueChangeRecord(key);
records.set(key, newSeqRecord);
newSeqRecord.currentValue = value;
_this._addToAdditions(newSeqRecord);
}
}
if (seqChanged) {
if (_this._isInRemovals(newSeqRecord)) {
_this._removeFromRemovals(newSeqRecord);
}
if (lastNewSeqRecord == null) {
_this._mapHead = newSeqRecord;
} else {
lastNewSeqRecord._next = newSeqRecord;
}
}
lastOldSeqRecord = oldSeqRecord;
lastNewSeqRecord = newSeqRecord;
oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
});
this._truncate(lastOldSeqRecord, oldSeqRecord);
return this.isDirty;
};
DefaultKeyValueDiffer.prototype._reset = function() {
if (this.isDirty) {
var record = void 0;
for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
record.previousValue = record.currentValue;
}
for (record = this._additionsHead; record != null; record = record._nextAdded) {
record.previousValue = record.currentValue;
}
this._changesHead = this._changesTail = null;
this._additionsHead = this._additionsTail = null;
this._removalsHead = this._removalsTail = null;
}
};
DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
while (record !== null) {
if (lastRecord === null) {
this._mapHead = null;
} else {
lastRecord._next = null;
}
var nextRecord = record._next;
this._addToRemovals(record);
lastRecord = record;
record = nextRecord;
}
for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
rec.previousValue = rec.currentValue;
rec.currentValue = null;
this._records.delete(rec.key);
}
};
DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
if (!looseIdentical(newValue, record.currentValue)) {
record.previousValue = record.currentValue;
record.currentValue = newValue;
this._addToChanges(record);
}
};
DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
};
DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
if (this._removalsHead === null) {
this._removalsHead = this._removalsTail = record;
} else {
this._removalsTail._nextRemoved = record;
record._prevRemoved = this._removalsTail;
this._removalsTail = record;
}
};
DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
var next = record._next;
if (prev === null) {
this._mapHead = next;
} else {
prev._next = next;
}
record._next = null;
};
DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
record._prevRemoved = record._nextRemoved = null;
};
DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
if (this._additionsHead === null) {
this._additionsHead = this._additionsTail = record;
} else {
this._additionsTail._nextAdded = record;
this._additionsTail = record;
}
};
DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
if (this._changesHead === null) {
this._changesHead = this._changesTail = record;
} else {
this._changesTail._nextChanged = record;
this._changesTail = record;
}
};
DefaultKeyValueDiffer.prototype.toString = function() {
var items = [];
var previous = [];
var changes = [];
var additions = [];
var removals = [];
var record;
for (record = this._mapHead; record !== null; record = record._next) {
items.push(stringify(record));
}
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
previous.push(stringify(record));
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
changes.push(stringify(record));
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
additions.push(stringify(record));
}
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
removals.push(stringify(record));
}
return "map: " + items.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "changes: " + changes.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n";
};
DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
if (obj instanceof Map) {
obj.forEach(fn);
} else {
Object.keys(obj).forEach(function(k) {
return fn(obj[k], k);
});
}
};
return DefaultKeyValueDiffer;
}();
var KeyValueChangeRecord = function() {
function KeyValueChangeRecord(key) {
this.key = key;
this.previousValue = null;
this.currentValue = null;
this._nextPrevious = null;
this._next = null;
this._nextAdded = null;
this._nextRemoved = null;
this._prevRemoved = null;
this._nextChanged = null;
}
KeyValueChangeRecord.prototype.toString = function() {
return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + "[" + stringify(this.previousValue) + "->" + stringify(this.currentValue) + "]";
};
return KeyValueChangeRecord;
}();
var IterableDiffers = function() {
function IterableDiffers(factories) {
this.factories = factories;
}
IterableDiffers.create = function(factories, parent) {
if (isPresent(parent)) {
var copied = parent.factories.slice();
factories = factories.concat(copied);
return new IterableDiffers(factories);
} else {
return new IterableDiffers(factories);
}
};
IterableDiffers.extend = function(factories) {
return {
provide: IterableDiffers,
useFactory: function(parent) {
if (!parent) {
throw new Error("Cannot extend IterableDiffers without a parent injector");
}
return IterableDiffers.create(factories, parent);
},
deps: [ [ IterableDiffers, new SkipSelf(), new Optional() ] ]
};
};
IterableDiffers.prototype.find = function(iterable) {
var factory = this.factories.find(function(f) {
return f.supports(iterable);
});
if (isPresent(factory)) {
return factory;
} else {
throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
}
};
return IterableDiffers;
}();
var KeyValueDiffers = function() {
function KeyValueDiffers(factories) {
this.factories = factories;
}
KeyValueDiffers.create = function(factories, parent) {
if (isPresent(parent)) {
var copied = parent.factories.slice();
factories = factories.concat(copied);
return new KeyValueDiffers(factories);
} else {
return new KeyValueDiffers(factories);
}
};
KeyValueDiffers.extend = function(factories) {
return {
provide: KeyValueDiffers,
useFactory: function(parent) {
if (!parent) {
throw new Error("Cannot extend KeyValueDiffers without a parent injector");
}
return KeyValueDiffers.create(factories, parent);
},
deps: [ [ KeyValueDiffers, new SkipSelf(), new Optional() ] ]
};
};
KeyValueDiffers.prototype.find = function(kv) {
var factory = this.factories.find(function(f) {
return f.supports(kv);
});
if (isPresent(factory)) {
return factory;
} else {
throw new Error("Cannot find a differ supporting object '" + kv + "'");
}
};
return KeyValueDiffers;
}();
var UNINITIALIZED = {
toString: function() {
return "CD_INIT_VALUE";
}
};
function devModeEqual(a, b) {
if (isListLikeIterable(a) && isListLikeIterable(b)) {
return areIterablesEqual(a, b, devModeEqual);
} else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
return true;
} else {
return looseIdentical(a, b);
}
}
var WrappedValue = function() {
function WrappedValue(wrapped) {
this.wrapped = wrapped;
}
WrappedValue.wrap = function(value) {
return new WrappedValue(value);
};
return WrappedValue;
}();
var ValueUnwrapper = function() {
function ValueUnwrapper() {
this.hasWrappedValue = false;
}
ValueUnwrapper.prototype.unwrap = function(value) {
if (value instanceof WrappedValue) {
this.hasWrappedValue = true;
return value.wrapped;
}
return value;
};
ValueUnwrapper.prototype.reset = function() {
this.hasWrappedValue = false;
};
return ValueUnwrapper;
}();
var SimpleChange = function() {
function SimpleChange(previousValue, currentValue) {
this.previousValue = previousValue;
this.currentValue = currentValue;
}
SimpleChange.prototype.isFirstChange = function() {
return this.previousValue === UNINITIALIZED;
};
return SimpleChange;
}();
var ChangeDetectorRef = function() {
function ChangeDetectorRef() {}
return ChangeDetectorRef;
}();
var keyValDiff = [ new DefaultKeyValueDifferFactory() ];
var iterableDiff = [ new DefaultIterableDifferFactory() ];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
var RenderComponentType = function() {
function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
this.id = id;
this.templateUrl = templateUrl;
this.slotCount = slotCount;
this.encapsulation = encapsulation;
this.styles = styles;
this.animations = animations;
}
return RenderComponentType;
}();
var RenderDebugInfo = function() {
function RenderDebugInfo() {}
Object.defineProperty(RenderDebugInfo.prototype, "injector", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "component", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "references", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "context", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "source", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return RenderDebugInfo;
}();
var Renderer = function() {
function Renderer() {}
return Renderer;
}();
var RootRenderer = function() {
function RootRenderer() {}
return RootRenderer;
}();
exports.SecurityContext;
(function(SecurityContext) {
SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
SecurityContext[SecurityContext["URL"] = 4] = "URL";
SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(exports.SecurityContext || (exports.SecurityContext = {}));
var Sanitizer = function() {
function Sanitizer() {}
return Sanitizer;
}();
var __extends$6 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ExpressionChangedAfterItHasBeenCheckedError = function(_super) {
__extends$6(ExpressionChangedAfterItHasBeenCheckedError, _super);
function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
if (oldValue === UNINITIALIZED) {
msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
}
_super.call(this, msg);
}
return ExpressionChangedAfterItHasBeenCheckedError;
}(BaseError);
var ViewWrappedError = function(_super) {
__extends$6(ViewWrappedError, _super);
function ViewWrappedError(originalError, context) {
_super.call(this, "Error in " + context.source, originalError);
this.context = context;
}
return ViewWrappedError;
}(WrappedError);
var ViewDestroyedError = function(_super) {
__extends$6(ViewDestroyedError, _super);
function ViewDestroyedError(details) {
_super.call(this, "Attempt to use a destroyed view: " + details);
}
return ViewDestroyedError;
}(BaseError);
var ViewUtils = function() {
function ViewUtils(_renderer, sanitizer) {
this._renderer = _renderer;
this._nextCompTypeId = 0;
this.sanitizer = sanitizer;
}
ViewUtils.prototype.renderComponent = function(renderComponentType) {
return this._renderer.renderComponent(renderComponentType);
};
ViewUtils.decorators = [ {
type: Injectable
} ];
ViewUtils.ctorParameters = [ {
type: RootRenderer
}, {
type: Sanitizer
} ];
return ViewUtils;
}();
var nextRenderComponentTypeId = 0;
function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
}
function addToArray(e, array) {
array.push(e);
}
function interpolate(valueCount, constAndInterp) {
var result = "";
for (var i = 0; i < valueCount * 2; i = i + 2) {
result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
}
return result + constAndInterp[valueCount * 2];
}
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
switch (valueCount) {
case 1:
return c0 + _toStringWithNull(a1) + c1;

case 2:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

case 3:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

case 4:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

case 5:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

case 6:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

case 7:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

case 8:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

case 9:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

default:
throw new Error("Does not support more than 9 expressions");
}
}
function _toStringWithNull(v) {
return v != null ? v.toString() : "";
}
function checkBinding(throwOnChange, oldValue, newValue) {
if (throwOnChange) {
if (!devModeEqual(oldValue, newValue)) {
throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
}
return false;
} else {
return !looseIdentical(oldValue, newValue);
}
}
function castByValue(input, value) {
return input;
}
var EMPTY_ARRAY = [];
var EMPTY_MAP = {};
function pureProxy1(fn) {
var result;
var v0 = UNINITIALIZED;
return function(p0) {
if (!looseIdentical(v0, p0)) {
v0 = p0;
result = fn(p0);
}
return result;
};
}
function pureProxy2(fn) {
var result;
var v0 = UNINITIALIZED;
var v1 = UNINITIALIZED;
return function(p0, p1) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
v0 = p0;
v1 = p1;
result = fn(p0, p1);
}
return result;
};
}
function pureProxy3(fn) {
var result;
var v0 = UNINITIALIZED;
var v1 = UNINITIALIZED;
var v2 = UNINITIALIZED;
return function(p0, p1, p2) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
v0 = p0;
v1 = p1;
v2 = p2;
result = fn(p0, p1, p2);
}
return result;
};
}
function pureProxy4(fn) {
var result;
var v0, v1, v2, v3;
v0 = v1 = v2 = v3 = UNINITIALIZED;
return function(p0, p1, p2, p3) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
result = fn(p0, p1, p2, p3);
}
return result;
};
}
function pureProxy5(fn) {
var result;
var v0, v1, v2, v3, v4;
v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
return function(p0, p1, p2, p3, p4) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
result = fn(p0, p1, p2, p3, p4);
}
return result;
};
}
function pureProxy6(fn) {
var result;
var v0, v1, v2, v3, v4, v5;
v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
return function(p0, p1, p2, p3, p4, p5) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
result = fn(p0, p1, p2, p3, p4, p5);
}
return result;
};
}
function pureProxy7(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
return function(p0, p1, p2, p3, p4, p5, p6) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
result = fn(p0, p1, p2, p3, p4, p5, p6);
}
return result;
};
}
function pureProxy8(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6, v7;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
return function(p0, p1, p2, p3, p4, p5, p6, p7) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
v7 = p7;
result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
}
return result;
};
}
function pureProxy9(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6, v7, v8;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
return function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
v7 = p7;
v8 = p8;
result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
return result;
};
}
function pureProxy10(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
return function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
v7 = p7;
v8 = p8;
v9 = p9;
result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
return result;
};
}
function setBindingDebugInfoForChanges(renderer, el, changes) {
Object.keys(changes).forEach(function(propName) {
setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
});
}
function setBindingDebugInfo(renderer, el, propName, value) {
try {
renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
} catch (e) {
renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), "[ERROR] Exception while trying to serialize the value");
}
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input) {
return input.replace(CAMEL_CASE_REGEXP, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
return "-" + m[1].toLowerCase();
});
}
function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
var el = renderer.createElement(parentElement, name, debugInfo);
for (var i = 0; i < attrs.length; i += 2) {
renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
}
return el;
}
function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
var hostElement;
if (isPresent(rootSelectorOrNode)) {
hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
for (var i = 0; i < attrs.length; i += 2) {
renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
}
} else {
hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
}
return hostElement;
}
function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
for (var i = 0; i < eventNamesAndTargets.length; i += 2) {
var eventName = eventNamesAndTargets.get(i);
var eventTarget = eventNamesAndTargets.get(i + 1);
var disposable = void 0;
if (eventTarget) {
disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
} else {
disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
}
disposables.set(i / 2, disposable);
}
return disposeInlineArray.bind(null, disposables);
}
function disposeInlineArray(disposables) {
for (var i = 0; i < disposables.length; i++) {
disposables.get(i)();
}
}
function noop() {}
function createEmptyInlineArray(length) {
var ctor;
if (length <= 2) {
ctor = InlineArray2;
} else if (length <= 4) {
ctor = InlineArray4;
} else if (length <= 8) {
ctor = InlineArray8;
} else if (length <= 16) {
ctor = InlineArray16;
} else {
ctor = InlineArrayDynamic;
}
return new ctor(length);
}
var InlineArray0 = function() {
function InlineArray0() {
this.length = 0;
}
InlineArray0.prototype.get = function(index) {
return undefined;
};
InlineArray0.prototype.set = function(index, value) {};
return InlineArray0;
}();
var InlineArray2 = function() {
function InlineArray2(length, _v0, _v1) {
this.length = length;
this._v0 = _v0;
this._v1 = _v1;
}
InlineArray2.prototype.get = function(index) {
switch (index) {
case 0:
return this._v0;

case 1:
return this._v1;

default:
return undefined;
}
};
InlineArray2.prototype.set = function(index, value) {
switch (index) {
case 0:
this._v0 = value;
break;

case 1:
this._v1 = value;
break;
}
};
return InlineArray2;
}();
var InlineArray4 = function() {
function InlineArray4(length, _v0, _v1, _v2, _v3) {
this.length = length;
this._v0 = _v0;
this._v1 = _v1;
this._v2 = _v2;
this._v3 = _v3;
}
InlineArray4.prototype.get = function(index) {
switch (index) {
case 0:
return this._v0;

case 1:
return this._v1;

case 2:
return this._v2;

case 3:
return this._v3;

default:
return undefined;
}
};
InlineArray4.prototype.set = function(index, value) {
switch (index) {
case 0:
this._v0 = value;
break;

case 1:
this._v1 = value;
break;

case 2:
this._v2 = value;
break;

case 3:
this._v3 = value;
break;
}
};
return InlineArray4;
}();
var InlineArray8 = function() {
function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
this.length = length;
this._v0 = _v0;
this._v1 = _v1;
this._v2 = _v2;
this._v3 = _v3;
this._v4 = _v4;
this._v5 = _v5;
this._v6 = _v6;
this._v7 = _v7;
}
InlineArray8.prototype.get = function(index) {
switch (index) {
case 0:
return this._v0;

case 1:
return this._v1;

case 2:
return this._v2;

case 3:
return this._v3;

case 4:
return this._v4;

case 5:
return this._v5;

case 6:
return this._v6;

case 7:
return this._v7;

default:
return undefined;
}
};
InlineArray8.prototype.set = function(index, value) {
switch (index) {
case 0:
this._v0 = value;
break;

case 1:
this._v1 = value;
break;

case 2:
this._v2 = value;
break;

case 3:
this._v3 = value;
break;

case 4:
this._v4 = value;
break;

case 5:
this._v5 = value;
break;

case 6:
this._v6 = value;
break;

case 7:
this._v7 = value;
break;
}
};
return InlineArray8;
}();
var InlineArray16 = function() {
function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
this.length = length;
this._v0 = _v0;
this._v1 = _v1;
this._v2 = _v2;
this._v3 = _v3;
this._v4 = _v4;
this._v5 = _v5;
this._v6 = _v6;
this._v7 = _v7;
this._v8 = _v8;
this._v9 = _v9;
this._v10 = _v10;
this._v11 = _v11;
this._v12 = _v12;
this._v13 = _v13;
this._v14 = _v14;
this._v15 = _v15;
}
InlineArray16.prototype.get = function(index) {
switch (index) {
case 0:
return this._v0;

case 1:
return this._v1;

case 2:
return this._v2;

case 3:
return this._v3;

case 4:
return this._v4;

case 5:
return this._v5;

case 6:
return this._v6;

case 7:
return this._v7;

case 8:
return this._v8;

case 9:
return this._v9;

case 10:
return this._v10;

case 11:
return this._v11;

case 12:
return this._v12;

case 13:
return this._v13;

case 14:
return this._v14;

case 15:
return this._v15;

default:
return undefined;
}
};
InlineArray16.prototype.set = function(index, value) {
switch (index) {
case 0:
this._v0 = value;
break;

case 1:
this._v1 = value;
break;

case 2:
this._v2 = value;
break;

case 3:
this._v3 = value;
break;

case 4:
this._v4 = value;
break;

case 5:
this._v5 = value;
break;

case 6:
this._v6 = value;
break;

case 7:
this._v7 = value;
break;

case 8:
this._v8 = value;
break;

case 9:
this._v9 = value;
break;

case 10:
this._v10 = value;
break;

case 11:
this._v11 = value;
break;

case 12:
this._v12 = value;
break;

case 13:
this._v13 = value;
break;

case 14:
this._v14 = value;
break;

case 15:
this._v15 = value;
break;
}
};
return InlineArray16;
}();
var InlineArrayDynamic = function() {
function InlineArrayDynamic(length) {
var values = [];
for (var _i = 1; _i < arguments.length; _i++) {
values[_i - 1] = arguments[_i];
}
this.length = length;
this._values = values;
}
InlineArrayDynamic.prototype.get = function(index) {
return this._values[index];
};
InlineArrayDynamic.prototype.set = function(index, value) {
this._values[index] = value;
};
return InlineArrayDynamic;
}();
var EMPTY_INLINE_ARRAY = new InlineArray0();
var view_utils = Object.freeze({
ViewUtils: ViewUtils,
createRenderComponentType: createRenderComponentType,
addToArray: addToArray,
interpolate: interpolate,
inlineInterpolate: inlineInterpolate,
checkBinding: checkBinding,
castByValue: castByValue,
EMPTY_ARRAY: EMPTY_ARRAY,
EMPTY_MAP: EMPTY_MAP,
pureProxy1: pureProxy1,
pureProxy2: pureProxy2,
pureProxy3: pureProxy3,
pureProxy4: pureProxy4,
pureProxy5: pureProxy5,
pureProxy6: pureProxy6,
pureProxy7: pureProxy7,
pureProxy8: pureProxy8,
pureProxy9: pureProxy9,
pureProxy10: pureProxy10,
setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
setBindingDebugInfo: setBindingDebugInfo,
createRenderElement: createRenderElement,
selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
subscribeToRenderElement: subscribeToRenderElement,
noop: noop,
InlineArray2: InlineArray2,
InlineArray4: InlineArray4,
InlineArray8: InlineArray8,
InlineArray16: InlineArray16,
InlineArrayDynamic: InlineArrayDynamic,
EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
});
var __extends$5 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ComponentRef = function() {
function ComponentRef() {}
Object.defineProperty(ComponentRef.prototype, "location", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "injector", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "instance", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "hostView", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "componentType", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return ComponentRef;
}();
var ComponentRef_ = function(_super) {
__extends$5(ComponentRef_, _super);
function ComponentRef_(_index, _parentView, _nativeElement, _component) {
_super.call(this);
this._index = _index;
this._parentView = _parentView;
this._nativeElement = _nativeElement;
this._component = _component;
}
Object.defineProperty(ComponentRef_.prototype, "location", {
get: function() {
return new ElementRef(this._nativeElement);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "injector", {
get: function() {
return this._parentView.injector(this._index);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "instance", {
get: function() {
return this._component;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "hostView", {
get: function() {
return this._parentView.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
get: function() {
return this._parentView.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "componentType", {
get: function() {
return this._component.constructor;
},
enumerable: true,
configurable: true
});
ComponentRef_.prototype.destroy = function() {
this._parentView.detachAndDestroy();
};
ComponentRef_.prototype.onDestroy = function(callback) {
this.hostView.onDestroy(callback);
};
return ComponentRef_;
}(ComponentRef);
var ComponentFactory = function() {
function ComponentFactory(selector, _viewClass, _componentType) {
this.selector = selector;
this._viewClass = _viewClass;
this._componentType = _componentType;
}
Object.defineProperty(ComponentFactory.prototype, "componentType", {
get: function() {
return this._componentType;
},
enumerable: true,
configurable: true
});
ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
if (projectableNodes === void 0) {
projectableNodes = null;
}
if (rootSelectorOrNode === void 0) {
rootSelectorOrNode = null;
}
var vu = injector.get(ViewUtils);
if (!projectableNodes) {
projectableNodes = [];
}
var hostView = new this._viewClass(vu, null, null, null);
return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
};
return ComponentFactory;
}();
var __extends$7 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NoComponentFactoryError = function(_super) {
__extends$7(NoComponentFactoryError, _super);
function NoComponentFactoryError(component) {
_super.call(this, "No component factory found for " + stringify(component));
this.component = component;
}
return NoComponentFactoryError;
}(BaseError);
var _NullComponentFactoryResolver = function() {
function _NullComponentFactoryResolver() {}
_NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
throw new NoComponentFactoryError(component);
};
return _NullComponentFactoryResolver;
}();
var ComponentFactoryResolver = function() {
function ComponentFactoryResolver() {}
ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
return ComponentFactoryResolver;
}();
var CodegenComponentFactoryResolver = function() {
function CodegenComponentFactoryResolver(factories, _parent) {
this._parent = _parent;
this._factories = new Map();
for (var i = 0; i < factories.length; i++) {
var factory = factories[i];
this._factories.set(factory.componentType, factory);
}
}
CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
var result = this._factories.get(component);
if (!result) {
result = this._parent.resolveComponentFactory(component);
}
return result;
};
return CodegenComponentFactoryResolver;
}();
var trace;
var events;
function detectWTF() {
var wtf = global$1["wtf"];
if (wtf) {
trace = wtf["trace"];
if (trace) {
events = trace["events"];
return true;
}
}
return false;
}
function createScope(signature, flags) {
if (flags === void 0) {
flags = null;
}
return events.createScope(signature, flags);
}
function leave(scope, returnValue) {
trace.leaveScope(scope, returnValue);
return returnValue;
}
function startTimeRange(rangeType, action) {
return trace.beginTimeRange(rangeType, action);
}
function endTimeRange(range) {
trace.endTimeRange(range);
}
var wtfEnabled = detectWTF();
function noopScope(arg0, arg1) {
return null;
}
var wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
return noopScope;
};
var wtfLeave = wtfEnabled ? leave : function(s, r) {
return r;
};
var wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
return null;
};
var wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
return null;
};
var __extends$8 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventEmitter = function(_super) {
__extends$8(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = false;
}
_super.call(this);
this.__isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this.__isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this.__isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this.__isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this.__isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this.__isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this.__isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(rxjs_Subject.Subject);
var NgZone = function() {
function NgZone(_a) {
var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
this._hasPendingMicrotasks = false;
this._hasPendingMacrotasks = false;
this._isStable = true;
this._nesting = 0;
this._onUnstable = new EventEmitter(false);
this._onMicrotaskEmpty = new EventEmitter(false);
this._onStable = new EventEmitter(false);
this._onErrorEvents = new EventEmitter(false);
if (typeof Zone == "undefined") {
throw new Error("Angular requires Zone.js prolyfill.");
}
Zone.assertZonePatched();
this.outer = this.inner = Zone.current;
if (Zone["wtfZoneSpec"]) {
this.inner = this.inner.fork(Zone["wtfZoneSpec"]);
}
if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
this.inner = this.inner.fork(Zone["longStackTraceZoneSpec"]);
}
this.forkInnerZoneWithAngularBehavior();
}
NgZone.isInAngularZone = function() {
return Zone.current.get("isAngularZone") === true;
};
NgZone.assertInAngularZone = function() {
if (!NgZone.isInAngularZone()) {
throw new Error("Expected to be in Angular Zone, but it is not!");
}
};
NgZone.assertNotInAngularZone = function() {
if (NgZone.isInAngularZone()) {
throw new Error("Expected to not be in Angular Zone, but it is!");
}
};
NgZone.prototype.run = function(fn) {
return this.inner.run(fn);
};
NgZone.prototype.runGuarded = function(fn) {
return this.inner.runGuarded(fn);
};
NgZone.prototype.runOutsideAngular = function(fn) {
return this.outer.run(fn);
};
Object.defineProperty(NgZone.prototype, "onUnstable", {
get: function() {
return this._onUnstable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
get: function() {
return this._onMicrotaskEmpty;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onStable", {
get: function() {
return this._onStable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onError", {
get: function() {
return this._onErrorEvents;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "isStable", {
get: function() {
return this._isStable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
get: function() {
return this._hasPendingMicrotasks;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
get: function() {
return this._hasPendingMacrotasks;
},
enumerable: true,
configurable: true
});
NgZone.prototype.checkStable = function() {
var _this = this;
if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
try {
this._nesting++;
this._onMicrotaskEmpty.emit(null);
} finally {
this._nesting--;
if (!this._hasPendingMicrotasks) {
try {
this.runOutsideAngular(function() {
return _this._onStable.emit(null);
});
} finally {
this._isStable = true;
}
}
}
}
};
NgZone.prototype.forkInnerZoneWithAngularBehavior = function() {
var _this = this;
this.inner = this.inner.fork({
name: "angular",
properties: {
isAngularZone: true
},
onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
try {
_this.onEnter();
return delegate.invokeTask(target, task, applyThis, applyArgs);
} finally {
_this.onLeave();
}
},
onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
try {
_this.onEnter();
return delegate.invoke(target, callback, applyThis, applyArgs, source);
} finally {
_this.onLeave();
}
},
onHasTask: function(delegate, current, target, hasTaskState) {
delegate.hasTask(target, hasTaskState);
if (current === target) {
if (hasTaskState.change == "microTask") {
_this.setHasMicrotask(hasTaskState.microTask);
} else if (hasTaskState.change == "macroTask") {
_this.setHasMacrotask(hasTaskState.macroTask);
}
}
},
onHandleError: function(delegate, current, target, error) {
delegate.handleError(target, error);
_this.triggerError(error);
return false;
}
});
};
NgZone.prototype.onEnter = function() {
this._nesting++;
if (this._isStable) {
this._isStable = false;
this._onUnstable.emit(null);
}
};
NgZone.prototype.onLeave = function() {
this._nesting--;
this.checkStable();
};
NgZone.prototype.setHasMicrotask = function(hasMicrotasks) {
this._hasPendingMicrotasks = hasMicrotasks;
this.checkStable();
};
NgZone.prototype.setHasMacrotask = function(hasMacrotasks) {
this._hasPendingMacrotasks = hasMacrotasks;
};
NgZone.prototype.triggerError = function(error) {
this._onErrorEvents.emit(error);
};
return NgZone;
}();
var Testability = function() {
function Testability(_ngZone) {
this._ngZone = _ngZone;
this._pendingCount = 0;
this._isZoneStable = true;
this._didWork = false;
this._callbacks = [];
this._watchAngularEvents();
}
Testability.prototype._watchAngularEvents = function() {
var _this = this;
this._ngZone.onUnstable.subscribe({
next: function() {
_this._didWork = true;
_this._isZoneStable = false;
}
});
this._ngZone.runOutsideAngular(function() {
_this._ngZone.onStable.subscribe({
next: function() {
NgZone.assertNotInAngularZone();
scheduleMicroTask(function() {
_this._isZoneStable = true;
_this._runCallbacksIfReady();
});
}
});
});
};
Testability.prototype.increasePendingRequestCount = function() {
this._pendingCount += 1;
this._didWork = true;
return this._pendingCount;
};
Testability.prototype.decreasePendingRequestCount = function() {
this._pendingCount -= 1;
if (this._pendingCount < 0) {
throw new Error("pending async requests below zero");
}
this._runCallbacksIfReady();
return this._pendingCount;
};
Testability.prototype.isStable = function() {
return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
};
Testability.prototype._runCallbacksIfReady = function() {
var _this = this;
if (this.isStable()) {
scheduleMicroTask(function() {
while (_this._callbacks.length !== 0) {
_this._callbacks.pop()(_this._didWork);
}
_this._didWork = false;
});
} else {
this._didWork = true;
}
};
Testability.prototype.whenStable = function(callback) {
this._callbacks.push(callback);
this._runCallbacksIfReady();
};
Testability.prototype.getPendingRequestCount = function() {
return this._pendingCount;
};
Testability.prototype.findBindings = function(using, provider, exactMatch) {
return [];
};
Testability.prototype.findProviders = function(using, provider, exactMatch) {
return [];
};
Testability.decorators = [ {
type: Injectable
} ];
Testability.ctorParameters = [ {
type: NgZone
} ];
return Testability;
}();
var TestabilityRegistry = function() {
function TestabilityRegistry() {
this._applications = new Map();
_testabilityGetter.addToWindow(this);
}
TestabilityRegistry.prototype.registerApplication = function(token, testability) {
this._applications.set(token, testability);
};
TestabilityRegistry.prototype.getTestability = function(elem) {
return this._applications.get(elem);
};
TestabilityRegistry.prototype.getAllTestabilities = function() {
return Array.from(this._applications.values());
};
TestabilityRegistry.prototype.getAllRootElements = function() {
return Array.from(this._applications.keys());
};
TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
};
TestabilityRegistry.decorators = [ {
type: Injectable
} ];
TestabilityRegistry.ctorParameters = [];
return TestabilityRegistry;
}();
var _NoopGetTestability = function() {
function _NoopGetTestability() {}
_NoopGetTestability.prototype.addToWindow = function(registry) {};
_NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
return null;
};
return _NoopGetTestability;
}();
function setTestabilityGetter(getter) {
_testabilityGetter = getter;
}
var _testabilityGetter = new _NoopGetTestability();
var __extends$3 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _devMode = true;
var _runModeLocked = false;
var _platform;
function enableProdMode() {
if (_runModeLocked) {
throw new Error("Cannot enable prod mode after platform setup.");
}
_devMode = false;
}
function isDevMode() {
_runModeLocked = true;
return _devMode;
}
function createPlatform(injector) {
if (_platform && !_platform.destroyed) {
throw new Error("There can be only one platform. Destroy the previous one to create a new one.");
}
_platform = injector.get(PlatformRef);
var inits = injector.get(PLATFORM_INITIALIZER, null);
if (inits) inits.forEach(function(init) {
return init();
});
return _platform;
}
function createPlatformFactory(parentPlaformFactory, name, providers) {
if (providers === void 0) {
providers = [];
}
var marker = new OpaqueToken("Platform: " + name);
return function(extraProviders) {
if (extraProviders === void 0) {
extraProviders = [];
}
if (!getPlatform()) {
if (parentPlaformFactory) {
parentPlaformFactory(providers.concat(extraProviders).concat({
provide: marker,
useValue: true
}));
} else {
createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
provide: marker,
useValue: true
})));
}
}
return assertPlatform(marker);
};
}
function assertPlatform(requiredToken) {
var platform = getPlatform();
if (!platform) {
throw new Error("No platform exists!");
}
if (!platform.injector.get(requiredToken, null)) {
throw new Error("A platform with a different configuration has been created. Please destroy it first.");
}
return platform;
}
function destroyPlatform() {
if (_platform && !_platform.destroyed) {
_platform.destroy();
}
}
function getPlatform() {
return _platform && !_platform.destroyed ? _platform : null;
}
var PlatformRef = function() {
function PlatformRef() {}
PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
throw unimplemented();
};
PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
if (compilerOptions === void 0) {
compilerOptions = [];
}
throw unimplemented();
};
Object.defineProperty(PlatformRef.prototype, "injector", {
get: function() {
throw unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformRef.prototype, "destroyed", {
get: function() {
throw unimplemented();
},
enumerable: true,
configurable: true
});
return PlatformRef;
}();
function _callAndReportToErrorHandler(errorHandler, callback) {
try {
var result = callback();
if (isPromise(result)) {
return result.catch(function(e) {
errorHandler.handleError(e);
throw e;
});
}
return result;
} catch (e) {
errorHandler.handleError(e);
throw e;
}
}
var PlatformRef_ = function(_super) {
__extends$3(PlatformRef_, _super);
function PlatformRef_(_injector) {
_super.call(this);
this._injector = _injector;
this._modules = [];
this._destroyListeners = [];
this._destroyed = false;
}
PlatformRef_.prototype.onDestroy = function(callback) {
this._destroyListeners.push(callback);
};
Object.defineProperty(PlatformRef_.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformRef_.prototype, "destroyed", {
get: function() {
return this._destroyed;
},
enumerable: true,
configurable: true
});
PlatformRef_.prototype.destroy = function() {
if (this._destroyed) {
throw new Error("The platform has already been destroyed!");
}
this._modules.slice().forEach(function(module) {
return module.destroy();
});
this._destroyListeners.forEach(function(listener) {
return listener();
});
this._destroyed = true;
};
PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
};
PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
var _this = this;
if (!ngZone) ngZone = new NgZone({
enableLongStackTrace: isDevMode()
});
return ngZone.run(function() {
var ngZoneInjector = ReflectiveInjector.resolveAndCreate([ {
provide: NgZone,
useValue: ngZone
} ], _this.injector);
var moduleRef = moduleFactory.create(ngZoneInjector);
var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
if (!exceptionHandler) {
throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");
}
moduleRef.onDestroy(function() {
return ListWrapper.remove(_this._modules, moduleRef);
});
ngZone.onError.subscribe({
next: function(error) {
exceptionHandler.handleError(error);
}
});
return _callAndReportToErrorHandler(exceptionHandler, function() {
var initStatus = moduleRef.injector.get(ApplicationInitStatus);
return initStatus.donePromise.then(function() {
_this._moduleDoBootstrap(moduleRef);
return moduleRef;
});
});
});
};
PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
if (compilerOptions === void 0) {
compilerOptions = [];
}
return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
};
PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone, componentFactoryCallback) {
var _this = this;
if (compilerOptions === void 0) {
compilerOptions = [];
}
var compilerFactory = this.injector.get(CompilerFactory);
var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [ compilerOptions ]);
if (componentFactoryCallback) {
return compiler.compileModuleAndAllComponentsAsync(moduleType).then(function(_a) {
var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
componentFactoryCallback(componentFactories);
return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
});
}
return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
});
};
PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
var appRef = moduleRef.injector.get(ApplicationRef);
if (moduleRef.bootstrapFactories.length > 0) {
moduleRef.bootstrapFactories.forEach(function(compFactory) {
return appRef.bootstrap(compFactory);
});
} else if (moduleRef.instance.ngDoBootstrap) {
moduleRef.instance.ngDoBootstrap(appRef);
} else {
throw new Error("The module " + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ' + "Please define one of these.");
}
};
PlatformRef_.decorators = [ {
type: Injectable
} ];
PlatformRef_.ctorParameters = [ {
type: Injector
} ];
return PlatformRef_;
}(PlatformRef);
var ApplicationRef = function() {
function ApplicationRef() {}
Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef.prototype, "components", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return ApplicationRef;
}();
var ApplicationRef_ = function(_super) {
__extends$3(ApplicationRef_, _super);
function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
var _this = this;
_super.call(this);
this._zone = _zone;
this._console = _console;
this._injector = _injector;
this._exceptionHandler = _exceptionHandler;
this._componentFactoryResolver = _componentFactoryResolver;
this._initStatus = _initStatus;
this._testabilityRegistry = _testabilityRegistry;
this._testability = _testability;
this._bootstrapListeners = [];
this._rootComponents = [];
this._rootComponentTypes = [];
this._changeDetectorRefs = [];
this._runningTick = false;
this._enforceNoNewChanges = false;
this._enforceNoNewChanges = isDevMode();
this._zone.onMicrotaskEmpty.subscribe({
next: function() {
_this._zone.run(function() {
_this.tick();
});
}
});
}
ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
this._changeDetectorRefs.push(changeDetector);
};
ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
ListWrapper.remove(this._changeDetectorRefs, changeDetector);
};
ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
var _this = this;
if (!this._initStatus.done) {
throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");
}
var componentFactory;
if (componentOrFactory instanceof ComponentFactory) {
componentFactory = componentOrFactory;
} else {
componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
}
this._rootComponentTypes.push(componentFactory.componentType);
var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
compRef.onDestroy(function() {
_this._unloadComponent(compRef);
});
var testability = compRef.injector.get(Testability, null);
if (testability) {
compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
}
this._loadComponent(compRef);
if (isDevMode()) {
this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
}
return compRef;
};
ApplicationRef_.prototype._loadComponent = function(componentRef) {
this._changeDetectorRefs.push(componentRef.changeDetectorRef);
this.tick();
this._rootComponents.push(componentRef);
var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
listeners.forEach(function(listener) {
return listener(componentRef);
});
};
ApplicationRef_.prototype._unloadComponent = function(componentRef) {
if (this._rootComponents.indexOf(componentRef) == -1) {
return;
}
this.unregisterChangeDetector(componentRef.changeDetectorRef);
ListWrapper.remove(this._rootComponents, componentRef);
};
ApplicationRef_.prototype.tick = function() {
if (this._runningTick) {
throw new Error("ApplicationRef.tick is called recursively");
}
var scope = ApplicationRef_._tickScope();
try {
this._runningTick = true;
this._changeDetectorRefs.forEach(function(detector) {
return detector.detectChanges();
});
if (this._enforceNoNewChanges) {
this._changeDetectorRefs.forEach(function(detector) {
return detector.checkNoChanges();
});
}
} finally {
this._runningTick = false;
wtfLeave(scope);
}
};
ApplicationRef_.prototype.ngOnDestroy = function() {
this._rootComponents.slice().forEach(function(component) {
return component.destroy();
});
};
Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
get: function() {
return this._rootComponentTypes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef_.prototype, "components", {
get: function() {
return this._rootComponents;
},
enumerable: true,
configurable: true
});
ApplicationRef_._tickScope = wtfCreateScope("ApplicationRef#tick()");
ApplicationRef_.decorators = [ {
type: Injectable
} ];
ApplicationRef_.ctorParameters = [ {
type: NgZone
}, {
type: Console
}, {
type: Injector
}, {
type: ErrorHandler
}, {
type: ComponentFactoryResolver
}, {
type: ApplicationInitStatus
}, {
type: TestabilityRegistry,
decorators: [ {
type: Optional
} ]
}, {
type: Testability,
decorators: [ {
type: Optional
} ]
} ];
return ApplicationRef_;
}(ApplicationRef);
var __extends$9 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NgModuleRef = function() {
function NgModuleRef() {}
Object.defineProperty(NgModuleRef.prototype, "injector", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModuleRef.prototype, "instance", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return NgModuleRef;
}();
var NgModuleFactory = function() {
function NgModuleFactory(_injectorClass, _moduleType) {
this._injectorClass = _injectorClass;
this._moduleType = _moduleType;
}
Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
get: function() {
return this._moduleType;
},
enumerable: true,
configurable: true
});
NgModuleFactory.prototype.create = function(parentInjector) {
if (!parentInjector) {
parentInjector = Injector.NULL;
}
var instance = new this._injectorClass(parentInjector);
instance.create();
return instance;
};
return NgModuleFactory;
}();
var _UNDEFINED = new Object();
var NgModuleInjector = function(_super) {
__extends$9(NgModuleInjector, _super);
function NgModuleInjector(parent, factories, bootstrapFactories) {
_super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
this.parent = parent;
this.bootstrapFactories = bootstrapFactories;
this._destroyListeners = [];
this._destroyed = false;
}
NgModuleInjector.prototype.create = function() {
this.instance = this.createInternal();
};
NgModuleInjector.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = THROW_IF_NOT_FOUND;
}
if (token === Injector || token === ComponentFactoryResolver) {
return this;
}
var result = this.getInternal(token, _UNDEFINED);
return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
};
Object.defineProperty(NgModuleInjector.prototype, "injector", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
NgModuleInjector.prototype.destroy = function() {
if (this._destroyed) {
throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
}
this._destroyed = true;
this.destroyInternal();
this._destroyListeners.forEach(function(listener) {
return listener();
});
};
NgModuleInjector.prototype.onDestroy = function(callback) {
this._destroyListeners.push(callback);
};
return NgModuleInjector;
}(CodegenComponentFactoryResolver);
var NgModuleFactoryLoader = function() {
function NgModuleFactoryLoader() {}
return NgModuleFactoryLoader;
}();
var moduleFactories = new Map();
function registerModuleFactory(id, factory) {
var existing = moduleFactories.get(id);
if (existing) {
throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
}
moduleFactories.set(id, factory);
}
function getModuleFactory(id) {
var factory = moduleFactories.get(id);
if (!factory) throw new Error("No module with ID " + id + " loaded");
return factory;
}
var QueryList = function() {
function QueryList() {
this._dirty = true;
this._results = [];
this._emitter = new EventEmitter();
}
Object.defineProperty(QueryList.prototype, "changes", {
get: function() {
return this._emitter;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "length", {
get: function() {
return this._results.length;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "first", {
get: function() {
return this._results[0];
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "last", {
get: function() {
return this._results[this.length - 1];
},
enumerable: true,
configurable: true
});
QueryList.prototype.map = function(fn) {
return this._results.map(fn);
};
QueryList.prototype.filter = function(fn) {
return this._results.filter(fn);
};
QueryList.prototype.find = function(fn) {
return this._results.find(fn);
};
QueryList.prototype.reduce = function(fn, init) {
return this._results.reduce(fn, init);
};
QueryList.prototype.forEach = function(fn) {
this._results.forEach(fn);
};
QueryList.prototype.some = function(fn) {
return this._results.some(fn);
};
QueryList.prototype.toArray = function() {
return this._results.slice();
};
QueryList.prototype[getSymbolIterator()] = function() {
return this._results[getSymbolIterator()]();
};
QueryList.prototype.toString = function() {
return this._results.toString();
};
QueryList.prototype.reset = function(res) {
this._results = ListWrapper.flatten(res);
this._dirty = false;
};
QueryList.prototype.notifyOnChanges = function() {
this._emitter.emit(this);
};
QueryList.prototype.setDirty = function() {
this._dirty = true;
};
Object.defineProperty(QueryList.prototype, "dirty", {
get: function() {
return this._dirty;
},
enumerable: true,
configurable: true
});
return QueryList;
}();
var _SEPARATOR = "#";
var FACTORY_CLASS_SUFFIX = "NgFactory";
var SystemJsNgModuleLoaderConfig = function() {
function SystemJsNgModuleLoaderConfig() {}
return SystemJsNgModuleLoaderConfig;
}();
var DEFAULT_CONFIG = {
factoryPathPrefix: "",
factoryPathSuffix: ".ngfactory"
};
var SystemJsNgModuleLoader = function() {
function SystemJsNgModuleLoader(_compiler, config) {
this._compiler = _compiler;
this._config = config || DEFAULT_CONFIG;
}
SystemJsNgModuleLoader.prototype.load = function(path) {
var offlineMode = this._compiler instanceof Compiler;
return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
};
SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
var _this = this;
var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
if (exportName === undefined) {
exportName = "default";
}
return System.import(module).then(function(module) {
return module[exportName];
}).then(function(type) {
return checkNotEmpty(type, module, exportName);
}).then(function(type) {
return _this._compiler.compileModuleAsync(type);
});
};
SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
if (exportName === undefined) {
exportName = "default";
factoryClassSuffix = "";
}
return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function(module) {
return module[exportName + factoryClassSuffix];
}).then(function(factory) {
return checkNotEmpty(factory, module, exportName);
});
};
SystemJsNgModuleLoader.decorators = [ {
type: Injectable
} ];
SystemJsNgModuleLoader.ctorParameters = [ {
type: Compiler
}, {
type: SystemJsNgModuleLoaderConfig,
decorators: [ {
type: Optional
} ]
} ];
return SystemJsNgModuleLoader;
}();
function checkNotEmpty(value, modulePath, exportName) {
if (!value) {
throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
}
return value;
}
var __extends$10 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TemplateRef = function() {
function TemplateRef() {}
Object.defineProperty(TemplateRef.prototype, "elementRef", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return TemplateRef;
}();
var TemplateRef_ = function(_super) {
__extends$10(TemplateRef_, _super);
function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
_super.call(this);
this._parentView = _parentView;
this._nodeIndex = _nodeIndex;
this._nativeElement = _nativeElement;
}
TemplateRef_.prototype.createEmbeddedView = function(context) {
var view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
view.create(context || {});
return view.ref;
};
Object.defineProperty(TemplateRef_.prototype, "elementRef", {
get: function() {
return new ElementRef(this._nativeElement);
},
enumerable: true,
configurable: true
});
return TemplateRef_;
}(TemplateRef);
var ViewContainerRef = function() {
function ViewContainerRef() {}
Object.defineProperty(ViewContainerRef.prototype, "element", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef.prototype, "injector", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef.prototype, "length", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return ViewContainerRef;
}();
var ViewContainerRef_ = function() {
function ViewContainerRef_(_element) {
this._element = _element;
this._createComponentInContainerScope = wtfCreateScope("ViewContainerRef#createComponent()");
this._insertScope = wtfCreateScope("ViewContainerRef#insert()");
this._removeScope = wtfCreateScope("ViewContainerRef#remove()");
this._detachScope = wtfCreateScope("ViewContainerRef#detach()");
}
ViewContainerRef_.prototype.get = function(index) {
return this._element.nestedViews[index].ref;
};
Object.defineProperty(ViewContainerRef_.prototype, "length", {
get: function() {
var views = this._element.nestedViews;
return isPresent(views) ? views.length : 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "element", {
get: function() {
return this._element.elementRef;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "injector", {
get: function() {
return this._element.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
get: function() {
return this._element.parentInjector;
},
enumerable: true,
configurable: true
});
ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
if (context === void 0) {
context = null;
}
if (index === void 0) {
index = -1;
}
var viewRef = templateRef.createEmbeddedView(context);
this.insert(viewRef, index);
return viewRef;
};
ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
if (index === void 0) {
index = -1;
}
if (injector === void 0) {
injector = null;
}
if (projectableNodes === void 0) {
projectableNodes = null;
}
var s = this._createComponentInContainerScope();
var contextInjector = injector || this._element.parentInjector;
var componentRef = componentFactory.create(contextInjector, projectableNodes);
this.insert(componentRef.hostView, index);
return wtfLeave(s, componentRef);
};
ViewContainerRef_.prototype.insert = function(viewRef, index) {
if (index === void 0) {
index = -1;
}
var s = this._insertScope();
if (index == -1) index = this.length;
var viewRef_ = viewRef;
this._element.attachView(viewRef_.internalView, index);
return wtfLeave(s, viewRef_);
};
ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
var s = this._insertScope();
if (currentIndex == -1) return;
var viewRef_ = viewRef;
this._element.moveView(viewRef_.internalView, currentIndex);
return wtfLeave(s, viewRef_);
};
ViewContainerRef_.prototype.indexOf = function(viewRef) {
return this._element.nestedViews.indexOf(viewRef.internalView);
};
ViewContainerRef_.prototype.remove = function(index) {
if (index === void 0) {
index = -1;
}
var s = this._removeScope();
if (index == -1) index = this.length - 1;
var view = this._element.detachView(index);
view.destroy();
wtfLeave(s);
};
ViewContainerRef_.prototype.detach = function(index) {
if (index === void 0) {
index = -1;
}
var s = this._detachScope();
if (index == -1) index = this.length - 1;
var view = this._element.detachView(index);
return wtfLeave(s, view.ref);
};
ViewContainerRef_.prototype.clear = function() {
for (var i = this.length - 1; i >= 0; i--) {
this.remove(i);
}
};
return ViewContainerRef_;
}();
var _queuedAnimations = [];
function queueAnimationGlobally(player) {
_queuedAnimations.push(player);
}
function triggerQueuedAnimations() {
if (_queuedAnimations.length) {
Promise.resolve(null).then(_triggerAnimations);
}
}
function _triggerAnimations() {
for (var i = 0; i < _queuedAnimations.length; i++) {
var player = _queuedAnimations[i];
player.play();
}
_queuedAnimations = [];
}
var __extends$11 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ViewRef = function() {
function ViewRef() {}
Object.defineProperty(ViewRef.prototype, "destroyed", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return ViewRef;
}();
var EmbeddedViewRef = function(_super) {
__extends$11(EmbeddedViewRef, _super);
function EmbeddedViewRef() {
_super.apply(this, arguments);
}
Object.defineProperty(EmbeddedViewRef.prototype, "context", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return EmbeddedViewRef;
}(ViewRef);
var ViewRef_ = function() {
function ViewRef_(_view) {
this._view = _view;
this._view = _view;
this._originalMode = this._view.cdMode;
}
Object.defineProperty(ViewRef_.prototype, "internalView", {
get: function() {
return this._view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "rootNodes", {
get: function() {
return this._view.flatRootNodes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "context", {
get: function() {
return this._view.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "destroyed", {
get: function() {
return this._view.destroyed;
},
enumerable: true,
configurable: true
});
ViewRef_.prototype.markForCheck = function() {
this._view.markPathToRootAsCheckOnce();
};
ViewRef_.prototype.detach = function() {
this._view.cdMode = ChangeDetectorStatus.Detached;
};
ViewRef_.prototype.detectChanges = function() {
this._view.detectChanges(false);
triggerQueuedAnimations();
};
ViewRef_.prototype.checkNoChanges = function() {
this._view.detectChanges(true);
};
ViewRef_.prototype.reattach = function() {
this._view.cdMode = this._originalMode;
this.markForCheck();
};
ViewRef_.prototype.onDestroy = function(callback) {
if (!this._view.disposables) {
this._view.disposables = [];
}
this._view.disposables.push(callback);
};
ViewRef_.prototype.destroy = function() {
this._view.detachAndDestroy();
};
return ViewRef_;
}();
var __extends$12 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventListener = function() {
function EventListener(name, callback) {
this.name = name;
this.callback = callback;
}
return EventListener;
}();
var DebugNode = function() {
function DebugNode(nativeNode, parent, _debugInfo) {
this._debugInfo = _debugInfo;
this.nativeNode = nativeNode;
if (parent && parent instanceof DebugElement) {
parent.addChild(this);
} else {
this.parent = null;
}
this.listeners = [];
}
Object.defineProperty(DebugNode.prototype, "injector", {
get: function() {
return this._debugInfo ? this._debugInfo.injector : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "componentInstance", {
get: function() {
return this._debugInfo ? this._debugInfo.component : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "context", {
get: function() {
return this._debugInfo ? this._debugInfo.context : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "references", {
get: function() {
return this._debugInfo ? this._debugInfo.references : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "providerTokens", {
get: function() {
return this._debugInfo ? this._debugInfo.providerTokens : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "source", {
get: function() {
return this._debugInfo ? this._debugInfo.source : null;
},
enumerable: true,
configurable: true
});
return DebugNode;
}();
var DebugElement = function(_super) {
__extends$12(DebugElement, _super);
function DebugElement(nativeNode, parent, _debugInfo) {
_super.call(this, nativeNode, parent, _debugInfo);
this.properties = {};
this.attributes = {};
this.classes = {};
this.styles = {};
this.childNodes = [];
this.nativeElement = nativeNode;
}
DebugElement.prototype.addChild = function(child) {
if (child) {
this.childNodes.push(child);
child.parent = this;
}
};
DebugElement.prototype.removeChild = function(child) {
var childIndex = this.childNodes.indexOf(child);
if (childIndex !== -1) {
child.parent = null;
this.childNodes.splice(childIndex, 1);
}
};
DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
var siblingIndex = this.childNodes.indexOf(child);
if (siblingIndex !== -1) {
var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
var nextChildren = this.childNodes.slice(siblingIndex + 1);
this.childNodes = previousChildren.concat(newChildren, nextChildren);
for (var i = 0; i < newChildren.length; ++i) {
var newChild = newChildren[i];
if (newChild.parent) {
newChild.parent.removeChild(newChild);
}
newChild.parent = this;
}
}
};
DebugElement.prototype.query = function(predicate) {
var results = this.queryAll(predicate);
return results[0] || null;
};
DebugElement.prototype.queryAll = function(predicate) {
var matches = [];
_queryElementChildren(this, predicate, matches);
return matches;
};
DebugElement.prototype.queryAllNodes = function(predicate) {
var matches = [];
_queryNodeChildren(this, predicate, matches);
return matches;
};
Object.defineProperty(DebugElement.prototype, "children", {
get: function() {
return this.childNodes.filter(function(node) {
return node instanceof DebugElement;
});
},
enumerable: true,
configurable: true
});
DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
this.listeners.forEach(function(listener) {
if (listener.name == eventName) {
listener.callback(eventObj);
}
});
};
return DebugElement;
}(DebugNode);
function asNativeElements(debugEls) {
return debugEls.map(function(el) {
return el.nativeElement;
});
}
function _queryElementChildren(element, predicate, matches) {
element.childNodes.forEach(function(node) {
if (node instanceof DebugElement) {
if (predicate(node)) {
matches.push(node);
}
_queryElementChildren(node, predicate, matches);
}
});
}
function _queryNodeChildren(parentNode, predicate, matches) {
if (parentNode instanceof DebugElement) {
parentNode.childNodes.forEach(function(node) {
if (predicate(node)) {
matches.push(node);
}
if (node instanceof DebugElement) {
_queryNodeChildren(node, predicate, matches);
}
});
}
}
var _nativeNodeToDebugNode = new Map();
function getDebugNode(nativeNode) {
return _nativeNodeToDebugNode.get(nativeNode);
}
function indexDebugNode(node) {
_nativeNodeToDebugNode.set(node.nativeNode, node);
}
function removeDebugNodeFromIndex(node) {
_nativeNodeToDebugNode.delete(node.nativeNode);
}
function _reflector() {
return reflector;
}
var _CORE_PLATFORM_PROVIDERS = [ PlatformRef_, {
provide: PlatformRef,
useExisting: PlatformRef_
}, {
provide: Reflector,
useFactory: _reflector,
deps: []
}, {
provide: ReflectorReader,
useExisting: Reflector
}, TestabilityRegistry, Console ];
var platformCore = createPlatformFactory(null, "core", _CORE_PLATFORM_PROVIDERS);
var LOCALE_ID = new OpaqueToken("LocaleId");
var TRANSLATIONS = new OpaqueToken("Translations");
var TRANSLATIONS_FORMAT = new OpaqueToken("TranslationsFormat");
function _iterableDiffersFactory() {
return defaultIterableDiffers;
}
function _keyValueDiffersFactory() {
return defaultKeyValueDiffers;
}
var ApplicationModule = function() {
function ApplicationModule() {}
ApplicationModule.decorators = [ {
type: NgModule,
args: [ {
providers: [ ApplicationRef_, {
provide: ApplicationRef,
useExisting: ApplicationRef_
}, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, {
provide: IterableDiffers,
useFactory: _iterableDiffersFactory
}, {
provide: KeyValueDiffers,
useFactory: _keyValueDiffersFactory
}, {
provide: LOCALE_ID,
useValue: "en-US"
} ]
} ]
} ];
ApplicationModule.ctorParameters = [];
return ApplicationModule;
}();
var FILL_STYLE_FLAG = "true";
var ANY_STATE = "*";
var DEFAULT_STATE = "*";
var EMPTY_STATE = "void";
var AnimationGroupPlayer = function() {
function AnimationGroupPlayer(_players) {
var _this = this;
this._players = _players;
this._onDoneFns = [];
this._onStartFns = [];
this._finished = false;
this._started = false;
this._destroyed = false;
this.parentPlayer = null;
var count = 0;
var total = this._players.length;
if (total == 0) {
scheduleMicroTask(function() {
return _this._onFinish();
});
} else {
this._players.forEach(function(player) {
player.parentPlayer = _this;
player.onDone(function() {
if (++count >= total) {
_this._onFinish();
}
});
});
}
}
AnimationGroupPlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
}
};
AnimationGroupPlayer.prototype.init = function() {
this._players.forEach(function(player) {
return player.init();
});
};
AnimationGroupPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
AnimationGroupPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
AnimationGroupPlayer.prototype.hasStarted = function() {
return this._started;
};
AnimationGroupPlayer.prototype.play = function() {
if (!isPresent(this.parentPlayer)) {
this.init();
}
if (!this.hasStarted()) {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
this._started = true;
}
this._players.forEach(function(player) {
return player.play();
});
};
AnimationGroupPlayer.prototype.pause = function() {
this._players.forEach(function(player) {
return player.pause();
});
};
AnimationGroupPlayer.prototype.restart = function() {
this._players.forEach(function(player) {
return player.restart();
});
};
AnimationGroupPlayer.prototype.finish = function() {
this._onFinish();
this._players.forEach(function(player) {
return player.finish();
});
};
AnimationGroupPlayer.prototype.destroy = function() {
if (!this._destroyed) {
this._onFinish();
this._players.forEach(function(player) {
return player.destroy();
});
this._destroyed = true;
}
};
AnimationGroupPlayer.prototype.reset = function() {
this._players.forEach(function(player) {
return player.reset();
});
this._destroyed = false;
this._finished = false;
this._started = false;
};
AnimationGroupPlayer.prototype.setPosition = function(p) {
this._players.forEach(function(player) {
player.setPosition(p);
});
};
AnimationGroupPlayer.prototype.getPosition = function() {
var min = 0;
this._players.forEach(function(player) {
var p = player.getPosition();
min = Math.min(p, min);
});
return min;
};
Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
get: function() {
return this._players;
},
enumerable: true,
configurable: true
});
return AnimationGroupPlayer;
}();
var AnimationKeyframe = function() {
function AnimationKeyframe(offset, styles) {
this.offset = offset;
this.styles = styles;
}
return AnimationKeyframe;
}();
var AnimationPlayer = function() {
function AnimationPlayer() {}
Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
get: function() {
throw new Error("NOT IMPLEMENTED: Base Class");
},
set: function(player) {
throw new Error("NOT IMPLEMENTED: Base Class");
},
enumerable: true,
configurable: true
});
return AnimationPlayer;
}();
var NoOpAnimationPlayer = function() {
function NoOpAnimationPlayer() {
var _this = this;
this._onDoneFns = [];
this._onStartFns = [];
this._started = false;
this.parentPlayer = null;
scheduleMicroTask(function() {
return _this._onFinish();
});
}
NoOpAnimationPlayer.prototype._onFinish = function() {
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
};
NoOpAnimationPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
NoOpAnimationPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
NoOpAnimationPlayer.prototype.hasStarted = function() {
return this._started;
};
NoOpAnimationPlayer.prototype.init = function() {};
NoOpAnimationPlayer.prototype.play = function() {
if (!this.hasStarted()) {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
}
this._started = true;
};
NoOpAnimationPlayer.prototype.pause = function() {};
NoOpAnimationPlayer.prototype.restart = function() {};
NoOpAnimationPlayer.prototype.finish = function() {
this._onFinish();
};
NoOpAnimationPlayer.prototype.destroy = function() {};
NoOpAnimationPlayer.prototype.reset = function() {};
NoOpAnimationPlayer.prototype.setPosition = function(p) {};
NoOpAnimationPlayer.prototype.getPosition = function() {
return 0;
};
return NoOpAnimationPlayer;
}();
var AnimationSequencePlayer = function() {
function AnimationSequencePlayer(_players) {
var _this = this;
this._players = _players;
this._currentIndex = 0;
this._onDoneFns = [];
this._onStartFns = [];
this._finished = false;
this._started = false;
this._destroyed = false;
this.parentPlayer = null;
this._players.forEach(function(player) {
player.parentPlayer = _this;
});
this._onNext(false);
}
AnimationSequencePlayer.prototype._onNext = function(start) {
var _this = this;
if (this._finished) return;
if (this._players.length == 0) {
this._activePlayer = new NoOpAnimationPlayer();
scheduleMicroTask(function() {
return _this._onFinish();
});
} else if (this._currentIndex >= this._players.length) {
this._activePlayer = new NoOpAnimationPlayer();
this._onFinish();
} else {
var player = this._players[this._currentIndex++];
player.onDone(function() {
return _this._onNext(true);
});
this._activePlayer = player;
if (start) {
player.play();
}
}
};
AnimationSequencePlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
}
};
AnimationSequencePlayer.prototype.init = function() {
this._players.forEach(function(player) {
return player.init();
});
};
AnimationSequencePlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
AnimationSequencePlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
AnimationSequencePlayer.prototype.hasStarted = function() {
return this._started;
};
AnimationSequencePlayer.prototype.play = function() {
if (!isPresent(this.parentPlayer)) {
this.init();
}
if (!this.hasStarted()) {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
this._started = true;
}
this._activePlayer.play();
};
AnimationSequencePlayer.prototype.pause = function() {
this._activePlayer.pause();
};
AnimationSequencePlayer.prototype.restart = function() {
this.reset();
if (this._players.length > 0) {
this._players[0].restart();
}
};
AnimationSequencePlayer.prototype.reset = function() {
this._players.forEach(function(player) {
return player.reset();
});
this._destroyed = false;
this._finished = false;
this._started = false;
};
AnimationSequencePlayer.prototype.finish = function() {
this._onFinish();
this._players.forEach(function(player) {
return player.finish();
});
};
AnimationSequencePlayer.prototype.destroy = function() {
if (!this._destroyed) {
this._onFinish();
this._players.forEach(function(player) {
return player.destroy();
});
this._destroyed = true;
this._activePlayer = new NoOpAnimationPlayer();
}
};
AnimationSequencePlayer.prototype.setPosition = function(p) {
this._players[0].setPosition(p);
};
AnimationSequencePlayer.prototype.getPosition = function() {
return this._players[0].getPosition();
};
Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
get: function() {
return this._players;
},
enumerable: true,
configurable: true
});
return AnimationSequencePlayer;
}();
var __extends$13 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AUTO_STYLE = "*";
var AnimationEntryMetadata = function() {
function AnimationEntryMetadata(name, definitions) {
this.name = name;
this.definitions = definitions;
}
return AnimationEntryMetadata;
}();
var AnimationStateMetadata = function() {
function AnimationStateMetadata() {}
return AnimationStateMetadata;
}();
var AnimationStateDeclarationMetadata = function(_super) {
__extends$13(AnimationStateDeclarationMetadata, _super);
function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
_super.call(this);
this.stateNameExpr = stateNameExpr;
this.styles = styles;
}
return AnimationStateDeclarationMetadata;
}(AnimationStateMetadata);
var AnimationStateTransitionMetadata = function(_super) {
__extends$13(AnimationStateTransitionMetadata, _super);
function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
_super.call(this);
this.stateChangeExpr = stateChangeExpr;
this.steps = steps;
}
return AnimationStateTransitionMetadata;
}(AnimationStateMetadata);
var AnimationMetadata = function() {
function AnimationMetadata() {}
return AnimationMetadata;
}();
var AnimationKeyframesSequenceMetadata = function(_super) {
__extends$13(AnimationKeyframesSequenceMetadata, _super);
function AnimationKeyframesSequenceMetadata(steps) {
_super.call(this);
this.steps = steps;
}
return AnimationKeyframesSequenceMetadata;
}(AnimationMetadata);
var AnimationStyleMetadata = function(_super) {
__extends$13(AnimationStyleMetadata, _super);
function AnimationStyleMetadata(styles, offset) {
if (offset === void 0) {
offset = null;
}
_super.call(this);
this.styles = styles;
this.offset = offset;
}
return AnimationStyleMetadata;
}(AnimationMetadata);
var AnimationAnimateMetadata = function(_super) {
__extends$13(AnimationAnimateMetadata, _super);
function AnimationAnimateMetadata(timings, styles) {
_super.call(this);
this.timings = timings;
this.styles = styles;
}
return AnimationAnimateMetadata;
}(AnimationMetadata);
var AnimationWithStepsMetadata = function(_super) {
__extends$13(AnimationWithStepsMetadata, _super);
function AnimationWithStepsMetadata() {
_super.call(this);
}
Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
get: function() {
throw new Error("NOT IMPLEMENTED: Base Class");
},
enumerable: true,
configurable: true
});
return AnimationWithStepsMetadata;
}(AnimationMetadata);
var AnimationSequenceMetadata = function(_super) {
__extends$13(AnimationSequenceMetadata, _super);
function AnimationSequenceMetadata(_steps) {
_super.call(this);
this._steps = _steps;
}
Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
get: function() {
return this._steps;
},
enumerable: true,
configurable: true
});
return AnimationSequenceMetadata;
}(AnimationWithStepsMetadata);
var AnimationGroupMetadata = function(_super) {
__extends$13(AnimationGroupMetadata, _super);
function AnimationGroupMetadata(_steps) {
_super.call(this);
this._steps = _steps;
}
Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
get: function() {
return this._steps;
},
enumerable: true,
configurable: true
});
return AnimationGroupMetadata;
}(AnimationWithStepsMetadata);
function animate(timing, styles) {
if (styles === void 0) {
styles = null;
}
var stylesEntry = styles;
if (!isPresent(stylesEntry)) {
var EMPTY_STYLE = {};
stylesEntry = new AnimationStyleMetadata([ EMPTY_STYLE ], 1);
}
return new AnimationAnimateMetadata(timing, stylesEntry);
}
function group(steps) {
return new AnimationGroupMetadata(steps);
}
function sequence(steps) {
return new AnimationSequenceMetadata(steps);
}
function style(tokens) {
var input;
var offset = null;
if (typeof tokens === "string") {
input = [ tokens ];
} else {
if (Array.isArray(tokens)) {
input = tokens;
} else {
input = [ tokens ];
}
input.forEach(function(entry) {
var entryOffset = entry["offset"];
if (isPresent(entryOffset)) {
offset = offset == null ? parseFloat(entryOffset) : offset;
}
});
}
return new AnimationStyleMetadata(input, offset);
}
function state(stateNameExpr, styles) {
return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
}
function keyframes(steps) {
return new AnimationKeyframesSequenceMetadata(steps);
}
function transition(stateChangeExpr, steps) {
var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
}
function trigger(name, animation) {
return new AnimationEntryMetadata(name, animation);
}
function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
if (nullValue === void 0) {
nullValue = null;
}
var finalStyles = {};
Object.keys(newStyles).forEach(function(prop) {
var value = newStyles[prop];
finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
});
Object.keys(previousStyles).forEach(function(prop) {
if (!isPresent(finalStyles[prop])) {
finalStyles[prop] = nullValue;
}
});
return finalStyles;
}
function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
var limit = keyframes.length - 1;
var firstKeyframe = keyframes[0];
var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
var extraFirstKeyframeStyles = {};
var hasExtraFirstStyles = false;
Object.keys(collectedStyles).forEach(function(prop) {
var value = collectedStyles[prop];
if (!flatenedFirstKeyframeStyles[prop]) {
flatenedFirstKeyframeStyles[prop] = value;
extraFirstKeyframeStyles[prop] = value;
hasExtraFirstStyles = true;
}
});
var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
var finalKeyframe = keyframes[limit];
finalKeyframe.styles.styles.unshift(finalStateStyles);
var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
var extraFinalKeyframeStyles = {};
var hasExtraFinalStyles = false;
Object.keys(keyframeCollectedStyles).forEach(function(prop) {
if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
extraFinalKeyframeStyles[prop] = AUTO_STYLE;
hasExtraFinalStyles = true;
}
});
if (hasExtraFinalStyles) {
finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
}
Object.keys(flatenedFinalKeyframeStyles).forEach(function(prop) {
if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
extraFirstKeyframeStyles[prop] = AUTO_STYLE;
hasExtraFirstStyles = true;
}
});
if (hasExtraFirstStyles) {
firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
}
collectAndResolveStyles(collectedStyles, [ finalStateStyles ]);
return keyframes;
}
function clearStyles(styles) {
var finalStyles = {};
Object.keys(styles).forEach(function(key) {
finalStyles[key] = null;
});
return finalStyles;
}
function collectAndResolveStyles(collection, styles) {
return styles.map(function(entry) {
var stylesObj = {};
Object.keys(entry).forEach(function(prop) {
var value = entry[prop];
if (value == FILL_STYLE_FLAG) {
value = collection[prop];
if (!isPresent(value)) {
value = AUTO_STYLE;
}
}
collection[prop] = value;
stylesObj[prop] = value;
});
return stylesObj;
});
}
function renderStyles(element, renderer, styles) {
Object.keys(styles).forEach(function(prop) {
renderer.setElementStyle(element, prop, styles[prop]);
});
}
function flattenStyles(styles) {
var finalStyles = {};
styles.forEach(function(entry) {
Object.keys(entry).forEach(function(prop) {
finalStyles[prop] = entry[prop];
});
});
return finalStyles;
}
var AnimationStyles = function() {
function AnimationStyles(styles) {
this.styles = styles;
}
return AnimationStyles;
}();
var AnimationTransitionEvent = function() {
function AnimationTransitionEvent(_a) {
var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
this.fromState = fromState;
this.toState = toState;
this.totalTime = totalTime;
this.phaseName = phaseName;
}
return AnimationTransitionEvent;
}();
var AnimationTransition = function() {
function AnimationTransition(_player, _fromState, _toState, _totalTime) {
this._player = _player;
this._fromState = _fromState;
this._toState = _toState;
this._totalTime = _totalTime;
}
AnimationTransition.prototype._createEvent = function(phaseName) {
return new AnimationTransitionEvent({
fromState: this._fromState,
toState: this._toState,
totalTime: this._totalTime,
phaseName: phaseName
});
};
AnimationTransition.prototype.onStart = function(callback) {
var event = this._createEvent("start");
this._player.onStart(function() {
return callback(event);
});
};
AnimationTransition.prototype.onDone = function(callback) {
var event = this._createEvent("done");
this._player.onDone(function() {
return callback(event);
});
};
return AnimationTransition;
}();
var DebugDomRootRenderer = function() {
function DebugDomRootRenderer(_delegate) {
this._delegate = _delegate;
}
DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
};
return DebugDomRootRenderer;
}();
var DebugDomRenderer = function() {
function DebugDomRenderer(_delegate) {
this._delegate = _delegate;
}
DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
var debugEl = new DebugElement(nativeEl, null, debugInfo);
indexDebugNode(debugEl);
return nativeEl;
};
DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
debugEl.name = name;
indexDebugNode(debugEl);
return nativeEl;
};
DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
return this._delegate.createViewRoot(hostElement);
};
DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
indexDebugNode(debugEl);
return comment;
};
DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
var text = this._delegate.createText(parentElement, value, debugInfo);
var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
indexDebugNode(debugEl);
return text;
};
DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
var debugParent = getDebugNode(parentElement);
if (isPresent(debugParent) && debugParent instanceof DebugElement) {
var debugElement_1 = debugParent;
nodes.forEach(function(node) {
debugElement_1.addChild(getDebugNode(node));
});
}
this._delegate.projectNodes(parentElement, nodes);
};
DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
var debugNode = getDebugNode(node);
if (isPresent(debugNode)) {
var debugParent = debugNode.parent;
if (viewRootNodes.length > 0 && isPresent(debugParent)) {
var debugViewRootNodes_1 = [];
viewRootNodes.forEach(function(rootNode) {
return debugViewRootNodes_1.push(getDebugNode(rootNode));
});
debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
}
}
this._delegate.attachViewAfter(node, viewRootNodes);
};
DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
viewRootNodes.forEach(function(node) {
var debugNode = getDebugNode(node);
if (isPresent(debugNode) && isPresent(debugNode.parent)) {
debugNode.parent.removeChild(debugNode);
}
});
this._delegate.detachView(viewRootNodes);
};
DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
viewAllNodes = viewAllNodes || [];
viewAllNodes.forEach(function(node) {
removeDebugNodeFromIndex(getDebugNode(node));
});
this._delegate.destroyView(hostElement, viewAllNodes);
};
DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
var debugEl = getDebugNode(renderElement);
if (isPresent(debugEl)) {
debugEl.listeners.push(new EventListener(name, callback));
}
return this._delegate.listen(renderElement, name, callback);
};
DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
return this._delegate.listenGlobal(target, name, callback);
};
DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
var debugEl = getDebugNode(renderElement);
if (isPresent(debugEl) && debugEl instanceof DebugElement) {
debugEl.properties[propertyName] = propertyValue;
}
this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
};
DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
var debugEl = getDebugNode(renderElement);
if (isPresent(debugEl) && debugEl instanceof DebugElement) {
debugEl.attributes[attributeName] = attributeValue;
}
this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
};
DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
};
DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
var debugEl = getDebugNode(renderElement);
if (isPresent(debugEl) && debugEl instanceof DebugElement) {
debugEl.classes[className] = isAdd;
}
this._delegate.setElementClass(renderElement, className, isAdd);
};
DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
var debugEl = getDebugNode(renderElement);
if (isPresent(debugEl) && debugEl instanceof DebugElement) {
debugEl.styles[styleName] = styleValue;
}
this._delegate.setElementStyle(renderElement, styleName, styleValue);
};
DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
this._delegate.invokeElementMethod(renderElement, methodName, args);
};
DebugDomRenderer.prototype.setText = function(renderNode, text) {
this._delegate.setText(renderNode, text);
};
DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
};
return DebugDomRenderer;
}();
var ViewType;
(function(ViewType) {
ViewType[ViewType["HOST"] = 0] = "HOST";
ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
})(ViewType || (ViewType = {}));
var StaticNodeDebugInfo = function() {
function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
this.providerTokens = providerTokens;
this.componentToken = componentToken;
this.refTokens = refTokens;
}
return StaticNodeDebugInfo;
}();
var DebugContext = function() {
function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
this._view = _view;
this._nodeIndex = _nodeIndex;
this._tplRow = _tplRow;
this._tplCol = _tplCol;
}
Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
get: function() {
return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "context", {
get: function() {
return this._view.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "component", {
get: function() {
var staticNodeInfo = this._staticNodeInfo;
if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
return this.injector.get(staticNodeInfo.componentToken);
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
get: function() {
var componentView = this._view;
while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
componentView = componentView.parentView;
}
return componentView.parentElement;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "injector", {
get: function() {
return this._view.injector(this._nodeIndex);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "renderNode", {
get: function() {
if (isPresent(this._nodeIndex) && this._view.allNodes) {
return this._view.allNodes[this._nodeIndex];
} else {
return null;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "providerTokens", {
get: function() {
var staticNodeInfo = this._staticNodeInfo;
return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "source", {
get: function() {
return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "references", {
get: function() {
var _this = this;
var varValues = {};
var staticNodeInfo = this._staticNodeInfo;
if (isPresent(staticNodeInfo)) {
var refs_1 = staticNodeInfo.refTokens;
Object.keys(refs_1).forEach(function(refName) {
var refToken = refs_1[refName];
var varValue;
if (isBlank(refToken)) {
varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
} else {
varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
}
varValues[refName] = varValue;
});
}
return varValues;
},
enumerable: true,
configurable: true
});
return DebugContext;
}();
var ViewAnimationMap = function() {
function ViewAnimationMap() {
this._map = new Map();
this._allPlayers = [];
}
ViewAnimationMap.prototype.find = function(element, animationName) {
var playersByAnimation = this._map.get(element);
if (isPresent(playersByAnimation)) {
return playersByAnimation[animationName];
}
};
ViewAnimationMap.prototype.findAllPlayersByElement = function(element) {
var el = this._map.get(element);
return el ? Object.keys(el).map(function(k) {
return el[k];
}) : [];
};
ViewAnimationMap.prototype.set = function(element, animationName, player) {
var playersByAnimation = this._map.get(element);
if (!isPresent(playersByAnimation)) {
playersByAnimation = {};
}
var existingEntry = playersByAnimation[animationName];
if (isPresent(existingEntry)) {
this.remove(element, animationName);
}
playersByAnimation[animationName] = player;
this._allPlayers.push(player);
this._map.set(element, playersByAnimation);
};
ViewAnimationMap.prototype.getAllPlayers = function() {
return this._allPlayers;
};
ViewAnimationMap.prototype.remove = function(element, animationName) {
var playersByAnimation = this._map.get(element);
if (playersByAnimation) {
var player = playersByAnimation[animationName];
delete playersByAnimation[animationName];
var index = this._allPlayers.indexOf(player);
this._allPlayers.splice(index, 1);
if (Object.keys(playersByAnimation).length === 0) {
this._map.delete(element);
}
}
};
return ViewAnimationMap;
}();
var AnimationViewContext = function() {
function AnimationViewContext() {
this._players = new ViewAnimationMap();
}
AnimationViewContext.prototype.onAllActiveAnimationsDone = function(callback) {
var activeAnimationPlayers = this._players.getAllPlayers();
if (activeAnimationPlayers.length) {
new AnimationGroupPlayer(activeAnimationPlayers).onDone(function() {
return callback();
});
} else {
callback();
}
};
AnimationViewContext.prototype.queueAnimation = function(element, animationName, player) {
queueAnimationGlobally(player);
this._players.set(element, animationName, player);
};
AnimationViewContext.prototype.getAnimationPlayers = function(element, animationName, removeAllAnimations) {
if (removeAllAnimations === void 0) {
removeAllAnimations = false;
}
var players = [];
if (removeAllAnimations) {
this._players.findAllPlayersByElement(element).forEach(function(player) {
_recursePlayers(player, players);
});
} else {
var currentPlayer = this._players.find(element, animationName);
if (currentPlayer) {
_recursePlayers(currentPlayer, players);
}
}
return players;
};
return AnimationViewContext;
}();
function _recursePlayers(player, collectedPlayers) {
if (player instanceof AnimationGroupPlayer || player instanceof AnimationSequencePlayer) {
player.players.forEach(function(player) {
return _recursePlayers(player, collectedPlayers);
});
} else {
collectedPlayers.push(player);
}
}
var __extends$15 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ElementInjector = function(_super) {
__extends$15(ElementInjector, _super);
function ElementInjector(_view, _nodeIndex) {
_super.call(this);
this._view = _view;
this._nodeIndex = _nodeIndex;
}
ElementInjector.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = THROW_IF_NOT_FOUND;
}
return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
};
return ElementInjector;
}(Injector);
var __extends$14 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _scope_check = wtfCreateScope("AppView#check(ascii id)");
var EMPTY_CONTEXT$1 = new Object();
var UNDEFINED$1 = new Object();
var AppView = function() {
function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
if (declaredViewContainer === void 0) {
declaredViewContainer = null;
}
this.clazz = clazz;
this.componentType = componentType;
this.type = type;
this.viewUtils = viewUtils;
this.parentView = parentView;
this.parentIndex = parentIndex;
this.parentElement = parentElement;
this.cdMode = cdMode;
this.declaredViewContainer = declaredViewContainer;
this.viewContainer = null;
this.numberOfChecks = 0;
this.ref = new ViewRef_(this);
if (type === ViewType.COMPONENT || type === ViewType.HOST) {
this.renderer = viewUtils.renderComponent(componentType);
} else {
this.renderer = parentView.renderer;
}
this._directRenderer = this.renderer.directRenderer;
}
Object.defineProperty(AppView.prototype, "animationContext", {
get: function() {
if (!this._animationContext) {
this._animationContext = new AnimationViewContext();
}
return this._animationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppView.prototype, "destroyed", {
get: function() {
return this.cdMode === ChangeDetectorStatus.Destroyed;
},
enumerable: true,
configurable: true
});
AppView.prototype.create = function(context) {
this.context = context;
return this.createInternal(null);
};
AppView.prototype.createHostView = function(rootSelectorOrNode, hostInjector, projectableNodes) {
this.context = EMPTY_CONTEXT$1;
this._hasExternalHostElement = isPresent(rootSelectorOrNode);
this._hostInjector = hostInjector;
this._hostProjectableNodes = projectableNodes;
return this.createInternal(rootSelectorOrNode);
};
AppView.prototype.createInternal = function(rootSelectorOrNode) {
return null;
};
AppView.prototype.createEmbeddedViewInternal = function(templateNodeIndex) {
return null;
};
AppView.prototype.init = function(lastRootNode, allNodes, disposables) {
this.lastRootNode = lastRootNode;
this.allNodes = allNodes;
this.disposables = disposables;
if (this.type === ViewType.COMPONENT) {
this.dirtyParentQueriesInternal();
}
};
AppView.prototype.injectorGet = function(token, nodeIndex, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = THROW_IF_NOT_FOUND;
}
var result = UNDEFINED$1;
var view = this;
while (result === UNDEFINED$1) {
if (isPresent(nodeIndex)) {
result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
}
if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
result = view._hostInjector.get(token, notFoundValue);
}
nodeIndex = view.parentIndex;
view = view.parentView;
}
return result;
};
AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
return notFoundResult;
};
AppView.prototype.injector = function(nodeIndex) {
return new ElementInjector(this, nodeIndex);
};
AppView.prototype.detachAndDestroy = function() {
if (this._hasExternalHostElement) {
this.detach();
} else if (isPresent(this.viewContainer)) {
this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
}
this.destroy();
};
AppView.prototype.destroy = function() {
var _this = this;
if (this.cdMode === ChangeDetectorStatus.Destroyed) {
return;
}
var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
if (this.disposables) {
for (var i = 0; i < this.disposables.length; i++) {
this.disposables[i]();
}
}
this.destroyInternal();
this.dirtyParentQueriesInternal();
if (this._animationContext) {
this._animationContext.onAllActiveAnimationsDone(function() {
return _this.renderer.destroyView(hostElement, _this.allNodes);
});
} else {
this.renderer.destroyView(hostElement, this.allNodes);
}
this.cdMode = ChangeDetectorStatus.Destroyed;
};
AppView.prototype.destroyInternal = function() {};
AppView.prototype.detachInternal = function() {};
AppView.prototype.detach = function() {
var _this = this;
this.detachInternal();
if (this._animationContext) {
this._animationContext.onAllActiveAnimationsDone(function() {
return _this._renderDetach();
});
} else {
this._renderDetach();
}
if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer) {
var projectedViews = this.declaredViewContainer.projectedViews;
var index = projectedViews.indexOf(this);
if (index >= projectedViews.length - 1) {
projectedViews.pop();
} else {
projectedViews.splice(index, 1);
}
}
this.viewContainer = null;
this.dirtyParentQueriesInternal();
};
AppView.prototype._renderDetach = function() {
if (this._directRenderer) {
this.visitRootNodesInternal(this._directRenderer.remove, null);
} else {
this.renderer.detachView(this.flatRootNodes);
}
};
AppView.prototype.attachAfter = function(viewContainer, prevView) {
this._renderAttach(viewContainer, prevView);
this.viewContainer = viewContainer;
if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
if (!this.declaredViewContainer.projectedViews) {
this.declaredViewContainer.projectedViews = [];
}
this.declaredViewContainer.projectedViews.push(this);
}
this.dirtyParentQueriesInternal();
};
AppView.prototype.moveAfter = function(viewContainer, prevView) {
this._renderAttach(viewContainer, prevView);
this.dirtyParentQueriesInternal();
};
AppView.prototype._renderAttach = function(viewContainer, prevView) {
var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
if (this._directRenderer) {
var nextSibling = this._directRenderer.nextSibling(prevNode);
if (nextSibling) {
this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
} else {
var parentElement = this._directRenderer.parentElement(prevNode);
if (parentElement) {
this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
}
}
} else {
this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
}
};
Object.defineProperty(AppView.prototype, "changeDetectorRef", {
get: function() {
return this.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppView.prototype, "flatRootNodes", {
get: function() {
var nodes = [];
this.visitRootNodesInternal(addToArray, nodes);
return nodes;
},
enumerable: true,
configurable: true
});
AppView.prototype.projectNodes = function(parentElement, ngContentIndex) {
if (this._directRenderer) {
this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
} else {
var nodes = [];
this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
this.renderer.projectNodes(parentElement, nodes);
}
};
AppView.prototype.visitProjectedNodes = function(ngContentIndex, cb, c) {
switch (this.type) {
case ViewType.EMBEDDED:
this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
break;

case ViewType.COMPONENT:
if (this.parentView.type === ViewType.HOST) {
var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
for (var i = 0; i < nodes.length; i++) {
cb(nodes[i], c);
}
} else {
this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
}
break;
}
};
AppView.prototype.visitRootNodesInternal = function(cb, c) {};
AppView.prototype.visitProjectableNodesInternal = function(nodeIndex, ngContentIndex, cb, c) {};
AppView.prototype.dirtyParentQueriesInternal = function() {};
AppView.prototype.detectChanges = function(throwOnChange) {
var s = _scope_check(this.clazz);
if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored || this.cdMode === ChangeDetectorStatus.Detached) return;
if (this.cdMode === ChangeDetectorStatus.Destroyed) {
this.throwDestroyedError("detectChanges");
}
this.detectChangesInternal(throwOnChange);
if (this.cdMode === ChangeDetectorStatus.CheckOnce) this.cdMode = ChangeDetectorStatus.Checked;
this.numberOfChecks++;
wtfLeave(s);
};
AppView.prototype.detectChangesInternal = function(throwOnChange) {};
AppView.prototype.markAsCheckOnce = function() {
this.cdMode = ChangeDetectorStatus.CheckOnce;
};
AppView.prototype.markPathToRootAsCheckOnce = function() {
var c = this;
while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
if (c.cdMode === ChangeDetectorStatus.Checked) {
c.cdMode = ChangeDetectorStatus.CheckOnce;
}
if (c.type === ViewType.COMPONENT) {
c = c.parentView;
} else {
c = c.viewContainer ? c.viewContainer.parentView : null;
}
}
};
AppView.prototype.eventHandler = function(cb) {
return cb;
};
AppView.prototype.throwDestroyedError = function(details) {
throw new ViewDestroyedError(details);
};
return AppView;
}();
var DebugAppView = function(_super) {
__extends$14(DebugAppView, _super);
function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
if (declaredViewContainer === void 0) {
declaredViewContainer = null;
}
_super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
this.staticNodeDebugInfos = staticNodeDebugInfos;
this._currentDebugContext = null;
}
DebugAppView.prototype.create = function(context) {
this._resetDebug();
try {
return _super.prototype.create.call(this, context);
} catch (e) {
this._rethrowWithContext(e);
throw e;
}
};
DebugAppView.prototype.createHostView = function(rootSelectorOrNode, injector, projectableNodes) {
if (projectableNodes === void 0) {
projectableNodes = null;
}
this._resetDebug();
try {
return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
} catch (e) {
this._rethrowWithContext(e);
throw e;
}
};
DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
this._resetDebug();
try {
return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
} catch (e) {
this._rethrowWithContext(e);
throw e;
}
};
DebugAppView.prototype.detach = function() {
this._resetDebug();
try {
_super.prototype.detach.call(this);
} catch (e) {
this._rethrowWithContext(e);
throw e;
}
};
DebugAppView.prototype.destroy = function() {
this._resetDebug();
try {
_super.prototype.destroy.call(this);
} catch (e) {
this._rethrowWithContext(e);
throw e;
}
};
DebugAppView.prototype.detectChanges = function(throwOnChange) {
this._resetDebug();
try {
_super.prototype.detectChanges.call(this, throwOnChange);
} catch (e) {
this._rethrowWithContext(e);
throw e;
}
};
DebugAppView.prototype._resetDebug = function() {
this._currentDebugContext = null;
};
DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
};
DebugAppView.prototype._rethrowWithContext = function(e) {
if (!(e instanceof ViewWrappedError)) {
if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
this.cdMode = ChangeDetectorStatus.Errored;
}
if (isPresent(this._currentDebugContext)) {
throw new ViewWrappedError(e, this._currentDebugContext);
}
}
};
DebugAppView.prototype.eventHandler = function(cb) {
var _this = this;
var superHandler = _super.prototype.eventHandler.call(this, cb);
return function(eventName, event) {
_this._resetDebug();
try {
return superHandler.call(_this, eventName, event);
} catch (e) {
_this._rethrowWithContext(e);
throw e;
}
};
};
return DebugAppView;
}(AppView);
var ViewContainer = function() {
function ViewContainer(index, parentIndex, parentView, nativeElement) {
this.index = index;
this.parentIndex = parentIndex;
this.parentView = parentView;
this.nativeElement = nativeElement;
}
Object.defineProperty(ViewContainer.prototype, "elementRef", {
get: function() {
return new ElementRef(this.nativeElement);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainer.prototype, "vcRef", {
get: function() {
return new ViewContainerRef_(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainer.prototype, "parentInjector", {
get: function() {
return this.parentView.injector(this.parentIndex);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainer.prototype, "injector", {
get: function() {
return this.parentView.injector(this.index);
},
enumerable: true,
configurable: true
});
ViewContainer.prototype.detectChangesInNestedViews = function(throwOnChange) {
if (this.nestedViews) {
for (var i = 0; i < this.nestedViews.length; i++) {
this.nestedViews[i].detectChanges(throwOnChange);
}
}
};
ViewContainer.prototype.destroyNestedViews = function() {
if (this.nestedViews) {
for (var i = 0; i < this.nestedViews.length; i++) {
this.nestedViews[i].destroy();
}
}
};
ViewContainer.prototype.visitNestedViewRootNodes = function(cb, c) {
if (this.nestedViews) {
for (var i = 0; i < this.nestedViews.length; i++) {
this.nestedViews[i].visitRootNodesInternal(cb, c);
}
}
};
ViewContainer.prototype.mapNestedViews = function(nestedViewClass, callback) {
var result = [];
if (this.nestedViews) {
for (var i = 0; i < this.nestedViews.length; i++) {
var nestedView = this.nestedViews[i];
if (nestedView.clazz === nestedViewClass) {
result.push(callback(nestedView));
}
}
}
if (this.projectedViews) {
for (var i = 0; i < this.projectedViews.length; i++) {
var projectedView = this.projectedViews[i];
if (projectedView.clazz === nestedViewClass) {
result.push(callback(projectedView));
}
}
}
return result;
};
ViewContainer.prototype.moveView = function(view, currentIndex) {
var previousIndex = this.nestedViews.indexOf(view);
if (view.type === ViewType.COMPONENT) {
throw new Error("Component views can't be moved!");
}
var nestedViews = this.nestedViews;
if (nestedViews == null) {
nestedViews = [];
this.nestedViews = nestedViews;
}
nestedViews.splice(previousIndex, 1);
nestedViews.splice(currentIndex, 0, view);
var prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
view.moveAfter(this, prevView);
};
ViewContainer.prototype.attachView = function(view, viewIndex) {
if (view.type === ViewType.COMPONENT) {
throw new Error("Component views can't be moved!");
}
var nestedViews = this.nestedViews;
if (nestedViews == null) {
nestedViews = [];
this.nestedViews = nestedViews;
}
if (viewIndex >= nestedViews.length) {
nestedViews.push(view);
} else {
nestedViews.splice(viewIndex, 0, view);
}
var prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
view.attachAfter(this, prevView);
};
ViewContainer.prototype.detachView = function(viewIndex) {
var view = this.nestedViews[viewIndex];
if (viewIndex >= this.nestedViews.length - 1) {
this.nestedViews.pop();
} else {
this.nestedViews.splice(viewIndex, 1);
}
if (view.type === ViewType.COMPONENT) {
throw new Error("Component views can't be moved!");
}
view.detach();
return view;
};
return ViewContainer;
}();
var __core_private__ = {
isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
ChangeDetectorStatus: ChangeDetectorStatus,
constructDependencies: constructDependencies,
LifecycleHooks: LifecycleHooks,
LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
ReflectorReader: ReflectorReader,
CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
ComponentRef_: ComponentRef_,
ViewContainer: ViewContainer,
AppView: AppView,
DebugAppView: DebugAppView,
NgModuleInjector: NgModuleInjector,
registerModuleFactory: registerModuleFactory,
ViewType: ViewType,
view_utils: view_utils,
ViewMetadata: ViewMetadata,
DebugContext: DebugContext,
StaticNodeDebugInfo: StaticNodeDebugInfo,
devModeEqual: devModeEqual,
UNINITIALIZED: UNINITIALIZED,
ValueUnwrapper: ValueUnwrapper,
RenderDebugInfo: RenderDebugInfo,
TemplateRef_: TemplateRef_,
ReflectionCapabilities: ReflectionCapabilities,
makeDecorator: makeDecorator,
DebugDomRootRenderer: DebugDomRootRenderer,
Console: Console,
reflector: reflector,
Reflector: Reflector,
NoOpAnimationPlayer: NoOpAnimationPlayer,
AnimationPlayer: AnimationPlayer,
AnimationSequencePlayer: AnimationSequencePlayer,
AnimationGroupPlayer: AnimationGroupPlayer,
AnimationKeyframe: AnimationKeyframe,
prepareFinalAnimationStyles: prepareFinalAnimationStyles,
balanceAnimationKeyframes: balanceAnimationKeyframes,
flattenStyles: flattenStyles,
clearStyles: clearStyles,
renderStyles: renderStyles,
collectAndResolveStyles: collectAndResolveStyles,
APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
AnimationStyles: AnimationStyles,
ANY_STATE: ANY_STATE,
DEFAULT_STATE: DEFAULT_STATE,
EMPTY_STATE: EMPTY_STATE,
FILL_STYLE_FLAG: FILL_STYLE_FLAG,
ComponentStillLoadingError: ComponentStillLoadingError,
isPromise: isPromise,
AnimationTransition: AnimationTransition
};
exports.createPlatform = createPlatform;
exports.assertPlatform = assertPlatform;
exports.destroyPlatform = destroyPlatform;
exports.getPlatform = getPlatform;
exports.PlatformRef = PlatformRef;
exports.ApplicationRef = ApplicationRef;
exports.enableProdMode = enableProdMode;
exports.isDevMode = isDevMode;
exports.createPlatformFactory = createPlatformFactory;
exports.APP_ID = APP_ID;
exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
exports.APP_INITIALIZER = APP_INITIALIZER;
exports.ApplicationInitStatus = ApplicationInitStatus;
exports.DebugElement = DebugElement;
exports.DebugNode = DebugNode;
exports.asNativeElements = asNativeElements;
exports.getDebugNode = getDebugNode;
exports.Testability = Testability;
exports.TestabilityRegistry = TestabilityRegistry;
exports.setTestabilityGetter = setTestabilityGetter;
exports.TRANSLATIONS = TRANSLATIONS;
exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
exports.LOCALE_ID = LOCALE_ID;
exports.ApplicationModule = ApplicationModule;
exports.wtfCreateScope = wtfCreateScope;
exports.wtfLeave = wtfLeave;
exports.wtfStartTimeRange = wtfStartTimeRange;
exports.wtfEndTimeRange = wtfEndTimeRange;
exports.Type = Type;
exports.EventEmitter = EventEmitter;
exports.ErrorHandler = ErrorHandler;
exports.AnimationTransitionEvent = AnimationTransitionEvent;
exports.AnimationPlayer = AnimationPlayer;
exports.Sanitizer = Sanitizer;
exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
exports.Attribute = Attribute;
exports.ContentChild = ContentChild;
exports.ContentChildren = ContentChildren;
exports.Query = Query;
exports.ViewChild = ViewChild;
exports.ViewChildren = ViewChildren;
exports.Component = Component;
exports.Directive = Directive;
exports.HostBinding = HostBinding;
exports.HostListener = HostListener;
exports.Input = Input;
exports.Output = Output;
exports.Pipe = Pipe;
exports.AfterContentChecked = AfterContentChecked;
exports.AfterContentInit = AfterContentInit;
exports.AfterViewChecked = AfterViewChecked;
exports.AfterViewInit = AfterViewInit;
exports.DoCheck = DoCheck;
exports.OnChanges = OnChanges;
exports.OnDestroy = OnDestroy;
exports.OnInit = OnInit;
exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
exports.NgModule = NgModule;
exports.Class = Class;
exports.forwardRef = forwardRef;
exports.resolveForwardRef = resolveForwardRef;
exports.Injector = Injector;
exports.ReflectiveInjector = ReflectiveInjector;
exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
exports.ReflectiveKey = ReflectiveKey;
exports.OpaqueToken = OpaqueToken;
exports.Inject = Inject;
exports.Optional = Optional;
exports.Injectable = Injectable;
exports.Self = Self;
exports.SkipSelf = SkipSelf;
exports.Host = Host;
exports.NgZone = NgZone;
exports.RenderComponentType = RenderComponentType;
exports.Renderer = Renderer;
exports.RootRenderer = RootRenderer;
exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
exports.Compiler = Compiler;
exports.CompilerFactory = CompilerFactory;
exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
exports.ComponentFactory = ComponentFactory;
exports.ComponentRef = ComponentRef;
exports.ComponentFactoryResolver = ComponentFactoryResolver;
exports.ElementRef = ElementRef;
exports.NgModuleFactory = NgModuleFactory;
exports.NgModuleRef = NgModuleRef;
exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
exports.getModuleFactory = getModuleFactory;
exports.QueryList = QueryList;
exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
exports.TemplateRef = TemplateRef;
exports.ViewContainerRef = ViewContainerRef;
exports.EmbeddedViewRef = EmbeddedViewRef;
exports.ViewRef = ViewRef;
exports.ChangeDetectorRef = ChangeDetectorRef;
exports.CollectionChangeRecord = CollectionChangeRecord;
exports.DefaultIterableDiffer = DefaultIterableDiffer;
exports.IterableDiffers = IterableDiffers;
exports.KeyValueChangeRecord = KeyValueChangeRecord;
exports.KeyValueDiffers = KeyValueDiffers;
exports.SimpleChange = SimpleChange;
exports.WrappedValue = WrappedValue;
exports.platformCore = platformCore;
exports.__core_private__ = __core_private__;
exports.AUTO_STYLE = AUTO_STYLE;
exports.AnimationEntryMetadata = AnimationEntryMetadata;
exports.AnimationStateMetadata = AnimationStateMetadata;
exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
exports.AnimationMetadata = AnimationMetadata;
exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
exports.AnimationStyleMetadata = AnimationStyleMetadata;
exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
exports.AnimationGroupMetadata = AnimationGroupMetadata;
exports.animate = animate;
exports.group = group;
exports.sequence = sequence;
exports.style = style;
exports.state = state;
exports.keyframes = keyframes;
exports.transition = transition;
exports.trigger = trigger;
});
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var Subscriber_1 = __webpack_require__(161);
var Subscription_1 = __webpack_require__(163);
var ObjectUnsubscribedError_1 = __webpack_require__(172);
var SubjectSubscription_1 = __webpack_require__(173);
var rxSubscriber_1 = __webpack_require__(170);
var SubjectSubscriber = function(_super) {
__extends(SubjectSubscriber, _super);
function SubjectSubscriber(destination) {
_super.call(this, destination);
this.destination = destination;
}
return SubjectSubscriber;
}(Subscriber_1.Subscriber);
exports.SubjectSubscriber = SubjectSubscriber;
var Subject = function(_super) {
__extends(Subject, _super);
function Subject() {
_super.call(this);
this.observers = [];
this.closed = false;
this.isStopped = false;
this.hasError = false;
this.thrownError = null;
}
Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
return new SubjectSubscriber(this);
};
Subject.prototype.lift = function(operator) {
var subject = new AnonymousSubject(this, this);
subject.operator = operator;
return subject;
};
Subject.prototype.next = function(value) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
}
if (!this.isStopped) {
var observers = this.observers;
var len = observers.length;
var copy = observers.slice();
for (var i = 0; i < len; i++) {
copy[i].next(value);
}
}
};
Subject.prototype.error = function(err) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
}
this.hasError = true;
this.thrownError = err;
this.isStopped = true;
var observers = this.observers;
var len = observers.length;
var copy = observers.slice();
for (var i = 0; i < len; i++) {
copy[i].error(err);
}
this.observers.length = 0;
};
Subject.prototype.complete = function() {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
}
this.isStopped = true;
var observers = this.observers;
var len = observers.length;
var copy = observers.slice();
for (var i = 0; i < len; i++) {
copy[i].complete();
}
this.observers.length = 0;
};
Subject.prototype.unsubscribe = function() {
this.isStopped = true;
this.closed = true;
this.observers = null;
};
Subject.prototype._subscribe = function(subscriber) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
} else if (this.hasError) {
subscriber.error(this.thrownError);
return Subscription_1.Subscription.EMPTY;
} else if (this.isStopped) {
subscriber.complete();
return Subscription_1.Subscription.EMPTY;
} else {
this.observers.push(subscriber);
return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
}
};
Subject.prototype.asObservable = function() {
var observable = new Observable_1.Observable();
observable.source = this;
return observable;
};
Subject.create = function(destination, source) {
return new AnonymousSubject(destination, source);
};
return Subject;
}(Observable_1.Observable);
exports.Subject = Subject;
var AnonymousSubject = function(_super) {
__extends(AnonymousSubject, _super);
function AnonymousSubject(destination, source) {
_super.call(this);
this.destination = destination;
this.source = source;
}
AnonymousSubject.prototype.next = function(value) {
var destination = this.destination;
if (destination && destination.next) {
destination.next(value);
}
};
AnonymousSubject.prototype.error = function(err) {
var destination = this.destination;
if (destination && destination.error) {
this.destination.error(err);
}
};
AnonymousSubject.prototype.complete = function() {
var destination = this.destination;
if (destination && destination.complete) {
this.destination.complete();
}
};
AnonymousSubject.prototype._subscribe = function(subscriber) {
var source = this.source;
if (source) {
return this.source.subscribe(subscriber);
} else {
return Subscription_1.Subscription.EMPTY;
}
};
return AnonymousSubject;
}(Subject);
exports.AnonymousSubject = AnonymousSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var toSubscriber_1 = __webpack_require__(160);
var observable_1 = __webpack_require__(171);
var Observable = function() {
function Observable(subscribe) {
this._isScalar = false;
if (subscribe) {
this._subscribe = subscribe;
}
}
Observable.prototype.lift = function(operator) {
var observable = new Observable();
observable.source = this;
observable.operator = operator;
return observable;
};
Observable.prototype.subscribe = function(observerOrNext, error, complete) {
var operator = this.operator;
var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
if (operator) {
operator.call(sink, this);
} else {
sink.add(this._subscribe(sink));
}
if (sink.syncErrorThrowable) {
sink.syncErrorThrowable = false;
if (sink.syncErrorThrown) {
throw sink.syncErrorValue;
}
}
return sink;
};
Observable.prototype.forEach = function(next, PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var subscription = _this.subscribe(function(value) {
if (subscription) {
try {
next(value);
} catch (err) {
reject(err);
subscription.unsubscribe();
}
} else {
next(value);
}
}, reject, resolve);
});
};
Observable.prototype._subscribe = function(subscriber) {
return this.source.subscribe(subscriber);
};
Observable.prototype[observable_1.$$observable] = function() {
return this;
};
Observable.create = function(subscribe) {
return new Observable(subscribe);
};
return Observable;
}();
exports.Observable = Observable;
}, function(module, exports) {
"use strict";
var objectTypes = {
boolean: false,
function: true,
object: true,
number: false,
string: false,
undefined: false
};
exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
var freeGlobal = objectTypes[typeof global] && global;
if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
exports.root = freeGlobal;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Subscriber_1 = __webpack_require__(161);
var rxSubscriber_1 = __webpack_require__(170);
function toSubscriber(nextOrObserver, error, complete) {
if (nextOrObserver) {
if (nextOrObserver instanceof Subscriber_1.Subscriber) {
return nextOrObserver;
}
if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
}
}
if (!nextOrObserver && !error && !complete) {
return new Subscriber_1.Subscriber();
}
return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(162);
var Subscription_1 = __webpack_require__(163);
var Observer_1 = __webpack_require__(169);
var rxSubscriber_1 = __webpack_require__(170);
var Subscriber = function(_super) {
__extends(Subscriber, _super);
function Subscriber(destinationOrNext, error, complete) {
_super.call(this);
this.syncErrorValue = null;
this.syncErrorThrown = false;
this.syncErrorThrowable = false;
this.isStopped = false;
switch (arguments.length) {
case 0:
this.destination = Observer_1.empty;
break;

case 1:
if (!destinationOrNext) {
this.destination = Observer_1.empty;
break;
}
if (typeof destinationOrNext === "object") {
if (destinationOrNext instanceof Subscriber) {
this.destination = destinationOrNext;
this.destination.add(this);
} else {
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext);
}
break;
}

default:
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
break;
}
}
Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
return this;
};
Subscriber.create = function(next, error, complete) {
var subscriber = new Subscriber(next, error, complete);
subscriber.syncErrorThrowable = false;
return subscriber;
};
Subscriber.prototype.next = function(value) {
if (!this.isStopped) {
this._next(value);
}
};
Subscriber.prototype.error = function(err) {
if (!this.isStopped) {
this.isStopped = true;
this._error(err);
}
};
Subscriber.prototype.complete = function() {
if (!this.isStopped) {
this.isStopped = true;
this._complete();
}
};
Subscriber.prototype.unsubscribe = function() {
if (this.closed) {
return;
}
this.isStopped = true;
_super.prototype.unsubscribe.call(this);
};
Subscriber.prototype._next = function(value) {
this.destination.next(value);
};
Subscriber.prototype._error = function(err) {
this.destination.error(err);
this.unsubscribe();
};
Subscriber.prototype._complete = function() {
this.destination.complete();
this.unsubscribe();
};
return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
var SafeSubscriber = function(_super) {
__extends(SafeSubscriber, _super);
function SafeSubscriber(_parent, observerOrNext, error, complete) {
_super.call(this);
this._parent = _parent;
var next;
var context = this;
if (isFunction_1.isFunction(observerOrNext)) {
next = observerOrNext;
} else if (observerOrNext) {
context = observerOrNext;
next = observerOrNext.next;
error = observerOrNext.error;
complete = observerOrNext.complete;
if (isFunction_1.isFunction(context.unsubscribe)) {
this.add(context.unsubscribe.bind(context));
}
context.unsubscribe = this.unsubscribe.bind(this);
}
this._context = context;
this._next = next;
this._error = error;
this._complete = complete;
}
SafeSubscriber.prototype.next = function(value) {
if (!this.isStopped && this._next) {
var _parent = this._parent;
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._next, value);
} else if (this.__tryOrSetError(_parent, this._next, value)) {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var _parent = this._parent;
if (this._error) {
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._error, err);
this.unsubscribe();
} else {
this.__tryOrSetError(_parent, this._error, err);
this.unsubscribe();
}
} else if (!_parent.syncErrorThrowable) {
this.unsubscribe();
throw err;
} else {
_parent.syncErrorValue = err;
_parent.syncErrorThrown = true;
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var _parent = this._parent;
if (this._complete) {
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._complete);
this.unsubscribe();
} else {
this.__tryOrSetError(_parent, this._complete);
this.unsubscribe();
}
} else {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
this.unsubscribe();
throw err;
}
};
SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
parent.syncErrorValue = err;
parent.syncErrorThrown = true;
return true;
}
return false;
};
SafeSubscriber.prototype._unsubscribe = function() {
var _parent = this._parent;
this._context = null;
this._parent = null;
_parent.unsubscribe();
};
return SafeSubscriber;
}(Subscriber);
}, function(module, exports) {
"use strict";
function isFunction(x) {
return typeof x === "function";
}
exports.isFunction = isFunction;
}, function(module, exports, __webpack_require__) {
"use strict";
var isArray_1 = __webpack_require__(164);
var isObject_1 = __webpack_require__(165);
var isFunction_1 = __webpack_require__(162);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var UnsubscriptionError_1 = __webpack_require__(168);
var Subscription = function() {
function Subscription(unsubscribe) {
this.closed = false;
if (unsubscribe) {
this._unsubscribe = unsubscribe;
}
}
Subscription.prototype.unsubscribe = function() {
var hasErrors = false;
var errors;
if (this.closed) {
return;
}
this.closed = true;
var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
this._subscriptions = null;
if (isFunction_1.isFunction(_unsubscribe)) {
var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
(errors = errors || []).push(errorObject_1.errorObject.e);
}
}
if (isArray_1.isArray(_subscriptions)) {
var index = -1;
var len = _subscriptions.length;
while (++index < len) {
var sub = _subscriptions[index];
if (isObject_1.isObject(sub)) {
var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
errors = errors || [];
var err = errorObject_1.errorObject.e;
if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
errors = errors.concat(err.errors);
} else {
errors.push(err);
}
}
}
}
}
if (hasErrors) {
throw new UnsubscriptionError_1.UnsubscriptionError(errors);
}
};
Subscription.prototype.add = function(teardown) {
if (!teardown || teardown === Subscription.EMPTY) {
return Subscription.EMPTY;
}
if (teardown === this) {
return this;
}
var sub = teardown;
switch (typeof teardown) {
case "function":
sub = new Subscription(teardown);

case "object":
if (sub.closed || typeof sub.unsubscribe !== "function") {
break;
} else if (this.closed) {
sub.unsubscribe();
} else {
(this._subscriptions || (this._subscriptions = [])).push(sub);
}
break;

default:
throw new Error("unrecognized teardown " + teardown + " added to Subscription.");
}
return sub;
};
Subscription.prototype.remove = function(subscription) {
if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
return;
}
var subscriptions = this._subscriptions;
if (subscriptions) {
var subscriptionIndex = subscriptions.indexOf(subscription);
if (subscriptionIndex !== -1) {
subscriptions.splice(subscriptionIndex, 1);
}
}
};
Subscription.EMPTY = function(empty) {
empty.closed = true;
return empty;
}(new Subscription());
return Subscription;
}();
exports.Subscription = Subscription;
}, function(module, exports) {
"use strict";
exports.isArray = Array.isArray || function(x) {
return x && typeof x.length === "number";
};
}, function(module, exports) {
"use strict";
function isObject(x) {
return x != null && typeof x === "object";
}
exports.isObject = isObject;
}, function(module, exports, __webpack_require__) {
"use strict";
var errorObject_1 = __webpack_require__(167);
var tryCatchTarget;
function tryCatcher() {
try {
return tryCatchTarget.apply(this, arguments);
} catch (e) {
errorObject_1.errorObject.e = e;
return errorObject_1.errorObject;
}
}
function tryCatch(fn) {
tryCatchTarget = fn;
return tryCatcher;
}
exports.tryCatch = tryCatch;
}, function(module, exports) {
"use strict";
exports.errorObject = {
e: {}
};
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var UnsubscriptionError = function(_super) {
__extends(UnsubscriptionError, _super);
function UnsubscriptionError(errors) {
_super.call(this);
this.errors = errors;
var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function(err, i) {
return i + 1 + ") " + err.toString();
}).join("\n  ") : "");
this.name = err.name = "UnsubscriptionError";
this.stack = err.stack;
this.message = err.message;
}
return UnsubscriptionError;
}(Error);
exports.UnsubscriptionError = UnsubscriptionError;
}, function(module, exports) {
"use strict";
exports.empty = {
closed: true,
next: function(value) {},
error: function(err) {
throw err;
},
complete: function() {}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var Symbol = root_1.root.Symbol;
exports.$$rxSubscriber = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("rxSubscriber") : "@@rxSubscriber";
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
function getSymbolObservable(context) {
var $$observable;
var Symbol = context.Symbol;
if (typeof Symbol === "function") {
if (Symbol.observable) {
$$observable = Symbol.observable;
} else {
$$observable = Symbol("observable");
Symbol.observable = $$observable;
}
} else {
$$observable = "@@observable";
}
return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.$$observable = getSymbolObservable(root_1.root);
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ObjectUnsubscribedError = function(_super) {
__extends(ObjectUnsubscribedError, _super);
function ObjectUnsubscribedError() {
var err = _super.call(this, "object unsubscribed");
this.name = err.name = "ObjectUnsubscribedError";
this.stack = err.stack;
this.message = err.message;
}
return ObjectUnsubscribedError;
}(Error);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(163);
var SubjectSubscription = function(_super) {
__extends(SubjectSubscription, _super);
function SubjectSubscription(subject, subscriber) {
_super.call(this);
this.subject = subject;
this.subscriber = subscriber;
this.closed = false;
}
SubjectSubscription.prototype.unsubscribe = function() {
if (this.closed) {
return;
}
this.closed = true;
var subject = this.subject;
var observers = subject.observers;
this.subject = null;
if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
return;
}
var subscriberIndex = observers.indexOf(this.subscriber);
if (subscriberIndex !== -1) {
observers.splice(subscriberIndex, 1);
}
};
return SubjectSubscription;
}(Subscription_1.Subscription);
exports.SubjectSubscription = SubjectSubscription;
}, function(module, exports, __webpack_require__) {
var trace_1 = __webpack_require__(31);
exports.rendererTraceCategory = "ns-renderer";
exports.routerTraceCategory = "ns-router";
exports.listViewTraceCategory = "ns-list-view";
function rendererLog(msg) {
trace_1.write(msg, exports.rendererTraceCategory);
}
exports.rendererLog = rendererLog;
function rendererError(message) {
trace_1.write(message, exports.rendererTraceCategory, trace_1.messageType.error);
}
exports.rendererError = rendererError;
function routerLog(message) {
trace_1.write(message, exports.routerTraceCategory);
}
exports.routerLog = routerLog;
function styleError(message) {
trace_1.write(message, trace_1.categories.Style, trace_1.messageType.error);
}
exports.styleError = styleError;
function listViewLog(message) {
trace_1.write(message, exports.listViewTraceCategory);
}
exports.listViewLog = listViewLog;
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(89);
var core_1 = __webpack_require__(156);
var platform_1 = __webpack_require__(49);
var platform = __webpack_require__(49);
exports.APP_ROOT_VIEW = new core_1.OpaqueToken("App Root View");
exports.DEVICE = new core_1.OpaqueToken("platfrom device");
exports.PAGE_FACTORY = new core_1.OpaqueToken("page factory");
if (global.___TS_UNUSED) {
(function() {
return platform;
})();
}
function getDefaultPage() {
var frame = frame_1.topmost();
if (frame) {
return frame.currentPage;
} else {
return null;
}
}
exports.getDefaultPage = getDefaultPage;
exports.defaultPageProvider = {
provide: page_1.Page,
useFactory: getDefaultPage
};
exports.defaultFrameProvider = {
provide: frame_1.Frame,
useFactory: frame_1.topmost
};
exports.defaultDeviceProvider = {
provide: exports.DEVICE,
useValue: platform_1.device
};
exports.defaultPageFactory = function(_opts) {
return new page_1.Page();
};
exports.defaultPageFactoryProvider = {
provide: exports.PAGE_FACTORY,
useValue: exports.defaultPageFactory
};
}, function(module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
const NUMERIC = "numeric";
const LONG = "long";
const SHORT = "short";
const TWODIGIT = "2-digit";
const FULL = "full";
let resolvedPatterns = new Map();
class DateTimeFormat$1 {
constructor(locale, options, pattern) {
this.locale = locale;
this.options = options;
this.pattern = pattern;
this.dateTimeFormatElements = {
M: "month",
E: "weekday",
c: "weekday",
d: "day",
y: "year",
h: "hour",
H: "hour",
m: "minute",
s: "second",
z: "timeZoneName",
G: "era",
a: "hour12"
};
if (options && options.minute === NUMERIC) {
this.options.minute = TWODIGIT;
}
if (options && options.hour === NUMERIC) {
this.options.hour = TWODIGIT;
}
}
hasTimeOptions(options) {
return options.hour !== undefined || options.minute !== undefined || options.second !== undefined;
}
hasDateOptions(options) {
return options.weekday !== undefined || options.year !== undefined || options.month !== undefined || options.day !== undefined;
}
useFullDatePattern(intlOptions) {
let i;
let propsArray = Object.keys(intlOptions);
let propsArrayLength = propsArray.length;
let result = false;
for (i = 0; i < propsArrayLength; i++) {
if (intlOptions[propsArray[i]] === LONG || intlOptions[propsArray[i]] === SHORT) {
result = true;
break;
}
}
return result;
}
getNativePattern(patternDefinition, locale) {
return "";
}
getCorrectPatternForLocale() {
let dateTimePatternOptions = {};
if (this.hasDateOptions(this.options)) {
if (this.useFullDatePattern(this.options)) {
dateTimePatternOptions.date = FULL;
} else {
dateTimePatternOptions.date = SHORT;
}
}
if (this.hasTimeOptions(this.options)) {
dateTimePatternOptions.time = FULL;
}
let result = this.getNativePattern(dateTimePatternOptions, this.locale);
if (this.options.hour) {
if (this.options.hour12 !== undefined) {
result = this.options.hour12 ? result.replace(/H/g, "h") : result.replace(/h/g, "H");
} else {
this.options.hour12 = !(result.indexOf("H") > -1);
}
}
return result;
}
getDateElementsFromPattern(pattern) {
let result = [];
let patternLength = pattern.length;
let i = 0;
let stringInsidePattern = false;
while (i < patternLength) {
if (pattern[i] === '"' || pattern[i] === "'") {
let p = i + 1;
while (p < patternLength && pattern[i] !== pattern[p]) {
p++;
}
for (let j = i; j < p + 1; j++) {
result.push({
isDateElement: false,
patternValue: pattern[j]
});
}
i = p + 1;
continue;
}
if (this.dateTimeFormatElements.hasOwnProperty(pattern[i])) {
let j = i;
while (i < patternLength && pattern[i] === pattern[j]) {
i++;
}
result.push({
isDateElement: true,
patternValue: pattern.substr(j, i - j),
intlOption: this.dateTimeFormatElements[pattern[j]]
});
} else {
result.push({
isDateElement: false,
patternValue: pattern[i]
});
i++;
}
}
return result;
}
prepareDateElement(intlOption, dateElement) {
switch (intlOption) {
case NUMERIC:
return dateElement;

case TWODIGIT:
return dateElement.repeat(2);

case SHORT:
return dateElement.repeat(3);

case LONG:
return dateElement.repeat(4);

case true:
return dateElement;

case false:
return "";

default:
return dateElement;
}
}
preparePattern(pattern, options) {
let patternOptions = this.getDateElementsFromPattern(pattern);
let patternOptionsLength = patternOptions.length;
for (let i = 0; i < patternOptionsLength; i++) {
if (patternOptions[i].isDateElement) {
let formatChar = patternOptions[i].patternValue[0];
let intlOptionValue = options[patternOptions[i].intlOption];
if (intlOptionValue !== undefined) {
let newPatternValue = this.prepareDateElement(intlOptionValue, formatChar);
patternOptions[i].patternValue = newPatternValue;
} else {
if (i > 0) {
let j = i - 1;
while (patternOptions[j] && patternOptions[j].isDateElement === false) {
if (patternOptions[j].patternValue !== " ") {
if (patternOptions[j].patternValue !== '"' && patternOptions[j].patternValue !== "'") {
patternOptions[j].patternValue = "";
}
break;
} else {
patternOptions[j].patternValue = "";
}
j--;
}
}
patternOptions[i].patternValue = "";
}
}
}
let result = [];
let i = 0;
while (patternOptions[i].patternValue === "" || patternOptions[i].isDateElement === false) {
i++;
}
for (i; i < patternOptionsLength; i++) {
result.push(patternOptions[i].patternValue);
}
return result.join("");
}
formatNative(pattern, locale, date) {
return "";
}
get preparedPattern() {
if (!this._preparedPattern) {
if (this.pattern) {
this._preparedPattern = this.pattern;
} else {
if (resolvedPatterns.has({
locale: this.locale,
options: this.options
})) {
this._preparedPattern = resolvedPatterns.get({
locale: this.locale,
options: this.options
});
} else {
this._preparedPattern = this.preparePattern(this.getCorrectPatternForLocale(), this.options);
resolvedPatterns.set({
locale: this.locale,
options: this.options
}, this._preparedPattern);
}
}
}
return this._preparedPattern;
}
format(date) {
return this.formatNative(this.preparedPattern, this.locale, date);
}
}
class NumberFormat$1 {
constructor(locale, options, pattern) {
this.locale = locale;
this.options = options;
this.pattern = pattern;
}
formatNative(value, locale, options, pattern) {
return "";
}
format(value) {
return this.formatNative(value, this.locale, this.options, this.pattern);
}
}
let localesCache = new Map();
function getNativeLocale(locale) {
if (localesCache.has(locale)) {
return localesCache.get(locale);
}
let result;
if (locale) {
locale = locale.replace(/_/g, "-");
let firstHypenIndex = locale.indexOf("-");
let lang = "";
let country = "";
if (firstHypenIndex > -1) {
lang = locale.substr(0, firstHypenIndex);
let nextHypenIndex = locale.substr(firstHypenIndex + 1).indexOf("-");
country = locale.substr(firstHypenIndex + 1, nextHypenIndex > -1 ? nextHypenIndex : undefined);
} else {
lang = locale;
}
if (country !== "") {
result = new java.util.Locale(lang, country);
} else {
result = new java.util.Locale(lang);
}
} else {
result = new java.util.Locale("en", "US");
}
localesCache.set(locale, result);
return result;
}
class DateTimeFormat$$1 extends DateTimeFormat$1 {
getNativePattern(patternDefinition, locale) {
let result = "";
let flag = 0;
let nativeLocale;
if (locale) {
nativeLocale = getNativeLocale(locale);
flag++;
}
if (patternDefinition.date) {
flag = flag + 2;
}
if (patternDefinition.time) {
flag = flag + 4;
}
let dateFormat;
switch (flag) {
case 0:
dateFormat = java.text.DateFormat.getDateTimeInstance();
break;

case 1:
dateFormat = java.text.DateFormat.getDateTimeInstance(0, 0, nativeLocale);
break;

case 2:
dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === FULL ? 0 : 3);
break;

case 3:
dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === FULL ? 0 : 3, nativeLocale);
break;

case 4:
dateFormat = java.text.DateFormat.getTimeInstance(1);
break;

case 5:
dateFormat = java.text.DateFormat.getTimeInstance(1, nativeLocale);
break;

case 6:
dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === FULL ? 0 : 3, 1);
break;

case 7:
dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === FULL ? 0 : 3, 1, nativeLocale);
break;

default:
break;
}
result = dateFormat.toPattern();
return result;
}
formatNative(pattern, locale, date) {
let sdf = locale ? new java.text.SimpleDateFormat(pattern, getNativeLocale(locale)) : new java.text.SimpleDateFormat(pattern);
return sdf.format(date ? new java.util.Date(date.valueOf()) : new java.util.Date()).toString();
}
}
class NumberFormat$$1 extends NumberFormat$1 {
formatNative(value, locale, options, pattern) {
let numberFormat;
if (pattern) {
numberFormat = new java.text.DecimalFormat(pattern);
} else {
if (options) {
switch (options.style.toLowerCase()) {
case "decimal":
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
break;

case "percent":
numberFormat = java.text.NumberFormat.getPercentInstance(getNativeLocale(locale));
break;

case "currency":
numberFormat = java.text.NumberFormat.getCurrencyInstance(getNativeLocale(locale));
if (options.currency !== void 0) {
numberFormat.setCurrency(java.util.Currency.getInstance(options.currency));
}
break;

default:
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
break;
}
} else {
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
}
}
if (options && options.minimumIntegerDigits !== void 0) {
numberFormat.setMinimumIntegerDigits(options.minimumIntegerDigits);
}
if (options && options.minimumFractionDigits !== void 0) {
numberFormat.setMinimumFractionDigits(options.minimumFractionDigits);
}
if (options && options.maximumFractionDigits !== void 0) {
numberFormat.setMaximumFractionDigits(options.maximumFractionDigits);
}
if (options && options.useGrouping !== void 0) {
numberFormat.setGroupingUsed(options.useGrouping);
}
let decimalFormatSymbols = locale ? new java.text.DecimalFormatSymbols(getNativeLocale(locale)) : new java.text.DecimalFormatSymbols();
numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
if (options && (options.style.toLowerCase() === "currency" && options.currencyDisplay === "code")) {
if (!pattern) {
let currrentPattern = numberFormat.toPattern();
currrentPattern = currrentPattern.replace("¤", "¤¤");
numberFormat = new java.text.DecimalFormat(currrentPattern);
numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
}
if (options.currency !== void 0) {
decimalFormatSymbols.setCurrency(java.util.Currency.getInstance(options.currency));
}
}
return numberFormat.format(value);
}
}
if (!global.Intl) {
global.Intl = {};
}
global.Intl.DateTimeFormat = DateTimeFormat$$1;
global.Intl.NumberFormat = NumberFormat$$1;
exports.DateTimeFormat = DateTimeFormat$$1;
exports.NumberFormat = NumberFormat$$1;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(156)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.compiler = global.ng.compiler || {}), global.ng.core);
})(this, function(exports, _angular_core) {
"use strict";
var TextAst = function() {
function TextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
TextAst.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return TextAst;
}();
var BoundTextAst = function() {
function BoundTextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
BoundTextAst.prototype.visit = function(visitor, context) {
return visitor.visitBoundText(this, context);
};
return BoundTextAst;
}();
var AttrAst = function() {
function AttrAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
AttrAst.prototype.visit = function(visitor, context) {
return visitor.visitAttr(this, context);
};
return AttrAst;
}();
var BoundElementPropertyAst = function() {
function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
this.name = name;
this.type = type;
this.securityContext = securityContext;
this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
this.value = value;
this.unit = unit;
this.sourceSpan = sourceSpan;
}
BoundElementPropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitElementProperty(this, context);
};
Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
get: function() {
return this.type === exports.PropertyBindingType.Animation;
},
enumerable: true,
configurable: true
});
return BoundElementPropertyAst;
}();
var BoundEventAst = function() {
function BoundEventAst(name, target, phase, handler, sourceSpan) {
this.name = name;
this.target = target;
this.phase = phase;
this.handler = handler;
this.sourceSpan = sourceSpan;
}
BoundEventAst.calcFullName = function(name, target, phase) {
if (target) {
return target + ":" + name;
} else if (phase) {
return "@" + name + "." + phase;
} else {
return name;
}
};
BoundEventAst.prototype.visit = function(visitor, context) {
return visitor.visitEvent(this, context);
};
Object.defineProperty(BoundEventAst.prototype, "fullName", {
get: function() {
return BoundEventAst.calcFullName(this.name, this.target, this.phase);
},
enumerable: true,
configurable: true
});
Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
get: function() {
return !!this.phase;
},
enumerable: true,
configurable: true
});
return BoundEventAst;
}();
var ReferenceAst = function() {
function ReferenceAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
ReferenceAst.prototype.visit = function(visitor, context) {
return visitor.visitReference(this, context);
};
return ReferenceAst;
}();
var VariableAst = function() {
function VariableAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
VariableAst.prototype.visit = function(visitor, context) {
return visitor.visitVariable(this, context);
};
return VariableAst;
}();
var ElementAst = function() {
function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
this.name = name;
this.attrs = attrs;
this.inputs = inputs;
this.outputs = outputs;
this.references = references;
this.directives = directives;
this.providers = providers;
this.hasViewContainer = hasViewContainer;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
this.endSourceSpan = endSourceSpan;
}
ElementAst.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return ElementAst;
}();
var EmbeddedTemplateAst = function() {
function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
this.attrs = attrs;
this.outputs = outputs;
this.references = references;
this.variables = variables;
this.directives = directives;
this.providers = providers;
this.hasViewContainer = hasViewContainer;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
return visitor.visitEmbeddedTemplate(this, context);
};
return EmbeddedTemplateAst;
}();
var BoundDirectivePropertyAst = function() {
function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
this.directiveName = directiveName;
this.templateName = templateName;
this.value = value;
this.sourceSpan = sourceSpan;
}
BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitDirectiveProperty(this, context);
};
return BoundDirectivePropertyAst;
}();
var DirectiveAst = function() {
function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
this.directive = directive;
this.inputs = inputs;
this.hostProperties = hostProperties;
this.hostEvents = hostEvents;
this.sourceSpan = sourceSpan;
}
DirectiveAst.prototype.visit = function(visitor, context) {
return visitor.visitDirective(this, context);
};
return DirectiveAst;
}();
var ProviderAst = function() {
function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
this.token = token;
this.multiProvider = multiProvider;
this.eager = eager;
this.providers = providers;
this.providerType = providerType;
this.lifecycleHooks = lifecycleHooks;
this.sourceSpan = sourceSpan;
}
ProviderAst.prototype.visit = function(visitor, context) {
return null;
};
return ProviderAst;
}();
exports.ProviderAstType;
(function(ProviderAstType) {
ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
})(exports.ProviderAstType || (exports.ProviderAstType = {}));
var NgContentAst = function() {
function NgContentAst(index, ngContentIndex, sourceSpan) {
this.index = index;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
NgContentAst.prototype.visit = function(visitor, context) {
return visitor.visitNgContent(this, context);
};
return NgContentAst;
}();
exports.PropertyBindingType;
(function(PropertyBindingType) {
PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
function templateVisitAll(visitor, asts, context) {
if (context === void 0) {
context = null;
}
var result = [];
var visit = visitor.visit ? function(ast) {
return visitor.visit(ast, context) || ast.visit(visitor, context);
} : function(ast) {
return ast.visit(visitor, context);
};
asts.forEach(function(ast) {
var astResult = visit(ast);
if (astResult) {
result.push(astResult);
}
});
return result;
}
var $EOF = 0;
var $TAB = 9;
var $LF = 10;
var $VTAB = 11;
var $FF = 12;
var $CR = 13;
var $SPACE = 32;
var $BANG = 33;
var $DQ = 34;
var $HASH = 35;
var $$ = 36;
var $PERCENT = 37;
var $AMPERSAND = 38;
var $SQ = 39;
var $LPAREN = 40;
var $RPAREN = 41;
var $STAR = 42;
var $PLUS = 43;
var $COMMA = 44;
var $MINUS = 45;
var $PERIOD = 46;
var $SLASH = 47;
var $COLON = 58;
var $SEMICOLON = 59;
var $LT = 60;
var $EQ = 61;
var $GT = 62;
var $QUESTION = 63;
var $0 = 48;
var $9 = 57;
var $A = 65;
var $E = 69;
var $F = 70;
var $X = 88;
var $Z = 90;
var $LBRACKET = 91;
var $BACKSLASH = 92;
var $RBRACKET = 93;
var $CARET = 94;
var $_ = 95;
var $a = 97;
var $e = 101;
var $f = 102;
var $n = 110;
var $r = 114;
var $t = 116;
var $u = 117;
var $v = 118;
var $x = 120;
var $z = 122;
var $LBRACE = 123;
var $BAR = 124;
var $RBRACE = 125;
var $NBSP = 160;
var $BT = 96;
function isWhitespace(code) {
return code >= $TAB && code <= $SPACE || code == $NBSP;
}
function isDigit(code) {
return $0 <= code && code <= $9;
}
function isAsciiLetter(code) {
return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
}
function isPresent(obj) {
return obj != null;
}
function isBlank(obj) {
return obj == null;
}
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return typeof obj === "object" && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token == null) {
return "" + token;
}
if (token.overriddenName) {
return token.overriddenName;
}
if (token.name) {
return token.name;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new Error("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.isNumeric = function(value) {
return !isNaN(value - parseFloat(value));
};
return NumberWrapper;
}();
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
function isPrimitive(obj) {
return !isJsObject(obj);
}
function escapeRegExp(s) {
return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
}
function assertArrayOfStrings(identifier, value) {
if (!_angular_core.isDevMode() || isBlank(value)) {
return;
}
if (!Array.isArray(value)) {
throw new Error("Expected '" + identifier + "' to be an array of strings.");
}
for (var i = 0; i < value.length; i += 1) {
if (typeof value[i] !== "string") {
throw new Error("Expected '" + identifier + "' to be an array of strings.");
}
}
}
var INTERPOLATION_BLACKLIST_REGEXPS = [ /^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\// ];
function assertInterpolationSymbols(identifier, value) {
if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
} else if (_angular_core.isDevMode() && !isBlank(value)) {
var start_1 = value[0];
var end_1 = value[1];
INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
if (regexp.test(start_1) || regexp.test(end_1)) {
throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
}
});
}
}
var InterpolationConfig = function() {
function InterpolationConfig(start, end) {
this.start = start;
this.end = end;
}
InterpolationConfig.fromArray = function(markers) {
if (!markers) {
return DEFAULT_INTERPOLATION_CONFIG;
}
assertInterpolationSymbols("interpolation", markers);
return new InterpolationConfig(markers[0], markers[1]);
};
return InterpolationConfig;
}();
var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}");
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ParserError = function() {
function ParserError(message, input, errLocation, ctxLocation) {
this.input = input;
this.errLocation = errLocation;
this.ctxLocation = ctxLocation;
this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
}
return ParserError;
}();
var ParseSpan = function() {
function ParseSpan(start, end) {
this.start = start;
this.end = end;
}
return ParseSpan;
}();
var AST = function() {
function AST(span) {
this.span = span;
}
AST.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return null;
};
AST.prototype.toString = function() {
return "AST";
};
return AST;
}();
var Quote = function(_super) {
__extends$1(Quote, _super);
function Quote(span, prefix, uninterpretedExpression, location) {
_super.call(this, span);
this.prefix = prefix;
this.uninterpretedExpression = uninterpretedExpression;
this.location = location;
}
Quote.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitQuote(this, context);
};
Quote.prototype.toString = function() {
return "Quote";
};
return Quote;
}(AST);
var EmptyExpr = function(_super) {
__extends$1(EmptyExpr, _super);
function EmptyExpr() {
_super.apply(this, arguments);
}
EmptyExpr.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
};
return EmptyExpr;
}(AST);
var ImplicitReceiver = function(_super) {
__extends$1(ImplicitReceiver, _super);
function ImplicitReceiver() {
_super.apply(this, arguments);
}
ImplicitReceiver.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitImplicitReceiver(this, context);
};
return ImplicitReceiver;
}(AST);
var Chain = function(_super) {
__extends$1(Chain, _super);
function Chain(span, expressions) {
_super.call(this, span);
this.expressions = expressions;
}
Chain.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitChain(this, context);
};
return Chain;
}(AST);
var Conditional = function(_super) {
__extends$1(Conditional, _super);
function Conditional(span, condition, trueExp, falseExp) {
_super.call(this, span);
this.condition = condition;
this.trueExp = trueExp;
this.falseExp = falseExp;
}
Conditional.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitConditional(this, context);
};
return Conditional;
}(AST);
var PropertyRead = function(_super) {
__extends$1(PropertyRead, _super);
function PropertyRead(span, receiver, name) {
_super.call(this, span);
this.receiver = receiver;
this.name = name;
}
PropertyRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPropertyRead(this, context);
};
return PropertyRead;
}(AST);
var PropertyWrite = function(_super) {
__extends$1(PropertyWrite, _super);
function PropertyWrite(span, receiver, name, value) {
_super.call(this, span);
this.receiver = receiver;
this.name = name;
this.value = value;
}
PropertyWrite.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPropertyWrite(this, context);
};
return PropertyWrite;
}(AST);
var SafePropertyRead = function(_super) {
__extends$1(SafePropertyRead, _super);
function SafePropertyRead(span, receiver, name) {
_super.call(this, span);
this.receiver = receiver;
this.name = name;
}
SafePropertyRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitSafePropertyRead(this, context);
};
return SafePropertyRead;
}(AST);
var KeyedRead = function(_super) {
__extends$1(KeyedRead, _super);
function KeyedRead(span, obj, key) {
_super.call(this, span);
this.obj = obj;
this.key = key;
}
KeyedRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitKeyedRead(this, context);
};
return KeyedRead;
}(AST);
var KeyedWrite = function(_super) {
__extends$1(KeyedWrite, _super);
function KeyedWrite(span, obj, key, value) {
_super.call(this, span);
this.obj = obj;
this.key = key;
this.value = value;
}
KeyedWrite.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitKeyedWrite(this, context);
};
return KeyedWrite;
}(AST);
var BindingPipe = function(_super) {
__extends$1(BindingPipe, _super);
function BindingPipe(span, exp, name, args) {
_super.call(this, span);
this.exp = exp;
this.name = name;
this.args = args;
}
BindingPipe.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPipe(this, context);
};
return BindingPipe;
}(AST);
var LiteralPrimitive = function(_super) {
__extends$1(LiteralPrimitive, _super);
function LiteralPrimitive(span, value) {
_super.call(this, span);
this.value = value;
}
LiteralPrimitive.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralPrimitive(this, context);
};
return LiteralPrimitive;
}(AST);
var LiteralArray = function(_super) {
__extends$1(LiteralArray, _super);
function LiteralArray(span, expressions) {
_super.call(this, span);
this.expressions = expressions;
}
LiteralArray.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralArray(this, context);
};
return LiteralArray;
}(AST);
var LiteralMap = function(_super) {
__extends$1(LiteralMap, _super);
function LiteralMap(span, keys, values) {
_super.call(this, span);
this.keys = keys;
this.values = values;
}
LiteralMap.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralMap(this, context);
};
return LiteralMap;
}(AST);
var Interpolation = function(_super) {
__extends$1(Interpolation, _super);
function Interpolation(span, strings, expressions) {
_super.call(this, span);
this.strings = strings;
this.expressions = expressions;
}
Interpolation.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitInterpolation(this, context);
};
return Interpolation;
}(AST);
var Binary = function(_super) {
__extends$1(Binary, _super);
function Binary(span, operation, left, right) {
_super.call(this, span);
this.operation = operation;
this.left = left;
this.right = right;
}
Binary.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitBinary(this, context);
};
return Binary;
}(AST);
var PrefixNot = function(_super) {
__extends$1(PrefixNot, _super);
function PrefixNot(span, expression) {
_super.call(this, span);
this.expression = expression;
}
PrefixNot.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPrefixNot(this, context);
};
return PrefixNot;
}(AST);
var MethodCall = function(_super) {
__extends$1(MethodCall, _super);
function MethodCall(span, receiver, name, args) {
_super.call(this, span);
this.receiver = receiver;
this.name = name;
this.args = args;
}
MethodCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitMethodCall(this, context);
};
return MethodCall;
}(AST);
var SafeMethodCall = function(_super) {
__extends$1(SafeMethodCall, _super);
function SafeMethodCall(span, receiver, name, args) {
_super.call(this, span);
this.receiver = receiver;
this.name = name;
this.args = args;
}
SafeMethodCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitSafeMethodCall(this, context);
};
return SafeMethodCall;
}(AST);
var FunctionCall = function(_super) {
__extends$1(FunctionCall, _super);
function FunctionCall(span, target, args) {
_super.call(this, span);
this.target = target;
this.args = args;
}
FunctionCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitFunctionCall(this, context);
};
return FunctionCall;
}(AST);
var ASTWithSource = function(_super) {
__extends$1(ASTWithSource, _super);
function ASTWithSource(ast, source, location, errors) {
_super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
this.ast = ast;
this.source = source;
this.location = location;
this.errors = errors;
}
ASTWithSource.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return this.ast.visit(visitor, context);
};
ASTWithSource.prototype.toString = function() {
return this.source + " in " + this.location;
};
return ASTWithSource;
}(AST);
var TemplateBinding = function() {
function TemplateBinding(span, key, keyIsVar, name, expression) {
this.span = span;
this.key = key;
this.keyIsVar = keyIsVar;
this.name = name;
this.expression = expression;
}
return TemplateBinding;
}();
var RecursiveAstVisitor = function() {
function RecursiveAstVisitor() {}
RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
ast.left.visit(this);
ast.right.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
ast.condition.visit(this);
ast.trueExp.visit(this);
ast.falseExp.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
ast.exp.visit(this);
this.visitAll(ast.args, context);
return null;
};
RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
ast.target.visit(this);
this.visitAll(ast.args, context);
return null;
};
RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
return null;
};
RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
ast.obj.visit(this);
ast.key.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
ast.obj.visit(this);
ast.key.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
return this.visitAll(ast.values, context);
};
RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
return null;
};
RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
ast.receiver.visit(this);
return this.visitAll(ast.args, context);
};
RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
ast.expression.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
ast.receiver.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
ast.receiver.visit(this);
return this.visitAll(ast.args, context);
};
RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
var _this = this;
asts.forEach(function(ast) {
return ast.visit(_this, context);
});
return null;
};
RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
return null;
};
return RecursiveAstVisitor;
}();
exports.TokenType;
(function(TokenType) {
TokenType[TokenType["Character"] = 0] = "Character";
TokenType[TokenType["Identifier"] = 1] = "Identifier";
TokenType[TokenType["Keyword"] = 2] = "Keyword";
TokenType[TokenType["String"] = 3] = "String";
TokenType[TokenType["Operator"] = 4] = "Operator";
TokenType[TokenType["Number"] = 5] = "Number";
TokenType[TokenType["Error"] = 6] = "Error";
})(exports.TokenType || (exports.TokenType = {}));
var KEYWORDS = [ "var", "let", "null", "undefined", "true", "false", "if", "else", "this" ];
var Lexer = function() {
function Lexer() {}
Lexer.prototype.tokenize = function(text) {
var scanner = new _Scanner(text);
var tokens = [];
var token = scanner.scanToken();
while (token != null) {
tokens.push(token);
token = scanner.scanToken();
}
return tokens;
};
Lexer.decorators = [ {
type: _angular_core.Injectable
} ];
Lexer.ctorParameters = [];
return Lexer;
}();
var Token = function() {
function Token(index, type, numValue, strValue) {
this.index = index;
this.type = type;
this.numValue = numValue;
this.strValue = strValue;
}
Token.prototype.isCharacter = function(code) {
return this.type == exports.TokenType.Character && this.numValue == code;
};
Token.prototype.isNumber = function() {
return this.type == exports.TokenType.Number;
};
Token.prototype.isString = function() {
return this.type == exports.TokenType.String;
};
Token.prototype.isOperator = function(operater) {
return this.type == exports.TokenType.Operator && this.strValue == operater;
};
Token.prototype.isIdentifier = function() {
return this.type == exports.TokenType.Identifier;
};
Token.prototype.isKeyword = function() {
return this.type == exports.TokenType.Keyword;
};
Token.prototype.isKeywordLet = function() {
return this.type == exports.TokenType.Keyword && this.strValue == "let";
};
Token.prototype.isKeywordNull = function() {
return this.type == exports.TokenType.Keyword && this.strValue == "null";
};
Token.prototype.isKeywordUndefined = function() {
return this.type == exports.TokenType.Keyword && this.strValue == "undefined";
};
Token.prototype.isKeywordTrue = function() {
return this.type == exports.TokenType.Keyword && this.strValue == "true";
};
Token.prototype.isKeywordFalse = function() {
return this.type == exports.TokenType.Keyword && this.strValue == "false";
};
Token.prototype.isKeywordThis = function() {
return this.type == exports.TokenType.Keyword && this.strValue == "this";
};
Token.prototype.isError = function() {
return this.type == exports.TokenType.Error;
};
Token.prototype.toNumber = function() {
return this.type == exports.TokenType.Number ? this.numValue : -1;
};
Token.prototype.toString = function() {
switch (this.type) {
case exports.TokenType.Character:
case exports.TokenType.Identifier:
case exports.TokenType.Keyword:
case exports.TokenType.Operator:
case exports.TokenType.String:
case exports.TokenType.Error:
return this.strValue;

case exports.TokenType.Number:
return this.numValue.toString();

default:
return null;
}
};
return Token;
}();
function newCharacterToken(index, code) {
return new Token(index, exports.TokenType.Character, code, String.fromCharCode(code));
}
function newIdentifierToken(index, text) {
return new Token(index, exports.TokenType.Identifier, 0, text);
}
function newKeywordToken(index, text) {
return new Token(index, exports.TokenType.Keyword, 0, text);
}
function newOperatorToken(index, text) {
return new Token(index, exports.TokenType.Operator, 0, text);
}
function newStringToken(index, text) {
return new Token(index, exports.TokenType.String, 0, text);
}
function newNumberToken(index, n) {
return new Token(index, exports.TokenType.Number, n, "");
}
function newErrorToken(index, message) {
return new Token(index, exports.TokenType.Error, 0, message);
}
var EOF = new Token(-1, exports.TokenType.Character, 0, "");
var _Scanner = function() {
function _Scanner(input) {
this.input = input;
this.peek = 0;
this.index = -1;
this.length = input.length;
this.advance();
}
_Scanner.prototype.advance = function() {
this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
};
_Scanner.prototype.scanToken = function() {
var input = this.input, length = this.length;
var peek = this.peek, index = this.index;
while (peek <= $SPACE) {
if (++index >= length) {
peek = $EOF;
break;
} else {
peek = input.charCodeAt(index);
}
}
this.peek = peek;
this.index = index;
if (index >= length) {
return null;
}
if (isIdentifierStart(peek)) return this.scanIdentifier();
if (isDigit(peek)) return this.scanNumber(index);
var start = index;
switch (peek) {
case $PERIOD:
this.advance();
return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);

case $LPAREN:
case $RPAREN:
case $LBRACE:
case $RBRACE:
case $LBRACKET:
case $RBRACKET:
case $COMMA:
case $COLON:
case $SEMICOLON:
return this.scanCharacter(start, peek);

case $SQ:
case $DQ:
return this.scanString();

case $HASH:
case $PLUS:
case $MINUS:
case $STAR:
case $SLASH:
case $PERCENT:
case $CARET:
return this.scanOperator(start, String.fromCharCode(peek));

case $QUESTION:
return this.scanComplexOperator(start, "?", $PERIOD, ".");

case $LT:
case $GT:
return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");

case $BANG:
case $EQ:
return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");

case $AMPERSAND:
return this.scanComplexOperator(start, "&", $AMPERSAND, "&");

case $BAR:
return this.scanComplexOperator(start, "|", $BAR, "|");

case $NBSP:
while (isWhitespace(this.peek)) this.advance();
return this.scanToken();
}
this.advance();
return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
};
_Scanner.prototype.scanCharacter = function(start, code) {
this.advance();
return newCharacterToken(start, code);
};
_Scanner.prototype.scanOperator = function(start, str) {
this.advance();
return newOperatorToken(start, str);
};
_Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
this.advance();
var str = one;
if (this.peek == twoCode) {
this.advance();
str += two;
}
if (isPresent(threeCode) && this.peek == threeCode) {
this.advance();
str += three;
}
return newOperatorToken(start, str);
};
_Scanner.prototype.scanIdentifier = function() {
var start = this.index;
this.advance();
while (isIdentifierPart(this.peek)) this.advance();
var str = this.input.substring(start, this.index);
return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
};
_Scanner.prototype.scanNumber = function(start) {
var simple = this.index === start;
this.advance();
while (true) {
if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
simple = false;
} else if (isExponentStart(this.peek)) {
this.advance();
if (isExponentSign(this.peek)) this.advance();
if (!isDigit(this.peek)) return this.error("Invalid exponent", -1);
simple = false;
} else {
break;
}
this.advance();
}
var str = this.input.substring(start, this.index);
var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
return newNumberToken(start, value);
};
_Scanner.prototype.scanString = function() {
var start = this.index;
var quote = this.peek;
this.advance();
var buffer = "";
var marker = this.index;
var input = this.input;
while (this.peek != quote) {
if (this.peek == $BACKSLASH) {
buffer += input.substring(marker, this.index);
this.advance();
var unescapedCode = void 0;
if (this.peek == $u) {
var hex = input.substring(this.index + 1, this.index + 5);
if (/^[0-9a-f]+$/i.test(hex)) {
unescapedCode = parseInt(hex, 16);
} else {
return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
}
for (var i = 0; i < 5; i++) {
this.advance();
}
} else {
unescapedCode = unescape(this.peek);
this.advance();
}
buffer += String.fromCharCode(unescapedCode);
marker = this.index;
} else if (this.peek == $EOF) {
return this.error("Unterminated quote", 0);
} else {
this.advance();
}
}
var last = input.substring(marker, this.index);
this.advance();
return newStringToken(start, buffer + last);
};
_Scanner.prototype.error = function(message, offset) {
var position = this.index + offset;
return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
};
return _Scanner;
}();
function isIdentifierStart(code) {
return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
}
function isIdentifier(input) {
if (input.length == 0) return false;
var scanner = new _Scanner(input);
if (!isIdentifierStart(scanner.peek)) return false;
scanner.advance();
while (scanner.peek !== $EOF) {
if (!isIdentifierPart(scanner.peek)) return false;
scanner.advance();
}
return true;
}
function isIdentifierPart(code) {
return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
}
function isExponentStart(code) {
return code == $e || code == $E;
}
function isExponentSign(code) {
return code == $MINUS || code == $PLUS;
}
function isQuote(code) {
return code === $SQ || code === $DQ || code === $BT;
}
function unescape(code) {
switch (code) {
case $n:
return $LF;

case $f:
return $FF;

case $r:
return $CR;

case $t:
return $TAB;

case $v:
return $VTAB;

default:
return code;
}
}
var SplitInterpolation = function() {
function SplitInterpolation(strings, expressions, offsets) {
this.strings = strings;
this.expressions = expressions;
this.offsets = offsets;
}
return SplitInterpolation;
}();
var TemplateBindingParseResult = function() {
function TemplateBindingParseResult(templateBindings, warnings, errors) {
this.templateBindings = templateBindings;
this.warnings = warnings;
this.errors = errors;
}
return TemplateBindingParseResult;
}();
function _createInterpolateRegExp(config) {
var pattern = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end);
return new RegExp(pattern, "g");
}
var Parser = function() {
function Parser(_lexer) {
this._lexer = _lexer;
this.errors = [];
}
Parser.prototype.parseAction = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
this._checkNoInterpolation(input, location, interpolationConfig);
var sourceToLex = this._stripComments(input);
var tokens = this._lexer.tokenize(this._stripComments(input));
var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
return new ASTWithSource(ast, input, location, this.errors);
};
Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var ast = this._parseBindingAst(input, location, interpolationConfig);
return new ASTWithSource(ast, input, location, this.errors);
};
Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var ast = this._parseBindingAst(input, location, interpolationConfig);
var errors = SimpleExpressionChecker.check(ast);
if (errors.length > 0) {
this._reportError("Host binding expression cannot contain " + errors.join(" "), input, location);
}
return new ASTWithSource(ast, input, location, this.errors);
};
Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
};
Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
var quote = this._parseQuote(input, location);
if (isPresent(quote)) {
return quote;
}
this._checkNoInterpolation(input, location, interpolationConfig);
var sourceToLex = this._stripComments(input);
var tokens = this._lexer.tokenize(sourceToLex);
return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
};
Parser.prototype._parseQuote = function(input, location) {
if (isBlank(input)) return null;
var prefixSeparatorIndex = input.indexOf(":");
if (prefixSeparatorIndex == -1) return null;
var prefix = input.substring(0, prefixSeparatorIndex).trim();
if (!isIdentifier(prefix)) return null;
var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
};
Parser.prototype.parseTemplateBindings = function(prefixToken, input, location) {
var tokens = this._lexer.tokenize(input);
if (prefixToken) {
var prefixTokens = this._lexer.tokenize(prefixToken).map(function(t) {
t.index = 0;
return t;
});
tokens.unshift.apply(tokens, prefixTokens);
}
return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
};
Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var split = this.splitInterpolation(input, location, interpolationConfig);
if (split == null) return null;
var expressions = [];
for (var i = 0; i < split.expressions.length; ++i) {
var expressionText = split.expressions[i];
var sourceToLex = this._stripComments(expressionText);
var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
expressions.push(ast);
}
return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
};
Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var regexp = _createInterpolateRegExp(interpolationConfig);
var parts = input.split(regexp);
if (parts.length <= 1) {
return null;
}
var strings = [];
var expressions = [];
var offsets = [];
var offset = 0;
for (var i = 0; i < parts.length; i++) {
var part = parts[i];
if (i % 2 === 0) {
strings.push(part);
offset += part.length;
} else if (part.trim().length > 0) {
offset += interpolationConfig.start.length;
expressions.push(part);
offsets.push(offset);
offset += part.length + interpolationConfig.end.length;
} else {
this._reportError("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
expressions.push("$implict");
offsets.push(offset);
}
}
return new SplitInterpolation(strings, expressions, offsets);
};
Parser.prototype.wrapLiteralPrimitive = function(input, location) {
return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
};
Parser.prototype._stripComments = function(input) {
var i = this._commentStart(input);
return isPresent(i) ? input.substring(0, i).trim() : input;
};
Parser.prototype._commentStart = function(input) {
var outerQuote = null;
for (var i = 0; i < input.length - 1; i++) {
var char = input.charCodeAt(i);
var nextChar = input.charCodeAt(i + 1);
if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote)) return i;
if (outerQuote === char) {
outerQuote = null;
} else if (isBlank(outerQuote) && isQuote(char)) {
outerQuote = char;
}
}
return null;
};
Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
var regexp = _createInterpolateRegExp(interpolationConfig);
var parts = input.split(regexp);
if (parts.length > 1) {
this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
}
};
Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
var errLocation = "";
for (var j = 0; j < partInErrIdx; j++) {
errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
}
return errLocation.length;
};
Parser.decorators = [ {
type: _angular_core.Injectable
} ];
Parser.ctorParameters = [ {
type: Lexer
} ];
return Parser;
}();
var _ParseAST = function() {
function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
this.input = input;
this.location = location;
this.tokens = tokens;
this.inputLength = inputLength;
this.parseAction = parseAction;
this.errors = errors;
this.offset = offset;
this.rparensExpected = 0;
this.rbracketsExpected = 0;
this.rbracesExpected = 0;
this.index = 0;
}
_ParseAST.prototype.peek = function(offset) {
var i = this.index + offset;
return i < this.tokens.length ? this.tokens[i] : EOF;
};
Object.defineProperty(_ParseAST.prototype, "next", {
get: function() {
return this.peek(0);
},
enumerable: true,
configurable: true
});
Object.defineProperty(_ParseAST.prototype, "inputIndex", {
get: function() {
return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;
},
enumerable: true,
configurable: true
});
_ParseAST.prototype.span = function(start) {
return new ParseSpan(start, this.inputIndex);
};
_ParseAST.prototype.advance = function() {
this.index++;
};
_ParseAST.prototype.optionalCharacter = function(code) {
if (this.next.isCharacter(code)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.peekKeywordLet = function() {
return this.next.isKeywordLet();
};
_ParseAST.prototype.expectCharacter = function(code) {
if (this.optionalCharacter(code)) return;
this.error("Missing expected " + String.fromCharCode(code));
};
_ParseAST.prototype.optionalOperator = function(op) {
if (this.next.isOperator(op)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.expectOperator = function(operator) {
if (this.optionalOperator(operator)) return;
this.error("Missing expected operator " + operator);
};
_ParseAST.prototype.expectIdentifierOrKeyword = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword()) {
this.error("Unexpected token " + n + ", expected identifier or keyword");
return "";
}
this.advance();
return n.toString();
};
_ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
return "";
}
this.advance();
return n.toString();
};
_ParseAST.prototype.parseChain = function() {
var exprs = [];
var start = this.inputIndex;
while (this.index < this.tokens.length) {
var expr = this.parsePipe();
exprs.push(expr);
if (this.optionalCharacter($SEMICOLON)) {
if (!this.parseAction) {
this.error("Binding expression cannot contain chained expression");
}
while (this.optionalCharacter($SEMICOLON)) {}
} else if (this.index < this.tokens.length) {
this.error("Unexpected token '" + this.next + "'");
}
}
if (exprs.length == 0) return new EmptyExpr(this.span(start));
if (exprs.length == 1) return exprs[0];
return new Chain(this.span(start), exprs);
};
_ParseAST.prototype.parsePipe = function() {
var result = this.parseExpression();
if (this.optionalOperator("|")) {
if (this.parseAction) {
this.error("Cannot have a pipe in an action expression");
}
do {
var name_1 = this.expectIdentifierOrKeyword();
var args = [];
while (this.optionalCharacter($COLON)) {
args.push(this.parseExpression());
}
result = new BindingPipe(this.span(result.span.start - this.offset), result, name_1, args);
} while (this.optionalOperator("|"));
}
return result;
};
_ParseAST.prototype.parseExpression = function() {
return this.parseConditional();
};
_ParseAST.prototype.parseConditional = function() {
var start = this.inputIndex;
var result = this.parseLogicalOr();
if (this.optionalOperator("?")) {
var yes = this.parsePipe();
var no = void 0;
if (!this.optionalCharacter($COLON)) {
var end = this.inputIndex;
var expression = this.input.substring(start, end);
this.error("Conditional expression " + expression + " requires all 3 expressions");
no = new EmptyExpr(this.span(start));
} else {
no = this.parsePipe();
}
return new Conditional(this.span(start), result, yes, no);
} else {
return result;
}
};
_ParseAST.prototype.parseLogicalOr = function() {
var result = this.parseLogicalAnd();
while (this.optionalOperator("||")) {
var right = this.parseLogicalAnd();
result = new Binary(this.span(result.span.start), "||", result, right);
}
return result;
};
_ParseAST.prototype.parseLogicalAnd = function() {
var result = this.parseEquality();
while (this.optionalOperator("&&")) {
var right = this.parseEquality();
result = new Binary(this.span(result.span.start), "&&", result, right);
}
return result;
};
_ParseAST.prototype.parseEquality = function() {
var result = this.parseRelational();
while (this.next.type == exports.TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "==":
case "===":
case "!=":
case "!==":
this.advance();
var right = this.parseRelational();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parseRelational = function() {
var result = this.parseAdditive();
while (this.next.type == exports.TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "<":
case ">":
case "<=":
case ">=":
this.advance();
var right = this.parseAdditive();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parseAdditive = function() {
var result = this.parseMultiplicative();
while (this.next.type == exports.TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "+":
case "-":
this.advance();
var right = this.parseMultiplicative();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parseMultiplicative = function() {
var result = this.parsePrefix();
while (this.next.type == exports.TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "*":
case "%":
case "/":
this.advance();
var right = this.parsePrefix();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parsePrefix = function() {
if (this.next.type == exports.TokenType.Operator) {
var start = this.inputIndex;
var operator = this.next.strValue;
var result = void 0;
switch (operator) {
case "+":
this.advance();
return this.parsePrefix();

case "-":
this.advance();
result = this.parsePrefix();
return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);

case "!":
this.advance();
result = this.parsePrefix();
return new PrefixNot(this.span(start), result);
}
}
return this.parseCallChain();
};
_ParseAST.prototype.parseCallChain = function() {
var result = this.parsePrimary();
while (true) {
if (this.optionalCharacter($PERIOD)) {
result = this.parseAccessMemberOrMethodCall(result, false);
} else if (this.optionalOperator("?.")) {
result = this.parseAccessMemberOrMethodCall(result, true);
} else if (this.optionalCharacter($LBRACKET)) {
this.rbracketsExpected++;
var key = this.parsePipe();
this.rbracketsExpected--;
this.expectCharacter($RBRACKET);
if (this.optionalOperator("=")) {
var value = this.parseConditional();
result = new KeyedWrite(this.span(result.span.start), result, key, value);
} else {
result = new KeyedRead(this.span(result.span.start), result, key);
}
} else if (this.optionalCharacter($LPAREN)) {
this.rparensExpected++;
var args = this.parseCallArguments();
this.rparensExpected--;
this.expectCharacter($RPAREN);
result = new FunctionCall(this.span(result.span.start), result, args);
} else {
return result;
}
}
};
_ParseAST.prototype.parsePrimary = function() {
var start = this.inputIndex;
if (this.optionalCharacter($LPAREN)) {
this.rparensExpected++;
var result = this.parsePipe();
this.rparensExpected--;
this.expectCharacter($RPAREN);
return result;
} else if (this.next.isKeywordNull()) {
this.advance();
return new LiteralPrimitive(this.span(start), null);
} else if (this.next.isKeywordUndefined()) {
this.advance();
return new LiteralPrimitive(this.span(start), void 0);
} else if (this.next.isKeywordTrue()) {
this.advance();
return new LiteralPrimitive(this.span(start), true);
} else if (this.next.isKeywordFalse()) {
this.advance();
return new LiteralPrimitive(this.span(start), false);
} else if (this.next.isKeywordThis()) {
this.advance();
return new ImplicitReceiver(this.span(start));
} else if (this.optionalCharacter($LBRACKET)) {
this.rbracketsExpected++;
var elements = this.parseExpressionList($RBRACKET);
this.rbracketsExpected--;
this.expectCharacter($RBRACKET);
return new LiteralArray(this.span(start), elements);
} else if (this.next.isCharacter($LBRACE)) {
return this.parseLiteralMap();
} else if (this.next.isIdentifier()) {
return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
} else if (this.next.isNumber()) {
var value = this.next.toNumber();
this.advance();
return new LiteralPrimitive(this.span(start), value);
} else if (this.next.isString()) {
var literalValue = this.next.toString();
this.advance();
return new LiteralPrimitive(this.span(start), literalValue);
} else if (this.index >= this.tokens.length) {
this.error("Unexpected end of expression: " + this.input);
return new EmptyExpr(this.span(start));
} else {
this.error("Unexpected token " + this.next);
return new EmptyExpr(this.span(start));
}
};
_ParseAST.prototype.parseExpressionList = function(terminator) {
var result = [];
if (!this.next.isCharacter(terminator)) {
do {
result.push(this.parsePipe());
} while (this.optionalCharacter($COMMA));
}
return result;
};
_ParseAST.prototype.parseLiteralMap = function() {
var keys = [];
var values = [];
var start = this.inputIndex;
this.expectCharacter($LBRACE);
if (!this.optionalCharacter($RBRACE)) {
this.rbracesExpected++;
do {
var key = this.expectIdentifierOrKeywordOrString();
keys.push(key);
this.expectCharacter($COLON);
values.push(this.parsePipe());
} while (this.optionalCharacter($COMMA));
this.rbracesExpected--;
this.expectCharacter($RBRACE);
}
return new LiteralMap(this.span(start), keys, values);
};
_ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
if (isSafe === void 0) {
isSafe = false;
}
var start = receiver.span.start;
var id = this.expectIdentifierOrKeyword();
if (this.optionalCharacter($LPAREN)) {
this.rparensExpected++;
var args = this.parseCallArguments();
this.expectCharacter($RPAREN);
this.rparensExpected--;
var span = this.span(start);
return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
} else {
if (isSafe) {
if (this.optionalOperator("=")) {
this.error("The '?.' operator cannot be used in the assignment");
return new EmptyExpr(this.span(start));
} else {
return new SafePropertyRead(this.span(start), receiver, id);
}
} else {
if (this.optionalOperator("=")) {
if (!this.parseAction) {
this.error("Bindings cannot contain assignments");
return new EmptyExpr(this.span(start));
}
var value = this.parseConditional();
return new PropertyWrite(this.span(start), receiver, id, value);
} else {
return new PropertyRead(this.span(start), receiver, id);
}
}
}
};
_ParseAST.prototype.parseCallArguments = function() {
if (this.next.isCharacter($RPAREN)) return [];
var positionals = [];
do {
positionals.push(this.parsePipe());
} while (this.optionalCharacter($COMMA));
return positionals;
};
_ParseAST.prototype.expectTemplateBindingKey = function() {
var result = "";
var operatorFound = false;
do {
result += this.expectIdentifierOrKeywordOrString();
operatorFound = this.optionalOperator("-");
if (operatorFound) {
result += "-";
}
} while (operatorFound);
return result.toString();
};
_ParseAST.prototype.parseTemplateBindings = function() {
var bindings = [];
var prefix = null;
var warnings = [];
while (this.index < this.tokens.length) {
var start = this.inputIndex;
var keyIsVar = this.peekKeywordLet();
if (keyIsVar) {
this.advance();
}
var key = this.expectTemplateBindingKey();
if (!keyIsVar) {
if (prefix == null) {
prefix = key;
} else {
key = prefix + key[0].toUpperCase() + key.substring(1);
}
}
this.optionalCharacter($COLON);
var name_2 = null;
var expression = null;
if (keyIsVar) {
if (this.optionalOperator("=")) {
name_2 = this.expectTemplateBindingKey();
} else {
name_2 = "$implicit";
}
} else if (this.next !== EOF && !this.peekKeywordLet()) {
var start_1 = this.inputIndex;
var ast = this.parsePipe();
var source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
expression = new ASTWithSource(ast, source, this.location, this.errors);
}
bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
if (!this.optionalCharacter($SEMICOLON)) {
this.optionalCharacter($COMMA);
}
}
return new TemplateBindingParseResult(bindings, warnings, this.errors);
};
_ParseAST.prototype.error = function(message, index) {
if (index === void 0) {
index = null;
}
this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
this.skip();
};
_ParseAST.prototype.locationText = function(index) {
if (index === void 0) {
index = null;
}
if (isBlank(index)) index = this.index;
return index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
};
_ParseAST.prototype.skip = function() {
var n = this.next;
while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
if (this.next.isError()) {
this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
}
this.advance();
n = this.next;
}
};
return _ParseAST;
}();
var SimpleExpressionChecker = function() {
function SimpleExpressionChecker() {
this.errors = [];
}
SimpleExpressionChecker.check = function(ast) {
var s = new SimpleExpressionChecker();
ast.visit(s);
return s.errors;
};
SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {};
SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {};
SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {};
SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {};
SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {};
SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
this.visitAll(ast.expressions);
};
SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
this.visitAll(ast.values);
};
SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {};
SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
this.errors.push("pipes");
};
SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {};
SimpleExpressionChecker.prototype.visitAll = function(asts) {
var _this = this;
return asts.map(function(node) {
return node.visit(_this);
});
};
SimpleExpressionChecker.prototype.visitChain = function(ast, context) {};
SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {};
return SimpleExpressionChecker;
}();
var ParseLocation = function() {
function ParseLocation(file, offset, line, col) {
this.file = file;
this.offset = offset;
this.line = line;
this.col = col;
}
ParseLocation.prototype.toString = function() {
return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
};
return ParseLocation;
}();
var ParseSourceFile = function() {
function ParseSourceFile(content, url) {
this.content = content;
this.url = url;
}
return ParseSourceFile;
}();
var ParseSourceSpan = function() {
function ParseSourceSpan(start, end, details) {
if (details === void 0) {
details = null;
}
this.start = start;
this.end = end;
this.details = details;
}
ParseSourceSpan.prototype.toString = function() {
return this.start.file.content.substring(this.start.offset, this.end.offset);
};
return ParseSourceSpan;
}();
exports.ParseErrorLevel;
(function(ParseErrorLevel) {
ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
})(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
var ParseError = function() {
function ParseError(span, msg, level) {
if (level === void 0) {
level = exports.ParseErrorLevel.FATAL;
}
this.span = span;
this.msg = msg;
this.level = level;
}
ParseError.prototype.toString = function() {
var source = this.span.start.file.content;
var ctxStart = this.span.start.offset;
var contextStr = "";
var details = "";
if (isPresent(ctxStart)) {
if (ctxStart > source.length - 1) {
ctxStart = source.length - 1;
}
var ctxEnd = ctxStart;
var ctxLen = 0;
var ctxLines = 0;
while (ctxLen < 100 && ctxStart > 0) {
ctxStart--;
ctxLen++;
if (source[ctxStart] == "\n") {
if (++ctxLines == 3) {
break;
}
}
}
ctxLen = 0;
ctxLines = 0;
while (ctxLen < 100 && ctxEnd < source.length - 1) {
ctxEnd++;
ctxLen++;
if (source[ctxEnd] == "\n") {
if (++ctxLines == 3) {
break;
}
}
}
var context = source.substring(ctxStart, this.span.start.offset) + "[ERROR ->]" + source.substring(this.span.start.offset, ctxEnd + 1);
contextStr = ' ("' + context + '")';
}
if (this.span.details) {
details = ", " + this.span.details;
}
return "" + this.msg + contextStr + ": " + this.span.start + details;
};
return ParseError;
}();
var Text = function() {
function Text(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
Text.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return Text;
}();
var Expansion = function() {
function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
this.switchValue = switchValue;
this.type = type;
this.cases = cases;
this.sourceSpan = sourceSpan;
this.switchValueSourceSpan = switchValueSourceSpan;
}
Expansion.prototype.visit = function(visitor, context) {
return visitor.visitExpansion(this, context);
};
return Expansion;
}();
var ExpansionCase = function() {
function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
this.value = value;
this.expression = expression;
this.sourceSpan = sourceSpan;
this.valueSourceSpan = valueSourceSpan;
this.expSourceSpan = expSourceSpan;
}
ExpansionCase.prototype.visit = function(visitor, context) {
return visitor.visitExpansionCase(this, context);
};
return ExpansionCase;
}();
var Attribute$1 = function() {
function Attribute(name, value, sourceSpan, valueSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
this.valueSpan = valueSpan;
}
Attribute.prototype.visit = function(visitor, context) {
return visitor.visitAttribute(this, context);
};
return Attribute;
}();
var Element = function() {
function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
this.name = name;
this.attrs = attrs;
this.children = children;
this.sourceSpan = sourceSpan;
this.startSourceSpan = startSourceSpan;
this.endSourceSpan = endSourceSpan;
}
Element.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return Element;
}();
var Comment = function() {
function Comment(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
Comment.prototype.visit = function(visitor, context) {
return visitor.visitComment(this, context);
};
return Comment;
}();
function visitAll(visitor, nodes, context) {
if (context === void 0) {
context = null;
}
var result = [];
var visit = visitor.visit ? function(ast) {
return visitor.visit(ast, context) || ast.visit(visitor, context);
} : function(ast) {
return ast.visit(visitor, context);
};
nodes.forEach(function(ast) {
var astResult = visit(ast);
if (astResult) {
result.push(astResult);
}
});
return result;
}
var TagContentType;
(function(TagContentType) {
TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
})(TagContentType || (TagContentType = {}));
function splitNsName(elementName) {
if (elementName[0] != ":") {
return [ null, elementName ];
}
var colonIndex = elementName.indexOf(":", 1);
if (colonIndex == -1) {
throw new Error('Unsupported format "' + elementName + '" expecting ":namespace:name"');
}
return [ elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1) ];
}
function getNsPrefix(fullName) {
return fullName === null ? null : splitNsName(fullName)[0];
}
function mergeNsAndName(prefix, localName) {
return prefix ? ":" + prefix + ":" + localName : localName;
}
var NAMED_ENTITIES = {
Aacute: "Á",
aacute: "á",
Acirc: "Â",
acirc: "â",
acute: "´",
AElig: "Æ",
aelig: "æ",
Agrave: "À",
agrave: "à",
alefsym: "ℵ",
Alpha: "Α",
alpha: "α",
amp: "&",
and: "∧",
ang: "∠",
apos: "'",
Aring: "Å",
aring: "å",
asymp: "≈",
Atilde: "Ã",
atilde: "ã",
Auml: "Ä",
auml: "ä",
bdquo: "„",
Beta: "Β",
beta: "β",
brvbar: "¦",
bull: "•",
cap: "∩",
Ccedil: "Ç",
ccedil: "ç",
cedil: "¸",
cent: "¢",
Chi: "Χ",
chi: "χ",
circ: "ˆ",
clubs: "♣",
cong: "≅",
copy: "©",
crarr: "↵",
cup: "∪",
curren: "¤",
dagger: "†",
Dagger: "‡",
darr: "↓",
dArr: "⇓",
deg: "°",
Delta: "Δ",
delta: "δ",
diams: "♦",
divide: "÷",
Eacute: "É",
eacute: "é",
Ecirc: "Ê",
ecirc: "ê",
Egrave: "È",
egrave: "è",
empty: "∅",
emsp: " ",
ensp: " ",
Epsilon: "Ε",
epsilon: "ε",
equiv: "≡",
Eta: "Η",
eta: "η",
ETH: "Ð",
eth: "ð",
Euml: "Ë",
euml: "ë",
euro: "€",
exist: "∃",
fnof: "ƒ",
forall: "∀",
frac12: "½",
frac14: "¼",
frac34: "¾",
frasl: "⁄",
Gamma: "Γ",
gamma: "γ",
ge: "≥",
gt: ">",
harr: "↔",
hArr: "⇔",
hearts: "♥",
hellip: "…",
Iacute: "Í",
iacute: "í",
Icirc: "Î",
icirc: "î",
iexcl: "¡",
Igrave: "Ì",
igrave: "ì",
image: "ℑ",
infin: "∞",
int: "∫",
Iota: "Ι",
iota: "ι",
iquest: "¿",
isin: "∈",
Iuml: "Ï",
iuml: "ï",
Kappa: "Κ",
kappa: "κ",
Lambda: "Λ",
lambda: "λ",
lang: "⟨",
laquo: "«",
larr: "←",
lArr: "⇐",
lceil: "⌈",
ldquo: "“",
le: "≤",
lfloor: "⌊",
lowast: "∗",
loz: "◊",
lrm: "‎",
lsaquo: "‹",
lsquo: "‘",
lt: "<",
macr: "¯",
mdash: "—",
micro: "µ",
middot: "·",
minus: "−",
Mu: "Μ",
mu: "μ",
nabla: "∇",
nbsp: " ",
ndash: "–",
ne: "≠",
ni: "∋",
not: "¬",
notin: "∉",
nsub: "⊄",
Ntilde: "Ñ",
ntilde: "ñ",
Nu: "Ν",
nu: "ν",
Oacute: "Ó",
oacute: "ó",
Ocirc: "Ô",
ocirc: "ô",
OElig: "Œ",
oelig: "œ",
Ograve: "Ò",
ograve: "ò",
oline: "‾",
Omega: "Ω",
omega: "ω",
Omicron: "Ο",
omicron: "ο",
oplus: "⊕",
or: "∨",
ordf: "ª",
ordm: "º",
Oslash: "Ø",
oslash: "ø",
Otilde: "Õ",
otilde: "õ",
otimes: "⊗",
Ouml: "Ö",
ouml: "ö",
para: "¶",
permil: "‰",
perp: "⊥",
Phi: "Φ",
phi: "φ",
Pi: "Π",
pi: "π",
piv: "ϖ",
plusmn: "±",
pound: "£",
prime: "′",
Prime: "″",
prod: "∏",
prop: "∝",
Psi: "Ψ",
psi: "ψ",
quot: '"',
radic: "√",
rang: "⟩",
raquo: "»",
rarr: "→",
rArr: "⇒",
rceil: "⌉",
rdquo: "”",
real: "ℜ",
reg: "®",
rfloor: "⌋",
Rho: "Ρ",
rho: "ρ",
rlm: "‏",
rsaquo: "›",
rsquo: "’",
sbquo: "‚",
Scaron: "Š",
scaron: "š",
sdot: "⋅",
sect: "§",
shy: "­",
Sigma: "Σ",
sigma: "σ",
sigmaf: "ς",
sim: "∼",
spades: "♠",
sub: "⊂",
sube: "⊆",
sum: "∑",
sup: "⊃",
sup1: "¹",
sup2: "²",
sup3: "³",
supe: "⊇",
szlig: "ß",
Tau: "Τ",
tau: "τ",
there4: "∴",
Theta: "Θ",
theta: "θ",
thetasym: "ϑ",
thinsp: " ",
THORN: "Þ",
thorn: "þ",
tilde: "˜",
times: "×",
trade: "™",
Uacute: "Ú",
uacute: "ú",
uarr: "↑",
uArr: "⇑",
Ucirc: "Û",
ucirc: "û",
Ugrave: "Ù",
ugrave: "ù",
uml: "¨",
upsih: "ϒ",
Upsilon: "Υ",
upsilon: "υ",
Uuml: "Ü",
uuml: "ü",
weierp: "℘",
Xi: "Ξ",
xi: "ξ",
Yacute: "Ý",
yacute: "ý",
yen: "¥",
yuml: "ÿ",
Yuml: "Ÿ",
Zeta: "Ζ",
zeta: "ζ",
zwj: "‍",
zwnj: "‌"
};
var __extends$3 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TokenType$1;
(function(TokenType) {
TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
TokenType[TokenType["TEXT"] = 4] = "TEXT";
TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
TokenType[TokenType["EOF"] = 19] = "EOF";
})(TokenType$1 || (TokenType$1 = {}));
var Token$1 = function() {
function Token(type, parts, sourceSpan) {
this.type = type;
this.parts = parts;
this.sourceSpan = sourceSpan;
}
return Token;
}();
var TokenError = function(_super) {
__extends$3(TokenError, _super);
function TokenError(errorMsg, tokenType, span) {
_super.call(this, span, errorMsg);
this.tokenType = tokenType;
}
return TokenError;
}(ParseError);
var TokenizeResult = function() {
function TokenizeResult(tokens, errors) {
this.tokens = tokens;
this.errors = errors;
}
return TokenizeResult;
}();
function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
if (tokenizeExpansionForms === void 0) {
tokenizeExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
}
var _CR_OR_CRLF_REGEXP = /\r\n?/g;
function _unexpectedCharacterErrorMsg(charCode) {
var char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
return 'Unexpected character "' + char + '"';
}
function _unknownEntityErrorMsg(entitySrc) {
return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
}
var _ControlFlowError = function() {
function _ControlFlowError(error) {
this.error = error;
}
return _ControlFlowError;
}();
var _Tokenizer = function() {
function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
if (_interpolationConfig === void 0) {
_interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
this._file = _file;
this._getTagDefinition = _getTagDefinition;
this._tokenizeIcu = _tokenizeIcu;
this._interpolationConfig = _interpolationConfig;
this._peek = -1;
this._nextPeek = -1;
this._index = -1;
this._line = 0;
this._column = -1;
this._expansionCaseStack = [];
this._inInterpolation = false;
this.tokens = [];
this.errors = [];
this._input = _file.content;
this._length = _file.content.length;
this._advance();
}
_Tokenizer.prototype._processCarriageReturns = function(content) {
return content.replace(_CR_OR_CRLF_REGEXP, "\n");
};
_Tokenizer.prototype.tokenize = function() {
while (this._peek !== $EOF) {
var start = this._getLocation();
try {
if (this._attemptCharCode($LT)) {
if (this._attemptCharCode($BANG)) {
if (this._attemptCharCode($LBRACKET)) {
this._consumeCdata(start);
} else if (this._attemptCharCode($MINUS)) {
this._consumeComment(start);
} else {
this._consumeDocType(start);
}
} else if (this._attemptCharCode($SLASH)) {
this._consumeTagClose(start);
} else {
this._consumeTagOpen(start);
}
} else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
this._consumeText();
}
} catch (e) {
if (e instanceof _ControlFlowError) {
this.errors.push(e.error);
} else {
throw e;
}
}
}
this._beginToken(TokenType$1.EOF);
this._endToken([]);
return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
};
_Tokenizer.prototype._tokenizeExpansionForm = function() {
if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
this._consumeExpansionFormStart();
return true;
}
if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
this._consumeExpansionCaseStart();
return true;
}
if (this._peek === $RBRACE) {
if (this._isInExpansionCase()) {
this._consumeExpansionCaseEnd();
return true;
}
if (this._isInExpansionForm()) {
this._consumeExpansionFormEnd();
return true;
}
}
return false;
};
_Tokenizer.prototype._getLocation = function() {
return new ParseLocation(this._file, this._index, this._line, this._column);
};
_Tokenizer.prototype._getSpan = function(start, end) {
if (start === void 0) {
start = this._getLocation();
}
if (end === void 0) {
end = this._getLocation();
}
return new ParseSourceSpan(start, end);
};
_Tokenizer.prototype._beginToken = function(type, start) {
if (start === void 0) {
start = this._getLocation();
}
this._currentTokenStart = start;
this._currentTokenType = type;
};
_Tokenizer.prototype._endToken = function(parts, end) {
if (end === void 0) {
end = this._getLocation();
}
var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
this.tokens.push(token);
this._currentTokenStart = null;
this._currentTokenType = null;
return token;
};
_Tokenizer.prototype._createError = function(msg, span) {
if (this._isInExpansionForm()) {
msg += ' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)';
}
var error = new TokenError(msg, this._currentTokenType, span);
this._currentTokenStart = null;
this._currentTokenType = null;
return new _ControlFlowError(error);
};
_Tokenizer.prototype._advance = function() {
if (this._index >= this._length) {
throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
}
if (this._peek === $LF) {
this._line++;
this._column = 0;
} else if (this._peek !== $LF && this._peek !== $CR) {
this._column++;
}
this._index++;
this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
};
_Tokenizer.prototype._attemptCharCode = function(charCode) {
if (this._peek === charCode) {
this._advance();
return true;
}
return false;
};
_Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
this._advance();
return true;
}
return false;
};
_Tokenizer.prototype._requireCharCode = function(charCode) {
var location = this._getLocation();
if (!this._attemptCharCode(charCode)) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
}
};
_Tokenizer.prototype._attemptStr = function(chars) {
var len = chars.length;
if (this._index + len > this._length) {
return false;
}
var initialPosition = this._savePosition();
for (var i = 0; i < len; i++) {
if (!this._attemptCharCode(chars.charCodeAt(i))) {
this._restorePosition(initialPosition);
return false;
}
}
return true;
};
_Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
for (var i = 0; i < chars.length; i++) {
if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
return false;
}
}
return true;
};
_Tokenizer.prototype._requireStr = function(chars) {
var location = this._getLocation();
if (!this._attemptStr(chars)) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
}
};
_Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
while (!predicate(this._peek)) {
this._advance();
}
};
_Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
var start = this._getLocation();
this._attemptCharCodeUntilFn(predicate);
if (this._index - start.offset < len) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
}
};
_Tokenizer.prototype._attemptUntilChar = function(char) {
while (this._peek !== char) {
this._advance();
}
};
_Tokenizer.prototype._readChar = function(decodeEntities) {
if (decodeEntities && this._peek === $AMPERSAND) {
return this._decodeEntity();
} else {
var index = this._index;
this._advance();
return this._input[index];
}
};
_Tokenizer.prototype._decodeEntity = function() {
var start = this._getLocation();
this._advance();
if (this._attemptCharCode($HASH)) {
var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
var numberStart = this._getLocation().offset;
this._attemptCharCodeUntilFn(isDigitEntityEnd);
if (this._peek != $SEMICOLON) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
}
this._advance();
var strNum = this._input.substring(numberStart, this._index - 1);
try {
var charCode = parseInt(strNum, isHex ? 16 : 10);
return String.fromCharCode(charCode);
} catch (e) {
var entity = this._input.substring(start.offset + 1, this._index - 1);
throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
}
} else {
var startPosition = this._savePosition();
this._attemptCharCodeUntilFn(isNamedEntityEnd);
if (this._peek != $SEMICOLON) {
this._restorePosition(startPosition);
return "&";
}
this._advance();
var name_1 = this._input.substring(start.offset + 1, this._index - 1);
var char = NAMED_ENTITIES[name_1];
if (!char) {
throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
}
return char;
}
};
_Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
var tagCloseStart;
var textStart = this._getLocation();
this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
var parts = [];
while (true) {
tagCloseStart = this._getLocation();
if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
break;
}
if (this._index > tagCloseStart.offset) {
parts.push(this._input.substring(tagCloseStart.offset, this._index));
}
while (this._peek !== firstCharOfEnd) {
parts.push(this._readChar(decodeEntities));
}
}
return this._endToken([ this._processCarriageReturns(parts.join("")) ], tagCloseStart);
};
_Tokenizer.prototype._consumeComment = function(start) {
var _this = this;
this._beginToken(TokenType$1.COMMENT_START, start);
this._requireCharCode($MINUS);
this._endToken([]);
var textToken = this._consumeRawText(false, $MINUS, function() {
return _this._attemptStr("->");
});
this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
this._endToken([]);
};
_Tokenizer.prototype._consumeCdata = function(start) {
var _this = this;
this._beginToken(TokenType$1.CDATA_START, start);
this._requireStr("CDATA[");
this._endToken([]);
var textToken = this._consumeRawText(false, $RBRACKET, function() {
return _this._attemptStr("]>");
});
this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
this._endToken([]);
};
_Tokenizer.prototype._consumeDocType = function(start) {
this._beginToken(TokenType$1.DOC_TYPE, start);
this._attemptUntilChar($GT);
this._advance();
this._endToken([ this._input.substring(start.offset + 2, this._index - 1) ]);
};
_Tokenizer.prototype._consumePrefixAndName = function() {
var nameOrPrefixStart = this._index;
var prefix = null;
while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
this._advance();
}
var nameStart;
if (this._peek === $COLON) {
this._advance();
prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
nameStart = this._index;
} else {
nameStart = nameOrPrefixStart;
}
this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
var name = this._input.substring(nameStart, this._index);
return [ prefix, name ];
};
_Tokenizer.prototype._consumeTagOpen = function(start) {
var savedPos = this._savePosition();
var tagName;
var lowercaseTagName;
try {
if (!isAsciiLetter(this._peek)) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
}
var nameStart = this._index;
this._consumeTagOpenStart(start);
tagName = this._input.substring(nameStart, this._index);
lowercaseTagName = tagName.toLowerCase();
this._attemptCharCodeUntilFn(isNotWhitespace);
while (this._peek !== $SLASH && this._peek !== $GT) {
this._consumeAttributeName();
this._attemptCharCodeUntilFn(isNotWhitespace);
if (this._attemptCharCode($EQ)) {
this._attemptCharCodeUntilFn(isNotWhitespace);
this._consumeAttributeValue();
}
this._attemptCharCodeUntilFn(isNotWhitespace);
}
this._consumeTagOpenEnd();
} catch (e) {
if (e instanceof _ControlFlowError) {
this._restorePosition(savedPos);
this._beginToken(TokenType$1.TEXT, start);
this._endToken([ "<" ]);
return;
}
throw e;
}
var contentTokenType = this._getTagDefinition(tagName).contentType;
if (contentTokenType === TagContentType.RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, false);
} else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, true);
}
};
_Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
var _this = this;
var textToken = this._consumeRawText(decodeEntities, $LT, function() {
if (!_this._attemptCharCode($SLASH)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
if (!_this._attemptStrCaseInsensitive(lowercaseTagName)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
return _this._attemptCharCode($GT);
});
this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
this._endToken([ null, lowercaseTagName ]);
};
_Tokenizer.prototype._consumeTagOpenStart = function(start) {
this._beginToken(TokenType$1.TAG_OPEN_START, start);
var parts = this._consumePrefixAndName();
this._endToken(parts);
};
_Tokenizer.prototype._consumeAttributeName = function() {
this._beginToken(TokenType$1.ATTR_NAME);
var prefixAndName = this._consumePrefixAndName();
this._endToken(prefixAndName);
};
_Tokenizer.prototype._consumeAttributeValue = function() {
this._beginToken(TokenType$1.ATTR_VALUE);
var value;
if (this._peek === $SQ || this._peek === $DQ) {
var quoteChar = this._peek;
this._advance();
var parts = [];
while (this._peek !== quoteChar) {
parts.push(this._readChar(true));
}
value = parts.join("");
this._advance();
} else {
var valueStart = this._index;
this._requireCharCodeUntilFn(isNameEnd, 1);
value = this._input.substring(valueStart, this._index);
}
this._endToken([ this._processCarriageReturns(value) ]);
};
_Tokenizer.prototype._consumeTagOpenEnd = function() {
var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
this._beginToken(tokenType);
this._requireCharCode($GT);
this._endToken([]);
};
_Tokenizer.prototype._consumeTagClose = function(start) {
this._beginToken(TokenType$1.TAG_CLOSE, start);
this._attemptCharCodeUntilFn(isNotWhitespace);
var prefixAndName = this._consumePrefixAndName();
this._attemptCharCodeUntilFn(isNotWhitespace);
this._requireCharCode($GT);
this._endToken(prefixAndName);
};
_Tokenizer.prototype._consumeExpansionFormStart = function() {
this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
this._requireCharCode($LBRACE);
this._endToken([]);
this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
var condition = this._readUntil($COMMA);
this._endToken([ condition ], this._getLocation());
this._requireCharCode($COMMA);
this._attemptCharCodeUntilFn(isNotWhitespace);
this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
var type = this._readUntil($COMMA);
this._endToken([ type ], this._getLocation());
this._requireCharCode($COMMA);
this._attemptCharCodeUntilFn(isNotWhitespace);
};
_Tokenizer.prototype._consumeExpansionCaseStart = function() {
this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
var value = this._readUntil($LBRACE).trim();
this._endToken([ value ], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
this._requireCharCode($LBRACE);
this._endToken([], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
};
_Tokenizer.prototype._consumeExpansionCaseEnd = function() {
this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
this._requireCharCode($RBRACE);
this._endToken([], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._expansionCaseStack.pop();
};
_Tokenizer.prototype._consumeExpansionFormEnd = function() {
this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
this._requireCharCode($RBRACE);
this._endToken([]);
this._expansionCaseStack.pop();
};
_Tokenizer.prototype._consumeText = function() {
var start = this._getLocation();
this._beginToken(TokenType$1.TEXT, start);
var parts = [];
do {
if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
parts.push(this._interpolationConfig.start);
this._inInterpolation = true;
} else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation) {
parts.push(this._interpolationConfig.end);
this._inInterpolation = false;
} else {
parts.push(this._readChar(true));
}
} while (!this._isTextEnd());
this._endToken([ this._processCarriageReturns(parts.join("")) ]);
};
_Tokenizer.prototype._isTextEnd = function() {
if (this._peek === $LT || this._peek === $EOF) {
return true;
}
if (this._tokenizeIcu && !this._inInterpolation) {
if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
return true;
}
if (this._peek === $RBRACE && this._isInExpansionCase()) {
return true;
}
}
return false;
};
_Tokenizer.prototype._savePosition = function() {
return [ this._peek, this._index, this._column, this._line, this.tokens.length ];
};
_Tokenizer.prototype._readUntil = function(char) {
var start = this._index;
this._attemptUntilChar(char);
return this._input.substring(start, this._index);
};
_Tokenizer.prototype._restorePosition = function(position) {
this._peek = position[0];
this._index = position[1];
this._column = position[2];
this._line = position[3];
var nbTokens = position[4];
if (nbTokens < this.tokens.length) {
this.tokens = this.tokens.slice(0, nbTokens);
}
};
_Tokenizer.prototype._isInExpansionCase = function() {
return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
};
_Tokenizer.prototype._isInExpansionForm = function() {
return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
};
return _Tokenizer;
}();
function isNotWhitespace(code) {
return !isWhitespace(code) || code === $EOF;
}
function isNameEnd(code) {
return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
}
function isPrefixEnd(code) {
return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
}
function isExpansionFormStart(input, offset, interpolationConfig) {
var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
}
function isExpansionCaseStart(peek) {
return peek === $EQ || isAsciiLetter(peek);
}
function compareCharCodeCaseInsensitive(code1, code2) {
return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
return code >= $a && code <= $z ? code - $a + $A : code;
}
function mergeTextTokens(srcTokens) {
var dstTokens = [];
var lastDstToken;
for (var i = 0; i < srcTokens.length; i++) {
var token = srcTokens[i];
if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
lastDstToken.parts[0] += token.parts[0];
lastDstToken.sourceSpan.end = token.sourceSpan.end;
} else {
lastDstToken = token;
dstTokens.push(lastDstToken);
}
}
return dstTokens;
}
var __extends$2 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TreeError = function(_super) {
__extends$2(TreeError, _super);
function TreeError(elementName, span, msg) {
_super.call(this, span, msg);
this.elementName = elementName;
}
TreeError.create = function(elementName, span, msg) {
return new TreeError(elementName, span, msg);
};
return TreeError;
}(ParseError);
var ParseTreeResult = function() {
function ParseTreeResult(rootNodes, errors) {
this.rootNodes = rootNodes;
this.errors = errors;
}
return ParseTreeResult;
}();
var Parser$1 = function() {
function Parser(getTagDefinition) {
this.getTagDefinition = getTagDefinition;
}
Parser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
};
return Parser;
}();
var _TreeBuilder = function() {
function _TreeBuilder(tokens, getTagDefinition) {
this.tokens = tokens;
this.getTagDefinition = getTagDefinition;
this._index = -1;
this._rootNodes = [];
this._errors = [];
this._elementStack = [];
this._advance();
}
_TreeBuilder.prototype.build = function() {
while (this._peek.type !== TokenType$1.EOF) {
if (this._peek.type === TokenType$1.TAG_OPEN_START) {
this._consumeStartTag(this._advance());
} else if (this._peek.type === TokenType$1.TAG_CLOSE) {
this._consumeEndTag(this._advance());
} else if (this._peek.type === TokenType$1.CDATA_START) {
this._closeVoidElement();
this._consumeCdata(this._advance());
} else if (this._peek.type === TokenType$1.COMMENT_START) {
this._closeVoidElement();
this._consumeComment(this._advance());
} else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
this._closeVoidElement();
this._consumeText(this._advance());
} else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
this._consumeExpansion(this._advance());
} else {
this._advance();
}
}
return new ParseTreeResult(this._rootNodes, this._errors);
};
_TreeBuilder.prototype._advance = function() {
var prev = this._peek;
if (this._index < this.tokens.length - 1) {
this._index++;
}
this._peek = this.tokens[this._index];
return prev;
};
_TreeBuilder.prototype._advanceIf = function(type) {
if (this._peek.type === type) {
return this._advance();
}
return null;
};
_TreeBuilder.prototype._consumeCdata = function(startToken) {
this._consumeText(this._advance());
this._advanceIf(TokenType$1.CDATA_END);
};
_TreeBuilder.prototype._consumeComment = function(token) {
var text = this._advanceIf(TokenType$1.RAW_TEXT);
this._advanceIf(TokenType$1.COMMENT_END);
var value = isPresent(text) ? text.parts[0].trim() : null;
this._addToParent(new Comment(value, token.sourceSpan));
};
_TreeBuilder.prototype._consumeExpansion = function(token) {
var switchValue = this._advance();
var type = this._advance();
var cases = [];
while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
var expCase = this._parseExpansionCase();
if (!expCase) return;
cases.push(expCase);
}
if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
return;
}
var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
this._advance();
};
_TreeBuilder.prototype._parseExpansionCase = function() {
var value = this._advance();
if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
return null;
}
var start = this._advance();
var exp = this._collectExpansionExpTokens(start);
if (!exp) return null;
var end = this._advance();
exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
if (parsedExp.errors.length > 0) {
this._errors = this._errors.concat(parsedExp.errors);
return null;
}
var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
};
_TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
var exp = [];
var expansionFormStack = [ TokenType$1.EXPANSION_CASE_EXP_START ];
while (true) {
if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
expansionFormStack.push(this._peek.type);
}
if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
expansionFormStack.pop();
if (expansionFormStack.length == 0) return exp;
} else {
this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
return null;
}
}
if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
expansionFormStack.pop();
} else {
this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
return null;
}
}
if (this._peek.type === TokenType$1.EOF) {
this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
return null;
}
exp.push(this._advance());
}
};
_TreeBuilder.prototype._consumeText = function(token) {
var text = token.parts[0];
if (text.length > 0 && text[0] == "\n") {
var parent_1 = this._getParentElement();
if (isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
text = text.substring(1);
}
}
if (text.length > 0) {
this._addToParent(new Text(text, token.sourceSpan));
}
};
_TreeBuilder.prototype._closeVoidElement = function() {
if (this._elementStack.length > 0) {
var el = this._elementStack[this._elementStack.length - 1];
if (this.getTagDefinition(el.name).isVoid) {
this._elementStack.pop();
}
}
};
_TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
var prefix = startTagToken.parts[0];
var name = startTagToken.parts[1];
var attrs = [];
while (this._peek.type === TokenType$1.ATTR_NAME) {
attrs.push(this._consumeAttr(this._advance()));
}
var fullName = this._getElementFullName(prefix, name, this._getParentElement());
var selfClosing = false;
if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
this._advance();
selfClosing = true;
var tagDef = this.getTagDefinition(fullName);
if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
}
} else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
this._advance();
selfClosing = false;
}
var end = this._peek.sourceSpan.start;
var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
var el = new Element(fullName, attrs, [], span, span, null);
this._pushElement(el);
if (selfClosing) {
this._popElement(fullName);
el.endSourceSpan = span;
}
};
_TreeBuilder.prototype._pushElement = function(el) {
if (this._elementStack.length > 0) {
var parentEl = this._elementStack[this._elementStack.length - 1];
if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
this._elementStack.pop();
}
}
var tagDef = this.getTagDefinition(el.name);
var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
this._insertBeforeContainer(parent, container, newParent);
}
this._addToParent(el);
this._elementStack.push(el);
};
_TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
if (this._getParentElement()) {
this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
}
if (this.getTagDefinition(fullName).isVoid) {
this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"'));
} else if (!this._popElement(fullName)) {
this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"'));
}
};
_TreeBuilder.prototype._popElement = function(fullName) {
for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
var el = this._elementStack[stackIndex];
if (el.name == fullName) {
this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
return true;
}
if (!this.getTagDefinition(el.name).closedByParent) {
return false;
}
}
return false;
};
_TreeBuilder.prototype._consumeAttr = function(attrName) {
var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
var end = attrName.sourceSpan.end;
var value = "";
var valueSpan;
if (this._peek.type === TokenType$1.ATTR_VALUE) {
var valueToken = this._advance();
value = valueToken.parts[0];
end = valueToken.sourceSpan.end;
valueSpan = valueToken.sourceSpan;
}
return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
};
_TreeBuilder.prototype._getParentElement = function() {
return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
};
_TreeBuilder.prototype._getParentElementSkippingContainers = function() {
var container = null;
for (var i = this._elementStack.length - 1; i >= 0; i--) {
if (this._elementStack[i].name !== "ng-container") {
return {
parent: this._elementStack[i],
container: container
};
}
container = this._elementStack[i];
}
return {
parent: this._elementStack[this._elementStack.length - 1],
container: container
};
};
_TreeBuilder.prototype._addToParent = function(node) {
var parent = this._getParentElement();
if (isPresent(parent)) {
parent.children.push(node);
} else {
this._rootNodes.push(node);
}
};
_TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
if (!container) {
this._addToParent(node);
this._elementStack.push(node);
} else {
if (parent) {
var index = parent.children.indexOf(container);
parent.children[index] = node;
} else {
this._rootNodes.push(node);
}
node.children.push(container);
this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
}
};
_TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
if (isBlank(prefix)) {
prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
if (isBlank(prefix) && isPresent(parentElement)) {
prefix = getNsPrefix(parentElement.name);
}
}
return mergeNsAndName(prefix, localName);
};
return _TreeBuilder;
}();
function lastOnStack(stack, element) {
return stack.length > 0 && stack[stack.length - 1] === element;
}
function digestMessage(message) {
return sha1(serializeNodes(message.nodes).join("") + ("[" + message.meaning + "]"));
}
var _SerializerVisitor = function() {
function _SerializerVisitor() {}
_SerializerVisitor.prototype.visitText = function(text, context) {
return text.value;
};
_SerializerVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
return "[" + container.children.map(function(child) {
return child.visit(_this);
}).join(", ") + "]";
};
_SerializerVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var strCases = Object.keys(icu.cases).map(function(k) {
return k + " {" + icu.cases[k].visit(_this) + "}";
});
return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(", ") + "}";
};
_SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var _this = this;
return ph.isVoid ? '<ph tag name="' + ph.startName + '"/>' : '<ph tag name="' + ph.startName + '">' + ph.children.map(function(child) {
return child.visit(_this);
}).join(", ") + '</ph name="' + ph.closeName + '">';
};
_SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
return '<ph name="' + ph.name + '">' + ph.value + "</ph>";
};
_SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
return '<ph icu name="' + ph.name + '">' + ph.value.visit(this) + "</ph>";
};
return _SerializerVisitor;
}();
var serializerVisitor = new _SerializerVisitor();
function serializeNodes(nodes) {
return nodes.map(function(a) {
return a.visit(serializerVisitor, null);
});
}
function sha1(str) {
var utf8 = utf8Encode(str);
var words32 = stringToWords32(utf8);
var len = utf8.length * 8;
var w = new Array(80);
var _a = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
words32[len >> 5] |= 128 << 24 - len % 32;
words32[(len + 64 >> 9 << 4) + 15] = len;
for (var i = 0; i < words32.length; i += 16) {
var _b = [ a, b, c, d, e ], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
for (var j = 0; j < 80; j++) {
if (j < 16) {
w[j] = words32[i + j];
} else {
w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
}
var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
var temp = [ rol32(a, 5), f, e, k, w[j] ].reduce(add32);
_d = [ d, c, rol32(b, 30), a, temp ], e = _d[0], d = _d[1], c = _d[2], b = _d[3], 
a = _d[4];
}
_e = [ add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4) ], a = _e[0], 
b = _e[1], c = _e[2], d = _e[3], e = _e[4];
}
var sha1 = words32ToString([ a, b, c, d, e ]);
var hex = "";
for (var i = 0; i < sha1.length; i++) {
var b_1 = sha1.charCodeAt(i);
hex += (b_1 >>> 4 & 15).toString(16) + (b_1 & 15).toString(16);
}
return hex.toLowerCase();
var _d, _e;
}
function utf8Encode(str) {
var encoded = "";
for (var index = 0; index < str.length; index++) {
var codePoint = decodeSurrogatePairs(str, index);
if (codePoint <= 127) {
encoded += String.fromCharCode(codePoint);
} else if (codePoint <= 2047) {
encoded += String.fromCharCode(192 | codePoint >>> 6, 128 | codePoint & 63);
} else if (codePoint <= 65535) {
encoded += String.fromCharCode(224 | codePoint >>> 12, 128 | codePoint >>> 6 & 63, 128 | codePoint & 63);
} else if (codePoint <= 2097151) {
encoded += String.fromCharCode(240 | codePoint >>> 18, 128 | codePoint >>> 12 & 63, 128 | codePoint >>> 6 & 63, 128 | codePoint & 63);
}
}
return encoded;
}
function decodeSurrogatePairs(str, index) {
if (index < 0 || index >= str.length) {
throw new Error("index=" + index + ' is out of range in "' + str + '"');
}
var high = str.charCodeAt(index);
var low;
if (high >= 55296 && high <= 57343 && str.length > index + 1) {
low = str.charCodeAt(index + 1);
if (low >= 56320 && low <= 57343) {
return (high - 55296) * 1024 + low - 56320 + 65536;
}
}
return high;
}
function stringToWords32(str) {
var words32 = Array(str.length >>> 2);
for (var i = 0; i < words32.length; i++) {
words32[i] = 0;
}
for (var i = 0; i < str.length; i++) {
words32[i >>> 2] |= (str.charCodeAt(i) & 255) << 8 * (3 - i & 3);
}
return words32;
}
function words32ToString(words32) {
var str = "";
for (var i = 0; i < words32.length * 4; i++) {
str += String.fromCharCode(words32[i >>> 2] >>> 8 * (3 - i & 3) & 255);
}
return str;
}
function fk(index, b, c, d) {
if (index < 20) {
return [ b & c | ~b & d, 1518500249 ];
}
if (index < 40) {
return [ b ^ c ^ d, 1859775393 ];
}
if (index < 60) {
return [ b & c | b & d | c & d, 2400959708 ];
}
return [ b ^ c ^ d, 3395469782 ];
}
function add32(a, b) {
var low = (a & 65535) + (b & 65535);
var high = (a >> 16) + (b >> 16) + (low >> 16);
return high << 16 | low & 65535;
}
function rol32(a, count) {
return a << count | a >>> 32 - count;
}
var Message = function() {
function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
this.nodes = nodes;
this.placeholders = placeholders;
this.placeholderToMsgIds = placeholderToMsgIds;
this.meaning = meaning;
this.description = description;
}
return Message;
}();
var Text$1 = function() {
function Text(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
Text.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return Text;
}();
var Container = function() {
function Container(children, sourceSpan) {
this.children = children;
this.sourceSpan = sourceSpan;
}
Container.prototype.visit = function(visitor, context) {
return visitor.visitContainer(this, context);
};
return Container;
}();
var Icu = function() {
function Icu(expression, type, cases, sourceSpan) {
this.expression = expression;
this.type = type;
this.cases = cases;
this.sourceSpan = sourceSpan;
}
Icu.prototype.visit = function(visitor, context) {
return visitor.visitIcu(this, context);
};
return Icu;
}();
var TagPlaceholder = function() {
function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
this.tag = tag;
this.attrs = attrs;
this.startName = startName;
this.closeName = closeName;
this.children = children;
this.isVoid = isVoid;
this.sourceSpan = sourceSpan;
}
TagPlaceholder.prototype.visit = function(visitor, context) {
return visitor.visitTagPlaceholder(this, context);
};
return TagPlaceholder;
}();
var Placeholder = function() {
function Placeholder(value, name, sourceSpan) {
if (name === void 0) {
name = "";
}
this.value = value;
this.name = name;
this.sourceSpan = sourceSpan;
}
Placeholder.prototype.visit = function(visitor, context) {
return visitor.visitPlaceholder(this, context);
};
return Placeholder;
}();
var IcuPlaceholder = function() {
function IcuPlaceholder(value, name, sourceSpan) {
if (name === void 0) {
name = "";
}
this.value = value;
this.name = name;
this.sourceSpan = sourceSpan;
}
IcuPlaceholder.prototype.visit = function(visitor, context) {
return visitor.visitIcuPlaceholder(this, context);
};
return IcuPlaceholder;
}();
var HtmlTagDefinition = function() {
function HtmlTagDefinition(_a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
this.closedByChildren = {};
this.closedByParent = false;
this.canSelfClose = false;
if (closedByChildren && closedByChildren.length > 0) {
closedByChildren.forEach(function(tagName) {
return _this.closedByChildren[tagName] = true;
});
}
this.isVoid = isVoid;
this.closedByParent = closedByParent || isVoid;
if (requiredParents && requiredParents.length > 0) {
this.requiredParents = {};
this.parentToAdd = requiredParents[0];
requiredParents.forEach(function(tagName) {
return _this.requiredParents[tagName] = true;
});
}
this.implicitNamespacePrefix = implicitNamespacePrefix;
this.contentType = contentType;
this.ignoreFirstLf = ignoreFirstLf;
}
HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
if (!this.requiredParents) {
return false;
}
if (!currentParent) {
return true;
}
var lcParent = currentParent.toLowerCase();
return this.requiredParents[lcParent] != true && lcParent != "template";
};
HtmlTagDefinition.prototype.isClosedByChild = function(name) {
return this.isVoid || name.toLowerCase() in this.closedByChildren;
};
return HtmlTagDefinition;
}();
var TAG_DEFINITIONS = {
base: new HtmlTagDefinition({
isVoid: true
}),
meta: new HtmlTagDefinition({
isVoid: true
}),
area: new HtmlTagDefinition({
isVoid: true
}),
embed: new HtmlTagDefinition({
isVoid: true
}),
link: new HtmlTagDefinition({
isVoid: true
}),
img: new HtmlTagDefinition({
isVoid: true
}),
input: new HtmlTagDefinition({
isVoid: true
}),
param: new HtmlTagDefinition({
isVoid: true
}),
hr: new HtmlTagDefinition({
isVoid: true
}),
br: new HtmlTagDefinition({
isVoid: true
}),
source: new HtmlTagDefinition({
isVoid: true
}),
track: new HtmlTagDefinition({
isVoid: true
}),
wbr: new HtmlTagDefinition({
isVoid: true
}),
p: new HtmlTagDefinition({
closedByChildren: [ "address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul" ],
closedByParent: true
}),
thead: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ]
}),
tbody: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ],
closedByParent: true
}),
tfoot: new HtmlTagDefinition({
closedByChildren: [ "tbody" ],
closedByParent: true
}),
tr: new HtmlTagDefinition({
closedByChildren: [ "tr" ],
requiredParents: [ "tbody", "tfoot", "thead" ],
closedByParent: true
}),
td: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
th: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
col: new HtmlTagDefinition({
requiredParents: [ "colgroup" ],
isVoid: true
}),
svg: new HtmlTagDefinition({
implicitNamespacePrefix: "svg"
}),
math: new HtmlTagDefinition({
implicitNamespacePrefix: "math"
}),
li: new HtmlTagDefinition({
closedByChildren: [ "li" ],
closedByParent: true
}),
dt: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ]
}),
dd: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ],
closedByParent: true
}),
rb: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rt: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rtc: new HtmlTagDefinition({
closedByChildren: [ "rb", "rtc", "rp" ],
closedByParent: true
}),
rp: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
optgroup: new HtmlTagDefinition({
closedByChildren: [ "optgroup" ],
closedByParent: true
}),
option: new HtmlTagDefinition({
closedByChildren: [ "option", "optgroup" ],
closedByParent: true
}),
pre: new HtmlTagDefinition({
ignoreFirstLf: true
}),
listing: new HtmlTagDefinition({
ignoreFirstLf: true
}),
style: new HtmlTagDefinition({
contentType: TagContentType.RAW_TEXT
}),
script: new HtmlTagDefinition({
contentType: TagContentType.RAW_TEXT
}),
title: new HtmlTagDefinition({
contentType: TagContentType.ESCAPABLE_RAW_TEXT
}),
textarea: new HtmlTagDefinition({
contentType: TagContentType.ESCAPABLE_RAW_TEXT,
ignoreFirstLf: true
})
};
var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
function getHtmlTagDefinition(tagName) {
return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
}
var TAG_TO_PLACEHOLDER_NAMES = {
A: "LINK",
B: "BOLD_TEXT",
BR: "LINE_BREAK",
EM: "EMPHASISED_TEXT",
H1: "HEADING_LEVEL1",
H2: "HEADING_LEVEL2",
H3: "HEADING_LEVEL3",
H4: "HEADING_LEVEL4",
H5: "HEADING_LEVEL5",
H6: "HEADING_LEVEL6",
HR: "HORIZONTAL_RULE",
I: "ITALIC_TEXT",
LI: "LIST_ITEM",
LINK: "MEDIA_LINK",
OL: "ORDERED_LIST",
P: "PARAGRAPH",
Q: "QUOTATION",
S: "STRIKETHROUGH_TEXT",
SMALL: "SMALL_TEXT",
SUB: "SUBSTRIPT",
SUP: "SUPERSCRIPT",
TBODY: "TABLE_BODY",
TD: "TABLE_CELL",
TFOOT: "TABLE_FOOTER",
TH: "TABLE_HEADER_CELL",
THEAD: "TABLE_HEADER",
TR: "TABLE_ROW",
TT: "MONOSPACED_TEXT",
U: "UNDERLINED_TEXT",
UL: "UNORDERED_LIST"
};
var PlaceholderRegistry = function() {
function PlaceholderRegistry() {
this._placeHolderNameCounts = {};
this._signatureToName = {};
}
PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
var signature = this._hashTag(tag, attrs, isVoid);
if (this._signatureToName[signature]) {
return this._signatureToName[signature];
}
var upperTag = tag.toUpperCase();
var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
this._signatureToName[signature] = name;
return name;
};
PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
var signature = this._hashClosingTag(tag);
if (this._signatureToName[signature]) {
return this._signatureToName[signature];
}
var upperTag = tag.toUpperCase();
var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
var name = this._generateUniqueName("CLOSE_" + baseName);
this._signatureToName[signature] = name;
return name;
};
PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
var upperName = name.toUpperCase();
var signature = "PH: " + upperName + "=" + content;
if (this._signatureToName[signature]) {
return this._signatureToName[signature];
}
var uniqueName = this._generateUniqueName(upperName);
this._signatureToName[signature] = uniqueName;
return uniqueName;
};
PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
var start = "<" + tag;
var strAttrs = Object.keys(attrs).sort().map(function(name) {
return " " + name + "=" + attrs[name];
}).join("");
var end = isVoid ? "/>" : "></" + tag + ">";
return start + strAttrs + end;
};
PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
return this._hashTag("/" + tag, {}, false);
};
PlaceholderRegistry.prototype._generateUniqueName = function(base) {
var name = base;
var next = this._placeHolderNameCounts[name];
if (!next) {
next = 1;
} else {
name += "_" + next;
next++;
}
this._placeHolderNameCounts[base] = next;
return name;
};
return PlaceholderRegistry;
}();
var _expParser = new Parser(new Lexer());
function createI18nMessageFactory(interpolationConfig) {
var visitor = new _I18nVisitor(_expParser, interpolationConfig);
return function(nodes, meaning, description) {
return visitor.toI18nMessage(nodes, meaning, description);
};
}
var _I18nVisitor = function() {
function _I18nVisitor(_expressionParser, _interpolationConfig) {
this._expressionParser = _expressionParser;
this._interpolationConfig = _interpolationConfig;
}
_I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description) {
this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
this._icuDepth = 0;
this._placeholderRegistry = new PlaceholderRegistry();
this._placeholderToContent = {};
this._placeholderToIds = {};
var i18nodes = visitAll(this, nodes, {});
return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
};
_I18nVisitor.prototype.visitElement = function(el, context) {
var children = visitAll(this, el.children);
var attrs = {};
el.attrs.forEach(function(attr) {
attrs[attr.name] = attr.value;
});
var isVoid = getHtmlTagDefinition(el.name).isVoid;
var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
this._placeholderToContent[startPhName] = el.sourceSpan.toString();
var closePhName = "";
if (!isVoid) {
closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
this._placeholderToContent[closePhName] = "</" + el.name + ">";
}
return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
};
_I18nVisitor.prototype.visitAttribute = function(attribute, context) {
return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
};
_I18nVisitor.prototype.visitText = function(text, context) {
return this._visitTextWithInterpolation(text.value, text.sourceSpan);
};
_I18nVisitor.prototype.visitComment = function(comment, context) {
return null;
};
_I18nVisitor.prototype.visitExpansion = function(icu, context) {
var _this = this;
this._icuDepth++;
var i18nIcuCases = {};
var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
icu.cases.forEach(function(caze) {
i18nIcuCases[caze.value] = new Container(caze.expression.map(function(node) {
return node.visit(_this, {});
}), caze.expSourceSpan);
});
this._icuDepth--;
if (this._isIcu || this._icuDepth > 0) {
return i18nIcu;
}
var phName = this._placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([ icu ], "", ""));
return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
};
_I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
throw new Error("Unreachable code");
};
_I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
if (!splitInterpolation) {
return new Text$1(text, sourceSpan);
}
var nodes = [];
var container = new Container(nodes, sourceSpan);
var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
var expression = splitInterpolation.expressions[i];
var baseName = _extractPlaceholderName(expression) || "INTERPOLATION";
var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
if (splitInterpolation.strings[i].length) {
nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
}
nodes.push(new Placeholder(expression, phName, sourceSpan));
this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
}
var lastStringIdx = splitInterpolation.strings.length - 1;
if (splitInterpolation.strings[lastStringIdx].length) {
nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
}
return container;
};
return _I18nVisitor;
}();
var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
function _extractPlaceholderName(input) {
return input.split(_CUSTOM_PH_EXP)[1];
}
var __extends$4 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var I18nError = function(_super) {
__extends$4(I18nError, _super);
function I18nError(span, msg) {
_super.call(this, span, msg);
}
return I18nError;
}(ParseError);
var _I18N_ATTR = "i18n";
var _I18N_ATTR_PREFIX = "i18n-";
var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
var visitor = new _Visitor(implicitTags, implicitAttrs);
return visitor.extract(nodes, interpolationConfig);
}
function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
var visitor = new _Visitor(implicitTags, implicitAttrs);
return visitor.merge(nodes, translations, interpolationConfig);
}
var ExtractionResult = function() {
function ExtractionResult(messages, errors) {
this.messages = messages;
this.errors = errors;
}
return ExtractionResult;
}();
var _VisitorMode;
(function(_VisitorMode) {
_VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
_VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
})(_VisitorMode || (_VisitorMode = {}));
var _Visitor = function() {
function _Visitor(_implicitTags, _implicitAttrs) {
this._implicitTags = _implicitTags;
this._implicitAttrs = _implicitAttrs;
}
_Visitor.prototype.extract = function(nodes, interpolationConfig) {
var _this = this;
this._init(_VisitorMode.Extract, interpolationConfig);
nodes.forEach(function(node) {
return node.visit(_this, null);
});
if (this._inI18nBlock) {
this._reportError(nodes[nodes.length - 1], "Unclosed block");
}
return new ExtractionResult(this._messages, this._errors);
};
_Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
this._init(_VisitorMode.Merge, interpolationConfig);
this._translations = translations;
var wrapper = new Element("wrapper", [], nodes, null, null, null);
var translatedNode = wrapper.visit(this, null);
if (this._inI18nBlock) {
this._reportError(nodes[nodes.length - 1], "Unclosed block");
}
return new ParseTreeResult(translatedNode.children, this._errors);
};
_Visitor.prototype.visitExpansionCase = function(icuCase, context) {
var expression = visitAll(this, icuCase.expression, context);
if (this._mode === _VisitorMode.Merge) {
return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
}
};
_Visitor.prototype.visitExpansion = function(icu, context) {
this._mayBeAddBlockChildren(icu);
var wasInIcu = this._inIcu;
if (!this._inIcu) {
if (this._isInTranslatableSection) {
this._addMessage([ icu ]);
}
this._inIcu = true;
}
var cases = visitAll(this, icu.cases, context);
if (this._mode === _VisitorMode.Merge) {
icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
}
this._inIcu = wasInIcu;
return icu;
};
_Visitor.prototype.visitComment = function(comment, context) {
var isOpening = _isOpeningComment(comment);
if (isOpening && this._isInTranslatableSection) {
this._reportError(comment, "Could not start a block inside a translatable section");
return;
}
var isClosing = _isClosingComment(comment);
if (isClosing && !this._inI18nBlock) {
this._reportError(comment, "Trying to close an unopened block");
return;
}
if (!this._inI18nNode && !this._inIcu) {
if (!this._inI18nBlock) {
if (isOpening) {
this._inI18nBlock = true;
this._blockStartDepth = this._depth;
this._blockChildren = [];
this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, "").trim();
this._openTranslatableSection(comment);
}
} else {
if (isClosing) {
if (this._depth == this._blockStartDepth) {
this._closeTranslatableSection(comment, this._blockChildren);
this._inI18nBlock = false;
var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
var nodes = this._translateMessage(comment, message);
return visitAll(this, nodes);
} else {
this._reportError(comment, "I18N blocks should not cross element boundaries");
return;
}
}
}
}
};
_Visitor.prototype.visitText = function(text, context) {
if (this._isInTranslatableSection) {
this._mayBeAddBlockChildren(text);
}
return text;
};
_Visitor.prototype.visitElement = function(el, context) {
var _this = this;
this._mayBeAddBlockChildren(el);
this._depth++;
var wasInI18nNode = this._inI18nNode;
var wasInImplicitNode = this._inImplicitNode;
var childNodes;
var i18nAttr = _getI18nAttr(el);
var isImplicit = this._implicitTags.some(function(tag) {
return el.name === tag;
}) && !this._inIcu && !this._isInTranslatableSection;
var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
this._inImplicitNode = this._inImplicitNode || isImplicit;
if (!this._isInTranslatableSection && !this._inIcu) {
if (i18nAttr) {
this._inI18nNode = true;
var message = this._addMessage(el.children, i18nAttr.value);
childNodes = this._translateMessage(el, message);
} else if (isTopLevelImplicit) {
this._inI18nNode = true;
var message = this._addMessage(el.children);
childNodes = this._translateMessage(el, message);
}
if (this._mode == _VisitorMode.Extract) {
var isTranslatable = i18nAttr || isTopLevelImplicit;
if (isTranslatable) {
this._openTranslatableSection(el);
}
visitAll(this, el.children);
if (isTranslatable) {
this._closeTranslatableSection(el, el.children);
}
}
if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
childNodes = [];
el.children.forEach(function(child) {
var visited = child.visit(_this, context);
if (visited && !_this._isInTranslatableSection) {
childNodes = childNodes.concat(visited);
}
});
}
} else {
if (i18nAttr || isTopLevelImplicit) {
this._reportError(el, "Could not mark an element as translatable inside a translatable section");
}
if (this._mode == _VisitorMode.Extract) {
visitAll(this, el.children);
}
if (this._mode == _VisitorMode.Merge) {
childNodes = [];
el.children.forEach(function(child) {
var visited = child.visit(_this, context);
if (visited && !_this._isInTranslatableSection) {
childNodes = childNodes.concat(visited);
}
});
}
}
this._visitAttributesOf(el);
this._depth--;
this._inI18nNode = wasInI18nNode;
this._inImplicitNode = wasInImplicitNode;
if (this._mode === _VisitorMode.Merge) {
var translatedAttrs = this._translateAttributes(el);
return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
}
};
_Visitor.prototype.visitAttribute = function(attribute, context) {
throw new Error("unreachable code");
};
_Visitor.prototype._init = function(mode, interpolationConfig) {
this._mode = mode;
this._inI18nBlock = false;
this._inI18nNode = false;
this._depth = 0;
this._inIcu = false;
this._msgCountAtSectionStart = void 0;
this._errors = [];
this._messages = [];
this._inImplicitNode = false;
this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
};
_Visitor.prototype._visitAttributesOf = function(el) {
var _this = this;
var explicitAttrNameToValue = {};
var implicitAttrNames = this._implicitAttrs[el.name] || [];
el.attrs.filter(function(attr) {
return attr.name.startsWith(_I18N_ATTR_PREFIX);
}).forEach(function(attr) {
return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
});
el.attrs.forEach(function(attr) {
if (attr.name in explicitAttrNameToValue) {
_this._addMessage([ attr ], explicitAttrNameToValue[attr.name]);
} else if (implicitAttrNames.some(function(name) {
return attr.name === name;
})) {
_this._addMessage([ attr ]);
}
});
};
_Visitor.prototype._addMessage = function(ast, meaningAndDesc) {
if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
return;
}
var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];
var message = this._createI18nMessage(ast, meaning, description);
this._messages.push(message);
return message;
};
_Visitor.prototype._translateMessage = function(el, message) {
if (message && this._mode === _VisitorMode.Merge) {
var id = digestMessage(message);
var nodes = this._translations.get(id);
if (nodes) {
return nodes;
}
this._reportError(el, 'Translation unavailable for message id="' + id + '"');
}
return [];
};
_Visitor.prototype._translateAttributes = function(el) {
var _this = this;
var attributes = el.attrs;
var i18nAttributeMeanings = {};
attributes.forEach(function(attr) {
if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
}
});
var translatedAttributes = [];
attributes.forEach(function(attr) {
if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
return;
}
if (attr.value && attr.value != "" && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
var meaning = i18nAttributeMeanings[attr.name];
var message = _this._createI18nMessage([ attr ], meaning, "");
var id = digestMessage(message);
var nodes = _this._translations.get(id);
if (nodes) {
if (nodes[0] instanceof Text) {
var value = nodes[0].value;
translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
} else {
_this._reportError(el, 'Unexpected translation for attribute "' + attr.name + '" (id="' + id + '")');
}
} else {
_this._reportError(el, 'Translation unavailable for attribute "' + attr.name + '" (id="' + id + '")');
}
} else {
translatedAttributes.push(attr);
}
});
return translatedAttributes;
};
_Visitor.prototype._mayBeAddBlockChildren = function(node) {
if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
this._blockChildren.push(node);
}
};
_Visitor.prototype._openTranslatableSection = function(node) {
if (this._isInTranslatableSection) {
this._reportError(node, "Unexpected section start");
} else {
this._msgCountAtSectionStart = this._messages.length;
}
};
Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
get: function() {
return this._msgCountAtSectionStart !== void 0;
},
enumerable: true,
configurable: true
});
_Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
if (!this._isInTranslatableSection) {
this._reportError(node, "Unexpected section end");
return;
}
var startIndex = this._msgCountAtSectionStart;
var significantChildren = directChildren.reduce(function(count, node) {
return count + (node instanceof Comment ? 0 : 1);
}, 0);
if (significantChildren == 1) {
for (var i = this._messages.length - 1; i >= startIndex; i--) {
var ast = this._messages[i].nodes;
if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
this._messages.splice(i, 1);
break;
}
}
}
this._msgCountAtSectionStart = void 0;
};
_Visitor.prototype._reportError = function(node, msg) {
this._errors.push(new I18nError(node.sourceSpan, msg));
};
return _Visitor;
}();
function _isOpeningComment(n) {
return n instanceof Comment && n.value && n.value.startsWith("i18n");
}
function _isClosingComment(n) {
return n instanceof Comment && n.value && n.value === "/i18n";
}
function _getI18nAttr(p) {
return p.attrs.find(function(attr) {
return attr.name === _I18N_ATTR;
}) || null;
}
function _splitMeaningAndDesc(i18n) {
if (!i18n) return [ "", "" ];
var pipeIndex = i18n.indexOf("|");
return pipeIndex == -1 ? [ "", i18n ] : [ i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1) ];
}
var MessageBundle = function() {
function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
this._htmlParser = _htmlParser;
this._implicitTags = _implicitTags;
this._implicitAttrs = _implicitAttrs;
this._messageMap = {};
}
MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
var _this = this;
var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
if (htmlParserResult.errors.length) {
return htmlParserResult.errors;
}
var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
if (i18nParserResult.errors.length) {
return i18nParserResult.errors;
}
i18nParserResult.messages.forEach(function(message) {
_this._messageMap[digestMessage(message)] = message;
});
};
MessageBundle.prototype.getMessageMap = function() {
return this._messageMap;
};
MessageBundle.prototype.write = function(serializer) {
return serializer.write(this._messageMap);
};
return MessageBundle;
}();
var XmlTagDefinition = function() {
function XmlTagDefinition() {
this.closedByParent = false;
this.contentType = TagContentType.PARSABLE_DATA;
this.isVoid = false;
this.ignoreFirstLf = false;
this.canSelfClose = true;
}
XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
return false;
};
XmlTagDefinition.prototype.isClosedByChild = function(name) {
return false;
};
return XmlTagDefinition;
}();
var _TAG_DEFINITION = new XmlTagDefinition();
function getXmlTagDefinition(tagName) {
return _TAG_DEFINITION;
}
var __extends$5 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var XmlParser = function(_super) {
__extends$5(XmlParser, _super);
function XmlParser() {
_super.call(this, getXmlTagDefinition);
}
XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
};
return XmlParser;
}(Parser$1);
function extractPlaceholders(messageBundle) {
var messageMap = messageBundle.getMessageMap();
var placeholders = {};
Object.keys(messageMap).forEach(function(msgId) {
placeholders[msgId] = messageMap[msgId].placeholders;
});
return placeholders;
}
function extractPlaceholderToIds(messageBundle) {
var messageMap = messageBundle.getMessageMap();
var placeholderToIds = {};
Object.keys(messageMap).forEach(function(msgId) {
placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
});
return placeholderToIds;
}
var __extends$6 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _Visitor$1 = function() {
function _Visitor() {}
_Visitor.prototype.visitTag = function(tag) {
var _this = this;
var strAttrs = this._serializeAttributes(tag.attrs);
if (tag.children.length == 0) {
return "<" + tag.name + strAttrs + "/>";
}
var strChildren = tag.children.map(function(node) {
return node.visit(_this);
});
return "<" + tag.name + strAttrs + ">" + strChildren.join("") + "</" + tag.name + ">";
};
_Visitor.prototype.visitText = function(text) {
return text.value;
};
_Visitor.prototype.visitDeclaration = function(decl) {
return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
};
_Visitor.prototype._serializeAttributes = function(attrs) {
var strAttrs = Object.keys(attrs).map(function(name) {
return name + '="' + attrs[name] + '"';
}).join(" ");
return strAttrs.length > 0 ? " " + strAttrs : "";
};
_Visitor.prototype.visitDoctype = function(doctype) {
return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
};
return _Visitor;
}();
var _visitor = new _Visitor$1();
function serialize(nodes) {
return nodes.map(function(node) {
return node.visit(_visitor);
}).join("");
}
var Declaration = function() {
function Declaration(unescapedAttrs) {
var _this = this;
this.attrs = {};
Object.keys(unescapedAttrs).forEach(function(k) {
_this.attrs[k] = _escapeXml(unescapedAttrs[k]);
});
}
Declaration.prototype.visit = function(visitor) {
return visitor.visitDeclaration(this);
};
return Declaration;
}();
var Doctype = function() {
function Doctype(rootTag, dtd) {
this.rootTag = rootTag;
this.dtd = dtd;
}
Doctype.prototype.visit = function(visitor) {
return visitor.visitDoctype(this);
};
return Doctype;
}();
var Tag = function() {
function Tag(name, unescapedAttrs, children) {
var _this = this;
if (unescapedAttrs === void 0) {
unescapedAttrs = {};
}
if (children === void 0) {
children = [];
}
this.name = name;
this.children = children;
this.attrs = {};
Object.keys(unescapedAttrs).forEach(function(k) {
_this.attrs[k] = _escapeXml(unescapedAttrs[k]);
});
}
Tag.prototype.visit = function(visitor) {
return visitor.visitTag(this);
};
return Tag;
}();
var Text$2 = function() {
function Text(unescapedValue) {
this.value = _escapeXml(unescapedValue);
}
Text.prototype.visit = function(visitor) {
return visitor.visitText(this);
};
return Text;
}();
var CR = function(_super) {
__extends$6(CR, _super);
function CR(ws) {
if (ws === void 0) {
ws = 0;
}
_super.call(this, "\n" + new Array(ws + 1).join(" "));
}
return CR;
}(Text$2);
var _ESCAPED_CHARS = [ [ /&/g, "&amp;" ], [ /"/g, "&quot;" ], [ /'/g, "&apos;" ], [ /</g, "&lt;" ], [ />/g, "&gt;" ] ];
function _escapeXml(text) {
return _ESCAPED_CHARS.reduce(function(text, entry) {
return text.replace(entry[0], entry[1]);
}, text);
}
var _VERSION = "1.2";
var _XMLNS = "urn:oasis:names:tc:xliff:document:1.2";
var _SOURCE_LANG = "en";
var _PLACEHOLDER_TAG = "x";
var _SOURCE_TAG = "source";
var _TARGET_TAG = "target";
var _UNIT_TAG = "trans-unit";
var Xliff = function() {
function Xliff(_htmlParser, _interpolationConfig) {
this._htmlParser = _htmlParser;
this._interpolationConfig = _interpolationConfig;
}
Xliff.prototype.write = function(messageMap) {
var visitor = new _WriteVisitor();
var transUnits = [];
Object.keys(messageMap).forEach(function(id) {
var message = messageMap[id];
var transUnit = new Tag(_UNIT_TAG, {
id: id,
datatype: "html"
});
transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
if (message.description) {
transUnit.children.push(new CR(8), new Tag("note", {
priority: "1",
from: "description"
}, [ new Text$2(message.description) ]));
}
if (message.meaning) {
transUnit.children.push(new CR(8), new Tag("note", {
priority: "1",
from: "meaning"
}, [ new Text$2(message.meaning) ]));
}
transUnit.children.push(new CR(6));
transUnits.push(new CR(6), transUnit);
});
var body = new Tag("body", {}, transUnits.concat([ new CR(4) ]));
var file = new Tag("file", {
"source-language": _SOURCE_LANG,
datatype: "plaintext",
original: "ng2.template"
}, [ new CR(4), body, new CR(2) ]);
var xliff = new Tag("xliff", {
version: _VERSION,
xmlns: _XMLNS
}, [ new CR(2), file, new CR() ]);
return serialize([ new Declaration({
version: "1.0",
encoding: "UTF-8"
}), new CR(), xliff, new CR() ]);
};
Xliff.prototype.load = function(content, url, messageBundle) {
var _this = this;
var result = new XmlParser().parse(content, url);
if (result.errors.length) {
throw new Error("xtb parse errors:\n" + result.errors.join("\n"));
}
var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;
if (errors.length) {
throw new Error("xtb parse errors:\n" + errors.join("\n"));
}
var messageMap = {};
var parseErrors = [];
Object.keys(messages).forEach(function(id) {
var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
parseErrors.push.apply(parseErrors, res.errors);
messageMap[id] = res.rootNodes;
});
if (parseErrors.length) {
throw new Error("xtb parse errors:\n" + parseErrors.join("\n"));
}
return messageMap;
};
return Xliff;
}();
var _WriteVisitor = function() {
function _WriteVisitor() {}
_WriteVisitor.prototype.visitText = function(text, context) {
return [ new Text$2(text.value) ];
};
_WriteVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
var nodes = [];
container.children.forEach(function(node) {
return nodes.push.apply(nodes, node.visit(_this));
});
return nodes;
};
_WriteVisitor.prototype.visitIcu = function(icu, context) {
if (this._isInIcu) {
throw new Error("xliff does not support nested ICU messages");
}
this._isInIcu = true;
var nodes = [];
this._isInIcu = false;
return nodes;
};
_WriteVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var ctype = getCtypeForTag(ph.tag);
var startTagPh = new Tag(_PLACEHOLDER_TAG, {
id: ph.startName,
ctype: ctype
});
if (ph.isVoid) {
return [ startTagPh ];
}
var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
id: ph.closeName,
ctype: ctype
});
return [ startTagPh ].concat(this.serialize(ph.children), [ closeTagPh ]);
};
_WriteVisitor.prototype.visitPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG, {
id: ph.name
}) ];
};
_WriteVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG, {
id: ph.name
}) ];
};
_WriteVisitor.prototype.serialize = function(nodes) {
var _this = this;
this._isInIcu = false;
return (_a = []).concat.apply(_a, nodes.map(function(node) {
return node.visit(_this);
}));
var _a;
};
return _WriteVisitor;
}();
var _LoadVisitor = function() {
function _LoadVisitor() {}
_LoadVisitor.prototype.parse = function(nodes, messageBundle) {
var _this = this;
this._messageNodes = [];
this._translatedMessages = {};
this._msgId = "";
this._target = [];
this._errors = [];
visitAll(this, nodes, null);
var messageMap = messageBundle.getMessageMap();
var placeholders = extractPlaceholders(messageBundle);
var placeholderToIds = extractPlaceholderToIds(messageBundle);
this._messageNodes.filter(function(message) {
return messageMap.hasOwnProperty(message[0]);
}).sort(function(a, b) {
if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
return -1;
}
if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
return 1;
}
return 0;
}).forEach(function(message) {
var id = message[0];
_this._placeholders = placeholders[id] || {};
_this._placeholderToIds = placeholderToIds[id] || {};
_this._translatedMessages[id] = visitAll(_this, message[1]).join("");
});
return {
messages: this._translatedMessages,
errors: this._errors
};
};
_LoadVisitor.prototype.visitElement = function(element, context) {
switch (element.name) {
case _UNIT_TAG:
this._target = null;
var msgId = element.attrs.find(function(attr) {
return attr.name === "id";
});
if (!msgId) {
this._addError(element, "<" + _UNIT_TAG + '> misses the "id" attribute');
} else {
this._msgId = msgId.value;
}
visitAll(this, element.children, null);
if (this._msgId !== null) {
this._messageNodes.push([ this._msgId, this._target ]);
}
break;

case _SOURCE_TAG:
break;

case _TARGET_TAG:
this._target = element.children;
break;

case _PLACEHOLDER_TAG:
var idAttr = element.attrs.find(function(attr) {
return attr.name === "id";
});
if (!idAttr) {
this._addError(element, "<" + _PLACEHOLDER_TAG + '> misses the "id" attribute');
} else {
var id = idAttr.value;
if (this._placeholders.hasOwnProperty(id)) {
return this._placeholders[id];
}
if (this._placeholderToIds.hasOwnProperty(id) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
return this._translatedMessages[this._placeholderToIds[id]];
}
this._addError(element, 'The placeholder "' + id + '" does not exists in the source message');
}
break;

default:
visitAll(this, element.children, null);
}
};
_LoadVisitor.prototype.visitAttribute = function(attribute, context) {
throw new Error("unreachable code");
};
_LoadVisitor.prototype.visitText = function(text, context) {
return text.value;
};
_LoadVisitor.prototype.visitComment = function(comment, context) {
return "";
};
_LoadVisitor.prototype.visitExpansion = function(expansion, context) {
throw new Error("unreachable code");
};
_LoadVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
throw new Error("unreachable code");
};
_LoadVisitor.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return _LoadVisitor;
}();
function getCtypeForTag(tag) {
switch (tag.toLowerCase()) {
case "br":
return "lb";

case "img":
return "image";

default:
return "x-" + tag;
}
}
var _MESSAGES_TAG = "messagebundle";
var _MESSAGE_TAG = "msg";
var _PLACEHOLDER_TAG$1 = "ph";
var _EXEMPLE_TAG = "ex";
var _DOCTYPE = '<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>';
var Xmb = function() {
function Xmb() {}
Xmb.prototype.write = function(messageMap) {
var visitor = new _Visitor$2();
var rootNode = new Tag(_MESSAGES_TAG);
Object.keys(messageMap).forEach(function(id) {
var message = messageMap[id];
var attrs = {
id: id
};
if (message.description) {
attrs["desc"] = message.description;
}
if (message.meaning) {
attrs["meaning"] = message.meaning;
}
rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
});
rootNode.children.push(new CR());
return serialize([ new Declaration({
version: "1.0",
encoding: "UTF-8"
}), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), rootNode, new CR() ]);
};
Xmb.prototype.load = function(content, url, messageBundle) {
throw new Error("Unsupported");
};
return Xmb;
}();
var _Visitor$2 = function() {
function _Visitor() {}
_Visitor.prototype.visitText = function(text, context) {
return [ new Text$2(text.value) ];
};
_Visitor.prototype.visitContainer = function(container, context) {
var _this = this;
var nodes = [];
container.children.forEach(function(node) {
return nodes.push.apply(nodes, node.visit(_this));
});
return nodes;
};
_Visitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var nodes = [ new Text$2("{" + icu.expression + ", " + icu.type + ", ") ];
Object.keys(icu.cases).forEach(function(c) {
nodes.push.apply(nodes, [ new Text$2(c + " {") ].concat(icu.cases[c].visit(_this), [ new Text$2("} ") ]));
});
nodes.push(new Text$2("}"));
return nodes;
};
_Visitor.prototype.visitTagPlaceholder = function(ph, context) {
var startEx = new Tag(_EXEMPLE_TAG, {}, [ new Text$2("<" + ph.tag + ">") ]);
var startTagPh = new Tag(_PLACEHOLDER_TAG$1, {
name: ph.startName
}, [ startEx ]);
if (ph.isVoid) {
return [ startTagPh ];
}
var closeEx = new Tag(_EXEMPLE_TAG, {}, [ new Text$2("</" + ph.tag + ">") ]);
var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, {
name: ph.closeName
}, [ closeEx ]);
return [ startTagPh ].concat(this.serialize(ph.children), [ closeTagPh ]);
};
_Visitor.prototype.visitPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG$1, {
name: ph.name
}) ];
};
_Visitor.prototype.visitIcuPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG$1, {
name: ph.name
}) ];
};
_Visitor.prototype.serialize = function(nodes) {
var _this = this;
return (_a = []).concat.apply(_a, nodes.map(function(node) {
return node.visit(_this);
}));
var _a;
};
return _Visitor;
}();
var _TRANSLATIONS_TAG = "translationbundle";
var _TRANSLATION_TAG = "translation";
var _PLACEHOLDER_TAG$2 = "ph";
var Xtb = function() {
function Xtb(_htmlParser, _interpolationConfig) {
this._htmlParser = _htmlParser;
this._interpolationConfig = _interpolationConfig;
}
Xtb.prototype.write = function(messageMap) {
throw new Error("Unsupported");
};
Xtb.prototype.load = function(content, url, messageBundle) {
var _this = this;
var result = new XmlParser().parse(content, url);
if (result.errors.length) {
throw new Error("xtb parse errors:\n" + result.errors.join("\n"));
}
var _a = new _Visitor$3().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;
if (errors.length) {
throw new Error("xtb parse errors:\n" + errors.join("\n"));
}
var messageMap = {};
var parseErrors = [];
Object.keys(messages).forEach(function(id) {
var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
parseErrors.push.apply(parseErrors, res.errors);
messageMap[id] = res.rootNodes;
});
if (parseErrors.length) {
throw new Error("xtb parse errors:\n" + parseErrors.join("\n"));
}
return messageMap;
};
return Xtb;
}();
var _Visitor$3 = function() {
function _Visitor() {}
_Visitor.prototype.parse = function(nodes, messageBundle) {
var _this = this;
this._messageNodes = [];
this._translatedMessages = {};
this._bundleDepth = 0;
this._translationDepth = 0;
this._errors = [];
visitAll(this, nodes, null);
var messageMap = messageBundle.getMessageMap();
var placeholders = extractPlaceholders(messageBundle);
var placeholderToIds = extractPlaceholderToIds(messageBundle);
this._messageNodes.filter(function(message) {
return messageMap.hasOwnProperty(message[0]);
}).sort(function(a, b) {
if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
return -1;
}
if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
return 1;
}
return 0;
}).forEach(function(message) {
var id = message[0];
_this._placeholders = placeholders[id] || {};
_this._placeholderToIds = placeholderToIds[id] || {};
_this._translatedMessages[id] = visitAll(_this, message[1]).join("");
});
return {
messages: this._translatedMessages,
errors: this._errors
};
};
_Visitor.prototype.visitElement = function(element, context) {
switch (element.name) {
case _TRANSLATIONS_TAG:
this._bundleDepth++;
if (this._bundleDepth > 1) {
this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
}
visitAll(this, element.children, null);
this._bundleDepth--;
break;

case _TRANSLATION_TAG:
this._translationDepth++;
if (this._translationDepth > 1) {
this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
}
var idAttr = element.attrs.find(function(attr) {
return attr.name === "id";
});
if (!idAttr) {
this._addError(element, "<" + _TRANSLATION_TAG + '> misses the "id" attribute');
} else {
this._messageNodes.push([ idAttr.value, element.children ]);
}
this._translationDepth--;
break;

case _PLACEHOLDER_TAG$2:
var nameAttr = element.attrs.find(function(attr) {
return attr.name === "name";
});
if (!nameAttr) {
this._addError(element, "<" + _PLACEHOLDER_TAG$2 + '> misses the "name" attribute');
} else {
var name_1 = nameAttr.value;
if (this._placeholders.hasOwnProperty(name_1)) {
return this._placeholders[name_1];
}
if (this._placeholderToIds.hasOwnProperty(name_1) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
return this._translatedMessages[this._placeholderToIds[name_1]];
}
this._addError(element, 'The placeholder "' + name_1 + '" does not exists in the source message');
}
break;

default:
this._addError(element, "Unexpected tag");
}
};
_Visitor.prototype.visitAttribute = function(attribute, context) {
throw new Error("unreachable code");
};
_Visitor.prototype.visitText = function(text, context) {
return text.value;
};
_Visitor.prototype.visitComment = function(comment, context) {
return "";
};
_Visitor.prototype.visitExpansion = function(expansion, context) {
var _this = this;
var strCases = expansion.cases.map(function(c) {
return c.visit(_this, null);
});
return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
};
_Visitor.prototype.visitExpansionCase = function(expansionCase, context) {
return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
};
_Visitor.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return _Visitor;
}();
var TranslationBundle = function() {
function TranslationBundle(_messageMap) {
if (_messageMap === void 0) {
_messageMap = {};
}
this._messageMap = _messageMap;
}
TranslationBundle.load = function(content, url, messageBundle, serializer) {
return new TranslationBundle(serializer.load(content, url, messageBundle));
};
TranslationBundle.prototype.get = function(id) {
return this._messageMap[id];
};
TranslationBundle.prototype.has = function(id) {
return id in this._messageMap;
};
return TranslationBundle;
}();
var I18NHtmlParser = function() {
function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
this._htmlParser = _htmlParser;
this._translations = _translations;
this._translationsFormat = _translationsFormat;
}
I18NHtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
if (!this._translations || this._translations === "") {
return parseResult;
}
var messageBundle = new MessageBundle(this._htmlParser, [], {});
var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
if (errors && errors.length) {
return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
}
var serializer = this._createSerializer(interpolationConfig);
var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
};
I18NHtmlParser.prototype._createSerializer = function(interpolationConfig) {
var format = (this._translationsFormat || "xlf").toLowerCase();
switch (format) {
case "xmb":
return new Xmb();

case "xtb":
return new Xtb(this._htmlParser, interpolationConfig);

case "xliff":
case "xlf":
default:
return new Xliff(this._htmlParser, interpolationConfig);
}
};
return I18NHtmlParser;
}();
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
var k = _a[_i];
m[k] = m1[k];
}
for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
var k = _c[_b];
m[k] = m2[k];
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
for (var i = 0; i < k1.length; i++) {
var key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
if (index > -1) {
list.splice(index, 1);
}
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.flatten = function(list) {
return list.reduce(function(flat, item) {
var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
return flat.concat(flatItem);
}, []);
};
return ListWrapper;
}();
var _SELECTOR_REGEXP = new RegExp("(\\:not\\()|" + "([-\\w]+)|" + "(?:\\.([-\\w]+))|" + "(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|" + "(\\))|" + "(\\s*,\\s*)", "g");
var CssSelector = function() {
function CssSelector() {
this.element = null;
this.classNames = [];
this.attrs = [];
this.notSelectors = [];
}
CssSelector.parse = function(selector) {
var results = [];
var _addResult = function(res, cssSel) {
if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
cssSel.element = "*";
}
res.push(cssSel);
};
var cssSelector = new CssSelector();
var match;
var current = cssSelector;
var inNot = false;
_SELECTOR_REGEXP.lastIndex = 0;
while (match = _SELECTOR_REGEXP.exec(selector)) {
if (match[1]) {
if (inNot) {
throw new Error("Nesting :not is not allowed in a selector");
}
inNot = true;
current = new CssSelector();
cssSelector.notSelectors.push(current);
}
if (match[2]) {
current.setElement(match[2]);
}
if (match[3]) {
current.addClassName(match[3]);
}
if (match[4]) {
current.addAttribute(match[4], match[5]);
}
if (match[6]) {
inNot = false;
current = cssSelector;
}
if (match[7]) {
if (inNot) {
throw new Error("Multiple selectors in :not are not supported");
}
_addResult(results, cssSelector);
cssSelector = current = new CssSelector();
}
}
_addResult(results, cssSelector);
return results;
};
CssSelector.prototype.isElementSelector = function() {
return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
};
CssSelector.prototype.hasElementSelector = function() {
return !!this.element;
};
CssSelector.prototype.setElement = function(element) {
if (element === void 0) {
element = null;
}
this.element = element;
};
CssSelector.prototype.getMatchingElementTemplate = function() {
var tagName = this.element || "div";
var classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "";
var attrs = "";
for (var i = 0; i < this.attrs.length; i += 2) {
var attrName = this.attrs[i];
var attrValue = this.attrs[i + 1] !== "" ? '="' + this.attrs[i + 1] + '"' : "";
attrs += " " + attrName + attrValue;
}
return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
};
CssSelector.prototype.addAttribute = function(name, value) {
if (value === void 0) {
value = "";
}
this.attrs.push(name, value && value.toLowerCase() || "");
};
CssSelector.prototype.addClassName = function(name) {
this.classNames.push(name.toLowerCase());
};
CssSelector.prototype.toString = function() {
var res = this.element || "";
if (this.classNames) {
this.classNames.forEach(function(klass) {
return res += "." + klass;
});
}
if (this.attrs) {
for (var i = 0; i < this.attrs.length; i += 2) {
var name_1 = this.attrs[i];
var value = this.attrs[i + 1];
res += "[" + name_1 + (value ? "=" + value : "") + "]";
}
}
this.notSelectors.forEach(function(notSelector) {
return res += ":not(" + notSelector + ")";
});
return res;
};
return CssSelector;
}();
var SelectorMatcher = function() {
function SelectorMatcher() {
this._elementMap = new Map();
this._elementPartialMap = new Map();
this._classMap = new Map();
this._classPartialMap = new Map();
this._attrValueMap = new Map();
this._attrValuePartialMap = new Map();
this._listContexts = [];
}
SelectorMatcher.createNotMatcher = function(notSelectors) {
var notMatcher = new SelectorMatcher();
notMatcher.addSelectables(notSelectors, null);
return notMatcher;
};
SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
var listContext = null;
if (cssSelectors.length > 1) {
listContext = new SelectorListContext(cssSelectors);
this._listContexts.push(listContext);
}
for (var i = 0; i < cssSelectors.length; i++) {
this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
}
};
SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
var matcher = this;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
if (element) {
var isTerminal = attrs.length === 0 && classNames.length === 0;
if (isTerminal) {
this._addTerminal(matcher._elementMap, element, selectable);
} else {
matcher = this._addPartial(matcher._elementPartialMap, element);
}
}
if (classNames) {
for (var i = 0; i < classNames.length; i++) {
var isTerminal = attrs.length === 0 && i === classNames.length - 1;
var className = classNames[i];
if (isTerminal) {
this._addTerminal(matcher._classMap, className, selectable);
} else {
matcher = this._addPartial(matcher._classPartialMap, className);
}
}
}
if (attrs) {
for (var i = 0; i < attrs.length; i += 2) {
var isTerminal = i === attrs.length - 2;
var name_2 = attrs[i];
var value = attrs[i + 1];
if (isTerminal) {
var terminalMap = matcher._attrValueMap;
var terminalValuesMap = terminalMap.get(name_2);
if (!terminalValuesMap) {
terminalValuesMap = new Map();
terminalMap.set(name_2, terminalValuesMap);
}
this._addTerminal(terminalValuesMap, value, selectable);
} else {
var partialMap = matcher._attrValuePartialMap;
var partialValuesMap = partialMap.get(name_2);
if (!partialValuesMap) {
partialValuesMap = new Map();
partialMap.set(name_2, partialValuesMap);
}
matcher = this._addPartial(partialValuesMap, value);
}
}
}
};
SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
var terminalList = map.get(name);
if (!terminalList) {
terminalList = [];
map.set(name, terminalList);
}
terminalList.push(selectable);
};
SelectorMatcher.prototype._addPartial = function(map, name) {
var matcher = map.get(name);
if (!matcher) {
matcher = new SelectorMatcher();
map.set(name, matcher);
}
return matcher;
};
SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
var result = false;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
for (var i = 0; i < this._listContexts.length; i++) {
this._listContexts[i].alreadyMatched = false;
}
result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
if (classNames) {
for (var i = 0; i < classNames.length; i++) {
var className = classNames[i];
result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
}
}
if (attrs) {
for (var i = 0; i < attrs.length; i += 2) {
var name_3 = attrs[i];
var value = attrs[i + 1];
var terminalValuesMap = this._attrValueMap.get(name_3);
if (value) {
result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result;
}
result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
var partialValuesMap = this._attrValuePartialMap.get(name_3);
if (value) {
result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result;
}
result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
}
}
return result;
};
SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
if (!map || typeof name !== "string") {
return false;
}
var selectables = map.get(name);
var starSelectables = map.get("*");
if (starSelectables) {
selectables = selectables.concat(starSelectables);
}
if (!selectables) {
return false;
}
var selectable;
var result = false;
for (var i = 0; i < selectables.length; i++) {
selectable = selectables[i];
result = selectable.finalize(cssSelector, matchedCallback) || result;
}
return result;
};
SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
if (!map || typeof name !== "string") {
return false;
}
var nestedSelector = map.get(name);
if (!nestedSelector) {
return false;
}
return nestedSelector.match(cssSelector, matchedCallback);
};
return SelectorMatcher;
}();
var SelectorListContext = function() {
function SelectorListContext(selectors) {
this.selectors = selectors;
this.alreadyMatched = false;
}
return SelectorListContext;
}();
var SelectorContext = function() {
function SelectorContext(selector, cbContext, listContext) {
this.selector = selector;
this.cbContext = cbContext;
this.listContext = listContext;
this.notSelectors = selector.notSelectors;
}
SelectorContext.prototype.finalize = function(cssSelector, callback) {
var result = true;
if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
result = !notMatcher.match(cssSelector, null);
}
if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
if (this.listContext) {
this.listContext.alreadyMatched = true;
}
callback(this.selector, this.cbContext);
}
return result;
};
return SelectorContext;
}();
var MODULE_SUFFIX = "";
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input) {
return input.replace(DASH_CASE_REGEXP, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
return m[1].toUpperCase();
});
}
function splitAtColon(input, defaultValues) {
return _splitAt(input, ":", defaultValues);
}
function splitAtPeriod(input, defaultValues) {
return _splitAt(input, ".", defaultValues);
}
function _splitAt(input, character, defaultValues) {
var characterIndex = input.indexOf(character);
if (characterIndex == -1) return defaultValues;
return [ input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim() ];
}
function sanitizeIdentifier(name) {
return name.replace(/\W/g, "_");
}
function visitValue(value, visitor, context) {
if (Array.isArray(value)) {
return visitor.visitArray(value, context);
}
if (isStrictStringMap(value)) {
return visitor.visitStringMap(value, context);
}
if (isBlank(value) || isPrimitive(value)) {
return visitor.visitPrimitive(value, context);
}
return visitor.visitOther(value, context);
}
var ValueTransformer = function() {
function ValueTransformer() {}
ValueTransformer.prototype.visitArray = function(arr, context) {
var _this = this;
return arr.map(function(value) {
return visitValue(value, _this, context);
});
};
ValueTransformer.prototype.visitStringMap = function(map, context) {
var _this = this;
var result = {};
Object.keys(map).forEach(function(key) {
result[key] = visitValue(map[key], _this, context);
});
return result;
};
ValueTransformer.prototype.visitPrimitive = function(value, context) {
return value;
};
ValueTransformer.prototype.visitOther = function(value, context) {
return value;
};
return ValueTransformer;
}();
var SyncAsyncResult = function() {
function SyncAsyncResult(syncResult, asyncResult) {
if (asyncResult === void 0) {
asyncResult = null;
}
this.syncResult = syncResult;
this.asyncResult = asyncResult;
if (!asyncResult) {
this.asyncResult = Promise.resolve(syncResult);
}
}
return SyncAsyncResult;
}();
var __extends$7 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function unimplemented() {
throw new Error("unimplemented");
}
var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
var CompileMetadataWithIdentifier = function() {
function CompileMetadataWithIdentifier() {}
Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return CompileMetadataWithIdentifier;
}();
var CompileAnimationEntryMetadata = function() {
function CompileAnimationEntryMetadata(name, definitions) {
if (name === void 0) {
name = null;
}
if (definitions === void 0) {
definitions = null;
}
this.name = name;
this.definitions = definitions;
}
return CompileAnimationEntryMetadata;
}();
var CompileAnimationStateMetadata = function() {
function CompileAnimationStateMetadata() {}
return CompileAnimationStateMetadata;
}();
var CompileAnimationStateDeclarationMetadata = function(_super) {
__extends$7(CompileAnimationStateDeclarationMetadata, _super);
function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
_super.call(this);
this.stateNameExpr = stateNameExpr;
this.styles = styles;
}
return CompileAnimationStateDeclarationMetadata;
}(CompileAnimationStateMetadata);
var CompileAnimationStateTransitionMetadata = function(_super) {
__extends$7(CompileAnimationStateTransitionMetadata, _super);
function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
_super.call(this);
this.stateChangeExpr = stateChangeExpr;
this.steps = steps;
}
return CompileAnimationStateTransitionMetadata;
}(CompileAnimationStateMetadata);
var CompileAnimationMetadata = function() {
function CompileAnimationMetadata() {}
return CompileAnimationMetadata;
}();
var CompileAnimationKeyframesSequenceMetadata = function(_super) {
__extends$7(CompileAnimationKeyframesSequenceMetadata, _super);
function CompileAnimationKeyframesSequenceMetadata(steps) {
if (steps === void 0) {
steps = [];
}
_super.call(this);
this.steps = steps;
}
return CompileAnimationKeyframesSequenceMetadata;
}(CompileAnimationMetadata);
var CompileAnimationStyleMetadata = function(_super) {
__extends$7(CompileAnimationStyleMetadata, _super);
function CompileAnimationStyleMetadata(offset, styles) {
if (styles === void 0) {
styles = null;
}
_super.call(this);
this.offset = offset;
this.styles = styles;
}
return CompileAnimationStyleMetadata;
}(CompileAnimationMetadata);
var CompileAnimationAnimateMetadata = function(_super) {
__extends$7(CompileAnimationAnimateMetadata, _super);
function CompileAnimationAnimateMetadata(timings, styles) {
if (timings === void 0) {
timings = 0;
}
if (styles === void 0) {
styles = null;
}
_super.call(this);
this.timings = timings;
this.styles = styles;
}
return CompileAnimationAnimateMetadata;
}(CompileAnimationMetadata);
var CompileAnimationWithStepsMetadata = function(_super) {
__extends$7(CompileAnimationWithStepsMetadata, _super);
function CompileAnimationWithStepsMetadata(steps) {
if (steps === void 0) {
steps = null;
}
_super.call(this);
this.steps = steps;
}
return CompileAnimationWithStepsMetadata;
}(CompileAnimationMetadata);
var CompileAnimationSequenceMetadata = function(_super) {
__extends$7(CompileAnimationSequenceMetadata, _super);
function CompileAnimationSequenceMetadata(steps) {
if (steps === void 0) {
steps = null;
}
_super.call(this, steps);
}
return CompileAnimationSequenceMetadata;
}(CompileAnimationWithStepsMetadata);
var CompileAnimationGroupMetadata = function(_super) {
__extends$7(CompileAnimationGroupMetadata, _super);
function CompileAnimationGroupMetadata(steps) {
if (steps === void 0) {
steps = null;
}
_super.call(this, steps);
}
return CompileAnimationGroupMetadata;
}(CompileAnimationWithStepsMetadata);
var CompileIdentifierMetadata = function() {
function CompileIdentifierMetadata(_a) {
var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, value = _b.value;
this.reference = reference;
this.name = name;
this.prefix = prefix;
this.moduleUrl = moduleUrl;
this.value = value;
}
Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
return CompileIdentifierMetadata;
}();
var CompileDiDependencyMetadata = function() {
function CompileDiDependencyMetadata(_a) {
var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, isValue = _b.isValue, token = _b.token, value = _b.value;
this.isAttribute = !!isAttribute;
this.isSelf = !!isSelf;
this.isHost = !!isHost;
this.isSkipSelf = !!isSkipSelf;
this.isOptional = !!isOptional;
this.isValue = !!isValue;
this.token = token;
this.value = value;
}
return CompileDiDependencyMetadata;
}();
var CompileProviderMetadata = function() {
function CompileProviderMetadata(_a) {
var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory;
this.deps = deps || null;
this.multi = !!multi;
}
return CompileProviderMetadata;
}();
var CompileFactoryMetadata = function(_super) {
__extends$7(CompileFactoryMetadata, _super);
function CompileFactoryMetadata(_a) {
var reference = _a.reference, name = _a.name, moduleUrl = _a.moduleUrl, prefix = _a.prefix, diDeps = _a.diDeps, value = _a.value;
_super.call(this, {
reference: reference,
name: name,
prefix: prefix,
moduleUrl: moduleUrl,
value: value
});
this.diDeps = _normalizeArray(diDeps);
}
return CompileFactoryMetadata;
}(CompileIdentifierMetadata);
var CompileTokenMetadata = function() {
function CompileTokenMetadata(_a) {
var value = _a.value, identifier = _a.identifier, identifierIsInstance = _a.identifierIsInstance;
this.value = value;
this.identifier = identifier;
this.identifierIsInstance = !!identifierIsInstance;
}
Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
get: function() {
if (isPresent(this.identifier)) {
return this.identifier.reference;
} else {
return this.value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompileTokenMetadata.prototype, "name", {
get: function() {
return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
},
enumerable: true,
configurable: true
});
return CompileTokenMetadata;
}();
var CompileTypeMetadata = function(_super) {
__extends$7(CompileTypeMetadata, _super);
function CompileTypeMetadata(_a) {
var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, value = _b.value, diDeps = _b.diDeps, lifecycleHooks = _b.lifecycleHooks;
_super.call(this, {
reference: reference,
name: name,
moduleUrl: moduleUrl,
prefix: prefix,
value: value
});
this.isHost = !!isHost;
this.diDeps = _normalizeArray(diDeps);
this.lifecycleHooks = _normalizeArray(lifecycleHooks);
}
return CompileTypeMetadata;
}(CompileIdentifierMetadata);
var CompileQueryMetadata = function() {
function CompileQueryMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName, read = _b.read;
this.selectors = selectors;
this.descendants = !!descendants;
this.first = !!first;
this.propertyName = propertyName;
this.read = read;
}
return CompileQueryMetadata;
}();
var CompileStylesheetMetadata = function() {
function CompileStylesheetMetadata(_a) {
var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
this.moduleUrl = moduleUrl;
this.styles = _normalizeArray(styles);
this.styleUrls = _normalizeArray(styleUrls);
}
return CompileStylesheetMetadata;
}();
var CompileTemplateMetadata = function() {
function CompileTemplateMetadata(_a) {
var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
this.encapsulation = encapsulation;
this.template = template;
this.templateUrl = templateUrl;
this.styles = _normalizeArray(styles);
this.styleUrls = _normalizeArray(styleUrls);
this.externalStylesheets = _normalizeArray(externalStylesheets);
this.animations = animations ? ListWrapper.flatten(animations) : [];
this.ngContentSelectors = ngContentSelectors || [];
if (interpolation && interpolation.length != 2) {
throw new Error("'interpolation' should have a start and an end symbol.");
}
this.interpolation = interpolation;
}
CompileTemplateMetadata.prototype.toSummary = function() {
return {
isSummary: true,
animations: this.animations.map(function(anim) {
return anim.name;
}),
ngContentSelectors: this.ngContentSelectors,
encapsulation: this.encapsulation
};
};
return CompileTemplateMetadata;
}();
var CompileDirectiveMetadata = function() {
function CompileDirectiveMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
this.type = type;
this.isComponent = isComponent;
this.selector = selector;
this.exportAs = exportAs;
this.changeDetection = changeDetection;
this.inputs = inputs;
this.outputs = outputs;
this.hostListeners = hostListeners;
this.hostProperties = hostProperties;
this.hostAttributes = hostAttributes;
this.providers = _normalizeArray(providers);
this.viewProviders = _normalizeArray(viewProviders);
this.queries = _normalizeArray(queries);
this.viewQueries = _normalizeArray(viewQueries);
this.entryComponents = _normalizeArray(entryComponents);
this.template = template;
}
CompileDirectiveMetadata.create = function(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
var hostListeners = {};
var hostProperties = {};
var hostAttributes = {};
if (isPresent(host)) {
Object.keys(host).forEach(function(key) {
var value = host[key];
var matches = key.match(HOST_REG_EXP);
if (matches === null) {
hostAttributes[key] = value;
} else if (isPresent(matches[1])) {
hostProperties[matches[1]] = value;
} else if (isPresent(matches[2])) {
hostListeners[matches[2]] = value;
}
});
}
var inputsMap = {};
if (isPresent(inputs)) {
inputs.forEach(function(bindConfig) {
var parts = splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
inputsMap[parts[0]] = parts[1];
});
}
var outputsMap = {};
if (isPresent(outputs)) {
outputs.forEach(function(bindConfig) {
var parts = splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
outputsMap[parts[0]] = parts[1];
});
}
return new CompileDirectiveMetadata({
type: type,
isComponent: !!isComponent,
selector: selector,
exportAs: exportAs,
changeDetection: changeDetection,
inputs: inputsMap,
outputs: outputsMap,
hostListeners: hostListeners,
hostProperties: hostProperties,
hostAttributes: hostAttributes,
providers: providers,
viewProviders: viewProviders,
queries: queries,
viewQueries: viewQueries,
entryComponents: entryComponents,
template: template
});
};
Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompileDirectiveMetadata.prototype.toSummary = function() {
return {
isSummary: true,
type: this.type,
isComponent: this.isComponent,
selector: this.selector,
exportAs: this.exportAs,
inputs: this.inputs,
outputs: this.outputs,
hostListeners: this.hostListeners,
hostProperties: this.hostProperties,
hostAttributes: this.hostAttributes,
providers: this.providers,
viewProviders: this.viewProviders,
queries: this.queries,
entryComponents: this.entryComponents,
changeDetection: this.changeDetection,
template: this.template && this.template.toSummary()
};
};
return CompileDirectiveMetadata;
}();
function createHostComponentMeta(compMeta) {
var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
return CompileDirectiveMetadata.create({
type: new CompileTypeMetadata({
reference: Object,
name: compMeta.type.name + "_Host",
moduleUrl: compMeta.type.moduleUrl,
isHost: true
}),
template: new CompileTemplateMetadata({
encapsulation: _angular_core.ViewEncapsulation.None,
template: template,
templateUrl: "",
styles: [],
styleUrls: [],
ngContentSelectors: [],
animations: []
}),
changeDetection: _angular_core.ChangeDetectionStrategy.Default,
inputs: [],
outputs: [],
host: {},
isComponent: true,
selector: "*",
providers: [],
viewProviders: [],
queries: [],
viewQueries: []
});
}
var CompilePipeMetadata = function() {
function CompilePipeMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
this.type = type;
this.name = name;
this.pure = !!pure;
}
Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompilePipeMetadata.prototype.toSummary = function() {
return {
isSummary: true,
type: this.type,
name: this.name,
pure: this.pure
};
};
return CompilePipeMetadata;
}();
var CompileNgModuleMetadata = function() {
function CompileNgModuleMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
this.type = type;
this.declaredDirectives = _normalizeArray(declaredDirectives);
this.exportedDirectives = _normalizeArray(exportedDirectives);
this.declaredPipes = _normalizeArray(declaredPipes);
this.exportedPipes = _normalizeArray(exportedPipes);
this.providers = _normalizeArray(providers);
this.entryComponents = _normalizeArray(entryComponents);
this.bootstrapComponents = _normalizeArray(bootstrapComponents);
this.importedModules = _normalizeArray(importedModules);
this.exportedModules = _normalizeArray(exportedModules);
this.schemas = _normalizeArray(schemas);
this.id = id;
this.transitiveModule = transitiveModule;
}
Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompileNgModuleMetadata.prototype.toSummary = function() {
return {
isSummary: true,
type: this.type,
entryComponents: this.entryComponents,
providers: this.providers,
importedModules: this.importedModules,
exportedModules: this.exportedModules,
exportedDirectives: this.exportedDirectives,
exportedPipes: this.exportedPipes,
directiveLoaders: this.transitiveModule.directiveLoaders
};
};
CompileNgModuleMetadata.prototype.toInjectorSummary = function() {
return {
isSummary: true,
type: this.type,
entryComponents: this.entryComponents,
providers: this.providers,
importedModules: this.importedModules,
exportedModules: this.exportedModules
};
};
CompileNgModuleMetadata.prototype.toDirectiveSummary = function() {
return {
isSummary: true,
type: this.type,
exportedDirectives: this.exportedDirectives,
exportedPipes: this.exportedPipes,
exportedModules: this.exportedModules,
directiveLoaders: this.transitiveModule.directiveLoaders
};
};
return CompileNgModuleMetadata;
}();
var TransitiveCompileNgModuleMetadata = function() {
function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes, directiveLoaders) {
var _this = this;
this.modules = modules;
this.providers = providers;
this.entryComponents = entryComponents;
this.directives = directives;
this.pipes = pipes;
this.directiveLoaders = directiveLoaders;
this.directivesSet = new Set();
this.pipesSet = new Set();
directives.forEach(function(dir) {
return _this.directivesSet.add(dir.reference);
});
pipes.forEach(function(pipe) {
return _this.pipesSet.add(pipe.reference);
});
}
return TransitiveCompileNgModuleMetadata;
}();
function removeIdentifierDuplicates(items) {
var map = new Map();
items.forEach(function(item) {
if (!map.get(item.identifier.reference)) {
map.set(item.identifier.reference, item);
}
});
return Array.from(map.values());
}
function _normalizeArray(obj) {
return obj || [];
}
function isStaticSymbol(value) {
return typeof value === "object" && value !== null && value["name"] && value["filePath"];
}
var ProviderMeta = function() {
function ProviderMeta(token, _a) {
var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory;
this.dependencies = deps;
this.multi = !!multi;
}
return ProviderMeta;
}();
var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
var ViewContainer = _angular_core.__core_private__.ViewContainer;
var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
var ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
var AppView = _angular_core.__core_private__.AppView;
var DebugAppView = _angular_core.__core_private__.DebugAppView;
var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
var registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
var ViewType = _angular_core.__core_private__.ViewType;
var view_utils = _angular_core.__core_private__.view_utils;
var DebugContext = _angular_core.__core_private__.DebugContext;
var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
var devModeEqual = _angular_core.__core_private__.devModeEqual;
var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
var Console = _angular_core.__core_private__.Console;
var reflector = _angular_core.__core_private__.reflector;
var Reflector = _angular_core.__core_private__.Reflector;
var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;
var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
var clearStyles = _angular_core.__core_private__.clearStyles;
var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
var renderStyles = _angular_core.__core_private__.renderStyles;
var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
var AnimationTransition = _angular_core.__core_private__.AnimationTransition;
var APP_VIEW_MODULE_URL = assetUrl("core", "linker/view");
var VIEW_UTILS_MODULE_URL = assetUrl("core", "linker/view_utils");
var CD_MODULE_URL = assetUrl("core", "change_detection/change_detection");
var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl("core", "animation/animation_style_util");
var Identifiers = function() {
function Identifiers() {}
Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
name: "ANALYZE_FOR_ENTRY_COMPONENTS",
moduleUrl: assetUrl("core", "metadata/di"),
runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
};
Identifiers.ViewUtils = {
name: "ViewUtils",
moduleUrl: assetUrl("core", "linker/view_utils"),
runtime: view_utils.ViewUtils
};
Identifiers.AppView = {
name: "AppView",
moduleUrl: APP_VIEW_MODULE_URL,
runtime: AppView
};
Identifiers.DebugAppView = {
name: "DebugAppView",
moduleUrl: APP_VIEW_MODULE_URL,
runtime: DebugAppView
};
Identifiers.ViewContainer = {
name: "ViewContainer",
moduleUrl: assetUrl("core", "linker/view_container"),
runtime: ViewContainer
};
Identifiers.ElementRef = {
name: "ElementRef",
moduleUrl: assetUrl("core", "linker/element_ref"),
runtime: _angular_core.ElementRef
};
Identifiers.ViewContainerRef = {
name: "ViewContainerRef",
moduleUrl: assetUrl("core", "linker/view_container_ref"),
runtime: _angular_core.ViewContainerRef
};
Identifiers.ChangeDetectorRef = {
name: "ChangeDetectorRef",
moduleUrl: assetUrl("core", "change_detection/change_detector_ref"),
runtime: _angular_core.ChangeDetectorRef
};
Identifiers.RenderComponentType = {
name: "RenderComponentType",
moduleUrl: assetUrl("core", "render/api"),
runtime: _angular_core.RenderComponentType
};
Identifiers.QueryList = {
name: "QueryList",
moduleUrl: assetUrl("core", "linker/query_list"),
runtime: _angular_core.QueryList
};
Identifiers.TemplateRef = {
name: "TemplateRef",
moduleUrl: assetUrl("core", "linker/template_ref"),
runtime: _angular_core.TemplateRef
};
Identifiers.TemplateRef_ = {
name: "TemplateRef_",
moduleUrl: assetUrl("core", "linker/template_ref"),
runtime: TemplateRef_
};
Identifiers.CodegenComponentFactoryResolver = {
name: "CodegenComponentFactoryResolver",
moduleUrl: assetUrl("core", "linker/component_factory_resolver"),
runtime: CodegenComponentFactoryResolver
};
Identifiers.ComponentFactoryResolver = {
name: "ComponentFactoryResolver",
moduleUrl: assetUrl("core", "linker/component_factory_resolver"),
runtime: _angular_core.ComponentFactoryResolver
};
Identifiers.ComponentFactory = {
name: "ComponentFactory",
runtime: _angular_core.ComponentFactory,
moduleUrl: assetUrl("core", "linker/component_factory")
};
Identifiers.ComponentRef_ = {
name: "ComponentRef_",
runtime: ComponentRef_,
moduleUrl: assetUrl("core", "linker/component_factory")
};
Identifiers.ComponentRef = {
name: "ComponentRef",
runtime: _angular_core.ComponentRef,
moduleUrl: assetUrl("core", "linker/component_factory")
};
Identifiers.NgModuleFactory = {
name: "NgModuleFactory",
runtime: _angular_core.NgModuleFactory,
moduleUrl: assetUrl("core", "linker/ng_module_factory")
};
Identifiers.NgModuleInjector = {
name: "NgModuleInjector",
runtime: NgModuleInjector,
moduleUrl: assetUrl("core", "linker/ng_module_factory")
};
Identifiers.RegisterModuleFactoryFn = {
name: "registerModuleFactory",
runtime: registerModuleFactory,
moduleUrl: assetUrl("core", "linker/ng_module_factory_loader")
};
Identifiers.ValueUnwrapper = {
name: "ValueUnwrapper",
moduleUrl: CD_MODULE_URL,
runtime: ValueUnwrapper
};
Identifiers.Injector = {
name: "Injector",
moduleUrl: assetUrl("core", "di/injector"),
runtime: _angular_core.Injector
};
Identifiers.ViewEncapsulation = {
name: "ViewEncapsulation",
moduleUrl: assetUrl("core", "metadata/view"),
runtime: _angular_core.ViewEncapsulation
};
Identifiers.ViewType = {
name: "ViewType",
moduleUrl: assetUrl("core", "linker/view_type"),
runtime: ViewType
};
Identifiers.ChangeDetectionStrategy = {
name: "ChangeDetectionStrategy",
moduleUrl: CD_MODULE_URL,
runtime: _angular_core.ChangeDetectionStrategy
};
Identifiers.StaticNodeDebugInfo = {
name: "StaticNodeDebugInfo",
moduleUrl: assetUrl("core", "linker/debug_context"),
runtime: StaticNodeDebugInfo
};
Identifiers.DebugContext = {
name: "DebugContext",
moduleUrl: assetUrl("core", "linker/debug_context"),
runtime: DebugContext
};
Identifiers.Renderer = {
name: "Renderer",
moduleUrl: assetUrl("core", "render/api"),
runtime: _angular_core.Renderer
};
Identifiers.SimpleChange = {
name: "SimpleChange",
moduleUrl: CD_MODULE_URL,
runtime: _angular_core.SimpleChange
};
Identifiers.UNINITIALIZED = {
name: "UNINITIALIZED",
moduleUrl: CD_MODULE_URL,
runtime: UNINITIALIZED
};
Identifiers.ChangeDetectorStatus = {
name: "ChangeDetectorStatus",
moduleUrl: CD_MODULE_URL,
runtime: ChangeDetectorStatus
};
Identifiers.checkBinding = {
name: "checkBinding",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.checkBinding
};
Identifiers.devModeEqual = {
name: "devModeEqual",
moduleUrl: CD_MODULE_URL,
runtime: devModeEqual
};
Identifiers.inlineInterpolate = {
name: "inlineInterpolate",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.inlineInterpolate
};
Identifiers.interpolate = {
name: "interpolate",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.interpolate
};
Identifiers.castByValue = {
name: "castByValue",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.castByValue
};
Identifiers.EMPTY_ARRAY = {
name: "EMPTY_ARRAY",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.EMPTY_ARRAY
};
Identifiers.EMPTY_MAP = {
name: "EMPTY_MAP",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.EMPTY_MAP
};
Identifiers.createRenderElement = {
name: "createRenderElement",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.createRenderElement
};
Identifiers.selectOrCreateRenderHostElement = {
name: "selectOrCreateRenderHostElement",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.selectOrCreateRenderHostElement
};
Identifiers.pureProxies = [ null, {
name: "pureProxy1",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy1
}, {
name: "pureProxy2",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy2
}, {
name: "pureProxy3",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy3
}, {
name: "pureProxy4",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy4
}, {
name: "pureProxy5",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy5
}, {
name: "pureProxy6",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy6
}, {
name: "pureProxy7",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy7
}, {
name: "pureProxy8",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy8
}, {
name: "pureProxy9",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy9
}, {
name: "pureProxy10",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.pureProxy10
} ];
Identifiers.SecurityContext = {
name: "SecurityContext",
moduleUrl: assetUrl("core", "security"),
runtime: _angular_core.SecurityContext
};
Identifiers.AnimationKeyframe = {
name: "AnimationKeyframe",
moduleUrl: assetUrl("core", "animation/animation_keyframe"),
runtime: AnimationKeyframe
};
Identifiers.AnimationStyles = {
name: "AnimationStyles",
moduleUrl: assetUrl("core", "animation/animation_styles"),
runtime: AnimationStyles
};
Identifiers.NoOpAnimationPlayer = {
name: "NoOpAnimationPlayer",
moduleUrl: assetUrl("core", "animation/animation_player"),
runtime: NoOpAnimationPlayer
};
Identifiers.AnimationGroupPlayer = {
name: "AnimationGroupPlayer",
moduleUrl: assetUrl("core", "animation/animation_group_player"),
runtime: AnimationGroupPlayer
};
Identifiers.AnimationSequencePlayer = {
name: "AnimationSequencePlayer",
moduleUrl: assetUrl("core", "animation/animation_sequence_player"),
runtime: AnimationSequencePlayer
};
Identifiers.prepareFinalAnimationStyles = {
name: "prepareFinalAnimationStyles",
moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
runtime: prepareFinalAnimationStyles
};
Identifiers.balanceAnimationKeyframes = {
name: "balanceAnimationKeyframes",
moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
runtime: balanceAnimationKeyframes
};
Identifiers.clearStyles = {
name: "clearStyles",
moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
runtime: clearStyles
};
Identifiers.renderStyles = {
name: "renderStyles",
moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
runtime: renderStyles
};
Identifiers.collectAndResolveStyles = {
name: "collectAndResolveStyles",
moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
runtime: collectAndResolveStyles
};
Identifiers.LOCALE_ID = {
name: "LOCALE_ID",
moduleUrl: assetUrl("core", "i18n/tokens"),
runtime: _angular_core.LOCALE_ID
};
Identifiers.TRANSLATIONS_FORMAT = {
name: "TRANSLATIONS_FORMAT",
moduleUrl: assetUrl("core", "i18n/tokens"),
runtime: _angular_core.TRANSLATIONS_FORMAT
};
Identifiers.setBindingDebugInfo = {
name: "setBindingDebugInfo",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.setBindingDebugInfo
};
Identifiers.setBindingDebugInfoForChanges = {
name: "setBindingDebugInfoForChanges",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.setBindingDebugInfoForChanges
};
Identifiers.AnimationTransition = {
name: "AnimationTransition",
moduleUrl: assetUrl("core", "animation/animation_transition"),
runtime: AnimationTransition
};
Identifiers.InlineArray = {
name: "InlineArray",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: null
};
Identifiers.inlineArrays = [ {
name: "InlineArray2",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.InlineArray2
}, {
name: "InlineArray2",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.InlineArray2
}, {
name: "InlineArray4",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.InlineArray4
}, {
name: "InlineArray8",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.InlineArray8
}, {
name: "InlineArray16",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.InlineArray16
} ];
Identifiers.EMPTY_INLINE_ARRAY = {
name: "EMPTY_INLINE_ARRAY",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.EMPTY_INLINE_ARRAY
};
Identifiers.InlineArrayDynamic = {
name: "InlineArrayDynamic",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.InlineArrayDynamic
};
Identifiers.subscribeToRenderElement = {
name: "subscribeToRenderElement",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.subscribeToRenderElement
};
Identifiers.createRenderComponentType = {
name: "createRenderComponentType",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.createRenderComponentType
};
Identifiers.noop = {
name: "noop",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: view_utils.noop
};
return Identifiers;
}();
function assetUrl(pkg, path, type) {
if (path === void 0) {
path = null;
}
if (type === void 0) {
type = "src";
}
if (path == null) {
return "asset:@angular/lib/" + pkg + "/index";
} else {
return "asset:@angular/lib/" + pkg + "/src/" + path;
}
}
function resolveIdentifier(identifier) {
return new CompileIdentifierMetadata({
name: identifier.name,
moduleUrl: identifier.moduleUrl,
reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
});
}
function identifierToken(identifier) {
return new CompileTokenMetadata({
identifier: identifier
});
}
function resolveIdentifierToken(identifier) {
return identifierToken(resolveIdentifier(identifier));
}
function resolveEnumIdentifier(enumType, name) {
var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
return new CompileIdentifierMetadata({
name: enumType.name + "." + name,
moduleUrl: enumType.moduleUrl,
reference: resolvedEnum
});
}
var __extends$8 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var HtmlParser = function(_super) {
__extends$8(HtmlParser, _super);
function HtmlParser() {
_super.call(this, getHtmlTagDefinition);
}
HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
};
HtmlParser.decorators = [ {
type: _angular_core.Injectable
} ];
HtmlParser.ctorParameters = [];
return HtmlParser;
}(Parser$1);
var __extends$9 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PLURAL_CASES = [ "zero", "one", "two", "few", "many", "other" ];
function expandNodes(nodes) {
var expander = new _Expander();
return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
}
var ExpansionResult = function() {
function ExpansionResult(nodes, expanded, errors) {
this.nodes = nodes;
this.expanded = expanded;
this.errors = errors;
}
return ExpansionResult;
}();
var ExpansionError = function(_super) {
__extends$9(ExpansionError, _super);
function ExpansionError(span, errorMsg) {
_super.call(this, span, errorMsg);
}
return ExpansionError;
}(ParseError);
var _Expander = function() {
function _Expander() {
this.isExpanded = false;
this.errors = [];
}
_Expander.prototype.visitElement = function(element, context) {
return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
};
_Expander.prototype.visitAttribute = function(attribute, context) {
return attribute;
};
_Expander.prototype.visitText = function(text, context) {
return text;
};
_Expander.prototype.visitComment = function(comment, context) {
return comment;
};
_Expander.prototype.visitExpansion = function(icu, context) {
this.isExpanded = true;
return icu.type == "plural" ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
};
_Expander.prototype.visitExpansionCase = function(icuCase, context) {
throw new Error("Should not be reached");
};
return _Expander;
}();
function _expandPluralForm(ast, errors) {
var children = ast.cases.map(function(c) {
if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
errors.push(new ExpansionError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", ")));
}
var expansionResult = expandNodes(c.expression);
errors.push.apply(errors, expansionResult.errors);
return new Element("template", [ new Attribute$1("ngPluralCase", "" + c.value, c.valueSourceSpan) ], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
});
var switchAttr = new Attribute$1("[ngPlural]", ast.switchValue, ast.switchValueSourceSpan);
return new Element("ng-container", [ switchAttr ], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
}
function _expandDefaultForm(ast, errors) {
var children = ast.cases.map(function(c) {
var expansionResult = expandNodes(c.expression);
errors.push.apply(errors, expansionResult.errors);
if (c.value === "other") {
return new Element("template", [ new Attribute$1("ngSwitchDefault", "", c.valueSourceSpan) ], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
}
return new Element("template", [ new Attribute$1("ngSwitchCase", "" + c.value, c.valueSourceSpan) ], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
});
var switchAttr = new Attribute$1("[ngSwitch]", ast.switchValue, ast.switchValueSourceSpan);
return new Element("ng-container", [ switchAttr ], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
}
var __extends$10 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ProviderError = function(_super) {
__extends$10(ProviderError, _super);
function ProviderError(message, span) {
_super.call(this, span, message);
}
return ProviderError;
}(ParseError);
var ProviderViewContext = function() {
function ProviderViewContext(component, sourceSpan) {
var _this = this;
this.component = component;
this.sourceSpan = sourceSpan;
this.errors = [];
this.viewQueries = _getViewQueries(component);
this.viewProviders = new Map();
_normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
if (isBlank(_this.viewProviders.get(provider.token.reference))) {
_this.viewProviders.set(provider.token.reference, true);
}
});
}
return ProviderViewContext;
}();
var ProviderElementContext = function() {
function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
var _this = this;
this.viewContext = viewContext;
this._parent = _parent;
this._isViewRoot = _isViewRoot;
this._directiveAsts = _directiveAsts;
this._sourceSpan = _sourceSpan;
this._transformedProviders = new Map();
this._seenProviders = new Map();
this._hasViewContainer = false;
this._attrs = {};
attrs.forEach(function(attrAst) {
return _this._attrs[attrAst.name] = attrAst.value;
});
var directivesMeta = _directiveAsts.map(function(directiveAst) {
return directiveAst.directive;
});
this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
this._contentQueries = _getContentQueries(directivesMeta);
var queriedTokens = new Map();
Array.from(this._allProviders.values()).forEach(function(provider) {
_this._addQueryReadsTo(provider.token, queriedTokens);
});
refs.forEach(function(refAst) {
_this._addQueryReadsTo(new CompileTokenMetadata({
value: refAst.name
}), queriedTokens);
});
if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
this._hasViewContainer = true;
}
Array.from(this._allProviders.values()).forEach(function(provider) {
var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
if (eager) {
_this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
}
});
}
ProviderElementContext.prototype.afterElement = function() {
var _this = this;
Array.from(this._allProviders.values()).forEach(function(provider) {
_this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
});
};
Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
get: function() {
return Array.from(this._transformedProviders.values());
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
get: function() {
var sortedProviderTypes = this.transformProviders.map(function(provider) {
return provider.token.identifier;
});
var sortedDirectives = this._directiveAsts.slice();
sortedDirectives.sort(function(dir1, dir2) {
return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
});
return sortedDirectives;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
get: function() {
return this._hasViewContainer;
},
enumerable: true,
configurable: true
});
ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
this._getQueriesFor(token).forEach(function(query) {
var queryReadToken = query.read || token;
if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
queryReadTokens.set(queryReadToken.reference, true);
}
});
};
ProviderElementContext.prototype._getQueriesFor = function(token) {
var result = [];
var currentEl = this;
var distance = 0;
var queries;
while (currentEl !== null) {
queries = currentEl._contentQueries.get(token.reference);
if (isPresent(queries)) {
result.push.apply(result, queries.filter(function(query) {
return query.descendants || distance <= 1;
}));
}
if (currentEl._directiveAsts.length > 0) {
distance++;
}
currentEl = currentEl._parent;
}
queries = this.viewContext.viewQueries.get(token.reference);
if (isPresent(queries)) {
result.push.apply(result, queries);
}
return result;
};
ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
var _this = this;
var resolvedProvider = this._allProviders.get(token.reference);
if (!resolvedProvider || (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService || (requestingProviderType === exports.ProviderAstType.PrivateService || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.Builtin) {
return null;
}
var transformedProviderAst = this._transformedProviders.get(token.reference);
if (isPresent(transformedProviderAst)) {
return transformedProviderAst;
}
if (isPresent(this._seenProviders.get(token.reference))) {
this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
return null;
}
this._seenProviders.set(token.reference, true);
var transformedProviders = resolvedProvider.providers.map(function(provider) {
var transformedUseValue = provider.useValue;
var transformedUseExisting = provider.useExisting;
var transformedDeps;
if (isPresent(provider.useExisting)) {
var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({
token: provider.useExisting
}), eager);
if (isPresent(existingDiDep.token)) {
transformedUseExisting = existingDiDep.token;
} else {
transformedUseExisting = null;
transformedUseValue = existingDiDep.value;
}
} else if (isPresent(provider.useFactory)) {
var deps = provider.deps || provider.useFactory.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep, eager);
});
} else if (isPresent(provider.useClass)) {
var deps = provider.deps || provider.useClass.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep, eager);
});
}
return _transformProvider(provider, {
useExisting: transformedUseExisting,
useValue: transformedUseValue,
deps: transformedDeps
});
});
transformedProviderAst = _transformProviderAst(resolvedProvider, {
eager: eager,
providers: transformedProviders
});
this._transformedProviders.set(token.reference, transformedProviderAst);
return transformedProviderAst;
};
ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
if (eager === void 0) {
eager = null;
}
if (dep.isAttribute) {
var attrValue = this._attrs[dep.token.value];
return new CompileDiDependencyMetadata({
isValue: true,
value: attrValue == null ? null : attrValue
});
}
if (isPresent(dep.token)) {
if (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.Component) {
if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
return dep;
}
if (dep.token.reference === resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
this._hasViewContainer = true;
}
}
if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
return dep;
}
if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
return dep;
}
}
return null;
};
ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
if (eager === void 0) {
eager = null;
}
var currElement = this;
var currEager = eager;
var result = null;
if (!dep.isSkipSelf) {
result = this._getLocalDependency(requestingProviderType, dep, eager);
}
if (dep.isSelf) {
if (!result && dep.isOptional) {
result = new CompileDiDependencyMetadata({
isValue: true,
value: null
});
}
} else {
while (!result && isPresent(currElement._parent)) {
var prevElement = currElement;
currElement = currElement._parent;
if (prevElement._isViewRoot) {
currEager = false;
}
result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
}
if (!result) {
if (!dep.isHost || this.viewContext.component.type.isHost || this.viewContext.component.type.reference === dep.token.reference || isPresent(this.viewContext.viewProviders.get(dep.token.reference))) {
result = dep;
} else {
result = dep.isOptional ? result = new CompileDiDependencyMetadata({
isValue: true,
value: null
}) : null;
}
}
}
if (!result) {
this.viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
}
return result;
};
return ProviderElementContext;
}();
var NgModuleProviderAnalyzer = function() {
function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
var _this = this;
this._transformedProviders = new Map();
this._seenProviders = new Map();
this._errors = [];
this._allProviders = new Map();
var ngModuleTypes = ngModule.transitiveModule.modules.map(function(moduleMeta) {
return moduleMeta.type;
});
ngModuleTypes.forEach(function(ngModuleType) {
var ngModuleProvider = new CompileProviderMetadata({
token: new CompileTokenMetadata({
identifier: ngModuleType
}),
useClass: ngModuleType
});
_resolveProviders([ ngModuleProvider ], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
});
_resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
}
NgModuleProviderAnalyzer.prototype.parse = function() {
var _this = this;
Array.from(this._allProviders.values()).forEach(function(provider) {
_this._getOrCreateLocalProvider(provider.token, provider.eager);
});
if (this._errors.length > 0) {
var errorString = this._errors.join("\n");
throw new Error("Provider parse errors:\n" + errorString);
}
return Array.from(this._transformedProviders.values());
};
NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
var _this = this;
var resolvedProvider = this._allProviders.get(token.reference);
if (!resolvedProvider) {
return null;
}
var transformedProviderAst = this._transformedProviders.get(token.reference);
if (isPresent(transformedProviderAst)) {
return transformedProviderAst;
}
if (isPresent(this._seenProviders.get(token.reference))) {
this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
return null;
}
this._seenProviders.set(token.reference, true);
var transformedProviders = resolvedProvider.providers.map(function(provider) {
var transformedUseValue = provider.useValue;
var transformedUseExisting = provider.useExisting;
var transformedDeps;
if (isPresent(provider.useExisting)) {
var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({
token: provider.useExisting
}), eager, resolvedProvider.sourceSpan);
if (isPresent(existingDiDep.token)) {
transformedUseExisting = existingDiDep.token;
} else {
transformedUseExisting = null;
transformedUseValue = existingDiDep.value;
}
} else if (isPresent(provider.useFactory)) {
var deps = provider.deps || provider.useFactory.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
});
} else if (isPresent(provider.useClass)) {
var deps = provider.deps || provider.useClass.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
});
}
return _transformProvider(provider, {
useExisting: transformedUseExisting,
useValue: transformedUseValue,
deps: transformedDeps
});
});
transformedProviderAst = _transformProviderAst(resolvedProvider, {
eager: eager,
providers: transformedProviders
});
this._transformedProviders.set(token.reference, transformedProviderAst);
return transformedProviderAst;
};
NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
if (eager === void 0) {
eager = null;
}
var foundLocal = false;
if (!dep.isSkipSelf && isPresent(dep.token)) {
if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
foundLocal = true;
} else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
foundLocal = true;
}
}
var result = dep;
if (dep.isSelf && !foundLocal) {
if (dep.isOptional) {
result = new CompileDiDependencyMetadata({
isValue: true,
value: null
});
} else {
this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
}
}
return result;
};
return NgModuleProviderAnalyzer;
}();
function _transformProvider(provider, _a) {
var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
return new CompileProviderMetadata({
token: provider.token,
useClass: provider.useClass,
useExisting: useExisting,
useFactory: provider.useFactory,
useValue: useValue,
deps: deps,
multi: provider.multi
});
}
function _transformProviderAst(provider, _a) {
var eager = _a.eager, providers = _a.providers;
return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
}
function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
if (targetProviders === void 0) {
targetProviders = null;
}
if (!targetProviders) {
targetProviders = [];
}
if (isPresent(providers)) {
providers.forEach(function(provider) {
if (Array.isArray(provider)) {
_normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
} else {
var normalizeProvider = void 0;
if (provider instanceof CompileProviderMetadata) {
normalizeProvider = provider;
} else if (provider instanceof CompileTypeMetadata) {
normalizeProvider = new CompileProviderMetadata({
token: new CompileTokenMetadata({
identifier: provider
}),
useClass: provider
});
} else {
targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
}
if (isPresent(normalizeProvider)) {
targetProviders.push(normalizeProvider);
}
}
});
}
return targetProviders;
}
function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
var providersByToken = new Map();
directives.forEach(function(directive) {
var dirProvider = new CompileProviderMetadata({
token: new CompileTokenMetadata({
identifier: directive.type
}),
useClass: directive.type
});
_resolveProviders([ dirProvider ], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
});
var directivesWithComponentFirst = directives.filter(function(dir) {
return dir.isComponent;
}).concat(directives.filter(function(dir) {
return !dir.isComponent;
}));
directivesWithComponentFirst.forEach(function(directive) {
_resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
_resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
});
return providersByToken;
}
function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
providers.forEach(function(provider) {
var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
}
if (!resolvedProvider) {
var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [ provider ], providerType, lifecycleHooks, sourceSpan);
targetProvidersByToken.set(provider.token.reference, resolvedProvider);
} else {
if (!provider.multi) {
resolvedProvider.providers.length = 0;
}
resolvedProvider.providers.push(provider);
}
});
}
function _getViewQueries(component) {
var viewQueries = new Map();
if (isPresent(component.viewQueries)) {
component.viewQueries.forEach(function(query) {
return _addQueryToTokenMap(viewQueries, query);
});
}
return viewQueries;
}
function _getContentQueries(directives) {
var contentQueries = new Map();
directives.forEach(function(directive) {
if (isPresent(directive.queries)) {
directive.queries.forEach(function(query) {
return _addQueryToTokenMap(contentQueries, query);
});
}
});
return contentQueries;
}
function _addQueryToTokenMap(map, query) {
query.selectors.forEach(function(token) {
var entry = map.get(token.reference);
if (!entry) {
entry = [];
map.set(token.reference, entry);
}
entry.push(query);
});
}
var ElementSchemaRegistry = function() {
function ElementSchemaRegistry() {}
return ElementSchemaRegistry;
}();
var StyleWithImports = function() {
function StyleWithImports(style, styleUrls) {
this.style = style;
this.styleUrls = styleUrls;
}
return StyleWithImports;
}();
function isStyleUrlResolvable(url) {
if (isBlank(url) || url.length === 0 || url[0] == "/") return false;
var schemeMatch = url.match(_urlWithSchemaRe);
return schemeMatch === null || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
}
function extractStyleUrls(resolver, baseUrl, cssText) {
var foundUrls = [];
var modifiedCssText = cssText.replace(_cssImportRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
var url = m[1] || m[2];
if (!isStyleUrlResolvable(url)) {
return m[0];
}
foundUrls.push(resolver.resolve(baseUrl, url));
return "";
});
return new StyleWithImports(modifiedCssText, foundUrls);
}
var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
var _urlWithSchemaRe = /^([^:\/?#]+):/;
var __extends$11 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PROPERTY_PARTS_SEPARATOR = ".";
var ATTRIBUTE_PREFIX = "attr";
var CLASS_PREFIX = "class";
var STYLE_PREFIX = "style";
var ANIMATE_PROP_PREFIX = "animate-";
var BoundPropertyType;
(function(BoundPropertyType) {
BoundPropertyType[BoundPropertyType["DEFAULT"] = 0] = "DEFAULT";
BoundPropertyType[BoundPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
BoundPropertyType[BoundPropertyType["ANIMATION"] = 2] = "ANIMATION";
})(BoundPropertyType || (BoundPropertyType = {}));
var BoundProperty = function() {
function BoundProperty(name, expression, type, sourceSpan) {
this.name = name;
this.expression = expression;
this.type = type;
this.sourceSpan = sourceSpan;
}
Object.defineProperty(BoundProperty.prototype, "isLiteral", {
get: function() {
return this.type === BoundPropertyType.LITERAL_ATTR;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BoundProperty.prototype, "isAnimation", {
get: function() {
return this.type === BoundPropertyType.ANIMATION;
},
enumerable: true,
configurable: true
});
return BoundProperty;
}();
var BindingParser = function() {
function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
var _this = this;
this._exprParser = _exprParser;
this._interpolationConfig = _interpolationConfig;
this._schemaRegistry = _schemaRegistry;
this._targetErrors = _targetErrors;
this.pipesByName = new Map();
pipes.forEach(function(pipe) {
return _this.pipesByName.set(pipe.name, pipe);
});
}
BindingParser.prototype.createDirectiveHostPropertyAsts = function(dirMeta, sourceSpan) {
var _this = this;
if (dirMeta.hostProperties) {
var boundProps_1 = [];
Object.keys(dirMeta.hostProperties).forEach(function(propName) {
var expression = dirMeta.hostProperties[propName];
if (typeof expression === "string") {
_this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
} else {
_this._reportError('Value of the host property binding "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan);
}
});
return boundProps_1.map(function(prop) {
return _this.createElementPropertyAst(dirMeta.selector, prop);
});
}
};
BindingParser.prototype.createDirectiveHostEventAsts = function(dirMeta, sourceSpan) {
var _this = this;
if (dirMeta.hostListeners) {
var targetEventAsts_1 = [];
Object.keys(dirMeta.hostListeners).forEach(function(propName) {
var expression = dirMeta.hostListeners[propName];
if (typeof expression === "string") {
_this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
} else {
_this._reportError('Value of the host listener "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan);
}
});
return targetEventAsts_1;
}
};
BindingParser.prototype.parseInterpolation = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
BindingParser.prototype.parseInlineTemplateBinding = function(name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
for (var i = 0; i < bindings.length; i++) {
var binding = bindings[i];
if (binding.keyIsVar) {
targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
} else if (isPresent(binding.expression)) {
this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
} else {
targetMatchableAttrs.push([ binding.key, "" ]);
this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
}
}
};
BindingParser.prototype._parseTemplateBindings = function(prefixToken, value, sourceSpan) {
var _this = this;
var sourceInfo = sourceSpan.start.toString();
try {
var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
bindingsResult.templateBindings.forEach(function(binding) {
if (isPresent(binding.expression)) {
_this._checkPipes(binding.expression, sourceSpan);
}
});
bindingsResult.warnings.forEach(function(warning) {
_this._reportError(warning, sourceSpan, exports.ParseErrorLevel.WARNING);
});
return bindingsResult.templateBindings;
} catch (e) {
this._reportError("" + e, sourceSpan);
return [];
}
};
BindingParser.prototype.parseLiteralAttr = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
if (_isAnimationLabel(name)) {
name = name.substring(1);
if (value) {
this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is invalid.' + ' Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.', sourceSpan, exports.ParseErrorLevel.FATAL);
}
this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
} else {
targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), BoundPropertyType.LITERAL_ATTR, sourceSpan));
}
};
BindingParser.prototype.parsePropertyBinding = function(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
var isAnimationProp = false;
if (name.startsWith(ANIMATE_PROP_PREFIX)) {
isAnimationProp = true;
name = name.substring(ANIMATE_PROP_PREFIX.length);
} else if (_isAnimationLabel(name)) {
isAnimationProp = true;
name = name.substring(1);
}
if (isAnimationProp) {
this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
} else {
this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
}
};
BindingParser.prototype.parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
var expr = this.parseInterpolation(value, sourceSpan);
if (isPresent(expr)) {
this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
return true;
}
return false;
};
BindingParser.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
targetMatchableAttrs.push([ name, ast.source ]);
targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
};
BindingParser.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
var ast = this._parseBinding(expression || "null", false, sourceSpan);
targetMatchableAttrs.push([ name, ast.source ]);
targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
};
BindingParser.prototype._parseBinding = function(value, isHostBinding, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
BindingParser.prototype.createElementPropertyAst = function(elementSelector, boundProp) {
if (boundProp.isAnimation) {
return new BoundElementPropertyAst(boundProp.name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
}
var unit = null;
var bindingType;
var boundPropertyName;
var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
var securityContexts;
if (parts.length === 1) {
var partValue = parts[0];
boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
bindingType = exports.PropertyBindingType.Property;
this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
} else {
if (parts[0] == ATTRIBUTE_PREFIX) {
boundPropertyName = parts[1];
this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
var nsSeparatorIdx = boundPropertyName.indexOf(":");
if (nsSeparatorIdx > -1) {
var ns = boundPropertyName.substring(0, nsSeparatorIdx);
var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
boundPropertyName = mergeNsAndName(ns, name_1);
}
bindingType = exports.PropertyBindingType.Attribute;
} else if (parts[0] == CLASS_PREFIX) {
boundPropertyName = parts[1];
bindingType = exports.PropertyBindingType.Class;
securityContexts = [ _angular_core.SecurityContext.NONE ];
} else if (parts[0] == STYLE_PREFIX) {
unit = parts.length > 2 ? parts[2] : null;
boundPropertyName = parts[1];
bindingType = exports.PropertyBindingType.Style;
securityContexts = [ _angular_core.SecurityContext.STYLE ];
} else {
this._reportError("Invalid property name '" + boundProp.name + "'", boundProp.sourceSpan);
bindingType = null;
securityContexts = [];
}
}
return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
};
BindingParser.prototype.parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
if (_isAnimationLabel(name)) {
name = name.substr(1);
this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
} else {
this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
}
};
BindingParser.prototype._parseAnimationEvent = function(name, expression, sourceSpan, targetEvents) {
var matches = splitAtPeriod(name, [ name, "" ]);
var eventName = matches[0];
var phase = matches[1].toLowerCase();
if (phase) {
switch (phase) {
case "start":
case "done":
var ast = this._parseAction(expression, sourceSpan);
targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
break;

default:
this._reportError('The provided animation output phase value "' + phase + '" for "@' + eventName + '" is not supported (use start or done)', sourceSpan);
break;
}
} else {
this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
}
};
BindingParser.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
var _a = splitAtColon(name, [ null, name ]), target = _a[0], eventName = _a[1];
var ast = this._parseAction(expression, sourceSpan);
targetMatchableAttrs.push([ name, ast.source ]);
targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
};
BindingParser.prototype._parseAction = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
if (ast) {
this._reportExpressionParserErrors(ast.errors, sourceSpan);
}
if (!ast || ast.ast instanceof EmptyExpr) {
this._reportError("Empty expressions are not allowed", sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
BindingParser.prototype._reportError = function(message, sourceSpan, level) {
if (level === void 0) {
level = exports.ParseErrorLevel.FATAL;
}
this._targetErrors.push(new ParseError(sourceSpan, message, level));
};
BindingParser.prototype._reportExpressionParserErrors = function(errors, sourceSpan) {
for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
var error = errors_1[_i];
this._reportError(error.message, sourceSpan);
}
};
BindingParser.prototype._checkPipes = function(ast, sourceSpan) {
var _this = this;
if (isPresent(ast)) {
var collector = new PipeCollector();
ast.visit(collector);
collector.pipes.forEach(function(pipeName) {
if (!_this.pipesByName.has(pipeName)) {
_this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
}
});
}
};
BindingParser.prototype._validatePropertyOrAttributeName = function(propName, sourceSpan, isAttr) {
var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
if (report.error) {
this._reportError(report.msg, sourceSpan, exports.ParseErrorLevel.FATAL);
}
};
return BindingParser;
}();
var PipeCollector = function(_super) {
__extends$11(PipeCollector, _super);
function PipeCollector() {
_super.apply(this, arguments);
this.pipes = new Set();
}
PipeCollector.prototype.visitPipe = function(ast, context) {
this.pipes.add(ast.name);
ast.exp.visit(this);
this.visitAll(ast.args, context);
return null;
};
return PipeCollector;
}(RecursiveAstVisitor);
function _isAnimationLabel(name) {
return name[0] == "@";
}
function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
var ctxs = [];
CssSelector.parse(selector).forEach(function(selector) {
var elementNames = selector.element ? [ selector.element ] : registry.allKnownElementNames();
var notElementNames = new Set(selector.notSelectors.filter(function(selector) {
return selector.isElementSelector();
}).map(function(selector) {
return selector.element;
}));
var possibleElementNames = elementNames.filter(function(elementName) {
return !notElementNames.has(elementName);
});
ctxs.push.apply(ctxs, possibleElementNames.map(function(elementName) {
return registry.securityContext(elementName, propName, isAttribute);
}));
});
return ctxs.length === 0 ? [ _angular_core.SecurityContext.NONE ] : Array.from(new Set(ctxs)).sort();
}
var NG_CONTENT_SELECT_ATTR = "select";
var NG_CONTENT_ELEMENT = "ng-content";
var LINK_ELEMENT = "link";
var LINK_STYLE_REL_ATTR = "rel";
var LINK_STYLE_HREF_ATTR = "href";
var LINK_STYLE_REL_VALUE = "stylesheet";
var STYLE_ELEMENT = "style";
var SCRIPT_ELEMENT = "script";
var NG_NON_BINDABLE_ATTR = "ngNonBindable";
var NG_PROJECT_AS = "ngProjectAs";
function preparseElement(ast) {
var selectAttr = null;
var hrefAttr = null;
var relAttr = null;
var nonBindable = false;
var projectAs = null;
ast.attrs.forEach(function(attr) {
var lcAttrName = attr.name.toLowerCase();
if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
selectAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
hrefAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_REL_ATTR) {
relAttr = attr.value;
} else if (attr.name == NG_NON_BINDABLE_ATTR) {
nonBindable = true;
} else if (attr.name == NG_PROJECT_AS) {
if (attr.value.length > 0) {
projectAs = attr.value;
}
}
});
selectAttr = normalizeNgContentSelect(selectAttr);
var nodeName = ast.name.toLowerCase();
var type = PreparsedElementType.OTHER;
if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
type = PreparsedElementType.NG_CONTENT;
} else if (nodeName == STYLE_ELEMENT) {
type = PreparsedElementType.STYLE;
} else if (nodeName == SCRIPT_ELEMENT) {
type = PreparsedElementType.SCRIPT;
} else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
type = PreparsedElementType.STYLESHEET;
}
return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
var PreparsedElementType;
(function(PreparsedElementType) {
PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
})(PreparsedElementType || (PreparsedElementType = {}));
var PreparsedElement = function() {
function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
this.type = type;
this.selectAttr = selectAttr;
this.hrefAttr = hrefAttr;
this.nonBindable = nonBindable;
this.projectAs = projectAs;
}
return PreparsedElement;
}();
function normalizeNgContentSelect(selectAttr) {
if (selectAttr === null || selectAttr.length === 0) {
return "*";
}
return selectAttr;
}
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
var KW_BIND_IDX = 1;
var KW_LET_IDX = 2;
var KW_REF_IDX = 3;
var KW_ON_IDX = 4;
var KW_BINDON_IDX = 5;
var KW_AT_IDX = 6;
var IDENT_KW_IDX = 7;
var IDENT_BANANA_BOX_IDX = 8;
var IDENT_PROPERTY_IDX = 9;
var IDENT_EVENT_IDX = 10;
var TEMPLATE_ELEMENT = "template";
var TEMPLATE_ATTR = "template";
var TEMPLATE_ATTR_PREFIX = "*";
var CLASS_ATTR = "class";
var TEXT_CSS_SELECTOR = CssSelector.parse("*")[0];
var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken("TemplateTransforms");
var TemplateParseError = function(_super) {
__extends(TemplateParseError, _super);
function TemplateParseError(message, span, level) {
_super.call(this, span, message, level);
}
return TemplateParseError;
}(ParseError);
var TemplateParseResult = function() {
function TemplateParseResult(templateAst, errors) {
this.templateAst = templateAst;
this.errors = errors;
}
return TemplateParseResult;
}();
var TemplateParser = function() {
function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this._htmlParser = _htmlParser;
this._console = _console;
this.transforms = transforms;
}
TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
var warnings = result.errors.filter(function(error) {
return error.level === exports.ParseErrorLevel.WARNING;
});
var errors = result.errors.filter(function(error) {
return error.level === exports.ParseErrorLevel.FATAL;
});
if (warnings.length > 0) {
this._console.warn("Template parse warnings:\n" + warnings.join("\n"));
}
if (errors.length > 0) {
var errorString = errors.join("\n");
throw new Error("Template parse errors:\n" + errorString);
}
return result.templateAst;
};
TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
};
TemplateParser.prototype.tryParseHtml = function(htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
var result;
var errors = htmlAstWithErrors.errors;
if (htmlAstWithErrors.rootNodes.length > 0) {
var uniqDirectives = removeSummaryDuplicates(directives);
var uniqPipes = removeSummaryDuplicates(pipes);
var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
var interpolationConfig = void 0;
if (component.template && component.template.interpolation) {
interpolationConfig = {
start: component.template.interpolation[0],
end: component.template.interpolation[1]
};
}
var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
errors.push.apply(errors, providerViewContext.errors);
} else {
result = [];
}
this._assertNoReferenceDuplicationOnTemplate(result, errors);
if (errors.length > 0) {
return new TemplateParseResult(result, errors);
}
if (isPresent(this.transforms)) {
this.transforms.forEach(function(transform) {
result = templateVisitAll(transform, result);
});
}
return new TemplateParseResult(result, errors);
};
TemplateParser.prototype.expandHtml = function(htmlAstWithErrors, forced) {
if (forced === void 0) {
forced = false;
}
var errors = htmlAstWithErrors.errors;
if (errors.length == 0 || forced) {
var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
errors.push.apply(errors, expandedHtmlAst.errors);
htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
}
return htmlAstWithErrors;
};
TemplateParser.prototype.getInterpolationConfig = function(component) {
if (component.template) {
return InterpolationConfig.fromArray(component.template.interpolation);
}
};
TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
var existingReferences = [];
result.filter(function(element) {
return !!element.references;
}).forEach(function(element) {
return element.references.forEach(function(reference) {
var name = reference.name;
if (existingReferences.indexOf(name) < 0) {
existingReferences.push(name);
} else {
var error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, exports.ParseErrorLevel.FATAL);
errors.push(error);
}
});
});
};
TemplateParser.decorators = [ {
type: _angular_core.Injectable
} ];
TemplateParser.ctorParameters = [ {
type: Parser
}, {
type: ElementSchemaRegistry
}, {
type: I18NHtmlParser
}, {
type: Console
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ TEMPLATE_TRANSFORMS ]
} ]
} ];
return TemplateParser;
}();
var TemplateParseVisitor = function() {
function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
var _this = this;
this.providerViewContext = providerViewContext;
this._bindingParser = _bindingParser;
this._schemaRegistry = _schemaRegistry;
this._schemas = _schemas;
this._targetErrors = _targetErrors;
this.selectorMatcher = new SelectorMatcher();
this.directivesIndex = new Map();
this.ngContentCount = 0;
directives.forEach(function(directive, index) {
var selector = CssSelector.parse(directive.selector);
_this.selectorMatcher.addSelectables(selector, directive);
_this.directivesIndex.set(directive, index);
});
}
TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
return null;
};
TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
return null;
};
TemplateParseVisitor.prototype.visitText = function(text, parent) {
var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
if (isPresent(expr)) {
return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
} else {
return new TextAst(text.value, ngContentIndex, text.sourceSpan);
}
};
TemplateParseVisitor.prototype.visitAttribute = function(attribute, context) {
return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
};
TemplateParseVisitor.prototype.visitComment = function(comment, context) {
return null;
};
TemplateParseVisitor.prototype.visitElement = function(element, parent) {
var _this = this;
var nodeName = element.name;
var preparsedElement = preparseElement(element);
if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
return null;
}
if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
return null;
}
var matchableAttrs = [];
var elementOrDirectiveProps = [];
var elementOrDirectiveRefs = [];
var elementVars = [];
var events = [];
var templateElementOrDirectiveProps = [];
var templateMatchableAttrs = [];
var templateElementVars = [];
var hasInlineTemplates = false;
var attrs = [];
var lcElName = splitNsName(nodeName.toLowerCase())[1];
var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
element.attrs.forEach(function(attr) {
var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
var templateBindingsSource = undefined;
var prefixToken = undefined;
if (_this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
templateBindingsSource = attr.value;
} else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
templateBindingsSource = attr.value;
prefixToken = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
}
var hasTemplateBinding = isPresent(templateBindingsSource);
if (hasTemplateBinding) {
if (hasInlineTemplates) {
_this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
}
hasInlineTemplates = true;
_this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
}
if (!hasBinding && !hasTemplateBinding) {
attrs.push(_this.visitAttribute(attr, null));
matchableAttrs.push([ attr.name, attr.value ]);
}
});
var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
var references = [];
var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
providerContext.afterElement();
var projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
var ngContentIndex = parent.findNgContentIndex(projectionSelector);
var parsedElement;
if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
if (element.children && !element.children.every(_isEmptyTextNode)) {
this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
}
parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
} else if (isTemplateElement) {
this._assertAllEventsPublishedByDirectives(directiveAsts, events);
this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
} else {
this._assertElementExists(matchElement, element);
this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
this._findComponentDirectives(directiveAsts).forEach(function(componentDirectiveAst) {
return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template);
});
var componentTemplate = providerContext.viewContext.component.template;
this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
}
if (hasInlineTemplates) {
var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
templateProviderContext.afterElement();
parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [ parsedElement ], ngContentIndex, element.sourceSpan);
}
return parsedElement;
};
TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function(inputs, outputs, template) {
var _this = this;
var triggerLookup = new Set();
template.animations.forEach(function(entry) {
triggerLookup.add(entry);
});
var animationInputs = inputs.filter(function(input) {
return input.isAnimation;
});
animationInputs.forEach(function(input) {
var name = input.name;
if (!triggerLookup.has(name)) {
_this._reportError("Couldn't find an animation entry for \"" + name + '"', input.sourceSpan);
}
});
outputs.forEach(function(output) {
if (output.isAnimation) {
var found = animationInputs.find(function(input) {
return input.name == output.name;
});
if (!found) {
_this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
}
}
});
};
TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
var name = this._normalizeAttributeName(attr.name);
var value = attr.value;
var srcSpan = attr.sourceSpan;
var bindParts = name.match(BIND_NAME_REGEXP);
var hasBinding = false;
if (bindParts !== null) {
hasBinding = true;
if (isPresent(bindParts[KW_BIND_IDX])) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
} else if (bindParts[KW_LET_IDX]) {
if (isTemplateElement) {
var identifier = bindParts[IDENT_KW_IDX];
this._parseVariable(identifier, value, srcSpan, targetVars);
} else {
this._reportError('"let-" is only supported on template elements.', srcSpan);
}
} else if (bindParts[KW_REF_IDX]) {
var identifier = bindParts[IDENT_KW_IDX];
this._parseReference(identifier, value, srcSpan, targetRefs);
} else if (bindParts[KW_ON_IDX]) {
this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
} else if (bindParts[KW_BINDON_IDX]) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
} else if (bindParts[KW_AT_IDX]) {
this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
} else if (bindParts[IDENT_BANANA_BOX_IDX]) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
} else if (bindParts[IDENT_PROPERTY_IDX]) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
} else if (bindParts[IDENT_EVENT_IDX]) {
this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
}
} else {
hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
}
if (!hasBinding) {
this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
}
return hasBinding;
};
TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
};
TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in variable names', sourceSpan);
}
targetVars.push(new VariableAst(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in reference names', sourceSpan);
}
targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
};
TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
var _this = this;
var directives = new Array(this.directivesIndex.size);
var matchElement = false;
selectorMatcher.match(elementCssSelector, function(selector, directive) {
directives[_this.directivesIndex.get(directive)] = directive;
matchElement = matchElement || selector.hasElementSelector();
});
return {
directives: directives.filter(function(dir) {
return !!dir;
}),
matchElement: matchElement
};
};
TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
var _this = this;
var matchedReferences = new Set();
var component = null;
var directiveAsts = directives.map(function(directive) {
var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
if (directive.isComponent) {
component = directive;
}
var directiveProperties = [];
var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
_this._checkPropertiesInSchema(elementName, hostProperties);
var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
_this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
elementOrDirectiveRefs.forEach(function(elOrDirRef) {
if (elOrDirRef.value.length === 0 && directive.isComponent || directive.exportAs == elOrDirRef.value) {
targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
matchedReferences.add(elOrDirRef.name);
}
});
return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
});
elementOrDirectiveRefs.forEach(function(elOrDirRef) {
if (elOrDirRef.value.length > 0) {
if (!matchedReferences.has(elOrDirRef.name)) {
_this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);
}
} else if (!component) {
var refToken = null;
if (isTemplateElement) {
refToken = resolveIdentifierToken(Identifiers.TemplateRef);
}
targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
}
});
return directiveAsts;
};
TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
if (directiveProperties) {
var boundPropsByName_1 = new Map();
boundProps.forEach(function(boundProp) {
var prevValue = boundPropsByName_1.get(boundProp.name);
if (!prevValue || prevValue.isLiteral) {
boundPropsByName_1.set(boundProp.name, boundProp);
}
});
Object.keys(directiveProperties).forEach(function(dirProp) {
var elProp = directiveProperties[dirProp];
var boundProp = boundPropsByName_1.get(elProp);
if (boundProp) {
targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
}
});
}
};
TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
var _this = this;
var boundElementProps = [];
var boundDirectivePropsIndex = new Map();
directives.forEach(function(directive) {
directive.inputs.forEach(function(prop) {
boundDirectivePropsIndex.set(prop.templateName, prop);
});
});
props.forEach(function(prop) {
if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
}
});
this._checkPropertiesInSchema(elementName, boundElementProps);
return boundElementProps;
};
TemplateParseVisitor.prototype._findComponentDirectives = function(directives) {
return directives.filter(function(directive) {
return directive.directive.isComponent;
});
};
TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
return this._findComponentDirectives(directives).map(function(directive) {
return directive.directive.type.name;
});
};
TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 1) {
this._reportError("More than one component matched on this element.\n" + "Make sure that only one component's selector can match a given element.\n" + ("Conflicting components: " + componentTypeNames.join(",")), sourceSpan);
}
};
TemplateParseVisitor.prototype._assertElementExists = function(matchElement, element) {
var elName = element.name.replace(/^:xhtml:/, "");
if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
var errorMsg = "'" + elName + "' is not a known element:\n" + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
this._reportError(errorMsg, element.sourceSpan);
}
};
TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
var _this = this;
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 0) {
this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan);
}
elementProps.forEach(function(prop) {
_this._reportError("Property binding " + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "directives" section.', sourceSpan);
});
};
TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
var _this = this;
var allDirectiveEvents = new Set();
directives.forEach(function(directive) {
Object.keys(directive.directive.outputs).forEach(function(k) {
var eventName = directive.directive.outputs[k];
allDirectiveEvents.add(eventName);
});
});
events.forEach(function(event) {
if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
_this._reportError("Event binding " + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "directives" section.', event.sourceSpan);
}
});
};
TemplateParseVisitor.prototype._checkPropertiesInSchema = function(elementName, boundProps) {
var _this = this;
boundProps.forEach(function(boundProp) {
if (boundProp.type === exports.PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
if (elementName.indexOf("-") > -1) {
errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
}
_this._reportError(errorMsg, boundProp.sourceSpan);
}
});
};
TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
if (level === void 0) {
level = exports.ParseErrorLevel.FATAL;
}
this._targetErrors.push(new ParseError(sourceSpan, message, level));
};
return TemplateParseVisitor;
}();
var NonBindableVisitor = function() {
function NonBindableVisitor() {}
NonBindableVisitor.prototype.visitElement = function(ast, parent) {
var preparsedElement = preparseElement(ast);
if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
return null;
}
var attrNameAndValues = ast.attrs.map(function(attrAst) {
return [ attrAst.name, attrAst.value ];
});
var selector = createElementCssSelector(ast.name, attrNameAndValues);
var ngContentIndex = parent.findNgContentIndex(selector);
var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
};
NonBindableVisitor.prototype.visitComment = function(comment, context) {
return null;
};
NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
};
NonBindableVisitor.prototype.visitText = function(text, parent) {
var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
return new TextAst(text.value, ngContentIndex, text.sourceSpan);
};
NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
return expansion;
};
NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
return expansionCase;
};
return NonBindableVisitor;
}();
var ElementOrDirectiveRef = function() {
function ElementOrDirectiveRef(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
return ElementOrDirectiveRef;
}();
function splitClasses(classAttrValue) {
return classAttrValue.trim().split(/\s+/g);
}
var ElementContext = function() {
function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
this.isTemplateElement = isTemplateElement;
this._ngContentIndexMatcher = _ngContentIndexMatcher;
this._wildcardNgContentIndex = _wildcardNgContentIndex;
this.providerContext = providerContext;
}
ElementContext.create = function(isTemplateElement, directives, providerContext) {
var matcher = new SelectorMatcher();
var wildcardNgContentIndex = null;
var component = directives.find(function(directive) {
return directive.directive.isComponent;
});
if (component) {
var ngContentSelectors = component.directive.template.ngContentSelectors;
for (var i = 0; i < ngContentSelectors.length; i++) {
var selector = ngContentSelectors[i];
if (selector === "*") {
wildcardNgContentIndex = i;
} else {
matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
}
}
}
return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
};
ElementContext.prototype.findNgContentIndex = function(selector) {
var ngContentIndices = [];
this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
ngContentIndices.push(ngContentIndex);
});
ngContentIndices.sort();
if (isPresent(this._wildcardNgContentIndex)) {
ngContentIndices.push(this._wildcardNgContentIndex);
}
return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
};
return ElementContext;
}();
function createElementCssSelector(elementName, matchableAttrs) {
var cssSelector = new CssSelector();
var elNameNoNs = splitNsName(elementName)[1];
cssSelector.setElement(elNameNoNs);
for (var i = 0; i < matchableAttrs.length; i++) {
var attrName = matchableAttrs[i][0];
var attrNameNoNs = splitNsName(attrName)[1];
var attrValue = matchableAttrs[i][1];
cssSelector.addAttribute(attrNameNoNs, attrValue);
if (attrName.toLowerCase() == CLASS_ATTR) {
var classes = splitClasses(attrValue);
classes.forEach(function(className) {
return cssSelector.addClassName(className);
});
}
}
return cssSelector;
}
var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
var NON_BINDABLE_VISITOR = new NonBindableVisitor();
function _isEmptyTextNode(node) {
return node instanceof Text && node.value.trim().length == 0;
}
function removeSummaryDuplicates(items) {
var map = new Map();
items.forEach(function(item) {
if (!map.get(item.type.reference)) {
map.set(item.type.reference, item);
}
});
return Array.from(map.values());
}
function unimplemented$1() {
throw new Error("unimplemented");
}
var CompilerConfig = function() {
function CompilerConfig(_a) {
var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;
this.renderTypes = renderTypes;
this.defaultEncapsulation = defaultEncapsulation;
this._genDebugInfo = genDebugInfo;
this._logBindingUpdate = logBindingUpdate;
this.useJit = useJit;
}
Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
get: function() {
return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
get: function() {
return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
},
enumerable: true,
configurable: true
});
return CompilerConfig;
}();
var RenderTypes = function() {
function RenderTypes() {}
Object.defineProperty(RenderTypes.prototype, "renderer", {
get: function() {
return unimplemented$1();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderText", {
get: function() {
return unimplemented$1();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderElement", {
get: function() {
return unimplemented$1();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderComment", {
get: function() {
return unimplemented$1();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderNode", {
get: function() {
return unimplemented$1();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderEvent", {
get: function() {
return unimplemented$1();
},
enumerable: true,
configurable: true
});
return RenderTypes;
}();
var DefaultRenderTypes = function() {
function DefaultRenderTypes() {
this.renderText = null;
this.renderElement = null;
this.renderComment = null;
this.renderNode = null;
this.renderEvent = null;
}
Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
get: function() {
return resolveIdentifier(Identifiers.Renderer);
},
enumerable: true,
configurable: true
});
return DefaultRenderTypes;
}();
var __extends$12 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TypeModifier;
(function(TypeModifier) {
TypeModifier[TypeModifier["Const"] = 0] = "Const";
})(TypeModifier || (TypeModifier = {}));
var Type$1 = function() {
function Type(modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
this.modifiers = modifiers;
if (!modifiers) {
this.modifiers = [];
}
}
Type.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return Type;
}();
var BuiltinTypeName;
(function(BuiltinTypeName) {
BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
BuiltinTypeName[BuiltinTypeName["Null"] = 6] = "Null";
})(BuiltinTypeName || (BuiltinTypeName = {}));
var BuiltinType = function(_super) {
__extends$12(BuiltinType, _super);
function BuiltinType(name, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
}
BuiltinType.prototype.visitType = function(visitor, context) {
return visitor.visitBuiltintType(this, context);
};
return BuiltinType;
}(Type$1);
var ExternalType = function(_super) {
__extends$12(ExternalType, _super);
function ExternalType(value, typeParams, modifiers) {
if (typeParams === void 0) {
typeParams = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.value = value;
this.typeParams = typeParams;
}
ExternalType.prototype.visitType = function(visitor, context) {
return visitor.visitExternalType(this, context);
};
return ExternalType;
}(Type$1);
var ArrayType = function(_super) {
__extends$12(ArrayType, _super);
function ArrayType(of, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.of = of;
}
ArrayType.prototype.visitType = function(visitor, context) {
return visitor.visitArrayType(this, context);
};
return ArrayType;
}(Type$1);
var MapType = function(_super) {
__extends$12(MapType, _super);
function MapType(valueType, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.valueType = valueType;
}
MapType.prototype.visitType = function(visitor, context) {
return visitor.visitMapType(this, context);
};
return MapType;
}(Type$1);
var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
var NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
var BinaryOperator;
(function(BinaryOperator) {
BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
BinaryOperator[BinaryOperator["And"] = 9] = "And";
BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
})(BinaryOperator || (BinaryOperator = {}));
var Expression = function() {
function Expression(type) {
this.type = type;
}
Expression.prototype.prop = function(name) {
return new ReadPropExpr(this, name);
};
Expression.prototype.key = function(index, type) {
if (type === void 0) {
type = null;
}
return new ReadKeyExpr(this, index, type);
};
Expression.prototype.callMethod = function(name, params) {
return new InvokeMethodExpr(this, name, params);
};
Expression.prototype.callFn = function(params) {
return new InvokeFunctionExpr(this, params);
};
Expression.prototype.instantiate = function(params, type) {
if (type === void 0) {
type = null;
}
return new InstantiateExpr(this, params, type);
};
Expression.prototype.conditional = function(trueCase, falseCase) {
if (falseCase === void 0) {
falseCase = null;
}
return new ConditionalExpr(this, trueCase, falseCase);
};
Expression.prototype.equals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
};
Expression.prototype.notEquals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
};
Expression.prototype.identical = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
};
Expression.prototype.notIdentical = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
};
Expression.prototype.minus = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
};
Expression.prototype.plus = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
};
Expression.prototype.divide = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
};
Expression.prototype.multiply = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
};
Expression.prototype.modulo = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
};
Expression.prototype.and = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
};
Expression.prototype.or = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
};
Expression.prototype.lower = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
};
Expression.prototype.lowerEquals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
};
Expression.prototype.bigger = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
};
Expression.prototype.biggerEquals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
};
Expression.prototype.isBlank = function() {
return this.equals(TYPED_NULL_EXPR);
};
Expression.prototype.cast = function(type) {
return new CastExpr(this, type);
};
Expression.prototype.toStmt = function() {
return new ExpressionStatement(this);
};
return Expression;
}();
var BuiltinVar;
(function(BuiltinVar) {
BuiltinVar[BuiltinVar["This"] = 0] = "This";
BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
})(BuiltinVar || (BuiltinVar = {}));
var ReadVarExpr = function(_super) {
__extends$12(ReadVarExpr, _super);
function ReadVarExpr(name, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
if (typeof name === "string") {
this.name = name;
this.builtin = null;
} else {
this.name = null;
this.builtin = name;
}
}
ReadVarExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadVarExpr(this, context);
};
ReadVarExpr.prototype.set = function(value) {
return new WriteVarExpr(this.name, value);
};
return ReadVarExpr;
}(Expression);
var WriteVarExpr = function(_super) {
__extends$12(WriteVarExpr, _super);
function WriteVarExpr(name, value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type || value.type);
this.name = name;
this.value = value;
}
WriteVarExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWriteVarExpr(this, context);
};
WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
return new DeclareVarStmt(this.name, this.value, type, modifiers);
};
return WriteVarExpr;
}(Expression);
var WriteKeyExpr = function(_super) {
__extends$12(WriteKeyExpr, _super);
function WriteKeyExpr(receiver, index, value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type || value.type);
this.receiver = receiver;
this.index = index;
this.value = value;
}
WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWriteKeyExpr(this, context);
};
return WriteKeyExpr;
}(Expression);
var WritePropExpr = function(_super) {
__extends$12(WritePropExpr, _super);
function WritePropExpr(receiver, name, value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type || value.type);
this.receiver = receiver;
this.name = name;
this.value = value;
}
WritePropExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWritePropExpr(this, context);
};
return WritePropExpr;
}(Expression);
var BuiltinMethod;
(function(BuiltinMethod) {
BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
})(BuiltinMethod || (BuiltinMethod = {}));
var InvokeMethodExpr = function(_super) {
__extends$12(InvokeMethodExpr, _super);
function InvokeMethodExpr(receiver, method, args, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.receiver = receiver;
this.args = args;
if (typeof method === "string") {
this.name = method;
this.builtin = null;
} else {
this.name = null;
this.builtin = method;
}
}
InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInvokeMethodExpr(this, context);
};
return InvokeMethodExpr;
}(Expression);
var InvokeFunctionExpr = function(_super) {
__extends$12(InvokeFunctionExpr, _super);
function InvokeFunctionExpr(fn, args, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.fn = fn;
this.args = args;
}
InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInvokeFunctionExpr(this, context);
};
return InvokeFunctionExpr;
}(Expression);
var InstantiateExpr = function(_super) {
__extends$12(InstantiateExpr, _super);
function InstantiateExpr(classExpr, args, type) {
_super.call(this, type);
this.classExpr = classExpr;
this.args = args;
}
InstantiateExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInstantiateExpr(this, context);
};
return InstantiateExpr;
}(Expression);
var LiteralExpr = function(_super) {
__extends$12(LiteralExpr, _super);
function LiteralExpr(value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.value = value;
}
LiteralExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralExpr(this, context);
};
return LiteralExpr;
}(Expression);
var ExternalExpr = function(_super) {
__extends$12(ExternalExpr, _super);
function ExternalExpr(value, type, typeParams) {
if (type === void 0) {
type = null;
}
if (typeParams === void 0) {
typeParams = null;
}
_super.call(this, type);
this.value = value;
this.typeParams = typeParams;
}
ExternalExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitExternalExpr(this, context);
};
return ExternalExpr;
}(Expression);
var ConditionalExpr = function(_super) {
__extends$12(ConditionalExpr, _super);
function ConditionalExpr(condition, trueCase, falseCase, type) {
if (falseCase === void 0) {
falseCase = null;
}
if (type === void 0) {
type = null;
}
_super.call(this, type || trueCase.type);
this.condition = condition;
this.falseCase = falseCase;
this.trueCase = trueCase;
}
ConditionalExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitConditionalExpr(this, context);
};
return ConditionalExpr;
}(Expression);
var NotExpr = function(_super) {
__extends$12(NotExpr, _super);
function NotExpr(condition) {
_super.call(this, BOOL_TYPE);
this.condition = condition;
}
NotExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitNotExpr(this, context);
};
return NotExpr;
}(Expression);
var CastExpr = function(_super) {
__extends$12(CastExpr, _super);
function CastExpr(value, type) {
_super.call(this, type);
this.value = value;
}
CastExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitCastExpr(this, context);
};
return CastExpr;
}(Expression);
var FnParam = function() {
function FnParam(name, type) {
if (type === void 0) {
type = null;
}
this.name = name;
this.type = type;
}
return FnParam;
}();
var FunctionExpr = function(_super) {
__extends$12(FunctionExpr, _super);
function FunctionExpr(params, statements, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.params = params;
this.statements = statements;
}
FunctionExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitFunctionExpr(this, context);
};
FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
};
return FunctionExpr;
}(Expression);
var BinaryOperatorExpr = function(_super) {
__extends$12(BinaryOperatorExpr, _super);
function BinaryOperatorExpr(operator, lhs, rhs, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type || lhs.type);
this.operator = operator;
this.rhs = rhs;
this.lhs = lhs;
}
BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitBinaryOperatorExpr(this, context);
};
return BinaryOperatorExpr;
}(Expression);
var ReadPropExpr = function(_super) {
__extends$12(ReadPropExpr, _super);
function ReadPropExpr(receiver, name, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.receiver = receiver;
this.name = name;
}
ReadPropExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadPropExpr(this, context);
};
ReadPropExpr.prototype.set = function(value) {
return new WritePropExpr(this.receiver, this.name, value);
};
return ReadPropExpr;
}(Expression);
var ReadKeyExpr = function(_super) {
__extends$12(ReadKeyExpr, _super);
function ReadKeyExpr(receiver, index, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.receiver = receiver;
this.index = index;
}
ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadKeyExpr(this, context);
};
ReadKeyExpr.prototype.set = function(value) {
return new WriteKeyExpr(this.receiver, this.index, value);
};
return ReadKeyExpr;
}(Expression);
var LiteralArrayExpr = function(_super) {
__extends$12(LiteralArrayExpr, _super);
function LiteralArrayExpr(entries, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.entries = entries;
}
LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralArrayExpr(this, context);
};
return LiteralArrayExpr;
}(Expression);
var LiteralMapExpr = function(_super) {
__extends$12(LiteralMapExpr, _super);
function LiteralMapExpr(entries, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.entries = entries;
this.valueType = null;
if (isPresent(type)) {
this.valueType = type.valueType;
}
}
LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralMapExpr(this, context);
};
return LiteralMapExpr;
}(Expression);
var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
var NULL_EXPR = new LiteralExpr(null, null);
var TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
var StmtModifier;
(function(StmtModifier) {
StmtModifier[StmtModifier["Final"] = 0] = "Final";
StmtModifier[StmtModifier["Private"] = 1] = "Private";
})(StmtModifier || (StmtModifier = {}));
var Statement = function() {
function Statement(modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
this.modifiers = modifiers;
if (!modifiers) {
this.modifiers = [];
}
}
Statement.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return Statement;
}();
var DeclareVarStmt = function(_super) {
__extends$12(DeclareVarStmt, _super);
function DeclareVarStmt(name, value, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
this.value = value;
this.type = type || value.type;
}
DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareVarStmt(this, context);
};
return DeclareVarStmt;
}(Statement);
var DeclareFunctionStmt = function(_super) {
__extends$12(DeclareFunctionStmt, _super);
function DeclareFunctionStmt(name, params, statements, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
this.params = params;
this.statements = statements;
this.type = type;
}
DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareFunctionStmt(this, context);
};
return DeclareFunctionStmt;
}(Statement);
var ExpressionStatement = function(_super) {
__extends$12(ExpressionStatement, _super);
function ExpressionStatement(expr) {
_super.call(this);
this.expr = expr;
}
ExpressionStatement.prototype.visitStatement = function(visitor, context) {
return visitor.visitExpressionStmt(this, context);
};
return ExpressionStatement;
}(Statement);
var ReturnStatement = function(_super) {
__extends$12(ReturnStatement, _super);
function ReturnStatement(value) {
_super.call(this);
this.value = value;
}
ReturnStatement.prototype.visitStatement = function(visitor, context) {
return visitor.visitReturnStmt(this, context);
};
return ReturnStatement;
}(Statement);
var AbstractClassPart = function() {
function AbstractClassPart(type, modifiers) {
if (type === void 0) {
type = null;
}
this.type = type;
this.modifiers = modifiers;
if (!modifiers) {
this.modifiers = [];
}
}
AbstractClassPart.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return AbstractClassPart;
}();
var ClassField = function(_super) {
__extends$12(ClassField, _super);
function ClassField(name, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, type, modifiers);
this.name = name;
}
return ClassField;
}(AbstractClassPart);
var ClassMethod = function(_super) {
__extends$12(ClassMethod, _super);
function ClassMethod(name, params, body, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, type, modifiers);
this.name = name;
this.params = params;
this.body = body;
}
return ClassMethod;
}(AbstractClassPart);
var ClassGetter = function(_super) {
__extends$12(ClassGetter, _super);
function ClassGetter(name, body, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, type, modifiers);
this.name = name;
this.body = body;
}
return ClassGetter;
}(AbstractClassPart);
var ClassStmt = function(_super) {
__extends$12(ClassStmt, _super);
function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
this.parent = parent;
this.fields = fields;
this.getters = getters;
this.constructorMethod = constructorMethod;
this.methods = methods;
}
ClassStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareClassStmt(this, context);
};
return ClassStmt;
}(Statement);
var IfStmt = function(_super) {
__extends$12(IfStmt, _super);
function IfStmt(condition, trueCase, falseCase) {
if (falseCase === void 0) {
falseCase = [];
}
_super.call(this);
this.condition = condition;
this.trueCase = trueCase;
this.falseCase = falseCase;
}
IfStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitIfStmt(this, context);
};
return IfStmt;
}(Statement);
var CommentStmt = function(_super) {
__extends$12(CommentStmt, _super);
function CommentStmt(comment) {
_super.call(this);
this.comment = comment;
}
CommentStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitCommentStmt(this, context);
};
return CommentStmt;
}(Statement);
var TryCatchStmt = function(_super) {
__extends$12(TryCatchStmt, _super);
function TryCatchStmt(bodyStmts, catchStmts) {
_super.call(this);
this.bodyStmts = bodyStmts;
this.catchStmts = catchStmts;
}
TryCatchStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitTryCatchStmt(this, context);
};
return TryCatchStmt;
}(Statement);
var ThrowStmt = function(_super) {
__extends$12(ThrowStmt, _super);
function ThrowStmt(error) {
_super.call(this);
this.error = error;
}
ThrowStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitThrowStmt(this, context);
};
return ThrowStmt;
}(Statement);
var ExpressionTransformer = function() {
function ExpressionTransformer() {}
ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
var method = ast.builtin || ast.name;
return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
};
ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
};
ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
};
ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
return new NotExpr(ast.condition.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
return new CastExpr(ast.value.visitExpression(this, context), context);
};
ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
};
ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
};
ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
};
ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
};
ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
var _this = this;
var entries = ast.entries.map(function(entry) {
return [ entry[0], entry[1].visitExpression(_this, context) ];
});
return new LiteralMapExpr(entries);
};
ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
var _this = this;
return exprs.map(function(expr) {
return expr.visitExpression(_this, context);
});
};
ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
};
ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
return stmt;
};
ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
return new ExpressionStatement(stmt.expr.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
return new ReturnStatement(stmt.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
return stmt;
};
ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
};
ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
};
ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
return new ThrowStmt(stmt.error.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
return stmt;
};
ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
var _this = this;
return stmts.map(function(stmt) {
return stmt.visitStatement(_this, context);
});
};
return ExpressionTransformer;
}();
var RecursiveExpressionVisitor = function() {
function RecursiveExpressionVisitor() {}
RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
expr.value.visitExpression(this, context);
return expr;
};
RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
expr.receiver.visitExpression(this, context);
expr.index.visitExpression(this, context);
expr.value.visitExpression(this, context);
return expr;
};
RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
expr.receiver.visitExpression(this, context);
expr.value.visitExpression(this, context);
return expr;
};
RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
ast.fn.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
ast.classExpr.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
ast.condition.visitExpression(this, context);
ast.trueCase.visitExpression(this, context);
ast.falseCase.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
ast.condition.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
ast.value.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
ast.lhs.visitExpression(this, context);
ast.rhs.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
ast.index.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
this.visitAllExpressions(ast.entries, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
var _this = this;
ast.entries.forEach(function(entry) {
return entry[1].visitExpression(_this, context);
});
return ast;
};
RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
var _this = this;
exprs.forEach(function(expr) {
return expr.visitExpression(_this, context);
});
};
RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
stmt.value.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
return stmt;
};
RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
stmt.expr.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
stmt.value.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
return stmt;
};
RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
stmt.condition.visitExpression(this, context);
this.visitAllStatements(stmt.trueCase, context);
this.visitAllStatements(stmt.falseCase, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
this.visitAllStatements(stmt.bodyStmts, context);
this.visitAllStatements(stmt.catchStmts, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
stmt.error.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
return stmt;
};
RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
var _this = this;
stmts.forEach(function(stmt) {
return stmt.visitStatement(_this, context);
});
};
return RecursiveExpressionVisitor;
}();
function replaceVarInExpression(varName, newValue, expression) {
var transformer = new _ReplaceVariableTransformer(varName, newValue);
return expression.visitExpression(transformer, null);
}
var _ReplaceVariableTransformer = function(_super) {
__extends$12(_ReplaceVariableTransformer, _super);
function _ReplaceVariableTransformer(_varName, _newValue) {
_super.call(this);
this._varName = _varName;
this._newValue = _newValue;
}
_ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
return ast.name == this._varName ? this._newValue : ast;
};
return _ReplaceVariableTransformer;
}(ExpressionTransformer);
function findReadVarNames(stmts) {
var finder = new _VariableFinder();
finder.visitAllStatements(stmts, null);
return finder.varNames;
}
var _VariableFinder = function(_super) {
__extends$12(_VariableFinder, _super);
function _VariableFinder() {
_super.apply(this, arguments);
this.varNames = new Set();
}
_VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
this.varNames.add(ast.name);
return null;
};
return _VariableFinder;
}(RecursiveExpressionVisitor);
function variable(name, type) {
if (type === void 0) {
type = null;
}
return new ReadVarExpr(name, type);
}
function importExpr(id, typeParams) {
if (typeParams === void 0) {
typeParams = null;
}
return new ExternalExpr(id, null, typeParams);
}
function importType(id, typeParams, typeModifiers) {
if (typeParams === void 0) {
typeParams = null;
}
if (typeModifiers === void 0) {
typeModifiers = null;
}
return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
}
function literalArr(values, type) {
if (type === void 0) {
type = null;
}
return new LiteralArrayExpr(values, type);
}
function literalMap(values, type) {
if (type === void 0) {
type = null;
}
return new LiteralMapExpr(values, type);
}
function not(expr) {
return new NotExpr(expr);
}
function fn(params, body, type) {
if (type === void 0) {
type = null;
}
return new FunctionExpr(params, body, type);
}
function literal(value, type) {
if (type === void 0) {
type = null;
}
return new LiteralExpr(value, type);
}
var __extends$13 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AnimationAst = function() {
function AnimationAst() {
this.startTime = 0;
this.playTime = 0;
}
return AnimationAst;
}();
var AnimationStateAst = function(_super) {
__extends$13(AnimationStateAst, _super);
function AnimationStateAst() {
_super.apply(this, arguments);
}
return AnimationStateAst;
}(AnimationAst);
var AnimationEntryAst = function(_super) {
__extends$13(AnimationEntryAst, _super);
function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
_super.call(this);
this.name = name;
this.stateDeclarations = stateDeclarations;
this.stateTransitions = stateTransitions;
}
AnimationEntryAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationEntry(this, context);
};
return AnimationEntryAst;
}(AnimationAst);
var AnimationStateDeclarationAst = function(_super) {
__extends$13(AnimationStateDeclarationAst, _super);
function AnimationStateDeclarationAst(stateName, styles) {
_super.call(this);
this.stateName = stateName;
this.styles = styles;
}
AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationStateDeclaration(this, context);
};
return AnimationStateDeclarationAst;
}(AnimationStateAst);
var AnimationStateTransitionExpression = function() {
function AnimationStateTransitionExpression(fromState, toState) {
this.fromState = fromState;
this.toState = toState;
}
return AnimationStateTransitionExpression;
}();
var AnimationStateTransitionAst = function(_super) {
__extends$13(AnimationStateTransitionAst, _super);
function AnimationStateTransitionAst(stateChanges, animation) {
_super.call(this);
this.stateChanges = stateChanges;
this.animation = animation;
}
AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationStateTransition(this, context);
};
return AnimationStateTransitionAst;
}(AnimationStateAst);
var AnimationStepAst = function(_super) {
__extends$13(AnimationStepAst, _super);
function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
_super.call(this);
this.startingStyles = startingStyles;
this.keyframes = keyframes;
this.duration = duration;
this.delay = delay;
this.easing = easing;
}
AnimationStepAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationStep(this, context);
};
return AnimationStepAst;
}(AnimationAst);
var AnimationStylesAst = function(_super) {
__extends$13(AnimationStylesAst, _super);
function AnimationStylesAst(styles) {
_super.call(this);
this.styles = styles;
}
AnimationStylesAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationStyles(this, context);
};
return AnimationStylesAst;
}(AnimationAst);
var AnimationKeyframeAst = function(_super) {
__extends$13(AnimationKeyframeAst, _super);
function AnimationKeyframeAst(offset, styles) {
_super.call(this);
this.offset = offset;
this.styles = styles;
}
AnimationKeyframeAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationKeyframe(this, context);
};
return AnimationKeyframeAst;
}(AnimationAst);
var AnimationWithStepsAst = function(_super) {
__extends$13(AnimationWithStepsAst, _super);
function AnimationWithStepsAst(steps) {
_super.call(this);
this.steps = steps;
}
return AnimationWithStepsAst;
}(AnimationAst);
var AnimationGroupAst = function(_super) {
__extends$13(AnimationGroupAst, _super);
function AnimationGroupAst(steps) {
_super.call(this, steps);
}
AnimationGroupAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationGroup(this, context);
};
return AnimationGroupAst;
}(AnimationWithStepsAst);
var AnimationSequenceAst = function(_super) {
__extends$13(AnimationSequenceAst, _super);
function AnimationSequenceAst(steps) {
_super.call(this, steps);
}
AnimationSequenceAst.prototype.visit = function(visitor, context) {
return visitor.visitAnimationSequence(this, context);
};
return AnimationSequenceAst;
}(AnimationWithStepsAst);
var AnimationEntryCompileResult = function() {
function AnimationEntryCompileResult(name, statements, fnExp) {
this.name = name;
this.statements = statements;
this.fnExp = fnExp;
}
return AnimationEntryCompileResult;
}();
var AnimationCompiler = function() {
function AnimationCompiler() {}
AnimationCompiler.prototype.compile = function(factoryNamePrefix, parsedAnimations) {
return parsedAnimations.map(function(entry) {
var factoryName = factoryNamePrefix + "_" + entry.name;
var visitor = new _AnimationBuilder(entry.name, factoryName);
return visitor.build(entry);
});
};
return AnimationCompiler;
}();
var _ANIMATION_FACTORY_ELEMENT_VAR = variable("element");
var _ANIMATION_DEFAULT_STATE_VAR = variable("defaultStateStyles");
var _ANIMATION_FACTORY_VIEW_VAR = variable("view");
var _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop("animationContext");
var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop("renderer");
var _ANIMATION_CURRENT_STATE_VAR = variable("currentState");
var _ANIMATION_NEXT_STATE_VAR = variable("nextState");
var _ANIMATION_PLAYER_VAR = variable("player");
var _ANIMATION_TIME_VAR = variable("totalTime");
var _ANIMATION_START_STATE_STYLES_VAR = variable("startStateStyles");
var _ANIMATION_END_STATE_STYLES_VAR = variable("endStateStyles");
var _ANIMATION_COLLECTED_STYLES = variable("collectedStyles");
var _PREVIOUS_ANIMATION_PLAYERS = variable("previousPlayers");
var _EMPTY_MAP = literalMap([]);
var _EMPTY_ARRAY = literalArr([]);
var _AnimationBuilder = function() {
function _AnimationBuilder(animationName, factoryName) {
this.animationName = animationName;
this._fnVarName = factoryName + "_factory";
this._statesMapVarName = factoryName + "_states";
this._statesMapVar = variable(this._statesMapVarName);
}
_AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
var stylesArr = [];
if (context.isExpectingFirstStyleStep) {
stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
context.isExpectingFirstStyleStep = false;
}
ast.styles.forEach(function(entry) {
var entries = Object.keys(entry).map(function(key) {
return [ key, literal(entry[key]) ];
});
stylesArr.push(literalMap(entries));
});
return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([ importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([ _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr) ]) ]);
};
_AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([ literal(ast.offset), ast.styles.visit(this, context) ]);
};
_AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
var _this = this;
if (context.endStateAnimateStep === ast) {
return this._visitEndStateAnimation(ast, context);
}
var startingStylesExpr = ast.startingStyles.visit(this, context);
var keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
return keyframeEntry.visit(_this, context);
});
return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
};
_AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
var _this = this;
var startingStylesExpr = ast.startingStyles.visit(this, context);
var keyframeExpressions = ast.keyframes.map(function(keyframe) {
return keyframe.visit(_this, context);
});
var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([ _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions) ]);
return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
};
_AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr, context) {
var previousStylesValue = _EMPTY_ARRAY;
if (context.isExpectingFirstAnimateStep) {
previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
context.isExpectingFirstAnimateStep = false;
}
context.totalTransitionTime += ast.duration + ast.delay;
return _ANIMATION_FACTORY_RENDERER_VAR.callMethod("animate", [ _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing), previousStylesValue ]);
};
_AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
var _this = this;
var playerExprs = ast.steps.map(function(step) {
return step.visit(_this, context);
});
return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([ literalArr(playerExprs) ]);
};
_AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
var _this = this;
var playerExprs = ast.steps.map(function(step) {
return step.visit(_this, context);
});
return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([ literalArr(playerExprs) ]);
};
_AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
var flatStyles = {};
_getStylesArray(ast).forEach(function(entry) {
Object.keys(entry).forEach(function(key) {
flatStyles[key] = entry[key];
});
});
context.stateMap.registerState(ast.stateName, flatStyles);
};
_AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
var steps = ast.animation.steps;
var lastStep = steps[steps.length - 1];
if (_isEndStateAnimateStep(lastStep)) {
context.endStateAnimateStep = lastStep;
}
context.totalTransitionTime = 0;
context.isExpectingFirstStyleStep = true;
context.isExpectingFirstAnimateStep = true;
var stateChangePreconditions = [];
ast.stateChanges.forEach(function(stateChange) {
stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
if (stateChange.fromState != ANY_STATE) {
context.stateMap.registerState(stateChange.fromState);
}
if (stateChange.toState != ANY_STATE) {
context.stateMap.registerState(stateChange.toState);
}
});
var animationPlayerExpr = ast.animation.visit(this, context);
var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
return a.or(b);
});
var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
return new IfStmt(precondition, [ animationStmt, totalTimeStmt ]);
};
_AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
var _this = this;
ast.stateDeclarations.forEach(function(def) {
return def.visit(_this, context);
});
context.stateMap.registerState(DEFAULT_STATE, {});
var statements = [];
statements.push(_PREVIOUS_ANIMATION_PLAYERS.set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod("getAnimationPlayers", [ _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE)) ])).toDeclStmt());
statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt());
statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [ _ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt() ]));
statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [ _ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt() ]));
var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));
ast.stateTransitions.forEach(function(transAst) {
return statements.push(transAst.visit(_this, context));
});
statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [ _ANIMATION_PLAYER_VAR.set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt() ]));
statements.push(_ANIMATION_PLAYER_VAR.callMethod("onDone", [ fn([], [ _ANIMATION_PLAYER_VAR.callMethod("destroy", []).toStmt(), RENDER_STYLES_FN.callFn([ _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([ _ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR ]) ]).toStmt() ]) ]).toStmt());
statements.push(importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([ _PREVIOUS_ANIMATION_PLAYERS ]).callMethod("destroy", []).toStmt());
statements.push(RENDER_STYLES_FN.callFn([ _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.clearStyles)).callFn([ _ANIMATION_START_STATE_STYLES_VAR ]) ]).toStmt());
statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod("queueAnimation", [ _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR ]).toStmt());
statements.push(new ReturnStatement(importExpr(resolveIdentifier(Identifiers.AnimationTransition)).instantiate([ _ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR ])));
return fn([ new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE) ], statements, importType(resolveIdentifier(Identifiers.AnimationTransition)));
};
_AnimationBuilder.prototype.build = function(ast) {
var context = new _AnimationBuilderContext();
var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
var fnVariable = variable(this._fnVarName);
var lookupMap = [];
Object.keys(context.stateMap.states).forEach(function(stateName) {
var value = context.stateMap.states[stateName];
var variableValue = _EMPTY_MAP;
if (isPresent(value)) {
var styleMap_1 = [];
Object.keys(value).forEach(function(key) {
styleMap_1.push([ key, literal(value[key]) ]);
});
variableValue = literalMap(styleMap_1);
}
lookupMap.push([ stateName, variableValue ]);
});
var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
var statements = [ compiledStatesMapStmt, fnStatement ];
return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
};
return _AnimationBuilder;
}();
var _AnimationBuilderContext = function() {
function _AnimationBuilderContext() {
this.stateMap = new _AnimationBuilderStateMap();
this.endStateAnimateStep = null;
this.isExpectingFirstStyleStep = false;
this.isExpectingFirstAnimateStep = false;
this.totalTransitionTime = 0;
}
return _AnimationBuilderContext;
}();
var _AnimationBuilderStateMap = function() {
function _AnimationBuilderStateMap() {
this._states = {};
}
Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
get: function() {
return this._states;
},
enumerable: true,
configurable: true
});
_AnimationBuilderStateMap.prototype.registerState = function(name, value) {
if (value === void 0) {
value = null;
}
var existingEntry = this._states[name];
if (!existingEntry) {
this._states[name] = value;
}
};
return _AnimationBuilderStateMap;
}();
function _compareToAnimationStateExpr(value, animationState) {
var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
switch (animationState) {
case EMPTY_ANIMATION_STATE:
return value.equals(emptyStateLiteral);

case ANY_STATE:
return literal(true);

default:
return value.equals(literal(animationState));
}
}
function _isEndStateAnimateStep(step) {
if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
var styles1 = _getStylesArray(step.keyframes[0])[0];
var styles2 = _getStylesArray(step.keyframes[1])[0];
return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
}
return false;
}
function _getStylesArray(obj) {
return obj.styles.styles;
}
function createDiTokenExpression(token) {
if (isPresent(token.value)) {
return literal(token.value);
} else if (token.identifierIsInstance) {
return importExpr(token.identifier).instantiate([], importType(token.identifier, [], [ TypeModifier.Const ]));
} else {
return importExpr(token.identifier);
}
}
function createInlineArray(values) {
if (values.length === 0) {
return importExpr(resolveIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
}
var log2 = Math.log(values.length) / Math.log(2);
var index = Math.ceil(log2);
var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] : Identifiers.InlineArrayDynamic;
var identifier = resolveIdentifier(identifierSpec);
return importExpr(identifier).instantiate([ literal(values.length) ].concat(values));
}
function createPureProxy(fn, argCount, pureProxyProp, builder) {
builder.fields.push(new ClassField(pureProxyProp.name, null));
var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
if (!pureProxyId) {
throw new Error("Unsupported number of argument for pure functions: " + argCount);
}
builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(resolveIdentifier(pureProxyId)).callFn([ fn ])).toStmt());
}
function createEnumExpression(enumType, enumValue) {
var enumName = Object.keys(enumType.runtime).find(function(propName) {
return enumType.runtime[propName] === enumValue;
});
if (!enumName) {
throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
}
return importExpr(resolveEnumIdentifier(resolveIdentifier(enumType), enumName));
}
var CheckBindingField = function() {
function CheckBindingField(expression, bindingId) {
this.expression = expression;
this.bindingId = bindingId;
}
return CheckBindingField;
}();
function createCheckBindingField(builder) {
var bindingId = "" + builder.fields.length;
var fieldExpr = createBindFieldExpr(bindingId);
builder.fields.push(new ClassField(fieldExpr.name, null, [ StmtModifier.Private ]));
builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))).toStmt());
return new CheckBindingField(fieldExpr, bindingId);
}
function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([ throwOnChangeVar, fieldExpr, evalResult.currValExpr ]);
if (evalResult.forceUpdate) {
condition = evalResult.forceUpdate.or(condition);
}
return evalResult.stmts.concat([ new IfStmt(condition, actions.concat([ THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt() ])) ]);
}
function createBindFieldExpr(bindingId) {
return THIS_EXPR.prop("_expr_" + bindingId);
}
var VAL_UNWRAPPER_VAR = variable("valUnwrapper");
var EventHandlerVars = function() {
function EventHandlerVars() {}
EventHandlerVars.event = variable("$event");
return EventHandlerVars;
}();
var ConvertPropertyBindingResult = function() {
function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
this.stmts = stmts;
this.currValExpr = currValExpr;
this.forceUpdate = forceUpdate;
}
return ConvertPropertyBindingResult;
}();
function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
var currValExpr = createCurrValueExpr(bindingId);
var stmts = [];
if (!nameResolver) {
nameResolver = new DefaultNameResolver();
}
var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
var outputExpr = expression.visit(visitor, _Mode.Expression);
if (!outputExpr) {
return null;
}
if (visitor.temporaryCount) {
for (var i = 0; i < visitor.temporaryCount; i++) {
stmts.push(temporaryDeclaration(bindingId, i));
}
}
if (visitor.needsValueUnwrapper) {
var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod("reset", []).toStmt();
stmts.push(initValueUnwrapperStmt);
}
stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [ StmtModifier.Final ]));
if (visitor.needsValueUnwrapper) {
return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop("hasWrappedValue"));
} else {
return new ConvertPropertyBindingResult(stmts, currValExpr, null);
}
}
var ConvertActionBindingResult = function() {
function ConvertActionBindingResult(stmts, preventDefault) {
this.stmts = stmts;
this.preventDefault = preventDefault;
}
return ConvertActionBindingResult;
}();
function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
if (!nameResolver) {
nameResolver = new DefaultNameResolver();
}
var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
var actionStmts = [];
flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
var lastIndex = actionStmts.length - 1;
var preventDefaultVar = null;
if (lastIndex >= 0) {
var lastStatement = actionStmts[lastIndex];
var returnExpr = convertStmtIntoExpression(lastStatement);
if (returnExpr) {
preventDefaultVar = createPreventDefaultVar(bindingId);
actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [ StmtModifier.Final ]);
}
}
return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
}
function createSharedBindingVariablesIfNeeded(stmts) {
var unwrapperStmts = [];
var readVars = findReadVarNames(stmts);
if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [ StmtModifier.Final ]));
}
return unwrapperStmts;
}
function temporaryName(bindingId, temporaryNumber) {
return "tmp_" + bindingId + "_" + temporaryNumber;
}
function temporaryDeclaration(bindingId, temporaryNumber) {
return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
}
function prependTemporaryDecls(temporaryCount, bindingId, statements) {
for (var i = temporaryCount - 1; i >= 0; i--) {
statements.unshift(temporaryDeclaration(bindingId, i));
}
}
var _Mode;
(function(_Mode) {
_Mode[_Mode["Statement"] = 0] = "Statement";
_Mode[_Mode["Expression"] = 1] = "Expression";
})(_Mode || (_Mode = {}));
function ensureStatementMode(mode, ast) {
if (mode !== _Mode.Statement) {
throw new Error("Expected a statement, but saw " + ast);
}
}
function ensureExpressionMode(mode, ast) {
if (mode !== _Mode.Expression) {
throw new Error("Expected an expression, but saw " + ast);
}
}
function convertToStatementIfNeeded(mode, expr) {
if (mode === _Mode.Statement) {
return expr.toStmt();
} else {
return expr;
}
}
var _AstToIrVisitor = function() {
function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
this._builder = _builder;
this._nameResolver = _nameResolver;
this._implicitReceiver = _implicitReceiver;
this._valueUnwrapper = _valueUnwrapper;
this.bindingId = bindingId;
this.isAction = isAction;
this._nodeMap = new Map();
this._resultMap = new Map();
this._currentTemporary = 0;
this.needsValueUnwrapper = false;
this.temporaryCount = 0;
}
_AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
var op;
switch (ast.operation) {
case "+":
op = BinaryOperator.Plus;
break;

case "-":
op = BinaryOperator.Minus;
break;

case "*":
op = BinaryOperator.Multiply;
break;

case "/":
op = BinaryOperator.Divide;
break;

case "%":
op = BinaryOperator.Modulo;
break;

case "&&":
op = BinaryOperator.And;
break;

case "||":
op = BinaryOperator.Or;
break;

case "==":
op = BinaryOperator.Equals;
break;

case "!=":
op = BinaryOperator.NotEquals;
break;

case "===":
op = BinaryOperator.Identical;
break;

case "!==":
op = BinaryOperator.NotIdentical;
break;

case "<":
op = BinaryOperator.Lower;
break;

case ">":
op = BinaryOperator.Bigger;
break;

case "<=":
op = BinaryOperator.LowerEquals;
break;

case ">=":
op = BinaryOperator.BiggerEquals;
break;

default:
throw new Error("Unsupported operation " + ast.operation);
}
return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitChain = function(ast, mode) {
ensureStatementMode(mode, ast);
return this.visitAll(ast.expressions, mode);
};
_AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
var value = this.visit(ast.condition, _Mode.Expression);
return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
var input = this.visit(ast.exp, _Mode.Expression);
var args = this.visitAll(ast.args, _Mode.Expression);
var value = this._nameResolver.callPipe(ast.name, input, args);
if (!value) {
throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
}
this.needsValueUnwrapper = true;
return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod("unwrap", [ value ]));
};
_AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
ensureExpressionMode(mode, ast);
return this._implicitReceiver;
};
_AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
ensureExpressionMode(mode, ast);
var args = [ literal(ast.expressions.length) ];
for (var i = 0; i < ast.strings.length - 1; i++) {
args.push(literal(ast.strings[i]));
args.push(this.visit(ast.expressions[i], _Mode.Expression));
}
args.push(literal(ast.strings[ast.strings.length - 1]));
return ast.expressions.length <= 9 ? importExpr(resolveIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(resolveIdentifier(Identifiers.interpolate)).callFn([ args[0], literalArr(args.slice(1)) ]);
};
_AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
var obj = this.visit(ast.obj, _Mode.Expression);
var key = this.visit(ast.key, _Mode.Expression);
var value = this.visit(ast.value, _Mode.Expression);
return convertToStatementIfNeeded(mode, obj.key(key).set(value));
};
_AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
var parts = this.visitAll(ast.expressions, mode);
var literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
return convertToStatementIfNeeded(mode, literalArr$$);
};
_AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
var parts = [];
for (var i = 0; i < ast.keys.length; i++) {
parts.push([ ast.keys[i], this.visit(ast.values[i], _Mode.Expression) ]);
}
var literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
return convertToStatementIfNeeded(mode, literalMap$$);
};
_AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
return convertToStatementIfNeeded(mode, literal(ast.value));
};
_AstToIrVisitor.prototype._getLocal = function(name) {
if (this.isAction && name == EventHandlerVars.event.name) {
return EventHandlerVars.event;
}
return this._nameResolver.getLocal(name);
};
_AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
var leftMostSafe = this.leftMostSafeNode(ast);
if (leftMostSafe) {
return this.convertSafeAccess(ast, leftMostSafe, mode);
} else {
var args = this.visitAll(ast.args, _Mode.Expression);
var result = null;
var receiver = this.visit(ast.receiver, _Mode.Expression);
if (receiver === this._implicitReceiver) {
var varExpr = this._getLocal(ast.name);
if (isPresent(varExpr)) {
result = varExpr.callFn(args);
}
}
if (isBlank(result)) {
result = receiver.callMethod(ast.name, args);
}
return convertToStatementIfNeeded(mode, result);
}
};
_AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
var leftMostSafe = this.leftMostSafeNode(ast);
if (leftMostSafe) {
return this.convertSafeAccess(ast, leftMostSafe, mode);
} else {
var result = null;
var receiver = this.visit(ast.receiver, _Mode.Expression);
if (receiver === this._implicitReceiver) {
result = this._getLocal(ast.name);
}
if (isBlank(result)) {
result = receiver.prop(ast.name);
}
return convertToStatementIfNeeded(mode, result);
}
};
_AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
var receiver = this.visit(ast.receiver, _Mode.Expression);
if (receiver === this._implicitReceiver) {
var varExpr = this._getLocal(ast.name);
if (isPresent(varExpr)) {
throw new Error("Cannot assign to a reference or variable!");
}
}
return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
};
_AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
};
_AstToIrVisitor.prototype.visitAll = function(asts, mode) {
var _this = this;
return asts.map(function(ast) {
return _this.visit(ast, mode);
});
};
_AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
throw new Error("Quotes are not supported for evaluation!");
};
_AstToIrVisitor.prototype.visit = function(ast, mode) {
var result = this._resultMap.get(ast);
if (result) return result;
return (this._nodeMap.get(ast) || ast).visit(this, mode);
};
_AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
var temporary;
if (this.needsTemporary(leftMostSafe.receiver)) {
temporary = this.allocateTemporary();
guardedExpression = temporary.set(guardedExpression);
this._resultMap.set(leftMostSafe.receiver, temporary);
}
var condition = guardedExpression.isBlank();
if (leftMostSafe instanceof SafeMethodCall) {
this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
} else {
this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
}
var access = this.visit(ast, _Mode.Expression);
this._nodeMap.delete(leftMostSafe);
if (temporary) {
this.releaseTemporary(temporary);
}
return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
};
_AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
var _this = this;
var visit = function(visitor, ast) {
return (_this._nodeMap.get(ast) || ast).visit(visitor);
};
return ast.visit({
visitBinary: function(ast) {
return null;
},
visitChain: function(ast) {
return null;
},
visitConditional: function(ast) {
return null;
},
visitFunctionCall: function(ast) {
return null;
},
visitImplicitReceiver: function(ast) {
return null;
},
visitInterpolation: function(ast) {
return null;
},
visitKeyedRead: function(ast) {
return visit(this, ast.obj);
},
visitKeyedWrite: function(ast) {
return null;
},
visitLiteralArray: function(ast) {
return null;
},
visitLiteralMap: function(ast) {
return null;
},
visitLiteralPrimitive: function(ast) {
return null;
},
visitMethodCall: function(ast) {
return visit(this, ast.receiver);
},
visitPipe: function(ast) {
return null;
},
visitPrefixNot: function(ast) {
return null;
},
visitPropertyRead: function(ast) {
return visit(this, ast.receiver);
},
visitPropertyWrite: function(ast) {
return null;
},
visitQuote: function(ast) {
return null;
},
visitSafeMethodCall: function(ast) {
return visit(this, ast.receiver) || ast;
},
visitSafePropertyRead: function(ast) {
return visit(this, ast.receiver) || ast;
}
});
};
_AstToIrVisitor.prototype.needsTemporary = function(ast) {
var _this = this;
var visit = function(visitor, ast) {
return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
};
var visitSome = function(visitor, ast) {
return ast.some(function(ast) {
return visit(visitor, ast);
});
};
return ast.visit({
visitBinary: function(ast) {
return visit(this, ast.left) || visit(this, ast.right);
},
visitChain: function(ast) {
return false;
},
visitConditional: function(ast) {
return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
},
visitFunctionCall: function(ast) {
return true;
},
visitImplicitReceiver: function(ast) {
return false;
},
visitInterpolation: function(ast) {
return visitSome(this, ast.expressions);
},
visitKeyedRead: function(ast) {
return false;
},
visitKeyedWrite: function(ast) {
return false;
},
visitLiteralArray: function(ast) {
return true;
},
visitLiteralMap: function(ast) {
return true;
},
visitLiteralPrimitive: function(ast) {
return false;
},
visitMethodCall: function(ast) {
return true;
},
visitPipe: function(ast) {
return true;
},
visitPrefixNot: function(ast) {
return visit(this, ast.expression);
},
visitPropertyRead: function(ast) {
return false;
},
visitPropertyWrite: function(ast) {
return false;
},
visitQuote: function(ast) {
return false;
},
visitSafeMethodCall: function(ast) {
return true;
},
visitSafePropertyRead: function(ast) {
return false;
}
});
};
_AstToIrVisitor.prototype.allocateTemporary = function() {
var tempNumber = this._currentTemporary++;
this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
};
_AstToIrVisitor.prototype.releaseTemporary = function(temporary) {
this._currentTemporary--;
if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
throw new Error("Temporary " + temporary.name + " released out of order");
}
};
return _AstToIrVisitor;
}();
function flattenStatements(arg, output) {
if (Array.isArray(arg)) {
arg.forEach(function(entry) {
return flattenStatements(entry, output);
});
} else {
output.push(arg);
}
}
function createCachedLiteralArray(builder, values) {
if (values.length === 0) {
return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
}
var proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
var proxyParams = [];
var proxyReturnEntries = [];
for (var i = 0; i < values.length; i++) {
var paramName = "p" + i;
proxyParams.push(new FnParam(paramName));
proxyReturnEntries.push(variable(paramName));
}
createPureProxy(fn(proxyParams, [ new ReturnStatement(literalArr(proxyReturnEntries)) ], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
return proxyExpr.callFn(values);
}
function createCachedLiteralMap(builder, entries) {
if (entries.length === 0) {
return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
}
var proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
var proxyParams = [];
var proxyReturnEntries = [];
var values = [];
for (var i = 0; i < entries.length; i++) {
var paramName = "p" + i;
proxyParams.push(new FnParam(paramName));
proxyReturnEntries.push([ entries[i][0], variable(paramName) ]);
values.push(entries[i][1]);
}
createPureProxy(fn(proxyParams, [ new ReturnStatement(literalMap(proxyReturnEntries)) ], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
return proxyExpr.callFn(values);
}
var DefaultNameResolver = function() {
function DefaultNameResolver() {}
DefaultNameResolver.prototype.callPipe = function(name, input, args) {
return null;
};
DefaultNameResolver.prototype.getLocal = function(name) {
return null;
};
return DefaultNameResolver;
}();
function createCurrValueExpr(bindingId) {
return variable("currVal_" + bindingId);
}
function createPreventDefaultVar(bindingId) {
return variable("pd_" + bindingId);
}
function convertStmtIntoExpression(stmt) {
if (stmt instanceof ExpressionStatement) {
return stmt.expr;
} else if (stmt instanceof ReturnStatement) {
return stmt.value;
}
return null;
}
function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
var updateStmts = [];
var renderer = view.prop("renderer");
renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
switch (boundProp.type) {
case exports.PropertyBindingType.Property:
if (logBindingUpdate) {
updateStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo)).callFn([ renderer, renderElement, literal(boundProp.name), renderValue ]).toStmt());
}
updateStmts.push(renderer.callMethod("setElementProperty", [ renderElement, literal(boundProp.name), renderValue ]).toStmt());
break;

case exports.PropertyBindingType.Attribute:
renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod("toString", []));
updateStmts.push(renderer.callMethod("setElementAttribute", [ renderElement, literal(boundProp.name), renderValue ]).toStmt());
break;

case exports.PropertyBindingType.Class:
updateStmts.push(renderer.callMethod("setElementClass", [ renderElement, literal(boundProp.name), renderValue ]).toStmt());
break;

case exports.PropertyBindingType.Style:
var strValue = renderValue.callMethod("toString", []);
if (isPresent(boundProp.unit)) {
strValue = strValue.plus(literal(boundProp.unit));
}
renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
updateStmts.push(renderer.callMethod("setElementStyle", [ renderElement, literal(boundProp.name), renderValue ]).toStmt());
break;

case exports.PropertyBindingType.Animation:
throw new Error("Illegal state: Should not come here!");
}
return updateStmts;
}
function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
return renderValue;
}
if (!boundProp.needsRuntimeSecurityContext) {
securityContextExpression = createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
}
if (!securityContextExpression) {
throw new Error("internal error, no SecurityContext given " + boundProp.name);
}
var ctx = view.prop("viewUtils").prop("sanitizer");
var args = [ securityContextExpression, renderValue ];
return ctx.callMethod("sanitize", args);
}
function triggerAnimation(view, componentView, boundProp, eventListener, renderElement, renderValue, lastRenderValue) {
var detachStmts = [];
var updateStmts = [];
var animationName = boundProp.name;
var animationFnExpr = componentView.prop("componentType").prop("animations").key(literal(animationName));
var emptyStateValue = literal(EMPTY_ANIMATION_STATE);
var unitializedValue = importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));
var animationTransitionVar = variable("animationTransition_" + animationName);
updateStmts.push(animationTransitionVar.set(animationFnExpr.callFn([ view, renderElement, lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue), renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue) ])).toDeclStmt());
detachStmts.push(animationTransitionVar.set(animationFnExpr.callFn([ view, renderElement, lastRenderValue, emptyStateValue ])).toDeclStmt());
var registerStmts = [ animationTransitionVar.callMethod("onStart", [ eventListener.callMethod(BuiltinMethod.Bind, [ view, literal(BoundEventAst.calcFullName(animationName, null, "start")) ]) ]).toStmt(), animationTransitionVar.callMethod("onDone", [ eventListener.callMethod(BuiltinMethod.Bind, [ view, literal(BoundEventAst.calcFullName(animationName, null, "done")) ]) ]).toStmt() ];
updateStmts.push.apply(updateStmts, registerStmts);
detachStmts.push.apply(detachStmts, registerStmts);
return {
updateStmts: updateStmts,
detachStmts: detachStmts
};
}
function createClassStmt(config) {
var parentArgs = config.parentArgs || [];
var superCtorStmts = config.parent ? [ SUPER_EXPR.callFn(parentArgs).toStmt() ] : [];
var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [ config.builders ]);
var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
}
function concatClassBuilderParts(builders) {
return {
fields: (_a = []).concat.apply(_a, builders.map(function(builder) {
return builder.fields || [];
})),
methods: (_b = []).concat.apply(_b, builders.map(function(builder) {
return builder.methods || [];
})),
getters: (_c = []).concat.apply(_c, builders.map(function(builder) {
return builder.getters || [];
})),
ctorStmts: (_d = []).concat.apply(_d, builders.map(function(builder) {
return builder.ctorStmts || [];
}))
};
var _a, _b, _c, _d;
}
var DirectiveWrapperCompileResult = function() {
function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
this.statements = statements;
this.dirWrapperClassVar = dirWrapperClassVar;
}
return DirectiveWrapperCompileResult;
}();
var CONTEXT_FIELD_NAME = "context";
var CHANGES_FIELD_NAME = "_changes";
var CHANGED_FIELD_NAME = "_changed";
var EVENT_HANDLER_FIELD_NAME = "_eventHandler";
var CURR_VALUE_VAR = variable("currValue");
var THROW_ON_CHANGE_VAR = variable("throwOnChange");
var FORCE_UPDATE_VAR = variable("forceUpdate");
var VIEW_VAR = variable("view");
var COMPONENT_VIEW_VAR = variable("componentView");
var RENDER_EL_VAR = variable("el");
var EVENT_NAME_VAR = variable("eventName");
var RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
var DirectiveWrapperCompiler = function() {
function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
this.compilerConfig = compilerConfig;
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this._console = _console;
}
DirectiveWrapperCompiler.dirWrapperClassName = function(id) {
return "Wrapper_" + id.name;
};
DirectiveWrapperCompiler.prototype.compile = function(dirMeta) {
var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
reportParseErrors(hostParseResult.errors, this._console);
var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
Object.keys(dirMeta.inputs).forEach(function(inputFieldName) {
addCheckInputMethod(inputFieldName, builder);
});
addNgDoCheckMethod(builder);
addCheckHostMethod(hostParseResult.hostProps, builder);
addHandleEventMethod(hostParseResult.hostListeners, builder);
addSubscribeMethod(dirMeta, builder);
var classStmt = builder.build();
return new DirectiveWrapperCompileResult([ classStmt ], classStmt.name);
};
DirectiveWrapperCompiler.decorators = [ {
type: _angular_core.Injectable
} ];
DirectiveWrapperCompiler.ctorParameters = [ {
type: CompilerConfig
}, {
type: Parser
}, {
type: ElementSchemaRegistry
}, {
type: Console
} ];
return DirectiveWrapperCompiler;
}();
var DirectiveWrapperBuilder = function() {
function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
this.compilerConfig = compilerConfig;
this.dirMeta = dirMeta;
this.fields = [];
this.getters = [];
this.methods = [];
this.ctorStmts = [];
this.detachStmts = [];
this.destroyStmts = [];
var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 || this.compilerConfig.logBindingUpdate;
this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
if (this.ngOnDestroy) {
this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngOnDestroy", []).toStmt());
}
}
DirectiveWrapperBuilder.prototype.build = function() {
var dirDepParamNames = [];
for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {
dirDepParamNames.push("p" + i);
}
var methods = [ new ClassMethod("ngOnDetach", [ new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE) ], this.detachStmts), new ClassMethod("ngOnDestroy", [], this.destroyStmts) ];
var fields = [ new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [ StmtModifier.Private ]), new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)), new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [ StmtModifier.Private ]) ];
var ctorStmts = [ THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt() ];
if (this.genChanges) {
fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [ StmtModifier.Private ]));
ctorStmts.push(RESET_CHANGES_STMT);
}
ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function(paramName) {
return variable(paramName);
}))).toStmt());
return createClassStmt({
name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
ctorParams: dirDepParamNames.map(function(paramName) {
return new FnParam(paramName, DYNAMIC_TYPE);
}),
builders: [ {
fields: fields,
ctorStmts: ctorStmts,
methods: methods
}, this ]
});
};
return DirectiveWrapperBuilder;
}();
function addNgDoCheckMethod(builder) {
var changedVar = variable("changed");
var stmts = [ changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(), THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt() ];
var lifecycleStmts = [];
if (builder.genChanges) {
var onChangesStmts = [];
if (builder.ngOnChanges) {
onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngOnChanges", [ THIS_EXPR.prop(CHANGES_FIELD_NAME) ]).toStmt());
}
if (builder.compilerConfig.logBindingUpdate) {
onChangesStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([ VIEW_VAR.prop("renderer"), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME) ]).toStmt());
}
onChangesStmts.push(RESET_CHANGES_STMT);
lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
}
if (builder.ngOnInit) {
lifecycleStmts.push(new IfStmt(VIEW_VAR.prop("numberOfChecks").identical(new LiteralExpr(0)), [ THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngOnInit", []).toStmt() ]));
}
if (builder.ngDoCheck) {
lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngDoCheck", []).toStmt());
}
if (lifecycleStmts.length > 0) {
stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
}
stmts.push(new ReturnStatement(changedVar));
builder.methods.push(new ClassMethod("ngDoCheck", [ new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE) ], stmts, BOOL_TYPE));
}
function addCheckInputMethod(input, builder) {
var field = createCheckBindingField(builder);
var onChangeStatements = [ THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(), THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt() ];
if (builder.genChanges) {
onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(importExpr(resolveIdentifier(Identifiers.SimpleChange)).instantiate([ field.expression, CURR_VALUE_VAR ])).toStmt());
}
var methodBody = createCheckBindingStmt({
currValExpr: CURR_VALUE_VAR,
forceUpdate: FORCE_UPDATE_VAR,
stmts: []
}, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
builder.methods.push(new ClassMethod("check_" + input, [ new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE), new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE) ], methodBody));
}
function addCheckHostMethod(hostProps, builder) {
var stmts = [];
var methodParams = [ new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE) ];
hostProps.forEach(function(hostProp, hostPropIdx) {
var field = createCheckBindingField(builder);
var evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
if (!evalResult) {
return;
}
var securityContextExpr;
if (hostProp.needsRuntimeSecurityContext) {
securityContextExpr = variable("secCtx_" + methodParams.length);
methodParams.push(new FnParam(securityContextExpr.name, importType(resolveIdentifier(Identifiers.SecurityContext))));
}
var checkBindingStmts;
if (hostProp.isAnimation) {
var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).or(importExpr(resolveIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
checkBindingStmts = updateStmts;
(_b = builder.detachStmts).push.apply(_b, detachStmts);
} else {
checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
}
stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
var _b;
});
builder.methods.push(new ClassMethod("checkHost", methodParams, stmts));
}
function addHandleEventMethod(hostListeners, builder) {
var resultVar = variable("result");
var actionStmts = [ resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE) ];
hostListeners.forEach(function(hostListener, eventIdx) {
var evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
var trueStmts = evalResult.stmts;
if (evalResult.preventDefault) {
trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
}
actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
});
actionStmts.push(new ReturnStatement(resultVar));
builder.methods.push(new ClassMethod("handleEvent", [ new FnParam(EVENT_NAME_VAR.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE) ], actionStmts, BOOL_TYPE));
}
function addSubscribeMethod(dirMeta, builder) {
var methodParams = [ new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE) ];
var stmts = [ THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt() ];
Object.keys(dirMeta.outputs).forEach(function(emitterPropName, emitterIdx) {
var eventName = dirMeta.outputs[emitterPropName];
var paramName = "emit" + emitterIdx;
methodParams.push(new FnParam(paramName, BOOL_TYPE));
var subscriptionFieldName = "subscription" + emitterIdx;
builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
stmts.push(new IfStmt(variable(paramName), [ THIS_EXPR.prop(subscriptionFieldName).set(THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(emitterPropName).callMethod(BuiltinMethod.SubscribeObservable, [ variable(EVENT_HANDLER_FIELD_NAME).callMethod(BuiltinMethod.Bind, [ VIEW_VAR, literal(eventName) ]) ])).toStmt() ]));
builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName).and(THIS_EXPR.prop(subscriptionFieldName).callMethod("unsubscribe", [])).toStmt());
});
builder.methods.push(new ClassMethod("subscribe", methodParams, stmts));
}
var ParseResult = function() {
function ParseResult(hostProps, hostListeners, errors) {
this.hostProps = hostProps;
this.hostListeners = hostListeners;
this.errors = errors;
}
return ParseResult;
}();
function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
var errors = [];
var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
var sourceFileName = dirMeta.type.moduleUrl ? "in Directive " + dirMeta.type.name + " in " + dirMeta.type.moduleUrl : "in Directive " + dirMeta.type.name;
var sourceFile = new ParseSourceFile("", sourceFileName);
var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
return new ParseResult(parsedHostProps, parsedHostListeners, errors);
}
function reportParseErrors(parseErrors, console) {
var warnings = parseErrors.filter(function(error) {
return error.level === exports.ParseErrorLevel.WARNING;
});
var errors = parseErrors.filter(function(error) {
return error.level === exports.ParseErrorLevel.FATAL;
});
if (warnings.length > 0) {
this._console.warn("Directive parse warnings:\n" + warnings.join("\n"));
}
if (errors.length > 0) {
throw new Error("Directive parse errors:\n" + errors.join("\n"));
}
}
var DirectiveWrapperExpressions = function() {
function DirectiveWrapperExpressions() {}
DirectiveWrapperExpressions.create = function(dir, depsExpr) {
return importExpr(dir).instantiate(depsExpr, importType(dir));
};
DirectiveWrapperExpressions.context = function(dirWrapper) {
return dirWrapper.prop(CONTEXT_FIELD_NAME);
};
DirectiveWrapperExpressions.ngDoCheck = function(dirWrapper, view, renderElement, throwOnChange) {
return dirWrapper.callMethod("ngDoCheck", [ view, renderElement, throwOnChange ]);
};
DirectiveWrapperExpressions.checkHost = function(hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
if (hostProps.length) {
return [ dirWrapper.callMethod("checkHost", [ view, componentView, renderElement, throwOnChange ].concat(runtimeSecurityContexts)).toStmt() ];
} else {
return [];
}
};
DirectiveWrapperExpressions.ngOnDetach = function(hostProps, dirWrapper, view, componentView, renderEl) {
if (hostProps.some(function(prop) {
return prop.isAnimation;
})) {
return [ dirWrapper.callMethod("ngOnDetach", [ view, componentView, renderEl ]).toStmt() ];
} else {
return [];
}
};
DirectiveWrapperExpressions.ngOnDestroy = function(dir, dirWrapper) {
if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 || Object.keys(dir.outputs).length > 0) {
return [ dirWrapper.callMethod("ngOnDestroy", []).toStmt() ];
} else {
return [];
}
};
DirectiveWrapperExpressions.subscribe = function(dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
var needsSubscribe = false;
var eventFlags = [];
Object.keys(dirMeta.outputs).forEach(function(propName) {
var eventName = dirMeta.outputs[propName];
var eventUsed = usedEvents.indexOf(eventName) > -1;
needsSubscribe = needsSubscribe || eventUsed;
eventFlags.push(literal(eventUsed));
});
hostProps.forEach(function(hostProp) {
if (hostProp.isAnimation && usedEvents.length > 0) {
needsSubscribe = true;
}
});
if (needsSubscribe) {
return [ dirWrapper.callMethod("subscribe", [ view, eventListener ].concat(eventFlags)).toStmt() ];
} else {
return [];
}
};
DirectiveWrapperExpressions.handleEvent = function(hostEvents, dirWrapper, eventName, event) {
return dirWrapper.callMethod("handleEvent", [ eventName, event ]);
};
return DirectiveWrapperExpressions;
}();
function convertValueToOutputAst(value, type) {
if (type === void 0) {
type = null;
}
return visitValue(value, new _ValueOutputAstTransformer(), type);
}
var _ValueOutputAstTransformer = function() {
function _ValueOutputAstTransformer() {}
_ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
var _this = this;
return literalArr(arr.map(function(value) {
return visitValue(value, _this, null);
}), type);
};
_ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
var _this = this;
var entries = [];
Object.keys(map).forEach(function(key) {
entries.push([ key, visitValue(map[key], _this, null) ]);
});
return literalMap(entries, type);
};
_ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
return literal(value, type);
};
_ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
if (value instanceof CompileIdentifierMetadata) {
return importExpr(value);
} else if (value instanceof Expression) {
return value;
} else {
throw new Error("Illegal state: Don't now how to compile value " + value);
}
};
return _ValueOutputAstTransformer;
}();
var _DebugState = function() {
function _DebugState(nodeIndex, sourceAst) {
this.nodeIndex = nodeIndex;
this.sourceAst = sourceAst;
}
return _DebugState;
}();
var NULL_DEBUG_STATE = new _DebugState(null, null);
var CompileMethod = function() {
function CompileMethod(_view) {
this._view = _view;
this._newState = NULL_DEBUG_STATE;
this._currState = NULL_DEBUG_STATE;
this._bodyStatements = [];
this._debugEnabled = this._view.genConfig.genDebugInfo;
}
CompileMethod.prototype._updateDebugContextIfNeeded = function() {
if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
var expr = this._updateDebugContext(this._newState);
if (isPresent(expr)) {
this._bodyStatements.push(expr.toStmt());
}
}
};
CompileMethod.prototype._updateDebugContext = function(newState) {
this._currState = this._newState = newState;
if (this._debugEnabled) {
var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
return THIS_EXPR.callMethod("debug", [ literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR ]);
} else {
return null;
}
};
CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
return res || NULL_EXPR;
};
CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
this._newState = new _DebugState(nodeIndex, templateAst);
};
CompileMethod.prototype.push = function() {
var stmts = [];
for (var _i = 0; _i < arguments.length; _i++) {
stmts[_i - 0] = arguments[_i];
}
this.addStmts(stmts);
};
CompileMethod.prototype.addStmt = function(stmt) {
this._updateDebugContextIfNeeded();
this._bodyStatements.push(stmt);
};
CompileMethod.prototype.addStmts = function(stmts) {
this._updateDebugContextIfNeeded();
(_a = this._bodyStatements).push.apply(_a, stmts);
var _a;
};
CompileMethod.prototype.finish = function() {
return this._bodyStatements;
};
CompileMethod.prototype.isEmpty = function() {
return this._bodyStatements.length === 0;
};
return CompileMethod;
}();
var __extends$15 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function getPropertyInView(property, callingView, definedView) {
if (callingView === definedView) {
return property;
} else {
var viewProp = THIS_EXPR;
var currView = callingView;
while (currView !== definedView && isPresent(currView.declarationElement.view)) {
currView = currView.declarationElement.view;
viewProp = viewProp.prop("parentView");
}
if (currView !== definedView) {
throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
}
return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
}
}
var _ReplaceViewTransformer = function(_super) {
__extends$15(_ReplaceViewTransformer, _super);
function _ReplaceViewTransformer(_viewExpr, _view) {
_super.call(this);
this._viewExpr = _viewExpr;
this._view = _view;
}
_ReplaceViewTransformer.prototype._isThis = function(expr) {
return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
};
_ReplaceViewTransformer.prototype.visitReadVarExpr = function(ast, context) {
return this._isThis(ast) ? this._viewExpr : ast;
};
_ReplaceViewTransformer.prototype.visitReadPropExpr = function(ast, context) {
if (this._isThis(ast.receiver)) {
if (this._view.fields.some(function(field) {
return field.name == ast.name;
}) || this._view.getters.some(function(field) {
return field.name == ast.name;
})) {
return this._viewExpr.cast(this._view.classType).prop(ast.name);
}
}
return _super.prototype.visitReadPropExpr.call(this, ast, context);
};
return _ReplaceViewTransformer;
}(ExpressionTransformer);
function injectFromViewParentInjector(view, token, optional) {
var viewExpr;
if (view.viewType === ViewType.HOST) {
viewExpr = THIS_EXPR;
} else {
viewExpr = THIS_EXPR.prop("parentView");
}
var args = [ createDiTokenExpression(token), THIS_EXPR.prop("parentIndex") ];
if (optional) {
args.push(NULL_EXPR);
}
return viewExpr.callMethod("injectorGet", args);
}
function getViewClassName(component, embeddedTemplateIndex) {
return "View_" + component.type.name + embeddedTemplateIndex;
}
function getHandleEventMethodName(elementIndex) {
return "handleEvent_" + elementIndex;
}
var ViewQueryValues = function() {
function ViewQueryValues(view, values) {
this.view = view;
this.values = values;
}
return ViewQueryValues;
}();
var CompileQuery = function() {
function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
this.meta = meta;
this.queryList = queryList;
this.ownerDirectiveExpression = ownerDirectiveExpression;
this.view = view;
this._values = new ViewQueryValues(view, []);
}
CompileQuery.prototype.addValue = function(value, view) {
var currentView = view;
var elPath = [];
while (isPresent(currentView) && currentView !== this.view) {
var parentEl = currentView.declarationElement;
elPath.unshift(parentEl);
currentView = parentEl.view;
}
var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
var viewValues = this._values;
elPath.forEach(function(el) {
var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
viewValues = last;
} else {
var newViewValues = new ViewQueryValues(el.embeddedView, []);
viewValues.values.push(newViewValues);
viewValues = newViewValues;
}
});
viewValues.values.push(value);
if (elPath.length > 0) {
view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod("setDirty", []).toStmt());
}
};
CompileQuery.prototype._isStatic = function() {
return !this._values.values.some(function(value) {
return value instanceof ViewQueryValues;
});
};
CompileQuery.prototype.afterChildren = function(targetStaticMethod, targetDynamicMethod) {
var values = createQueryValues(this._values);
var updateStmts = [ this.queryList.callMethod("reset", [ literalArr(values) ]).toStmt() ];
if (isPresent(this.ownerDirectiveExpression)) {
var valueExpr = this.meta.first ? this.queryList.prop("first") : this.queryList;
updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
}
if (!this.meta.first) {
updateStmts.push(this.queryList.callMethod("notifyOnChanges", []).toStmt());
}
if (this.meta.first && this._isStatic()) {
targetStaticMethod.addStmts(updateStmts);
} else {
targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop("dirty"), updateStmts));
}
};
return CompileQuery;
}();
function createQueryValues(viewValues) {
return ListWrapper.flatten(viewValues.values.map(function(entry) {
if (entry instanceof ViewQueryValues) {
return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
} else {
return entry;
}
}));
}
function mapNestedViews(viewContainer, view, expressions) {
var adjustedExpressions = expressions.map(function(expr) {
return replaceVarInExpression(THIS_EXPR.name, variable("nestedView"), expr);
});
return viewContainer.callMethod("mapNestedViews", [ variable(view.className), fn([ new FnParam("nestedView", view.classType) ], [ new ReturnStatement(literalArr(adjustedExpressions)) ], DYNAMIC_TYPE) ]);
}
function createQueryList(query, directiveInstance, propertyName, compileView) {
compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [ DYNAMIC_TYPE ])));
var expr = THIS_EXPR.prop(propertyName);
compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(resolveIdentifier(Identifiers.QueryList), [ DYNAMIC_TYPE ]).instantiate([])).toStmt());
return expr;
}
function addQueryToTokenMap(map, query) {
query.meta.selectors.forEach(function(selector) {
var entry = map.get(selector.reference);
if (!entry) {
entry = [];
map.set(selector.reference, entry);
}
entry.push(query);
});
}
var ViewTypeEnum = function() {
function ViewTypeEnum() {}
ViewTypeEnum.fromValue = function(value) {
return createEnumExpression(Identifiers.ViewType, value);
};
return ViewTypeEnum;
}();
var ViewEncapsulationEnum = function() {
function ViewEncapsulationEnum() {}
ViewEncapsulationEnum.fromValue = function(value) {
return createEnumExpression(Identifiers.ViewEncapsulation, value);
};
return ViewEncapsulationEnum;
}();
var ChangeDetectorStatusEnum = function() {
function ChangeDetectorStatusEnum() {}
ChangeDetectorStatusEnum.fromValue = function(value) {
return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
};
return ChangeDetectorStatusEnum;
}();
var ViewConstructorVars = function() {
function ViewConstructorVars() {}
ViewConstructorVars.viewUtils = variable("viewUtils");
ViewConstructorVars.parentView = variable("parentView");
ViewConstructorVars.parentIndex = variable("parentIndex");
ViewConstructorVars.parentElement = variable("parentElement");
return ViewConstructorVars;
}();
var ViewProperties = function() {
function ViewProperties() {}
ViewProperties.renderer = THIS_EXPR.prop("renderer");
ViewProperties.viewUtils = THIS_EXPR.prop("viewUtils");
return ViewProperties;
}();
var InjectMethodVars = function() {
function InjectMethodVars() {}
InjectMethodVars.token = variable("token");
InjectMethodVars.requestNodeIndex = variable("requestNodeIndex");
InjectMethodVars.notFoundResult = variable("notFoundResult");
return InjectMethodVars;
}();
var DetectChangesVars = function() {
function DetectChangesVars() {}
DetectChangesVars.throwOnChange = variable("throwOnChange");
DetectChangesVars.changes = variable("changes");
DetectChangesVars.changed = variable("changed");
return DetectChangesVars;
}();
var ViewClassDependency = function() {
function ViewClassDependency(comp, placeholder) {
this.comp = comp;
this.placeholder = placeholder;
}
return ViewClassDependency;
}();
var ComponentFactoryDependency = function() {
function ComponentFactoryDependency(comp, placeholder) {
this.comp = comp;
this.placeholder = placeholder;
}
return ComponentFactoryDependency;
}();
var DirectiveWrapperDependency = function() {
function DirectiveWrapperDependency(dir, placeholder) {
this.dir = dir;
this.placeholder = placeholder;
}
return DirectiveWrapperDependency;
}();
var __extends$14 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var CompileNode = function() {
function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
this.parent = parent;
this.view = view;
this.nodeIndex = nodeIndex;
this.renderNode = renderNode;
this.sourceAst = sourceAst;
}
CompileNode.prototype.isNull = function() {
return !this.renderNode;
};
CompileNode.prototype.isRootElement = function() {
return this.view != this.parent.view;
};
return CompileNode;
}();
var CompileElement = function(_super) {
__extends$14(CompileElement, _super);
function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references, _targetDependencies) {
var _this = this;
_super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
this.component = component;
this._directives = _directives;
this._resolvedProvidersArray = _resolvedProvidersArray;
this.hasViewContainer = hasViewContainer;
this.hasEmbeddedView = hasEmbeddedView;
this._targetDependencies = _targetDependencies;
this.compViewExpr = null;
this.instances = new Map();
this.directiveWrapperInstance = new Map();
this._queryCount = 0;
this._queries = new Map();
this.contentNodesByNgContentIndex = null;
this.referenceTokens = {};
references.forEach(function(ref) {
return _this.referenceTokens[ref.name] = ref.value;
});
this.elementRef = importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([ this.renderNode ]);
this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, THIS_EXPR.callMethod("injector", [ literal(this.nodeIndex) ]));
this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop("renderer"));
if (this.hasViewContainer || this.hasEmbeddedView) {
this._createViewContainer();
}
if (this.component) {
this._createComponentFactoryResolver();
}
}
CompileElement.createNull = function() {
return new CompileElement(null, null, null, null, null, null, [], [], false, false, [], []);
};
CompileElement.prototype._createViewContainer = function() {
var fieldName = "_vc_" + this.nodeIndex;
var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.ViewContainer)), [ StmtModifier.Private ]));
var statement = THIS_EXPR.prop(fieldName).set(importExpr(resolveIdentifier(Identifiers.ViewContainer)).instantiate([ literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode ])).toStmt();
this.view.createMethod.addStmt(statement);
this.viewContainer = THIS_EXPR.prop(fieldName);
this.instances.set(resolveIdentifierToken(Identifiers.ViewContainer).reference, this.viewContainer);
this.view.viewContainers.push(this.viewContainer);
};
CompileElement.prototype._createComponentFactoryResolver = function() {
var _this = this;
var entryComponents = this.component.entryComponents.map(function(entryComponent) {
var id = new CompileIdentifierMetadata({
name: entryComponent.name
});
_this._targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
return id;
});
if (!entryComponents || entryComponents.length === 0) {
return;
}
var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([ literalArr(entryComponents.map(function(entryComponent) {
return importExpr(entryComponent);
})), injectFromViewParentInjector(this.view, resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false) ]);
var provider = new CompileProviderMetadata({
token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
useValue: createComponentFactoryResolverExpr
});
this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [ provider ], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
};
CompileElement.prototype.setComponentView = function(compViewExpr) {
this.compViewExpr = compViewExpr;
this.contentNodesByNgContentIndex = new Array(this.component.template.ngContentSelectors.length);
for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
this.contentNodesByNgContentIndex[i] = [];
}
};
CompileElement.prototype.setEmbeddedView = function(embeddedView) {
this.embeddedView = embeddedView;
if (isPresent(embeddedView)) {
var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([ THIS_EXPR, literal(this.nodeIndex), this.renderNode ]);
var provider = new CompileProviderMetadata({
token: resolveIdentifierToken(Identifiers.TemplateRef),
useValue: createTemplateRefExpr
});
this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [ provider ], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
}
};
CompileElement.prototype.beforeChildren = function() {
var _this = this;
if (this.hasViewContainer) {
this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.viewContainer.prop("vcRef"));
}
this._resolvedProviders = new Map();
this._resolvedProvidersArray.forEach(function(provider) {
return _this._resolvedProviders.set(provider.token.reference, provider);
});
Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
var isDirectiveWrapper = resolvedProvider.providerType === exports.ProviderAstType.Component || resolvedProvider.providerType === exports.ProviderAstType.Directive;
var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
if (provider.useExisting) {
return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({
token: provider.useExisting
}));
} else if (provider.useFactory) {
var deps = provider.deps || provider.useFactory.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep);
});
return importExpr(provider.useFactory).callFn(depsExpr);
} else if (provider.useClass) {
var deps = provider.deps || provider.useClass.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep);
});
if (isDirectiveWrapper) {
var directiveWrapperIdentifier = new CompileIdentifierMetadata({
name: DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass)
});
_this._targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, directiveWrapperIdentifier));
return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
} else {
return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
}
} else {
return convertValueToOutputAst(provider.useValue);
}
});
var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
if (isDirectiveWrapper) {
_this.directiveWrapperInstance.set(resolvedProvider.token.reference, instance);
_this.instances.set(resolvedProvider.token.reference, DirectiveWrapperExpressions.context(instance));
} else {
_this.instances.set(resolvedProvider.token.reference, instance);
}
});
var _loop_1 = function(i) {
var directive = this_1._directives[i];
var directiveInstance = this_1.instances.get(identifierToken(directive.type).reference);
directive.queries.forEach(function(queryMeta) {
_this._addQuery(queryMeta, directiveInstance);
});
};
var this_1 = this;
for (var i = 0; i < this._directives.length; i++) {
_loop_1(i);
}
var queriesWithReads = [];
Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function(query) {
return new _QueryWithRead(query, resolvedProvider.token);
}));
});
Object.keys(this.referenceTokens).forEach(function(varName) {
var token = _this.referenceTokens[varName];
var varValue;
if (token) {
varValue = _this.instances.get(token.reference);
} else {
varValue = _this.renderNode;
}
_this.view.locals.set(varName, varValue);
var varToken = new CompileTokenMetadata({
value: varName
});
queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
return new _QueryWithRead(query, varToken);
}));
});
queriesWithReads.forEach(function(queryWithRead) {
var value;
if (isPresent(queryWithRead.read.identifier)) {
value = _this.instances.get(queryWithRead.read.reference);
} else {
var token = _this.referenceTokens[queryWithRead.read.value];
if (isPresent(token)) {
value = _this.instances.get(token.reference);
} else {
value = _this.elementRef;
}
}
if (isPresent(value)) {
queryWithRead.query.addValue(value, _this.view);
}
});
};
CompileElement.prototype.afterChildren = function(childNodeCount) {
var _this = this;
Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
var providerExpr = _this.instances.get(resolvedProvider.token.reference);
var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
_this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
});
Array.from(this._queries.values()).forEach(function(queries) {
return queries.forEach(function(q) {
return q.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
});
});
};
CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
};
CompileElement.prototype.getComponent = function() {
return isPresent(this.component) ? this.instances.get(identifierToken(this.component.type).reference) : null;
};
CompileElement.prototype.getProviderTokens = function() {
return Array.from(this._resolvedProviders.values()).map(function(resolvedProvider) {
return createDiTokenExpression(resolvedProvider.token);
});
};
CompileElement.prototype._getQueriesFor = function(token) {
var result = [];
var currentEl = this;
var distance = 0;
var queries;
while (!currentEl.isNull()) {
queries = currentEl._queries.get(token.reference);
if (isPresent(queries)) {
result.push.apply(result, queries.filter(function(query) {
return query.meta.descendants || distance <= 1;
}));
}
if (currentEl._directives.length > 0) {
distance++;
}
currentEl = currentEl.parent;
}
queries = this.view.componentView.viewQueries.get(token.reference);
if (isPresent(queries)) {
result.push.apply(result, queries);
}
return result;
};
CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
addQueryToTokenMap(this._queries, query);
return query;
};
CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
var result = null;
if (isPresent(dep.token)) {
if (!result) {
if (dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
if (requestingProviderType === exports.ProviderAstType.Component) {
return this.compViewExpr.prop("ref");
} else {
return getPropertyInView(THIS_EXPR.prop("ref"), this.view, this.view.componentView);
}
}
}
if (!result) {
var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {
return null;
}
result = this.instances.get(dep.token.reference);
}
}
return result;
};
CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
var currElement = this;
var result = null;
if (dep.isValue) {
result = literal(dep.value);
}
if (!result && !dep.isSkipSelf) {
result = this._getLocalDependency(requestingProviderType, dep);
}
while (!result && !currElement.parent.isNull()) {
currElement = currElement.parent;
result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({
token: dep.token
}));
}
if (!result) {
result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
}
if (!result) {
result = NULL_EXPR;
}
return getPropertyInView(result, this.view, currElement.view);
};
return CompileElement;
}(CompileNode);
function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
var indexCondition;
if (childNodeCount > 0) {
indexCondition = literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
} else {
indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
}
return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [ new ReturnStatement(providerExpr) ]);
}
function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
var view = compileElement.view;
var resolvedProviderValueExpr;
var type;
if (isMulti) {
resolvedProviderValueExpr = literalArr(providerValueExpressions);
type = new ArrayType(DYNAMIC_TYPE);
} else {
resolvedProviderValueExpr = providerValueExpressions[0];
type = providerValueExpressions[0].type;
}
if (!type) {
type = DYNAMIC_TYPE;
}
if (isEager) {
view.fields.push(new ClassField(propName, type));
view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
} else {
var internalField = "_" + propName;
view.fields.push(new ClassField(internalField, type));
var getter = new CompileMethod(view);
getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [ THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt() ]));
getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
view.getters.push(new ClassGetter(propName, getter.finish(), type));
}
return THIS_EXPR.prop(propName);
}
var _QueryWithRead = function() {
function _QueryWithRead(query, match) {
this.query = query;
this.read = query.meta.read || match;
}
return _QueryWithRead;
}();
var CompilePipe = function() {
function CompilePipe(view, meta) {
var _this = this;
this.view = view;
this.meta = meta;
this._purePipeProxyCount = 0;
this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
var deps = this.meta.type.diDeps.map(function(diDep) {
if (diDep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
return getPropertyInView(THIS_EXPR.prop("ref"), _this.view, _this.view.componentView);
}
return injectFromViewParentInjector(view, diDep.token, false);
});
this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
this.view.createMethod.resetDebugInfo(null, null);
this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());
}
CompilePipe.call = function(view, name, args) {
var compView = view.componentView;
var meta = _findPipeMeta(compView, name);
var pipe;
if (meta.pure) {
pipe = compView.purePipes.get(name);
if (!pipe) {
pipe = new CompilePipe(compView, meta);
compView.purePipes.set(name, pipe);
compView.pipes.push(pipe);
}
} else {
pipe = new CompilePipe(view, meta);
view.pipes.push(pipe);
}
return pipe._call(view, args);
};
Object.defineProperty(CompilePipe.prototype, "pure", {
get: function() {
return this.meta.pure;
},
enumerable: true,
configurable: true
});
CompilePipe.prototype._call = function(callingView, args) {
if (this.meta.pure) {
var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
createPureProxy(pipeInstanceSeenFromPureProxy.prop("transform").callMethod(BuiltinMethod.Bind, [ pipeInstanceSeenFromPureProxy ]), args.length, purePipeProxyInstance, {
fields: callingView.fields,
ctorStmts: callingView.createMethod
});
return importExpr(resolveIdentifier(Identifiers.castByValue)).callFn([ purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop("transform") ]).callFn(args);
} else {
return getPropertyInView(this.instance, callingView, this.view).callMethod("transform", args);
}
};
return CompilePipe;
}();
function _findPipeMeta(view, name) {
var pipeMeta = null;
for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
var localPipeMeta = view.pipeMetas[i];
if (localPipeMeta.name == name) {
pipeMeta = localPipeMeta;
break;
}
}
if (!pipeMeta) {
throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
}
return pipeMeta;
}
var CompileViewRootNodeType;
(function(CompileViewRootNodeType) {
CompileViewRootNodeType[CompileViewRootNodeType["Node"] = 0] = "Node";
CompileViewRootNodeType[CompileViewRootNodeType["ViewContainer"] = 1] = "ViewContainer";
CompileViewRootNodeType[CompileViewRootNodeType["NgContent"] = 2] = "NgContent";
})(CompileViewRootNodeType || (CompileViewRootNodeType = {}));
var CompileViewRootNode = function() {
function CompileViewRootNode(type, expr, ngContentIndex) {
this.type = type;
this.expr = expr;
this.ngContentIndex = ngContentIndex;
}
return CompileViewRootNode;
}();
var CompileView = function() {
function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
var _this = this;
this.component = component;
this.genConfig = genConfig;
this.pipeMetas = pipeMetas;
this.styles = styles;
this.animations = animations;
this.viewIndex = viewIndex;
this.declarationElement = declarationElement;
this.templateVariableBindings = templateVariableBindings;
this.viewChildren = [];
this.nodes = [];
this.rootNodes = [];
this.lastRenderNode = NULL_EXPR;
this.viewContainers = [];
this.methods = [];
this.ctorStmts = [];
this.fields = [];
this.getters = [];
this.disposables = [];
this.purePipes = new Map();
this.pipes = [];
this.locals = new Map();
this.literalArrayCount = 0;
this.literalMapCount = 0;
this.pipeCount = 0;
this.createMethod = new CompileMethod(this);
this.animationBindingsMethod = new CompileMethod(this);
this.injectorGetMethod = new CompileMethod(this);
this.updateContentQueriesMethod = new CompileMethod(this);
this.dirtyParentQueriesMethod = new CompileMethod(this);
this.updateViewQueriesMethod = new CompileMethod(this);
this.detectChangesInInputsMethod = new CompileMethod(this);
this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
this.destroyMethod = new CompileMethod(this);
this.detachMethod = new CompileMethod(this);
this.viewType = getViewType(component, viewIndex);
this.className = getViewClassName(component, viewIndex);
this.classType = importType(new CompileIdentifierMetadata({
name: this.className
}));
this.classExpr = variable(this.className);
if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
this.componentView = this;
} else {
this.componentView = this.declarationElement.view.componentView;
}
this.componentContext = getPropertyInView(THIS_EXPR.prop("context"), this, this.componentView);
var viewQueries = new Map();
if (this.viewType === ViewType.COMPONENT) {
var directiveInstance_1 = THIS_EXPR.prop("context");
this.component.viewQueries.forEach(function(queryMeta, queryIndex) {
var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
var queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this);
var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
addQueryToTokenMap(viewQueries, query);
});
}
this.viewQueries = viewQueries;
templateVariableBindings.forEach(function(entry) {
_this.locals.set(entry[1], THIS_EXPR.prop("context").prop(entry[0]));
});
if (!this.declarationElement.isNull()) {
this.declarationElement.setEmbeddedView(this);
}
}
CompileView.prototype.callPipe = function(name, input, args) {
return CompilePipe.call(this, name, [ input ].concat(args));
};
CompileView.prototype.getLocal = function(name) {
if (name == EventHandlerVars.event.name) {
return EventHandlerVars.event;
}
var currView = this;
var result = currView.locals.get(name);
while (!result && isPresent(currView.declarationElement.view)) {
currView = currView.declarationElement.view;
result = currView.locals.get(name);
}
if (isPresent(result)) {
return getPropertyInView(result, this, currView);
} else {
return null;
}
};
CompileView.prototype.afterNodes = function() {
var _this = this;
Array.from(this.viewQueries.values()).forEach(function(queries) {
return queries.forEach(function(q) {
return q.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
});
});
};
return CompileView;
}();
function getViewType(component, embeddedTemplateIndex) {
if (embeddedTemplateIndex > 0) {
return ViewType.EMBEDDED;
}
if (component.type.isHost) {
return ViewType.HOST;
}
return ViewType.COMPONENT;
}
function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
var usedEvents = collectEvents(boundEvents, directives);
if (!usedEvents.size) {
return false;
}
if (bindToRenderer) {
subscribeToRenderEvents(usedEvents, compileElement);
}
subscribeToDirectiveEvents(usedEvents, directives, compileElement);
generateHandleEventMethod(boundEvents, directives, compileElement);
return true;
}
function collectEvents(boundEvents, directives) {
var usedEvents = new Map();
boundEvents.forEach(function(event) {
usedEvents.set(event.fullName, event);
});
directives.forEach(function(dirAst) {
dirAst.hostEvents.forEach(function(event) {
usedEvents.set(event.fullName, event);
});
});
return usedEvents;
}
function subscribeToRenderEvents(usedEvents, compileElement) {
var eventAndTargetExprs = [];
usedEvents.forEach(function(event) {
if (!event.phase) {
eventAndTargetExprs.push(literal(event.name), literal(event.target));
}
});
if (eventAndTargetExprs.length) {
var disposableVar = variable("disposable_" + compileElement.view.disposables.length);
compileElement.view.disposables.push(disposableVar);
compileElement.view.createMethod.addStmt(disposableVar.set(importExpr(resolveIdentifier(Identifiers.subscribeToRenderElement)).callFn([ THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs), handleEventExpr(compileElement) ])).toDeclStmt(FUNCTION_TYPE, [ StmtModifier.Private ]));
}
}
function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
var usedEventNames = Array.from(usedEvents.keys());
directives.forEach(function(dirAst) {
var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
});
}
function generateHandleEventMethod(boundEvents, directives, compileElement) {
var hasComponentHostListener = directives.some(function(dirAst) {
return dirAst.hostEvents.some(function(event) {
return dirAst.directive.isComponent;
});
});
var markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
var handleEventStmts = new CompileMethod(compileElement.view);
handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
handleEventStmts.push(markPathToRootStart.callMethod("markPathToRootAsCheckOnce", []).toStmt());
var eventNameVar = variable("eventName");
var resultVar = variable("result");
handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
directives.forEach(function(dirAst, dirIdx) {
var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
if (dirAst.hostEvents.length > 0) {
handleEventStmts.push(resultVar.set(DirectiveWrapperExpressions.handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event).and(resultVar)).toStmt());
}
});
boundEvents.forEach(function(renderEvent, renderEventIdx) {
var evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
var trueStmts = evalResult.stmts;
if (evalResult.preventDefault) {
trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
}
handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
});
handleEventStmts.push(new ReturnStatement(resultVar));
compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [ new FnParam(eventNameVar.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE) ], handleEventStmts.finish(), BOOL_TYPE));
}
function handleEventExpr(compileElement) {
var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
return THIS_EXPR.callMethod("eventHandler", [ THIS_EXPR.prop(handleEventMethodName) ]);
}
var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop("numberOfChecks").identical(new LiteralExpr(0));
var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
var view = compileElement.view;
var lifecycleHooks = directiveMeta.type.lifecycleHooks;
var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [ directiveInstance.callMethod("ngAfterContentInit", []).toStmt() ]));
}
if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterContentChecked", []).toStmt());
}
}
function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
var view = compileElement.view;
var lifecycleHooks = directiveMeta.type.lifecycleHooks;
var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [ directiveInstance.callMethod("ngAfterViewInit", []).toStmt() ]));
}
if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterViewChecked", []).toStmt());
}
}
function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
}
function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
var onDestroyMethod = compileElement.view.destroyMethod;
onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
if (provider.providerType !== exports.ProviderAstType.Directive && provider.providerType !== exports.ProviderAstType.Component && provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
onDestroyMethod.addStmt(providerInstance.callMethod("ngOnDestroy", []).toStmt());
}
}
function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
var onDestroyMethod = view.destroyMethod;
if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
onDestroyMethod.addStmt(pipeInstance.callMethod("ngOnDestroy", []).toStmt());
}
}
function bindRenderText(boundText, compileNode, view) {
var valueField = createCheckBindingField(view);
var evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
if (!evalResult) {
return null;
}
view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [ THIS_EXPR.prop("renderer").callMethod("setText", [ compileNode.renderNode, evalResult.currValExpr ]).toStmt() ]));
}
function bindRenderInputs(boundProps, hasEvents, compileElement) {
var view = compileElement.view;
var renderNode = compileElement.renderNode;
boundProps.forEach(function(boundProp) {
var bindingField = createCheckBindingField(view);
view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
var evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
if (!evalResult) {
return;
}
var checkBindingStmts = [];
var compileMethod = view.detectChangesRenderPropertiesMethod;
switch (boundProp.type) {
case exports.PropertyBindingType.Property:
case exports.PropertyBindingType.Attribute:
case exports.PropertyBindingType.Class:
case exports.PropertyBindingType.Style:
checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
break;

case exports.PropertyBindingType.Animation:
compileMethod = view.animationBindingsMethod;
var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) : importExpr(resolveIdentifier(Identifiers.noop))).callMethod(BuiltinMethod.Bind, [ THIS_EXPR ]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
view.detachMethod.addStmts(detachStmts);
break;
}
compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
});
}
function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function(boundProp) {
return boundProp.needsRuntimeSecurityContext;
}).map(function(boundProp) {
var ctx;
switch (boundProp.type) {
case exports.PropertyBindingType.Property:
ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
break;

case exports.PropertyBindingType.Attribute:
ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
break;

default:
throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
}
return createEnumExpression(Identifiers.SecurityContext, ctx);
});
compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
}
function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
var view = compileElement.view;
var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
directiveAst.inputs.forEach(function(input, inputIdx) {
var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
if (!evalResult) {
return;
}
detectChangesInInputsMethod.addStmts(evalResult.stmts);
detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod("check_" + input.directiveName, [ evalResult.currValExpr, DetectChangesVars.throwOnChange, evalResult.forceUpdate || literal(false) ]).toStmt());
});
var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
var directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
var directiveDetectChangesStmt = isOnPushComp ? new IfStmt(directiveDetectChangesExpr, [ compileElement.compViewExpr.callMethod("markAsCheckOnce", []).toStmt() ]) : directiveDetectChangesExpr.toStmt();
detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
}
function bindView(view, parsedTemplate, schemaRegistry) {
var visitor = new ViewBinderVisitor(view, schemaRegistry);
templateVisitAll(visitor, parsedTemplate);
view.pipes.forEach(function(pipe) {
bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
});
}
var ViewBinderVisitor = function() {
function ViewBinderVisitor(view, _schemaRegistry) {
this.view = view;
this._schemaRegistry = _schemaRegistry;
this._nodeIndex = 0;
}
ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
var node = this.view.nodes[this._nodeIndex++];
bindRenderText(ast, node, this.view);
return null;
};
ViewBinderVisitor.prototype.visitText = function(ast, parent) {
this._nodeIndex++;
return null;
};
ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
return null;
};
ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
var _this = this;
var compileElement = this.view.nodes[this._nodeIndex++];
var hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
bindRenderInputs(ast.inputs, hasEvents, compileElement);
ast.directives.forEach(function(directiveAst, dirIndex) {
var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
});
templateVisitAll(this, ast.children, compileElement);
ast.directives.forEach(function(directiveAst) {
var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
});
ast.providers.forEach(function(providerAst) {
var providerInstance = compileElement.instances.get(providerAst.token.reference);
bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
});
return null;
};
ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
var compileElement = this.view.nodes[this._nodeIndex++];
bindOutputs(ast.outputs, ast.directives, compileElement, false);
ast.directives.forEach(function(directiveAst, dirIndex) {
var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
});
ast.providers.forEach(function(providerAst) {
var providerInstance = compileElement.instances.get(providerAst.token.reference);
bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
});
bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
return null;
};
ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
return null;
};
ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
return null;
};
return ViewBinderVisitor;
}();
var IMPLICIT_TEMPLATE_VAR = "$implicit";
var CLASS_ATTR$1 = "class";
var STYLE_ATTR = "style";
var NG_CONTAINER_TAG = "ng-container";
var parentRenderNodeVar = variable("parentRenderNode");
var rootSelectorVar = variable("rootSelector");
function buildView(view, template, targetDependencies) {
var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
var parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
templateVisitAll(builderVisitor, template, parentEl);
if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
}
return builderVisitor.nestedViewCount;
}
function finishView(view, targetStatements) {
view.afterNodes();
createViewTopLevelStmts(view, targetStatements);
view.nodes.forEach(function(node) {
if (node instanceof CompileElement && node.hasEmbeddedView) {
finishView(node.embeddedView, targetStatements);
}
});
}
var ViewBuilderVisitor = function() {
function ViewBuilderVisitor(view, targetDependencies) {
this.view = view;
this.targetDependencies = targetDependencies;
this.nestedViewCount = 0;
}
ViewBuilderVisitor.prototype._isRootNode = function(parent) {
return parent.view !== this.view;
};
ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
var projectedNode = _getOuterContainerOrSelf(node);
var parent = projectedNode.parent;
var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
var viewContainer = node instanceof CompileElement && node.hasViewContainer ? node.viewContainer : null;
if (this._isRootNode(parent)) {
if (this.view.viewType !== ViewType.COMPONENT) {
this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
}
} else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
}
};
ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
parent = _getOuterContainerParentOrSelf(parent);
if (this._isRootNode(parent)) {
if (this.view.viewType === ViewType.COMPONENT) {
return parentRenderNodeVar;
} else {
return NULL_EXPR;
}
} else {
return isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
}
};
ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function() {
var view = this.view;
if (view.rootNodes.length === 0 || view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
var fieldName = "_el_" + view.nodes.length;
view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createTemplateAnchor", [ NULL_EXPR, NULL_EXPR ])).toStmt());
view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
}
return view.rootNodes[view.rootNodes.length - 1].expr;
};
ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
return this._visitText(ast, "", parent);
};
ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
return this._visitText(ast, ast.value, parent);
};
ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
var fieldName = "_text_" + this.view.nodes.length;
this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
var renderNode = THIS_EXPR.prop(fieldName);
var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
var createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createText", [ this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast) ])).toStmt();
this.view.nodes.push(compileNode);
this.view.createMethod.addStmt(createRenderNode);
this._addRootNodeAndProject(compileNode);
return renderNode;
};
ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
this.view.createMethod.resetDebugInfo(null, ast);
var parentRenderNode = this._getParentRenderNode(parent);
if (parentRenderNode !== NULL_EXPR) {
this.view.createMethod.addStmt(THIS_EXPR.callMethod("projectNodes", [ parentRenderNode, literal(ast.index) ]).toStmt());
} else if (this._isRootNode(parent)) {
if (this.view.viewType !== ViewType.COMPONENT) {
this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
}
} else {
if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
}
}
return null;
};
ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
var nodeIndex = this.view.nodes.length;
var createRenderNodeExpr;
var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
var directives = ast.directives.map(function(directiveAst) {
return directiveAst.directive;
});
var component = directives.find(function(directive) {
return directive.isComponent;
});
if (ast.name === NG_CONTAINER_TAG) {
createRenderNodeExpr = ViewProperties.renderer.callMethod("createTemplateAnchor", [ this._getParentRenderNode(parent), debugContextExpr ]);
} else {
var htmlAttrs = _readHtmlAttrs(ast.attrs);
var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function(v) {
return literal(v);
}));
if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
createRenderNodeExpr = importExpr(resolveIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar, debugContextExpr ]);
} else {
createRenderNodeExpr = importExpr(resolveIdentifier(Identifiers.createRenderElement)).callFn([ ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name), attrNameAndValues, debugContextExpr ]);
}
}
var fieldName = "_el_" + nodeIndex;
this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
var renderNode = THIS_EXPR.prop(fieldName);
var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references, this.targetDependencies);
this.view.nodes.push(compileElement);
var compViewExpr = null;
if (isPresent(component)) {
var nestedComponentIdentifier = new CompileIdentifierMetadata({
name: getViewClassName(component, 0)
});
this.targetDependencies.push(new ViewClassDependency(component.type, nestedComponentIdentifier));
compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex);
this.view.fields.push(new ClassField(compViewExpr.name, importType(resolveIdentifier(Identifiers.AppView), [ importType(component.type) ])));
this.view.viewChildren.push(compViewExpr);
compileElement.setComponentView(compViewExpr);
this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).instantiate([ ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode ])).toStmt());
}
compileElement.beforeChildren();
this._addRootNodeAndProject(compileElement);
templateVisitAll(this, ast.children, compileElement);
compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
if (isPresent(compViewExpr)) {
this.view.createMethod.addStmt(compViewExpr.callMethod("create", [ compileElement.getComponent() ]).toStmt());
}
return null;
};
ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
var nodeIndex = this.view.nodes.length;
var fieldName = "_anchor_" + nodeIndex;
this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createTemplateAnchor", [ this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast) ])).toStmt());
var renderNode = THIS_EXPR.prop(fieldName);
var templateVariableBindings = ast.variables.map(function(varAst) {
return [ varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name ];
});
var directives = ast.directives.map(function(directiveAst) {
return directiveAst.directive;
});
var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references, this.targetDependencies);
this.view.nodes.push(compileElement);
this.nestedViewCount++;
var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
compileElement.beforeChildren();
this._addRootNodeAndProject(compileElement);
compileElement.afterChildren(0);
return null;
};
ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
return null;
};
ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
return null;
};
return ViewBuilderVisitor;
}();
function _getOuterContainerOrSelf(node) {
var view = node.view;
while (_isNgContainer(node.parent, view)) {
node = node.parent;
}
return node;
}
function _getOuterContainerParentOrSelf(el) {
var view = el.view;
while (_isNgContainer(el, view)) {
el = el.parent;
}
return el;
}
function _isNgContainer(node, view) {
return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
}
function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
var mapResult = {};
Object.keys(declaredHtmlAttrs).forEach(function(key) {
mapResult[key] = declaredHtmlAttrs[key];
});
directives.forEach(function(directiveMeta) {
Object.keys(directiveMeta.hostAttributes).forEach(function(name) {
var value = directiveMeta.hostAttributes[name];
var prevValue = mapResult[name];
mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
});
});
var arrResult = [];
Object.keys(mapResult).sort().forEach(function(attrName) {
arrResult.push(attrName, mapResult[attrName]);
});
return arrResult;
}
function _readHtmlAttrs(attrs) {
var htmlAttrs = {};
attrs.forEach(function(ast) {
htmlAttrs[ast.name] = ast.value;
});
return htmlAttrs;
}
function mergeAttributeValue(attrName, attrValue1, attrValue2) {
if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
return attrValue1 + " " + attrValue2;
} else {
return attrValue2;
}
}
function createViewTopLevelStmts(view, targetStatements) {
var nodeDebugInfosVar = NULL_EXPR;
if (view.genConfig.genDebugInfo) {
nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex);
targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [ TypeModifier.Const ]))).toDeclStmt(null, [ StmtModifier.Final ]));
}
var renderCompTypeVar = variable("renderType_" + view.component.type.name);
if (view.viewIndex === 0) {
var templateUrlInfo = void 0;
if (view.component.template.templateUrl == view.component.type.moduleUrl) {
templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
} else {
templateUrlInfo = view.component.template.templateUrl;
}
targetStatements.push(renderCompTypeVar.set(importExpr(resolveIdentifier(Identifiers.createRenderComponentType)).callFn([ view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(""), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, literalMap(view.animations.map(function(entry) {
return [ entry.name, entry.fnExp ];
})) ])).toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));
}
var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
targetStatements.push(viewClass);
}
function createStaticNodeDebugInfo(node) {
var compileElement = node instanceof CompileElement ? node : null;
var providerTokens = [];
var componentToken = NULL_EXPR;
var varTokenEntries = [];
if (isPresent(compileElement)) {
providerTokens = compileElement.getProviderTokens();
if (isPresent(compileElement.component)) {
componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
}
Object.keys(compileElement.referenceTokens).forEach(function(varName) {
var token = compileElement.referenceTokens[varName];
varTokenEntries.push([ varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR ]);
});
}
return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([ literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [ TypeModifier.Const ])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [ TypeModifier.Const ])) ], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [ TypeModifier.Const ]));
}
function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
var viewConstructorArgs = [ new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentView.name, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ])), new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE), new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE) ];
var superConstructorArgs = [ variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex, ViewConstructorVars.parentElement, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view)) ];
if (view.genConfig.genDebugInfo) {
superConstructorArgs.push(nodeDebugInfosVar);
}
if (view.viewType === ViewType.EMBEDDED) {
viewConstructorArgs.push(new FnParam("declaredViewContainer", importType(resolveIdentifier(Identifiers.ViewContainer))));
superConstructorArgs.push(variable("declaredViewContainer"));
}
var viewMethods = [ new ClassMethod("createInternal", [ new FnParam(rootSelectorVar.name, STRING_TYPE) ], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.ComponentRef), [ DYNAMIC_TYPE ])), new ClassMethod("injectorGetInternal", [ new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE) ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE), new ClassMethod("detectChangesInternal", [ new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE) ], generateDetectChangesMethod(view)), new ClassMethod("dirtyParentQueriesInternal", [], view.dirtyParentQueriesMethod.finish()), new ClassMethod("destroyInternal", [], generateDestroyMethod(view)), new ClassMethod("detachInternal", [], view.detachMethod.finish()), generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view), generateCreateEmbeddedViewsMethod(view) ].filter(function(method) {
return method.body.length > 0;
});
var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
var viewClass = createClassStmt({
name: view.className,
parent: importExpr(resolveIdentifier(superClass), [ getContextType(view) ]),
parentArgs: superConstructorArgs,
ctorParams: viewConstructorArgs,
builders: [ {
methods: viewMethods
}, view ]
});
return viewClass;
}
function generateDestroyMethod(view) {
var stmts = [];
view.viewContainers.forEach(function(viewContainer) {
stmts.push(viewContainer.callMethod("destroyNestedViews", []).toStmt());
});
view.viewChildren.forEach(function(viewChild) {
stmts.push(viewChild.callMethod("destroy", []).toStmt());
});
stmts.push.apply(stmts, view.destroyMethod.finish());
return stmts;
}
function generateCreateMethod(view) {
var parentRenderNodeExpr = NULL_EXPR;
var parentRenderNodeStmts = [];
if (view.viewType === ViewType.COMPONENT) {
parentRenderNodeExpr = ViewProperties.renderer.callMethod("createViewRoot", [ THIS_EXPR.prop("parentElement") ]);
parentRenderNodeStmts = [ parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [ StmtModifier.Final ]) ];
}
var resultExpr;
if (view.viewType === ViewType.HOST) {
var hostEl = view.nodes[0];
resultExpr = importExpr(resolveIdentifier(Identifiers.ComponentRef_), [ DYNAMIC_TYPE ]).instantiate([ literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent() ]);
} else {
resultExpr = NULL_EXPR;
}
var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE).prop("directRenderer").conditional(NULL_EXPR, literalArr(view.nodes.map(function(node) {
return node.renderNode;
})));
return parentRenderNodeStmts.concat(view.createMethod.finish(), [ THIS_EXPR.callMethod("init", [ view.lastRenderNode, allNodesExpr, view.disposables.length ? literalArr(view.disposables) : NULL_EXPR ]).toStmt(), new ReturnStatement(resultExpr) ]);
}
function generateDetectChangesMethod(view) {
var stmts = [];
if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() && view.viewContainers.length === 0 && view.viewChildren.length === 0) {
return stmts;
}
stmts.push.apply(stmts, view.animationBindingsMethod.finish());
stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
view.viewContainers.forEach(function(viewContainer) {
stmts.push(viewContainer.callMethod("detectChangesInNestedViews", [ DetectChangesVars.throwOnChange ]).toStmt());
});
var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
if (afterContentStmts.length > 0) {
stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
}
stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
view.viewChildren.forEach(function(viewChild) {
stmts.push(viewChild.callMethod("detectChanges", [ DetectChangesVars.throwOnChange ]).toStmt());
});
var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
if (afterViewStmts.length > 0) {
stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
}
var varStmts = [];
var readVars = findReadVarNames(stmts);
if (readVars.has(DetectChangesVars.changed.name)) {
varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
}
if (readVars.has(DetectChangesVars.changes.name)) {
varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));
}
varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
return varStmts.concat(stmts);
}
function addReturnValuefNotEmpty(statements, value) {
if (statements.length > 0) {
return statements.concat([ new ReturnStatement(value) ]);
} else {
return statements;
}
}
function getContextType(view) {
if (view.viewType === ViewType.COMPONENT) {
return importType(view.component.type);
}
return DYNAMIC_TYPE;
}
function getChangeDetectionMode(view) {
var mode;
if (view.viewType === ViewType.COMPONENT) {
mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce;
} else {
mode = ChangeDetectorStatus.CheckAlways;
}
return mode;
}
function generateVisitRootNodesMethod(view) {
var cbVar = variable("cb");
var ctxVar = variable("ctx");
var stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
return new ClassMethod("visitRootNodesInternal", [ new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE) ], stmts);
}
function generateVisitProjectableNodesMethod(view) {
var nodeIndexVar = variable("nodeIndex");
var ngContentIndexVar = variable("ngContentIndex");
var cbVar = variable("cb");
var ctxVar = variable("ctx");
var stmts = [];
view.nodes.forEach(function(node) {
if (node instanceof CompileElement && node.component) {
node.contentNodesByNgContentIndex.forEach(function(projectedNodes, ngContentIndex) {
stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)).and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
});
}
});
return new ClassMethod("visitProjectableNodesInternal", [ new FnParam(nodeIndexVar.name, NUMBER_TYPE), new FnParam(ngContentIndexVar.name, NUMBER_TYPE), new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE) ], stmts);
}
function generateVisitNodesStmts(nodes, cb, ctx) {
var stmts = [];
nodes.forEach(function(node) {
switch (node.type) {
case CompileViewRootNodeType.Node:
stmts.push(cb.callFn([ node.expr, ctx ]).toStmt());
break;

case CompileViewRootNodeType.ViewContainer:
stmts.push(cb.callFn([ node.expr.prop("nativeElement"), ctx ]).toStmt());
stmts.push(node.expr.callMethod("visitNestedViewRootNodes", [ cb, ctx ]).toStmt());
break;

case CompileViewRootNodeType.NgContent:
stmts.push(THIS_EXPR.callMethod("visitProjectedNodes", [ literal(node.ngContentIndex), cb, ctx ]).toStmt());
break;
}
});
return stmts;
}
function generateCreateEmbeddedViewsMethod(view) {
var nodeIndexVar = variable("nodeIndex");
var stmts = [];
view.nodes.forEach(function(node) {
if (node instanceof CompileElement) {
if (node.embeddedView) {
var parentNodeIndex = node.isRootElement() ? null : node.parent.nodeIndex;
stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [ new ReturnStatement(node.embeddedView.classExpr.instantiate([ ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode, node.viewContainer ])) ]));
}
}
});
if (stmts.length > 0) {
stmts.push(new ReturnStatement(NULL_EXPR));
}
return new ClassMethod("createEmbeddedViewInternal", [ new FnParam(nodeIndexVar.name, NUMBER_TYPE) ], stmts, importType(resolveIdentifier(Identifiers.AppView), [ DYNAMIC_TYPE ]));
}
var ViewCompileResult = function() {
function ViewCompileResult(statements, viewClassVar, dependencies) {
this.statements = statements;
this.viewClassVar = viewClassVar;
this.dependencies = dependencies;
}
return ViewCompileResult;
}();
var ViewCompiler = function() {
function ViewCompiler(_genConfig, _schemaRegistry) {
this._genConfig = _genConfig;
this._schemaRegistry = _schemaRegistry;
}
ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes, compiledAnimations) {
var dependencies = [];
var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
var statements = [];
buildView(view, template, dependencies);
bindView(view, template, this._schemaRegistry);
finishView(view, statements);
return new ViewCompileResult(statements, view.classExpr.name, dependencies);
};
ViewCompiler.decorators = [ {
type: _angular_core.Injectable
} ];
ViewCompiler.ctorParameters = [ {
type: CompilerConfig
}, {
type: ElementSchemaRegistry
} ];
return ViewCompiler;
}();
var SourceModule = function() {
function SourceModule(fileUrl, moduleUrl, source) {
this.fileUrl = fileUrl;
this.moduleUrl = moduleUrl;
this.source = source;
}
return SourceModule;
}();
function analyzeNgModules(programStaticSymbols, options, metadataResolver) {
var _a = _createNgModules(programStaticSymbols, options, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
return _analyzeNgModules(ngModules, symbolsMissingModule);
}
function analyzeAndValidateNgModules(programStaticSymbols, options, metadataResolver) {
var result = analyzeNgModules(programStaticSymbols, options, metadataResolver);
if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
var messages = result.symbolsMissingModule.map(function(s) {
return "Cannot determine the module for class " + s.name + " in " + s.filePath + "!";
});
throw new Error(messages.join("\n"));
}
return result;
}
function loadNgModuleDirectives(ngModules) {
return Promise.all(ListWrapper.flatten(ngModules.map(function(ngModule) {
return ngModule.transitiveModule.directiveLoaders.map(function(loader) {
return loader();
});
}))).then(function() {});
}
function _analyzeNgModules(ngModuleMetas, symbolsMissingModule) {
var moduleMetasByRef = new Map();
ngModuleMetas.forEach(function(ngModule) {
return moduleMetasByRef.set(ngModule.type.reference, ngModule);
});
var ngModuleByPipeOrDirective = new Map();
var ngModulesByFile = new Map();
var ngDirectivesByFile = new Map();
var filePaths = new Set();
ngModuleMetas.forEach(function(ngModuleMeta) {
var srcFileUrl = ngModuleMeta.type.reference.filePath;
filePaths.add(srcFileUrl);
ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
ngModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
var fileUrl = dirIdentifier.reference.filePath;
filePaths.add(fileUrl);
ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
});
ngModuleMeta.declaredPipes.forEach(function(pipeIdentifier) {
var fileUrl = pipeIdentifier.reference.filePath;
filePaths.add(fileUrl);
ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
});
});
var files = [];
filePaths.forEach(function(srcUrl) {
var directives = ngDirectivesByFile.get(srcUrl) || [];
var ngModules = ngModulesByFile.get(srcUrl) || [];
files.push({
srcUrl: srcUrl,
directives: directives,
ngModules: ngModules
});
});
return {
ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
files: files,
ngModules: ngModuleMetas,
symbolsMissingModule: symbolsMissingModule
};
}
var OfflineCompiler = function() {
function OfflineCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat, _animationParser) {
this._metadataResolver = _metadataResolver;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._viewCompiler = _viewCompiler;
this._dirWrapperCompiler = _dirWrapperCompiler;
this._ngModuleCompiler = _ngModuleCompiler;
this._outputEmitter = _outputEmitter;
this._localeId = _localeId;
this._translationFormat = _translationFormat;
this._animationParser = _animationParser;
this._animationCompiler = new AnimationCompiler();
}
OfflineCompiler.prototype.clearCache = function() {
this._metadataResolver.clearCache();
};
OfflineCompiler.prototype.compileModules = function(staticSymbols, options) {
var _this = this;
var _a = analyzeAndValidateNgModules(staticSymbols, options, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
return loadNgModuleDirectives(ngModules).then(function() {
var sourceModules = files.map(function(file) {
return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.ngModules);
});
return ListWrapper.flatten(sourceModules);
});
};
OfflineCompiler.prototype._compileSrcFile = function(srcFileUrl, ngModuleByPipeOrDirective, directives, ngModules) {
var _this = this;
var fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
var statements = [];
var exportedVars = [];
var outputSourceModules = [];
exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
return _this._compileModule(ngModuleType, statements);
}));
exportedVars.push.apply(exportedVars, directives.map(function(directiveType) {
return _this._compileDirectiveWrapper(directiveType, statements);
}));
directives.forEach(function(dirType) {
var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);
if (!compMeta.isComponent) {
return Promise.resolve(null);
}
var ngModule = ngModuleByPipeOrDirective.get(dirType);
if (!ngModule) {
throw new Error("Internal Error: cannot determine the module for component " + compMeta.type.name + "!");
}
_assertComponent(compMeta);
var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
outputSourceModules.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
});
exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
});
if (statements.length > 0) {
var srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
outputSourceModules.unshift(srcModule);
}
return outputSourceModules;
};
OfflineCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
var providers = [];
if (this._localeId) {
providers.push(new CompileProviderMetadata({
token: resolveIdentifierToken(Identifiers.LOCALE_ID),
useValue: this._localeId
}));
}
if (this._translationFormat) {
providers.push(new CompileProviderMetadata({
token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
useValue: this._translationFormat
}));
}
var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
appCompileResult.dependencies.forEach(function(dep) {
dep.placeholder.name = _componentFactoryName(dep.comp);
dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
});
targetStatements.push.apply(targetStatements, appCompileResult.statements);
return appCompileResult.ngModuleFactoryVar;
};
OfflineCompiler.prototype._compileDirectiveWrapper = function(directiveType, targetStatements) {
var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
targetStatements.push.apply(targetStatements, dirCompileResult.statements);
return dirCompileResult.dirWrapperClassVar;
};
OfflineCompiler.prototype._compileComponentFactory = function(compMeta, ngModule, fileSuffix, targetStatements) {
var hostMeta = createHostComponentMeta(compMeta);
var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [ compMeta.type ], null, fileSuffix, targetStatements);
var compFactoryVar = _componentFactoryName(compMeta.type);
targetStatements.push(variable(compFactoryVar).set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [ importType(compMeta.type) ]).instantiate([ literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type) ], importType(resolveIdentifier(Identifiers.ComponentFactory), [ importType(compMeta.type) ], [ TypeModifier.Const ]))).toDeclStmt(null, [ StmtModifier.Final ]));
return compFactoryVar;
};
OfflineCompiler.prototype._compileComponent = function(compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
var _this = this;
var parsedAnimations = this._animationParser.parseComponent(compMeta);
var directives = directiveIdentifiers.map(function(dir) {
return _this._metadataResolver.getDirectiveSummary(dir.reference);
});
var pipes = ngModule.transitiveModule.pipes.map(function(pipe) {
return _this._metadataResolver.getPipeSummary(pipe.reference);
});
var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, compMeta.type.name);
var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
if (componentStyles) {
targetStatements.push.apply(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
}
compiledAnimations.forEach(function(entry) {
return targetStatements.push.apply(targetStatements, entry.statements);
});
targetStatements.push.apply(targetStatements, _resolveViewStatements(viewResult));
return viewResult.viewClassVar;
};
OfflineCompiler.prototype._codgenStyles = function(fileUrl, stylesCompileResult, fileSuffix) {
_resolveStyleStatements(stylesCompileResult, fileSuffix);
return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [ stylesCompileResult.stylesVar ]);
};
OfflineCompiler.prototype._codegenSourceModule = function(fileUrl, moduleUrl, statements, exportedVars) {
return new SourceModule(fileUrl, moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
};
return OfflineCompiler;
}();
function _resolveViewStatements(compileResult) {
compileResult.dependencies.forEach(function(dep) {
if (dep instanceof ViewClassDependency) {
var vfd = dep;
vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
} else if (dep instanceof ComponentFactoryDependency) {
var cfd = dep;
cfd.placeholder.name = _componentFactoryName(cfd.comp);
cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
} else if (dep instanceof DirectiveWrapperDependency) {
var dwd = dep;
dwd.placeholder.moduleUrl = _ngfactoryModuleUrl(dwd.dir.moduleUrl);
}
});
return compileResult.statements;
}
function _resolveStyleStatements(compileResult, fileSuffix) {
compileResult.dependencies.forEach(function(dep) {
dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
});
return compileResult.statements;
}
function _ngfactoryModuleUrl(dirUrl) {
var urlWithSuffix = _splitTypescriptSuffix(dirUrl);
return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
}
function _componentFactoryName(comp) {
return comp.name + "NgFactory";
}
function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
}
function _assertComponent(meta) {
if (!meta.isComponent) {
throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
}
}
function _splitTypescriptSuffix(path) {
if (path.endsWith(".d.ts")) {
return [ path.slice(0, -5), ".ts" ];
}
var lastDot = path.lastIndexOf(".");
if (lastDot !== -1) {
return [ path.substring(0, lastDot), path.substring(lastDot) ];
}
return [ path, "" ];
}
function _createNgModules(programStaticSymbols, options, metadataResolver) {
var ngModules = new Map();
var programPipesAndDirectives = [];
var ngModulePipesAndDirective = new Set();
var addNgModule = function(staticSymbol) {
if (ngModules.has(staticSymbol)) {
return false;
}
var ngModule = metadataResolver.getUnloadedNgModuleMetadata(staticSymbol, false, false);
if (ngModule) {
ngModules.set(ngModule.type.reference, ngModule);
ngModule.declaredDirectives.forEach(function(dir) {
return ngModulePipesAndDirective.add(dir.reference);
});
ngModule.declaredPipes.forEach(function(pipe) {
return ngModulePipesAndDirective.add(pipe.reference);
});
if (options.transitiveModules) {
ngModule.transitiveModule.modules.forEach(function(modMeta) {
return addNgModule(modMeta.type.reference);
});
}
}
return !!ngModule;
};
programStaticSymbols.forEach(function(staticSymbol) {
if (!addNgModule(staticSymbol) && (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
programPipesAndDirectives.push(staticSymbol);
}
});
var symbolsMissingModule = programPipesAndDirectives.filter(function(s) {
return !ngModulePipesAndDirective.has(s);
});
return {
ngModules: Array.from(ngModules.values()),
symbolsMissingModule: symbolsMissingModule
};
}
var StylesCollectionEntry = function() {
function StylesCollectionEntry(time, value) {
this.time = time;
this.value = value;
}
StylesCollectionEntry.prototype.matches = function(time, value) {
return time == this.time && value == this.value;
};
return StylesCollectionEntry;
}();
var StylesCollection = function() {
function StylesCollection() {
this.styles = {};
}
StylesCollection.prototype.insertAtTime = function(property, time, value) {
var tuple = new StylesCollectionEntry(time, value);
var entries = this.styles[property];
if (!isPresent(entries)) {
entries = this.styles[property] = [];
}
var insertionIndex = 0;
for (var i = entries.length - 1; i >= 0; i--) {
if (entries[i].time <= time) {
insertionIndex = i + 1;
break;
}
}
entries.splice(insertionIndex, 0, tuple);
};
StylesCollection.prototype.getByIndex = function(property, index) {
var items = this.styles[property];
if (isPresent(items)) {
return index >= items.length ? null : items[index];
}
return null;
};
StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
var entries = this.styles[property];
if (isPresent(entries)) {
for (var i = entries.length - 1; i >= 0; i--) {
if (entries[i].time <= time) return i;
}
}
return null;
};
return StylesCollection;
}();
var __extends$16 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _INITIAL_KEYFRAME = 0;
var _TERMINAL_KEYFRAME = 1;
var _ONE_SECOND = 1e3;
var AnimationParseError = function(_super) {
__extends$16(AnimationParseError, _super);
function AnimationParseError(message) {
_super.call(this, null, message);
}
AnimationParseError.prototype.toString = function() {
return "" + this.msg;
};
return AnimationParseError;
}(ParseError);
var AnimationEntryParseResult = function() {
function AnimationEntryParseResult(ast, errors) {
this.ast = ast;
this.errors = errors;
}
return AnimationEntryParseResult;
}();
var AnimationParser = function() {
function AnimationParser(_schema) {
this._schema = _schema;
}
AnimationParser.prototype.parseComponent = function(component) {
var _this = this;
var errors = [];
var componentName = component.type.name;
var animationTriggerNames = new Set();
var asts = component.template.animations.map(function(entry) {
var result = _this.parseEntry(entry);
var ast = result.ast;
var triggerName = ast.name;
if (animationTriggerNames.has(triggerName)) {
result.errors.push(new AnimationParseError('The animation trigger "' + triggerName + '" has already been registered for the ' + componentName + " component"));
} else {
animationTriggerNames.add(triggerName);
}
if (result.errors.length > 0) {
var errorMessage_1 = '- Unable to parse the animation sequence for "' + triggerName + '" on the ' + componentName + " component due to the following errors:";
result.errors.forEach(function(error) {
errorMessage_1 += "\n-- " + error.msg;
});
errors.push(errorMessage_1);
}
return ast;
});
if (errors.length > 0) {
var errorString = errors.join("\n");
throw new Error("Animation parse errors:\n" + errorString);
}
return asts;
};
AnimationParser.prototype.parseEntry = function(entry) {
var _this = this;
var errors = [];
var stateStyles = {};
var transitions = [];
var stateDeclarationAsts = [];
entry.definitions.forEach(function(def) {
if (def instanceof CompileAnimationStateDeclarationMetadata) {
_parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function(ast) {
stateDeclarationAsts.push(ast);
stateStyles[ast.stateName] = ast.styles;
});
} else {
transitions.push(def);
}
});
var stateTransitionAsts = transitions.map(function(transDef) {
return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors);
});
var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
return new AnimationEntryParseResult(ast, errors);
};
AnimationParser.decorators = [ {
type: _angular_core.Injectable
} ];
AnimationParser.ctorParameters = [ {
type: ElementSchemaRegistry
} ];
return AnimationParser;
}();
function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
var defStyles = new AnimationStylesAst(normalizedStyles);
var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
return states.map(function(state) {
return new AnimationStateDeclarationAst(state, defStyles);
});
}
function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
var styles = new StylesCollection();
var transitionExprs = [];
var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
transitionStates.forEach(function(expr) {
transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors));
});
var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
var animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
if (errors.length == 0) {
_fillAnimationAstStartingKeyframes(animationAst, styles, errors);
}
var stepsAst = animationAst instanceof AnimationWithStepsAst ? animationAst : new AnimationSequenceAst([ animationAst ]);
return new AnimationStateTransitionAst(transitionExprs, stepsAst);
}
function _parseAnimationAlias(alias, errors) {
switch (alias) {
case ":enter":
return "void => *";

case ":leave":
return "* => void";

default:
errors.push(new AnimationParseError('the transition alias value "' + alias + '" is not supported'));
return "* => *";
}
}
function _parseAnimationTransitionExpr(eventStr, errors) {
var expressions = [];
if (eventStr[0] == ":") {
eventStr = _parseAnimationAlias(eventStr, errors);
}
var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
if (!isPresent(match) || match.length < 4) {
errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
return expressions;
}
var fromState = match[1];
var separator = match[2];
var toState = match[3];
expressions.push(new AnimationStateTransitionExpression(fromState, toState));
var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
if (separator[0] == "<" && !isFullAnyStateExpr) {
expressions.push(new AnimationStateTransitionExpression(toState, fromState));
}
return expressions;
}
function _normalizeAnimationEntry(entry) {
return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
}
function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
var normalizedStyles = [];
entry.styles.forEach(function(styleEntry) {
if (typeof styleEntry === "string") {
if (permitStateReferences) {
normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
} else {
errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
}
} else {
var stylesObj_1 = styleEntry;
var normalizedStylesObj_1 = {};
Object.keys(stylesObj_1).forEach(function(propName) {
var normalizedProp = schema.normalizeAnimationStyleProperty(propName);
var normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
var normalizationError = normalizedOutput["error"];
if (normalizationError) {
errors.push(new AnimationParseError(normalizationError));
}
normalizedStylesObj_1[normalizedProp] = normalizedOutput["value"];
});
normalizedStyles.push(normalizedStylesObj_1);
}
});
return normalizedStyles;
}
function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
return entry instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
}
function _mergeAnimationStyles(stylesList, newItem) {
if (typeof newItem === "object" && newItem !== null && stylesList.length > 0) {
var lastIndex = stylesList.length - 1;
var lastItem = stylesList[lastIndex];
if (typeof lastItem === "object" && lastItem !== null) {
stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
return;
}
}
stylesList.push(newItem);
}
function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
var steps;
if (entry instanceof CompileAnimationWithStepsMetadata) {
steps = entry.steps;
} else {
return [ entry ];
}
var newSteps = [];
var combinedStyles;
steps.forEach(function(step) {
if (step instanceof CompileAnimationStyleMetadata) {
if (!isPresent(combinedStyles)) {
combinedStyles = [];
}
_normalizeStyleMetadata(step, stateStyles, schema, errors, true).forEach(function(entry) {
_mergeAnimationStyles(combinedStyles, entry);
});
} else {
if (isPresent(combinedStyles)) {
newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
combinedStyles = null;
}
if (step instanceof CompileAnimationAnimateMetadata) {
var animateStyleValue = step.styles;
if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
} else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
animateStyleValue.steps.forEach(function(step) {
step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
});
}
} else if (step instanceof CompileAnimationWithStepsMetadata) {
var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
}
newSteps.push(step);
}
});
if (isPresent(combinedStyles)) {
newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
}
return newSteps;
}
function _resolveStylesFromState(stateName, stateStyles, errors) {
var styles = [];
if (stateName[0] != ":") {
errors.push(new AnimationParseError('Animation states via styles must be prefixed with a ":"'));
} else {
var normalizedStateName = stateName.substring(1);
var value = stateStyles[normalizedStateName];
if (!isPresent(value)) {
errors.push(new AnimationParseError('Unable to apply styles due to missing a state: "' + normalizedStateName + '"'));
} else {
value.styles.forEach(function(stylesEntry) {
if (typeof stylesEntry === "object" && stylesEntry !== null) {
styles.push(stylesEntry);
}
});
}
}
return styles;
}
var _AnimationTimings = function() {
function _AnimationTimings(duration, delay, easing) {
this.duration = duration;
this.delay = delay;
this.easing = easing;
}
return _AnimationTimings;
}();
function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
var totalEntries = keyframeSequence.steps.length;
var totalOffsets = 0;
keyframeSequence.steps.forEach(function(step) {
return totalOffsets += isPresent(step.offset) ? 1 : 0;
});
if (totalOffsets > 0 && totalOffsets < totalEntries) {
errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
totalOffsets = totalEntries;
}
var limit = totalEntries - 1;
var margin = totalOffsets == 0 ? 1 / limit : 0;
var rawKeyframes = [];
var index = 0;
var doSortKeyframes = false;
var lastOffset = 0;
keyframeSequence.steps.forEach(function(styleMetadata) {
var offset = styleMetadata.offset;
var keyframeStyles = {};
styleMetadata.styles.forEach(function(entry) {
Object.keys(entry).forEach(function(prop) {
if (prop != "offset") {
keyframeStyles[prop] = entry[prop];
}
});
});
if (isPresent(offset)) {
doSortKeyframes = doSortKeyframes || offset < lastOffset;
} else {
offset = index == limit ? _TERMINAL_KEYFRAME : margin * index;
}
rawKeyframes.push([ offset, keyframeStyles ]);
lastOffset = offset;
index++;
});
if (doSortKeyframes) {
rawKeyframes.sort(function(a, b) {
return a[0] <= b[0] ? -1 : 1;
});
}
var firstKeyframe = rawKeyframes[0];
if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
rawKeyframes.splice(0, 0, firstKeyframe = [ _INITIAL_KEYFRAME, {} ]);
}
var firstKeyframeStyles = firstKeyframe[1];
limit = rawKeyframes.length - 1;
var lastKeyframe = rawKeyframes[limit];
if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
rawKeyframes.push(lastKeyframe = [ _TERMINAL_KEYFRAME, {} ]);
limit++;
}
var lastKeyframeStyles = lastKeyframe[1];
for (var i = 1; i <= limit; i++) {
var entry = rawKeyframes[i];
var styles = entry[1];
Object.keys(styles).forEach(function(prop) {
if (!isPresent(firstKeyframeStyles[prop])) {
firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
}
});
}
var _loop_1 = function(i) {
var entry = rawKeyframes[i];
var styles = entry[1];
Object.keys(styles).forEach(function(prop) {
if (!isPresent(lastKeyframeStyles[prop])) {
lastKeyframeStyles[prop] = styles[prop];
}
});
};
for (var i = limit - 1; i >= 0; i--) {
_loop_1(i);
}
return rawKeyframes.map(function(entry) {
return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([ entry[1] ]));
});
}
function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
var ast;
var playTime = 0;
var startingTime = currentTime;
if (entry instanceof CompileAnimationWithStepsMetadata) {
var maxDuration_1 = 0;
var steps_1 = [];
var isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
var previousStyles_1;
entry.steps.forEach(function(entry) {
var time = isGroup_1 ? startingTime : currentTime;
if (entry instanceof CompileAnimationStyleMetadata) {
entry.styles.forEach(function(stylesEntry) {
var map = stylesEntry;
Object.keys(map).forEach(function(prop) {
collectedStyles.insertAtTime(prop, time, map[prop]);
});
});
previousStyles_1 = entry.styles;
return;
}
var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
if (isPresent(previousStyles_1)) {
if (entry instanceof CompileAnimationWithStepsMetadata) {
var startingStyles = new AnimationStylesAst(previousStyles_1);
steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ""));
} else {
var innerStep = innerAst;
(_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
}
previousStyles_1 = null;
}
var astDuration = innerAst.playTime;
currentTime += astDuration;
playTime += astDuration;
maxDuration_1 = Math.max(astDuration, maxDuration_1);
steps_1.push(innerAst);
var _a;
});
if (isPresent(previousStyles_1)) {
var startingStyles = new AnimationStylesAst(previousStyles_1);
steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ""));
}
if (isGroup_1) {
ast = new AnimationGroupAst(steps_1);
playTime = maxDuration_1;
currentTime = startingTime + playTime;
} else {
ast = new AnimationSequenceAst(steps_1);
}
} else if (entry instanceof CompileAnimationAnimateMetadata) {
var timings = _parseTimeExpression(entry.timings, errors);
var styles = entry.styles;
var keyframes = void 0;
if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
} else {
var styleData = styles;
var offset = _TERMINAL_KEYFRAME;
var styleAst = new AnimationStylesAst(styleData.styles);
var keyframe = new AnimationKeyframeAst(offset, styleAst);
keyframes = [ keyframe ];
}
ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
playTime = timings.duration + timings.delay;
currentTime += playTime;
keyframes.forEach(function(keyframe) {
return keyframe.styles.styles.forEach(function(entry) {
return Object.keys(entry).forEach(function(prop) {
collectedStyles.insertAtTime(prop, currentTime, entry[prop]);
});
});
});
} else {
ast = new AnimationStepAst(null, [], 0, 0, "");
}
ast.playTime = playTime;
ast.startTime = startingTime;
return ast;
}
function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
if (ast instanceof AnimationStepAst && ast.keyframes.length > 0) {
var keyframes = ast.keyframes;
if (keyframes.length == 1) {
var endKeyframe = keyframes[0];
var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
ast.keyframes = [ startKeyframe, endKeyframe ];
}
} else if (ast instanceof AnimationWithStepsAst) {
ast.steps.forEach(function(entry) {
return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
});
}
}
function _parseTimeExpression(exp, errors) {
var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
var duration;
var delay = 0;
var easing = null;
if (typeof exp === "string") {
var matches = exp.match(regex);
if (matches === null) {
errors.push(new AnimationParseError('The provided timing value "' + exp + '" is invalid.'));
return new _AnimationTimings(0, 0, null);
}
var durationMatch = parseFloat(matches[1]);
var durationUnit = matches[2];
if (durationUnit == "s") {
durationMatch *= _ONE_SECOND;
}
duration = Math.floor(durationMatch);
var delayMatch = matches[3];
var delayUnit = matches[4];
if (isPresent(delayMatch)) {
var delayVal = parseFloat(delayMatch);
if (isPresent(delayUnit) && delayUnit == "s") {
delayVal *= _ONE_SECOND;
}
delay = Math.floor(delayVal);
}
var easingVal = matches[5];
if (!isBlank(easingVal)) {
easing = easingVal;
}
} else {
duration = exp;
}
return new _AnimationTimings(duration, delay, easing);
}
function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
var values = {};
var endTime = startTime + duration;
endKeyframe.styles.styles.forEach(function(styleData) {
Object.keys(styleData).forEach(function(prop) {
var val = styleData[prop];
if (prop == "offset") return;
var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
var resultEntry, nextEntry, value;
if (isPresent(resultIndex)) {
resultEntry = collectedStyles.getByIndex(prop, resultIndex);
value = resultEntry.value;
nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
} else {
value = FILL_STYLE_FLAG;
}
if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
errors.push(new AnimationParseError('The animated CSS property "' + prop + '" unexpectedly changes between steps "' + resultEntry.time + 'ms" and "' + endTime + 'ms" at "' + nextEntry.time + 'ms"'));
}
values[prop] = value;
});
});
return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([ values ]));
}
var ResourceLoader = function() {
function ResourceLoader() {}
ResourceLoader.prototype.get = function(url) {
return null;
};
return ResourceLoader;
}();
var _ASSET_SCHEME = "asset:";
function createUrlResolverWithoutPackagePrefix() {
return new UrlResolver();
}
function createOfflineCompileUrlResolver() {
return new UrlResolver(_ASSET_SCHEME);
}
var DEFAULT_PACKAGE_URL_PROVIDER = {
provide: _angular_core.PACKAGE_ROOT_URL,
useValue: "/"
};
var UrlResolver = function() {
function UrlResolver(_packagePrefix) {
if (_packagePrefix === void 0) {
_packagePrefix = null;
}
this._packagePrefix = _packagePrefix;
}
UrlResolver.prototype.resolve = function(baseUrl, url) {
var resolvedUrl = url;
if (isPresent(baseUrl) && baseUrl.length > 0) {
resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
}
var resolvedParts = _split(resolvedUrl);
var prefix = this._packagePrefix;
if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == "package") {
var path = resolvedParts[_ComponentIndex.Path];
if (this._packagePrefix === _ASSET_SCHEME) {
var pathSegements = path.split(/\//);
resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join("/");
} else {
prefix = prefix.replace(/\/+$/, "");
path = path.replace(/^\/+/, "");
return prefix + "/" + path;
}
}
return resolvedUrl;
};
UrlResolver.decorators = [ {
type: _angular_core.Injectable
} ];
UrlResolver.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.PACKAGE_ROOT_URL ]
} ]
} ];
return UrlResolver;
}();
function getUrlScheme(url) {
var match = _split(url);
return match && match[_ComponentIndex.Scheme] || "";
}
function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
var out = [];
if (isPresent(opt_scheme)) {
out.push(opt_scheme + ":");
}
if (isPresent(opt_domain)) {
out.push("//");
if (isPresent(opt_userInfo)) {
out.push(opt_userInfo + "@");
}
out.push(opt_domain);
if (isPresent(opt_port)) {
out.push(":" + opt_port);
}
}
if (isPresent(opt_path)) {
out.push(opt_path);
}
if (isPresent(opt_queryData)) {
out.push("?" + opt_queryData);
}
if (isPresent(opt_fragment)) {
out.push("#" + opt_fragment);
}
return out.join("");
}
var _splitRe = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([\\w\\d\\-\\u0100-\\uffff.%]*)" + "(?::([0-9]+))?" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
var _ComponentIndex;
(function(_ComponentIndex) {
_ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
_ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
_ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
_ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
_ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
_ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
_ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
})(_ComponentIndex || (_ComponentIndex = {}));
function _split(uri) {
return uri.match(_splitRe);
}
function _removeDotSegments(path) {
if (path == "/") return "/";
var leadingSlash = path[0] == "/" ? "/" : "";
var trailingSlash = path[path.length - 1] === "/" ? "/" : "";
var segments = path.split("/");
var out = [];
var up = 0;
for (var pos = 0; pos < segments.length; pos++) {
var segment = segments[pos];
switch (segment) {
case "":
case ".":
break;

case "..":
if (out.length > 0) {
out.pop();
} else {
up++;
}
break;

default:
out.push(segment);
}
}
if (leadingSlash == "") {
while (up-- > 0) {
out.unshift("..");
}
if (out.length === 0) out.push(".");
}
return leadingSlash + out.join("/") + trailingSlash;
}
function _joinAndCanonicalizePath(parts) {
var path = parts[_ComponentIndex.Path];
path = isBlank(path) ? "" : _removeDotSegments(path);
parts[_ComponentIndex.Path] = path;
return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
}
function _resolveUrl(base, url) {
var parts = _split(encodeURI(url));
var baseParts = _split(base);
if (isPresent(parts[_ComponentIndex.Scheme])) {
return _joinAndCanonicalizePath(parts);
} else {
parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
}
for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
if (isBlank(parts[i])) {
parts[i] = baseParts[i];
}
}
if (parts[_ComponentIndex.Path][0] == "/") {
return _joinAndCanonicalizePath(parts);
}
var path = baseParts[_ComponentIndex.Path];
if (isBlank(path)) path = "/";
var index = path.lastIndexOf("/");
path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
parts[_ComponentIndex.Path] = path;
return _joinAndCanonicalizePath(parts);
}
var DirectiveNormalizer = function() {
function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
this._resourceLoader = _resourceLoader;
this._urlResolver = _urlResolver;
this._htmlParser = _htmlParser;
this._config = _config;
this._resourceLoaderCache = new Map();
}
DirectiveNormalizer.prototype.clearCache = function() {
this._resourceLoaderCache.clear();
};
DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
var _this = this;
if (!normalizedDirective.isComponent) {
return;
}
this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
_this._resourceLoaderCache.delete(stylesheet.moduleUrl);
});
};
DirectiveNormalizer.prototype._fetch = function(url) {
var result = this._resourceLoaderCache.get(url);
if (!result) {
result = this._resourceLoader.get(url);
this._resourceLoaderCache.set(url, result);
}
return result;
};
DirectiveNormalizer.prototype.normalizeTemplate = function(prenormData) {
var _this = this;
var normalizedTemplateSync = null;
var normalizedTemplateAsync;
if (isPresent(prenormData.template)) {
normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
} else if (prenormData.templateUrl) {
normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
} else {
throw new Error("No template specified for component " + stringify(prenormData.componentType));
}
if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
return new SyncAsyncResult(normalizedTemplateSync);
} else {
return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
return _this.normalizeExternalStylesheets(normalizedTemplate);
}));
}
};
DirectiveNormalizer.prototype.normalizeTemplateSync = function(prenomData) {
return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
};
DirectiveNormalizer.prototype.normalizeTemplateAsync = function(prenomData) {
var _this = this;
var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
return this._fetch(templateUrl).then(function(value) {
return _this.normalizeLoadedTemplate(prenomData, value, templateUrl);
});
};
DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(prenomData, template, templateAbsUrl) {
var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
var rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
if (rootNodesAndErrors.errors.length > 0) {
var errorString = rootNodesAndErrors.errors.join("\n");
throw new Error("Template parse errors:\n" + errorString);
}
var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
styles: prenomData.styles,
styleUrls: prenomData.styleUrls,
moduleUrl: prenomData.moduleUrl
}));
var visitor = new TemplatePreparseVisitor();
visitAll(visitor, rootNodesAndErrors.rootNodes);
var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
styles: visitor.styles,
styleUrls: visitor.styleUrls,
moduleUrl: templateAbsUrl
}));
var encapsulation = prenomData.encapsulation;
if (isBlank(encapsulation)) {
encapsulation = this._config.defaultEncapsulation;
}
var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
encapsulation = _angular_core.ViewEncapsulation.None;
}
return new CompileTemplateMetadata({
encapsulation: encapsulation,
template: template,
templateUrl: templateAbsUrl,
styles: styles,
styleUrls: styleUrls,
ngContentSelectors: visitor.ngContentSelectors,
animations: prenomData.animations,
interpolation: prenomData.interpolation
});
};
DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
return new CompileTemplateMetadata({
encapsulation: templateMeta.encapsulation,
template: templateMeta.template,
templateUrl: templateMeta.templateUrl,
styles: templateMeta.styles,
styleUrls: templateMeta.styleUrls,
externalStylesheets: externalStylesheets,
ngContentSelectors: templateMeta.ngContentSelectors,
animations: templateMeta.animations,
interpolation: templateMeta.interpolation
});
});
};
DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
var _this = this;
if (loadedStylesheets === void 0) {
loadedStylesheets = new Map();
}
return Promise.all(styleUrls.filter(function(styleUrl) {
return !loadedStylesheets.has(styleUrl);
}).map(function(styleUrl) {
return _this._fetch(styleUrl).then(function(loadedStyle) {
var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
styles: [ loadedStyle ],
moduleUrl: styleUrl
}));
loadedStylesheets.set(styleUrl, stylesheet);
return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
});
})).then(function(_) {
return Array.from(loadedStylesheets.values());
});
};
DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
var _this = this;
var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
});
var allStyles = stylesheet.styles.map(function(style) {
var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
return styleWithImports.style;
});
return new CompileStylesheetMetadata({
styles: allStyles,
styleUrls: allStyleUrls,
moduleUrl: stylesheet.moduleUrl
});
};
DirectiveNormalizer.decorators = [ {
type: _angular_core.Injectable
} ];
DirectiveNormalizer.ctorParameters = [ {
type: ResourceLoader
}, {
type: UrlResolver
}, {
type: HtmlParser
}, {
type: CompilerConfig
} ];
return DirectiveNormalizer;
}();
var TemplatePreparseVisitor = function() {
function TemplatePreparseVisitor() {
this.ngContentSelectors = [];
this.styles = [];
this.styleUrls = [];
this.ngNonBindableStackCount = 0;
}
TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
var preparsedElement = preparseElement(ast);
switch (preparsedElement.type) {
case PreparsedElementType.NG_CONTENT:
if (this.ngNonBindableStackCount === 0) {
this.ngContentSelectors.push(preparsedElement.selectAttr);
}
break;

case PreparsedElementType.STYLE:
var textContent_1 = "";
ast.children.forEach(function(child) {
if (child instanceof Text) {
textContent_1 += child.value;
}
});
this.styles.push(textContent_1);
break;

case PreparsedElementType.STYLESHEET:
this.styleUrls.push(preparsedElement.hrefAttr);
break;

default:
break;
}
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount++;
}
visitAll(this, ast.children);
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount--;
}
return null;
};
TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
return null;
};
return TemplatePreparseVisitor;
}();
var DirectiveResolver = function() {
function DirectiveResolver(_reflector) {
if (_reflector === void 0) {
_reflector = reflector;
}
this._reflector = _reflector;
}
DirectiveResolver.prototype.isDirective = function(type) {
var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
return typeMetadata && typeMetadata.some(isDirectiveMetadata);
};
DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
if (typeMetadata) {
var metadata = typeMetadata.find(isDirectiveMetadata);
if (metadata) {
var propertyMetadata = this._reflector.propMetadata(type);
return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
}
}
if (throwIfNotFound) {
throw new Error("No Directive annotation found on " + stringify(type));
}
return null;
};
DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
var inputs = [];
var outputs = [];
var host = {};
var queries = {};
Object.keys(propertyMetadata).forEach(function(propName) {
propertyMetadata[propName].forEach(function(a) {
if (a instanceof _angular_core.Input) {
if (a.bindingPropertyName) {
inputs.push(propName + ": " + a.bindingPropertyName);
} else {
inputs.push(propName);
}
} else if (a instanceof _angular_core.Output) {
var output = a;
if (output.bindingPropertyName) {
outputs.push(propName + ": " + output.bindingPropertyName);
} else {
outputs.push(propName);
}
} else if (a instanceof _angular_core.HostBinding) {
var hostBinding = a;
if (hostBinding.hostPropertyName) {
var startWith = hostBinding.hostPropertyName[0];
if (startWith === "(") {
throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
} else if (startWith === "[") {
throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
}
host["[" + hostBinding.hostPropertyName + "]"] = propName;
} else {
host["[" + propName + "]"] = propName;
}
} else if (a instanceof _angular_core.HostListener) {
var hostListener = a;
var args = hostListener.args || [];
host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(",") + ")";
} else if (a instanceof _angular_core.Query) {
queries[propName] = a;
}
});
});
return this._merge(dm, inputs, outputs, host, queries, directiveType);
};
DirectiveResolver.prototype._extractPublicName = function(def) {
return splitAtColon(def, [ null, def ])[1].trim();
};
DirectiveResolver.prototype._merge = function(directive, inputs, outputs, host, queries, directiveType) {
var _this = this;
var mergedInputs = inputs;
if (directive.inputs) {
var inputNames_1 = directive.inputs.map(function(def) {
return _this._extractPublicName(def);
});
inputs.forEach(function(inputDef) {
var publicName = _this._extractPublicName(inputDef);
if (inputNames_1.indexOf(publicName) > -1) {
throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
}
});
mergedInputs.unshift.apply(mergedInputs, directive.inputs);
}
var mergedOutputs = outputs;
if (directive.outputs) {
var outputNames_1 = directive.outputs.map(function(def) {
return _this._extractPublicName(def);
});
outputs.forEach(function(outputDef) {
var publicName = _this._extractPublicName(outputDef);
if (outputNames_1.indexOf(publicName) > -1) {
throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
}
});
mergedOutputs.unshift.apply(mergedOutputs, directive.outputs);
}
var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
if (directive instanceof _angular_core.Component) {
return new _angular_core.Component({
selector: directive.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: directive.exportAs,
moduleId: directive.moduleId,
queries: mergedQueries,
changeDetection: directive.changeDetection,
providers: directive.providers,
viewProviders: directive.viewProviders,
entryComponents: directive.entryComponents,
template: directive.template,
templateUrl: directive.templateUrl,
styles: directive.styles,
styleUrls: directive.styleUrls,
encapsulation: directive.encapsulation,
animations: directive.animations,
interpolation: directive.interpolation
});
} else {
return new _angular_core.Directive({
selector: directive.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: directive.exportAs,
queries: mergedQueries,
providers: directive.providers
});
}
};
DirectiveResolver.decorators = [ {
type: _angular_core.Injectable
} ];
DirectiveResolver.ctorParameters = [ {
type: ReflectorReader
} ];
return DirectiveResolver;
}();
function isDirectiveMetadata(type) {
return type instanceof _angular_core.Directive;
}
function hasLifecycleHook(hook, token) {
return reflector.hasLifecycleHook(token, getHookName(hook));
}
function getHookName(hook) {
switch (hook) {
case LifecycleHooks.OnInit:
return "ngOnInit";

case LifecycleHooks.OnDestroy:
return "ngOnDestroy";

case LifecycleHooks.DoCheck:
return "ngDoCheck";

case LifecycleHooks.OnChanges:
return "ngOnChanges";

case LifecycleHooks.AfterContentInit:
return "ngAfterContentInit";

case LifecycleHooks.AfterContentChecked:
return "ngAfterContentChecked";

case LifecycleHooks.AfterViewInit:
return "ngAfterViewInit";

case LifecycleHooks.AfterViewChecked:
return "ngAfterViewChecked";
}
}
function _isNgModuleMetadata(obj) {
return obj instanceof _angular_core.NgModule;
}
var NgModuleResolver = function() {
function NgModuleResolver(_reflector) {
if (_reflector === void 0) {
_reflector = reflector;
}
this._reflector = _reflector;
}
NgModuleResolver.prototype.isNgModule = function(type) {
return this._reflector.annotations(type).some(_isNgModuleMetadata);
};
NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
if (isPresent(ngModuleMeta)) {
return ngModuleMeta;
} else {
if (throwIfNotFound) {
throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
}
return null;
}
};
NgModuleResolver.decorators = [ {
type: _angular_core.Injectable
} ];
NgModuleResolver.ctorParameters = [ {
type: ReflectorReader
} ];
return NgModuleResolver;
}();
function _isPipeMetadata(type) {
return type instanceof _angular_core.Pipe;
}
var PipeResolver = function() {
function PipeResolver(_reflector) {
if (_reflector === void 0) {
_reflector = reflector;
}
this._reflector = _reflector;
}
PipeResolver.prototype.isPipe = function(type) {
var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
return typeMetadata && typeMetadata.some(_isPipeMetadata);
};
PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
if (isPresent(metas)) {
var annotation = metas.find(_isPipeMetadata);
if (isPresent(annotation)) {
return annotation;
}
}
if (throwIfNotFound) {
throw new Error("No Pipe decorator found on " + stringify(type));
}
return null;
};
PipeResolver.decorators = [ {
type: _angular_core.Injectable
} ];
PipeResolver.ctorParameters = [ {
type: ReflectorReader
} ];
return PipeResolver;
}();
var __extends$17 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var CompileMetadataResolver = function() {
function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _directiveNormalizer, _reflector) {
if (_reflector === void 0) {
_reflector = reflector;
}
this._ngModuleResolver = _ngModuleResolver;
this._directiveResolver = _directiveResolver;
this._pipeResolver = _pipeResolver;
this._schemaRegistry = _schemaRegistry;
this._directiveNormalizer = _directiveNormalizer;
this._reflector = _reflector;
this._directiveCache = new Map();
this._directiveSummaryCache = new Map();
this._pipeCache = new Map();
this._pipeSummaryCache = new Map();
this._ngModuleCache = new Map();
this._ngModuleOfTypes = new Map();
this._anonymousTypes = new Map();
this._anonymousTypeIndex = 0;
}
CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
var identifier = stringify(token);
if (identifier.indexOf("(") >= 0) {
var found = this._anonymousTypes.get(token);
if (!found) {
this._anonymousTypes.set(token, this._anonymousTypeIndex++);
found = this._anonymousTypes.get(token);
}
identifier = "anonymous_token_" + found + "_";
}
return sanitizeIdentifier(identifier);
};
CompileMetadataResolver.prototype.clearCacheFor = function(type) {
var dirMeta = this._directiveCache.get(type);
this._directiveCache.delete(type);
this._directiveSummaryCache.delete(type);
this._pipeCache.delete(type);
this._pipeSummaryCache.delete(type);
this._ngModuleOfTypes.delete(type);
this._ngModuleCache.clear();
if (dirMeta) {
this._directiveNormalizer.clearCacheFor(dirMeta);
}
};
CompileMetadataResolver.prototype.clearCache = function() {
this._directiveCache.clear();
this._directiveSummaryCache.clear();
this._pipeCache.clear();
this._pipeSummaryCache.clear();
this._ngModuleCache.clear();
this._ngModuleOfTypes.clear();
this._directiveNormalizer.clearCache();
};
CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
var _this = this;
var defs = entry.definitions.map(function(def) {
return _this._getAnimationStateMetadata(def);
});
return new CompileAnimationEntryMetadata(entry.name, defs);
};
CompileMetadataResolver.prototype._getAnimationStateMetadata = function(value) {
if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
var styles = this._getAnimationStyleMetadata(value.styles);
return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
}
if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
}
return null;
};
CompileMetadataResolver.prototype._getAnimationStyleMetadata = function(value) {
return new CompileAnimationStyleMetadata(value.offset, value.styles);
};
CompileMetadataResolver.prototype._getAnimationMetadata = function(value) {
var _this = this;
if (value instanceof _angular_core.AnimationStyleMetadata) {
return this._getAnimationStyleMetadata(value);
}
if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
return _this._getAnimationStyleMetadata(entry);
}));
}
if (value instanceof _angular_core.AnimationAnimateMetadata) {
var animateData = this._getAnimationMetadata(value.styles);
return new CompileAnimationAnimateMetadata(value.timings, animateData);
}
if (value instanceof _angular_core.AnimationWithStepsMetadata) {
var steps = value.steps.map(function(step) {
return _this._getAnimationMetadata(step);
});
if (value instanceof _angular_core.AnimationGroupMetadata) {
return new CompileAnimationGroupMetadata(steps);
}
return new CompileAnimationSequenceMetadata(steps);
}
return null;
};
CompileMetadataResolver.prototype._loadDirectiveMetadata = function(directiveType, isSync) {
var _this = this;
if (this._directiveCache.has(directiveType)) {
return;
}
directiveType = _angular_core.resolveForwardRef(directiveType);
var nonNormalizedMetadata = this.getNonNormalizedDirectiveMetadata(directiveType);
var createDirectiveMetadata = function(templateMetadata) {
var normalizedDirMeta = new CompileDirectiveMetadata({
type: nonNormalizedMetadata.type,
isComponent: nonNormalizedMetadata.isComponent,
selector: nonNormalizedMetadata.selector,
exportAs: nonNormalizedMetadata.exportAs,
changeDetection: nonNormalizedMetadata.changeDetection,
inputs: nonNormalizedMetadata.inputs,
outputs: nonNormalizedMetadata.outputs,
hostListeners: nonNormalizedMetadata.hostListeners,
hostProperties: nonNormalizedMetadata.hostProperties,
hostAttributes: nonNormalizedMetadata.hostAttributes,
providers: nonNormalizedMetadata.providers,
viewProviders: nonNormalizedMetadata.viewProviders,
queries: nonNormalizedMetadata.queries,
viewQueries: nonNormalizedMetadata.viewQueries,
entryComponents: nonNormalizedMetadata.entryComponents,
template: templateMetadata
});
_this._directiveCache.set(directiveType, normalizedDirMeta);
_this._directiveSummaryCache.set(directiveType, normalizedDirMeta.toSummary());
return normalizedDirMeta;
};
if (nonNormalizedMetadata.isComponent) {
var templateMeta = this._directiveNormalizer.normalizeTemplate({
componentType: directiveType,
moduleUrl: nonNormalizedMetadata.type.moduleUrl,
encapsulation: nonNormalizedMetadata.template.encapsulation,
template: nonNormalizedMetadata.template.template,
templateUrl: nonNormalizedMetadata.template.templateUrl,
styles: nonNormalizedMetadata.template.styles,
styleUrls: nonNormalizedMetadata.template.styleUrls,
animations: nonNormalizedMetadata.template.animations,
interpolation: nonNormalizedMetadata.template.interpolation
});
if (templateMeta.syncResult) {
createDirectiveMetadata(templateMeta.syncResult);
return null;
} else {
if (isSync) {
throw new ComponentStillLoadingError(directiveType);
}
return templateMeta.asyncResult.then(createDirectiveMetadata);
}
} else {
createDirectiveMetadata(null);
return null;
}
};
CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function(directiveType) {
var _this = this;
directiveType = _angular_core.resolveForwardRef(directiveType);
var dirMeta = this._directiveResolver.resolve(directiveType);
if (!dirMeta) {
return null;
}
var moduleUrl = staticTypeModuleUrl(directiveType);
var nonNormalizedTemplateMetadata;
if (dirMeta instanceof _angular_core.Component) {
moduleUrl = componentModuleUrl(this._reflector, directiveType, dirMeta);
assertArrayOfStrings("styles", dirMeta.styles);
assertArrayOfStrings("styleUrls", dirMeta.styleUrls);
assertInterpolationSymbols("interpolation", dirMeta.interpolation);
var animations = dirMeta.animations ? dirMeta.animations.map(function(e) {
return _this.getAnimationEntryMetadata(e);
}) : null;
nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
encapsulation: dirMeta.encapsulation,
template: dirMeta.template,
templateUrl: dirMeta.templateUrl,
styles: dirMeta.styles,
styleUrls: dirMeta.styleUrls,
animations: animations,
interpolation: dirMeta.interpolation
});
}
var changeDetectionStrategy = null;
var viewProviders = [];
var entryComponentMetadata = [];
var selector = dirMeta.selector;
if (dirMeta instanceof _angular_core.Component) {
changeDetectionStrategy = dirMeta.changeDetection;
if (dirMeta.viewProviders) {
viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, 'viewProviders for "' + stringify(directiveType) + '"');
}
if (dirMeta.entryComponents) {
entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function(type) {
return _this._getIdentifierMetadata(type, staticTypeModuleUrl(type));
}).concat(entryComponentMetadata);
}
if (!selector) {
selector = this._schemaRegistry.getDefaultComponentElementName();
}
} else {
if (!selector) {
throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
}
}
var providers = [];
if (isPresent(dirMeta.providers)) {
providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, 'providers for "' + stringify(directiveType) + '"');
}
var queries = [];
var viewQueries = [];
if (isPresent(dirMeta.queries)) {
queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
}
return CompileDirectiveMetadata.create({
selector: selector,
exportAs: dirMeta.exportAs,
isComponent: !!nonNormalizedTemplateMetadata,
type: this._getTypeMetadata(directiveType, moduleUrl),
template: nonNormalizedTemplateMetadata,
changeDetection: changeDetectionStrategy,
inputs: dirMeta.inputs,
outputs: dirMeta.outputs,
host: dirMeta.host,
providers: providers,
viewProviders: viewProviders,
queries: queries,
viewQueries: viewQueries,
entryComponents: entryComponentMetadata
});
};
CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
var dirMeta = this._directiveCache.get(directiveType);
if (!dirMeta) {
throw new Error("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringify(directiveType) + ".");
}
return dirMeta;
};
CompileMetadataResolver.prototype.getDirectiveSummary = function(dirType) {
var dirSummary = this._directiveSummaryCache.get(dirType);
if (!dirSummary) {
throw new Error("Illegal state: getDirectiveSummary can only be called after loadNgModuleMetadata for a module that imports it. Directive " + stringify(dirType) + ".");
}
return dirSummary;
};
CompileMetadataResolver.prototype.isDirective = function(type) {
return this._directiveResolver.isDirective(type);
};
CompileMetadataResolver.prototype.isPipe = function(type) {
return this._pipeResolver.isPipe(type);
};
CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType) {
var modMeta = this._ngModuleCache.get(moduleType);
if (!modMeta) {
throw new Error("Illegal state: getNgModuleMetadata can only be called after loadNgModuleMetadata. Module " + stringify(moduleType) + ".");
}
return modMeta;
};
CompileMetadataResolver.prototype._loadNgModuleSummary = function(moduleType, isSync) {
var moduleMeta = this._loadNgModuleMetadata(moduleType, isSync, false);
return moduleMeta ? moduleMeta.toSummary() : null;
};
CompileMetadataResolver.prototype.loadNgModuleMetadata = function(moduleType, isSync, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var ngModule = this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
var loading = ngModule ? Promise.all(ngModule.transitiveModule.directiveLoaders.map(function(loader) {
return loader();
})) : Promise.resolve(null);
return {
ngModule: ngModule,
loading: loading
};
};
CompileMetadataResolver.prototype.getUnloadedNgModuleMetadata = function(moduleType, isSync, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
return this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
};
CompileMetadataResolver.prototype._loadNgModuleMetadata = function(moduleType, isSync, throwIfNotFound) {
var _this = this;
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
moduleType = _angular_core.resolveForwardRef(moduleType);
var compileMeta = this._ngModuleCache.get(moduleType);
if (compileMeta) {
return compileMeta;
}
var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
if (!meta) {
return null;
}
var declaredDirectives = [];
var exportedNonModuleIdentifiers = [];
var declaredPipes = [];
var importedModules = [];
var exportedModules = [];
var providers = [];
var entryComponents = [];
var bootstrapComponents = [];
var schemas = [];
if (meta.imports) {
flattenAndDedupeArray(meta.imports).forEach(function(importedType) {
var importedModuleType;
if (isValidType(importedType)) {
importedModuleType = importedType;
} else if (importedType && importedType.ngModule) {
var moduleWithProviders = importedType;
importedModuleType = moduleWithProviders.ngModule;
if (moduleWithProviders.providers) {
providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
}
}
if (importedModuleType) {
var importedModuleSummary = _this._loadNgModuleSummary(importedModuleType, isSync);
if (!importedModuleSummary) {
throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
}
importedModules.push(importedModuleSummary);
} else {
throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
}
});
}
if (meta.exports) {
flattenAndDedupeArray(meta.exports).forEach(function(exportedType) {
if (!isValidType(exportedType)) {
throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
}
var exportedModuleSummary = _this._loadNgModuleSummary(exportedType, isSync);
if (exportedModuleSummary) {
exportedModules.push(exportedModuleSummary);
} else {
exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType, staticTypeModuleUrl(exportedType)));
}
});
}
var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
if (meta.declarations) {
flattenAndDedupeArray(meta.declarations).forEach(function(declaredType) {
if (!isValidType(declaredType)) {
throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
}
var declaredIdentifier = _this._getIdentifierMetadata(declaredType, staticTypeModuleUrl(declaredType));
if (_this._directiveResolver.isDirective(declaredType)) {
transitiveModule.directivesSet.add(declaredType);
transitiveModule.directives.push(declaredIdentifier);
declaredDirectives.push(declaredIdentifier);
_this._addTypeToModule(declaredType, moduleType);
transitiveModule.directiveLoaders.push(function() {
return _this._loadDirectiveMetadata(declaredType, isSync);
});
} else if (_this._pipeResolver.isPipe(declaredType)) {
transitiveModule.pipesSet.add(declaredType);
transitiveModule.pipes.push(declaredIdentifier);
declaredPipes.push(declaredIdentifier);
_this._addTypeToModule(declaredType, moduleType);
_this._loadPipeMetadata(declaredType);
} else {
throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
}
});
}
var exportedDirectives = [];
var exportedPipes = [];
exportedNonModuleIdentifiers.forEach(function(exportedId) {
if (transitiveModule.directivesSet.has(exportedId.reference)) {
exportedDirectives.push(exportedId);
} else if (transitiveModule.pipesSet.has(exportedId.reference)) {
exportedPipes.push(exportedId);
} else {
throw new Error("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringify(exportedId.reference) + " from " + stringify(moduleType) + " as it was neither declared nor imported!");
}
});
if (meta.providers) {
providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringify(moduleType) + "'"));
}
if (meta.entryComponents) {
entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function(type) {
return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
}));
}
if (meta.bootstrap) {
var typeMetadata = flattenAndDedupeArray(meta.bootstrap).map(function(type) {
if (!isValidType(type)) {
throw new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'");
}
return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
});
bootstrapComponents.push.apply(bootstrapComponents, typeMetadata);
}
entryComponents.push.apply(entryComponents, bootstrapComponents);
if (meta.schemas) {
schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
}
(_a = transitiveModule.entryComponents).push.apply(_a, entryComponents);
(_b = transitiveModule.providers).push.apply(_b, providers);
compileMeta = new CompileNgModuleMetadata({
type: this._getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
providers: providers,
entryComponents: entryComponents,
bootstrapComponents: bootstrapComponents,
schemas: schemas,
declaredDirectives: declaredDirectives,
exportedDirectives: exportedDirectives,
declaredPipes: declaredPipes,
exportedPipes: exportedPipes,
importedModules: importedModules,
exportedModules: exportedModules,
transitiveModule: transitiveModule,
id: meta.id
});
transitiveModule.modules.push(compileMeta.toInjectorSummary());
this._ngModuleCache.set(moduleType, compileMeta);
return compileMeta;
var _a, _b;
};
CompileMetadataResolver.prototype._getTypeDescriptor = function(type) {
if (this._directiveResolver.isDirective(type)) {
return "directive";
}
if (this._pipeResolver.isPipe(type)) {
return "pipe";
}
if (this._ngModuleResolver.isNgModule(type)) {
return "module";
}
if (type.provide) {
return "provider";
}
return "value";
};
CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
var oldModule = this._ngModuleOfTypes.get(type);
if (oldModule && oldModule !== moduleType) {
throw new Error("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! " + ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + "."));
}
this._ngModuleOfTypes.set(type, moduleType);
};
CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
var transitiveModules = getTransitiveImportedModules(importedModules.concat(exportedModules));
var providers = flattenArray(transitiveModules.map(function(ngModule) {
return ngModule.providers;
}));
var entryComponents = flattenArray(transitiveModules.map(function(ngModule) {
return ngModule.entryComponents;
}));
var transitiveExportedModules = getTransitiveExportedModules(importedModules);
var directives = flattenArray(transitiveExportedModules.map(function(ngModule) {
return ngModule.exportedDirectives;
}));
var pipes = flattenArray(transitiveExportedModules.map(function(ngModule) {
return ngModule.exportedPipes;
}));
var directiveLoaders = ListWrapper.flatten(transitiveExportedModules.map(function(ngModule) {
return ngModule.directiveLoaders;
}));
return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes, directiveLoaders);
};
CompileMetadataResolver.prototype._getIdentifierMetadata = function(type, moduleUrl) {
type = _angular_core.resolveForwardRef(type);
return new CompileIdentifierMetadata({
name: this.sanitizeTokenName(type),
moduleUrl: moduleUrl,
reference: type
});
};
CompileMetadataResolver.prototype._getTypeMetadata = function(type, moduleUrl, dependencies) {
if (dependencies === void 0) {
dependencies = null;
}
var identifier = this._getIdentifierMetadata(type, moduleUrl);
return new CompileTypeMetadata({
name: identifier.name,
moduleUrl: identifier.moduleUrl,
reference: identifier.reference,
diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
return hasLifecycleHook(hook, identifier.reference);
})
});
};
CompileMetadataResolver.prototype._getFactoryMetadata = function(factory, moduleUrl, dependencies) {
if (dependencies === void 0) {
dependencies = null;
}
factory = _angular_core.resolveForwardRef(factory);
return new CompileFactoryMetadata({
name: this.sanitizeTokenName(factory),
moduleUrl: moduleUrl,
reference: factory,
diDeps: this._getDependenciesMetadata(factory, dependencies)
});
};
CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
var pipeMeta = this._pipeCache.get(pipeType);
if (!pipeMeta) {
throw new Error("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringify(pipeType) + ".");
}
return pipeMeta;
};
CompileMetadataResolver.prototype.getPipeSummary = function(pipeType) {
var pipeSummary = this._pipeSummaryCache.get(pipeType);
if (!pipeSummary) {
throw new Error("Illegal state: getPipeSummary can only be called after loadNgModuleMetadata for a module that imports it. Pipe " + stringify(pipeType) + ".");
}
return pipeSummary;
};
CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function(pipeType) {
var pipeMeta = this._pipeCache.get(pipeType);
if (!pipeMeta) {
pipeMeta = this._loadPipeMetadata(pipeType);
}
return pipeMeta;
};
CompileMetadataResolver.prototype._loadPipeMetadata = function(pipeType) {
pipeType = _angular_core.resolveForwardRef(pipeType);
var pipeAnnotation = this._pipeResolver.resolve(pipeType);
var pipeMeta = new CompilePipeMetadata({
type: this._getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
name: pipeAnnotation.name,
pure: pipeAnnotation.pure
});
this._pipeCache.set(pipeType, pipeMeta);
this._pipeSummaryCache.set(pipeType, pipeMeta.toSummary());
return pipeMeta;
};
CompileMetadataResolver.prototype._getDependenciesMetadata = function(typeOrFunc, dependencies) {
var _this = this;
var hasUnknownDeps = false;
var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
var dependenciesMetadata = params.map(function(param) {
var isAttribute = false;
var isHost = false;
var isSelf = false;
var isSkipSelf = false;
var isOptional = false;
var token = null;
if (Array.isArray(param)) {
param.forEach(function(paramEntry) {
if (paramEntry instanceof _angular_core.Host) {
isHost = true;
} else if (paramEntry instanceof _angular_core.Self) {
isSelf = true;
} else if (paramEntry instanceof _angular_core.SkipSelf) {
isSkipSelf = true;
} else if (paramEntry instanceof _angular_core.Optional) {
isOptional = true;
} else if (paramEntry instanceof _angular_core.Attribute) {
isAttribute = true;
token = paramEntry.attributeName;
} else if (paramEntry instanceof _angular_core.Inject) {
token = paramEntry.token;
} else if (isValidType(paramEntry) && isBlank(token)) {
token = paramEntry;
}
});
} else {
token = param;
}
if (isBlank(token)) {
hasUnknownDeps = true;
return null;
}
return new CompileDiDependencyMetadata({
isAttribute: isAttribute,
isHost: isHost,
isSelf: isSelf,
isSkipSelf: isSkipSelf,
isOptional: isOptional,
token: _this._getTokenMetadata(token)
});
});
if (hasUnknownDeps) {
var depsTokens = dependenciesMetadata.map(function(dep) {
return dep ? stringify(dep.token) : "?";
}).join(", ");
throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
}
return dependenciesMetadata;
};
CompileMetadataResolver.prototype._getTokenMetadata = function(token) {
token = _angular_core.resolveForwardRef(token);
var compileToken;
if (typeof token === "string") {
compileToken = new CompileTokenMetadata({
value: token
});
} else {
compileToken = new CompileTokenMetadata({
identifier: new CompileIdentifierMetadata({
reference: token,
name: this.sanitizeTokenName(token),
moduleUrl: staticTypeModuleUrl(token)
})
});
}
return compileToken;
};
CompileMetadataResolver.prototype._getProvidersMetadata = function(providers, targetEntryComponents, debugInfo) {
var _this = this;
var compileProviders = [];
providers.forEach(function(provider, providerIdx) {
provider = _angular_core.resolveForwardRef(provider);
if (provider && typeof provider == "object" && provider.hasOwnProperty("provide")) {
provider = new ProviderMeta(provider.provide, provider);
}
var compileProvider;
if (Array.isArray(provider)) {
compileProvider = _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo);
} else if (provider instanceof ProviderMeta) {
var tokenMeta = _this._getTokenMetadata(provider.token);
if (tokenMeta.reference === resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
} else {
compileProvider = _this.getProviderMetadata(provider);
}
} else if (isValidType(provider)) {
compileProvider = _this._getTypeMetadata(provider, staticTypeModuleUrl(provider));
} else {
var providersInfo = providers.reduce(function(soFar, seenProvider, seenProviderIdx) {
if (seenProviderIdx < providerIdx) {
soFar.push("" + stringify(seenProvider));
} else if (seenProviderIdx == providerIdx) {
soFar.push("?" + stringify(seenProvider) + "?");
} else if (seenProviderIdx == providerIdx + 1) {
soFar.push("...");
}
return soFar;
}, []).join(", ");
throw new Error("Invalid " + (debugInfo ? debugInfo : "provider") + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
}
if (compileProvider) {
compileProviders.push(compileProvider);
}
});
return compileProviders;
};
CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider) {
var _this = this;
var components = [];
var collectedIdentifiers = [];
if (provider.useFactory || provider.useExisting || provider.useClass) {
throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
}
if (!provider.multi) {
throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
}
convertToCompileValue(provider.useValue, collectedIdentifiers);
collectedIdentifiers.forEach(function(identifier) {
if (_this._directiveResolver.isDirective(identifier.reference)) {
components.push(identifier);
}
});
return components;
};
CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
var compileDeps;
var compileTypeMetadata = null;
var compileFactoryMetadata = null;
if (provider.useClass) {
compileTypeMetadata = this._getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
compileDeps = compileTypeMetadata.diDeps;
} else if (provider.useFactory) {
compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
compileDeps = compileFactoryMetadata.diDeps;
}
return new CompileProviderMetadata({
token: this._getTokenMetadata(provider.token),
useClass: compileTypeMetadata,
useValue: convertToCompileValue(provider.useValue, []),
useFactory: compileFactoryMetadata,
useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
deps: compileDeps,
multi: provider.multi
});
};
CompileMetadataResolver.prototype._getQueriesMetadata = function(queries, isViewQuery, directiveType) {
var _this = this;
var res = [];
Object.keys(queries).forEach(function(propertyName) {
var query = queries[propertyName];
if (query.isViewQuery === isViewQuery) {
res.push(_this._getQueryMetadata(query, propertyName, directiveType));
}
});
return res;
};
CompileMetadataResolver.prototype._queryVarBindings = function(selector) {
return selector.split(/\s*,\s*/);
};
CompileMetadataResolver.prototype._getQueryMetadata = function(q, propertyName, typeOrFunc) {
var _this = this;
var selectors;
if (typeof q.selector === "string") {
selectors = this._queryVarBindings(q.selector).map(function(varName) {
return _this._getTokenMetadata(varName);
});
} else {
if (!q.selector) {
throw new Error("Can't construct a query for the property \"" + propertyName + '" of "' + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
}
selectors = [ this._getTokenMetadata(q.selector) ];
}
return new CompileQueryMetadata({
selectors: selectors,
first: q.first,
descendants: q.descendants,
propertyName: propertyName,
read: q.read ? this._getTokenMetadata(q.read) : null
});
};
CompileMetadataResolver.decorators = [ {
type: _angular_core.Injectable
} ];
CompileMetadataResolver.ctorParameters = [ {
type: NgModuleResolver
}, {
type: DirectiveResolver
}, {
type: PipeResolver
}, {
type: ElementSchemaRegistry
}, {
type: DirectiveNormalizer
}, {
type: ReflectorReader
} ];
return CompileMetadataResolver;
}();
function getTransitiveExportedModules(modules, targetModules, visitedModules) {
if (targetModules === void 0) {
targetModules = [];
}
if (visitedModules === void 0) {
visitedModules = new Set();
}
modules.forEach(function(ngModule) {
if (!visitedModules.has(ngModule.type.reference)) {
visitedModules.add(ngModule.type.reference);
getTransitiveExportedModules(ngModule.exportedModules, targetModules, visitedModules);
targetModules.push(ngModule);
}
});
return targetModules;
}
function getTransitiveImportedModules(modules, targetModules, visitedModules) {
if (targetModules === void 0) {
targetModules = [];
}
if (visitedModules === void 0) {
visitedModules = new Set();
}
modules.forEach(function(ngModule) {
if (!visitedModules.has(ngModule.type.reference)) {
visitedModules.add(ngModule.type.reference);
var nestedModules = ngModule.importedModules.concat(ngModule.exportedModules);
getTransitiveImportedModules(nestedModules, targetModules, visitedModules);
targetModules.push(ngModule);
}
});
return targetModules;
}
function flattenArray(tree, out) {
if (out === void 0) {
out = [];
}
if (tree) {
for (var i = 0; i < tree.length; i++) {
var item = _angular_core.resolveForwardRef(tree[i]);
if (Array.isArray(item)) {
flattenArray(item, out);
} else {
out.push(item);
}
}
}
return out;
}
function dedupeArray(array) {
if (array) {
return Array.from(new Set(array));
}
return [];
}
function flattenAndDedupeArray(tree) {
return dedupeArray(flattenArray(tree));
}
function isValidType(value) {
return isStaticSymbol(value) || value instanceof _angular_core.Type;
}
function staticTypeModuleUrl(value) {
return isStaticSymbol(value) ? value.filePath : null;
}
function componentModuleUrl(reflector, type, cmpMetadata) {
if (isStaticSymbol(type)) {
return staticTypeModuleUrl(type);
}
var moduleId = cmpMetadata.moduleId;
if (typeof moduleId === "string") {
var scheme = getUrlScheme(moduleId);
return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
} else if (moduleId !== null && moduleId !== void 0) {
throw new Error('moduleId should be a string in "' + stringify(type) + '". See https://goo.gl/wIDDiL for more information.\n' + "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
}
return reflector.importUri(type);
}
function convertToCompileValue(value, targetIdentifiers) {
return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
}
var _CompileValueConverter = function(_super) {
__extends$17(_CompileValueConverter, _super);
function _CompileValueConverter() {
_super.apply(this, arguments);
}
_CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
var identifier;
if (isStaticSymbol(value)) {
identifier = new CompileIdentifierMetadata({
name: value.name,
moduleUrl: value.filePath,
reference: value
});
} else {
identifier = new CompileIdentifierMetadata({
reference: value
});
}
targetIdentifiers.push(identifier);
return identifier;
};
return _CompileValueConverter;
}(ValueTransformer);
var ComponentFactoryDependency$1 = function() {
function ComponentFactoryDependency(comp, placeholder) {
this.comp = comp;
this.placeholder = placeholder;
}
return ComponentFactoryDependency;
}();
var NgModuleCompileResult = function() {
function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
this.statements = statements;
this.ngModuleFactoryVar = ngModuleFactoryVar;
this.dependencies = dependencies;
}
return NgModuleCompileResult;
}();
var NgModuleCompiler = function() {
function NgModuleCompiler() {}
NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name;
var sourceFile = new ParseSourceFile("", sourceFileName);
var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
var deps = [];
var bootstrapComponentFactories = [];
var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
var id = new CompileIdentifierMetadata({
name: entryComponent.name
});
if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
bootstrapComponentFactories.push(id);
}
deps.push(new ComponentFactoryDependency$1(entryComponent, id));
return id;
});
var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
providerParser.parse().forEach(function(provider) {
return builder.addProvider(provider);
});
var injectorClass = builder.build();
var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory)).instantiate([ variable(injectorClass.name), importExpr(ngModuleMeta.type) ], importType(resolveIdentifier(Identifiers.NgModuleFactory), [ importType(ngModuleMeta.type) ], [ TypeModifier.Const ]))).toDeclStmt(null, [ StmtModifier.Final ]);
var stmts = [ injectorClass, ngModuleFactoryStmt ];
if (ngModuleMeta.id) {
var registerFactoryStmt = importExpr(resolveIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([ literal(ngModuleMeta.id), variable(ngModuleFactoryVar) ]).toStmt();
stmts.push(registerFactoryStmt);
}
return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
};
NgModuleCompiler.decorators = [ {
type: _angular_core.Injectable
} ];
NgModuleCompiler.ctorParameters = [];
return NgModuleCompiler;
}();
var _InjectorBuilder = function() {
function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
this._ngModuleMeta = _ngModuleMeta;
this._entryComponentFactories = _entryComponentFactories;
this._bootstrapComponentFactories = _bootstrapComponentFactories;
this._sourceSpan = _sourceSpan;
this.fields = [];
this.getters = [];
this.methods = [];
this.ctorStmts = [];
this._tokens = [];
this._instances = new Map();
this._createStmts = [];
this._destroyStmts = [];
}
_InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
var _this = this;
var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
return _this._getProviderValue(provider);
});
var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
this._destroyStmts.push(instance.callMethod("ngOnDestroy", []).toStmt());
}
this._tokens.push(resolvedProvider.token);
this._instances.set(resolvedProvider.token.reference, instance);
};
_InjectorBuilder.prototype.build = function() {
var _this = this;
var getMethodStmts = this._tokens.map(function(token) {
var providerExpr = _this._instances.get(token.reference);
return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [ new ReturnStatement(providerExpr) ]);
});
var methods = [ new ClassMethod("createInternal", [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod("getInternal", [ new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE) ], getMethodStmts.concat([ new ReturnStatement(InjectMethodVars$1.notFoundResult) ]), DYNAMIC_TYPE), new ClassMethod("destroyInternal", [], this._destroyStmts) ];
var parentArgs = [ variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function(componentFactory) {
return importExpr(componentFactory);
})), literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
return importExpr(componentFactory);
})) ];
var injClassName = this._ngModuleMeta.type.name + "Injector";
return createClassStmt({
name: injClassName,
ctorParams: [ new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector))) ],
parent: importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [ importType(this._ngModuleMeta.type) ]),
parentArgs: parentArgs,
builders: [ {
methods: methods
}, this ]
});
};
_InjectorBuilder.prototype._getProviderValue = function(provider) {
var _this = this;
var result;
if (isPresent(provider.useExisting)) {
result = this._getDependency(new CompileDiDependencyMetadata({
token: provider.useExisting
}));
} else if (isPresent(provider.useFactory)) {
var deps = provider.deps || provider.useFactory.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(dep);
});
result = importExpr(provider.useFactory).callFn(depsExpr);
} else if (isPresent(provider.useClass)) {
var deps = provider.deps || provider.useClass.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(dep);
});
result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
} else {
result = convertValueToOutputAst(provider.useValue);
}
return result;
};
_InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
var resolvedProviderValueExpr;
var type;
if (isMulti) {
resolvedProviderValueExpr = literalArr(providerValueExpressions);
type = new ArrayType(DYNAMIC_TYPE);
} else {
resolvedProviderValueExpr = providerValueExpressions[0];
type = providerValueExpressions[0].type;
}
if (!type) {
type = DYNAMIC_TYPE;
}
if (isEager) {
this.fields.push(new ClassField(propName, type));
this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
} else {
var internalField = "_" + propName;
this.fields.push(new ClassField(internalField, type));
var getterStmts = [ new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [ THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt() ]), new ReturnStatement(THIS_EXPR.prop(internalField)) ];
this.getters.push(new ClassGetter(propName, getterStmts, type));
}
return THIS_EXPR.prop(propName);
};
_InjectorBuilder.prototype._getDependency = function(dep) {
var result = null;
if (dep.isValue) {
result = literal(dep.value);
}
if (!dep.isSkipSelf) {
if (dep.token && (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
result = THIS_EXPR;
}
if (!result) {
result = this._instances.get(dep.token.reference);
}
}
if (!result) {
var args = [ createDiTokenExpression(dep.token) ];
if (dep.isOptional) {
args.push(NULL_EXPR);
}
result = InjectorProps.parent.callMethod("get", args);
}
return result;
};
return _InjectorBuilder;
}();
var InjectorProps = function() {
function InjectorProps() {}
InjectorProps.parent = THIS_EXPR.prop("parent");
return InjectorProps;
}();
var InjectMethodVars$1 = function() {
function InjectMethodVars() {}
InjectMethodVars.token = variable("token");
InjectMethodVars.notFoundResult = variable("notFoundResult");
return InjectMethodVars;
}();
var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
var CATCH_ERROR_VAR$2 = variable("error");
var CATCH_STACK_VAR$2 = variable("stack");
var _EmittedLine = function() {
function _EmittedLine(indent) {
this.indent = indent;
this.parts = [];
}
return _EmittedLine;
}();
var EmitterVisitorContext = function() {
function EmitterVisitorContext(_exportedVars, _indent) {
this._exportedVars = _exportedVars;
this._indent = _indent;
this._classes = [];
this._lines = [ new _EmittedLine(_indent) ];
}
EmitterVisitorContext.createRoot = function(exportedVars) {
return new EmitterVisitorContext(exportedVars, 0);
};
Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
get: function() {
return this._lines[this._lines.length - 1];
},
enumerable: true,
configurable: true
});
EmitterVisitorContext.prototype.isExportedVar = function(varName) {
return this._exportedVars.indexOf(varName) !== -1;
};
EmitterVisitorContext.prototype.println = function(lastPart) {
if (lastPart === void 0) {
lastPart = "";
}
this.print(lastPart, true);
};
EmitterVisitorContext.prototype.lineIsEmpty = function() {
return this._currentLine.parts.length === 0;
};
EmitterVisitorContext.prototype.print = function(part, newLine) {
if (newLine === void 0) {
newLine = false;
}
if (part.length > 0) {
this._currentLine.parts.push(part);
}
if (newLine) {
this._lines.push(new _EmittedLine(this._indent));
}
};
EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
if (this.lineIsEmpty()) {
this._lines.pop();
}
};
EmitterVisitorContext.prototype.incIndent = function() {
this._indent++;
this._currentLine.indent = this._indent;
};
EmitterVisitorContext.prototype.decIndent = function() {
this._indent--;
this._currentLine.indent = this._indent;
};
EmitterVisitorContext.prototype.pushClass = function(clazz) {
this._classes.push(clazz);
};
EmitterVisitorContext.prototype.popClass = function() {
return this._classes.pop();
};
Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
get: function() {
return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
},
enumerable: true,
configurable: true
});
EmitterVisitorContext.prototype.toSource = function() {
var lines = this._lines;
if (lines[lines.length - 1].parts.length === 0) {
lines = lines.slice(0, lines.length - 1);
}
return lines.map(function(line) {
if (line.parts.length > 0) {
return _createIndent(line.indent) + line.parts.join("");
} else {
return "";
}
}).join("\n");
};
return EmitterVisitorContext;
}();
var AbstractEmitterVisitor = function() {
function AbstractEmitterVisitor(_escapeDollarInStrings) {
this._escapeDollarInStrings = _escapeDollarInStrings;
}
AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
stmt.expr.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
ctx.print("return ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
ctx.print("if (");
stmt.condition.visitExpression(this, ctx);
ctx.print(") {");
var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
if (stmt.trueCase.length <= 1 && !hasElseCase) {
ctx.print(" ");
this.visitAllStatements(stmt.trueCase, ctx);
ctx.removeEmptyLastLine();
ctx.print(" ");
} else {
ctx.println();
ctx.incIndent();
this.visitAllStatements(stmt.trueCase, ctx);
ctx.decIndent();
if (hasElseCase) {
ctx.println("} else {");
ctx.incIndent();
this.visitAllStatements(stmt.falseCase, ctx);
ctx.decIndent();
}
}
ctx.println("}");
return null;
};
AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
ctx.print("throw ");
stmt.error.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
var lines = stmt.comment.split("\n");
lines.forEach(function(line) {
ctx.println("// " + line);
});
return null;
};
AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print("(");
}
ctx.print(expr.name + " = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print("(");
}
expr.receiver.visitExpression(this, ctx);
ctx.print("[");
expr.index.visitExpression(this, ctx);
ctx.print("] = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print("(");
}
expr.receiver.visitExpression(this, ctx);
ctx.print("." + expr.name + " = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
expr.receiver.visitExpression(this, ctx);
var name = expr.name;
if (isPresent(expr.builtin)) {
name = this.getBuiltinMethodName(expr.builtin);
if (isBlank(name)) {
return null;
}
}
ctx.print("." + name + "(");
this.visitAllExpressions(expr.args, ctx, ",");
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
expr.fn.visitExpression(this, ctx);
ctx.print("(");
this.visitAllExpressions(expr.args, ctx, ",");
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
var varName = ast.name;
if (isPresent(ast.builtin)) {
switch (ast.builtin) {
case BuiltinVar.Super:
varName = "super";
break;

case BuiltinVar.This:
varName = "this";
break;

case BuiltinVar.CatchError:
varName = CATCH_ERROR_VAR$2.name;
break;

case BuiltinVar.CatchStack:
varName = CATCH_STACK_VAR$2.name;
break;

default:
throw new Error("Unknown builtin variable " + ast.builtin);
}
}
ctx.print(varName);
return null;
};
AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
ctx.print("new ");
ast.classExpr.visitExpression(this, ctx);
ctx.print("(");
this.visitAllExpressions(ast.args, ctx, ",");
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
var value = ast.value;
if (typeof value === "string") {
ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
} else {
ctx.print("" + value);
}
return null;
};
AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
ctx.print("(");
ast.condition.visitExpression(this, ctx);
ctx.print("? ");
ast.trueCase.visitExpression(this, ctx);
ctx.print(": ");
ast.falseCase.visitExpression(this, ctx);
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
ctx.print("!");
ast.condition.visitExpression(this, ctx);
return null;
};
AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
var opStr;
switch (ast.operator) {
case BinaryOperator.Equals:
opStr = "==";
break;

case BinaryOperator.Identical:
opStr = "===";
break;

case BinaryOperator.NotEquals:
opStr = "!=";
break;

case BinaryOperator.NotIdentical:
opStr = "!==";
break;

case BinaryOperator.And:
opStr = "&&";
break;

case BinaryOperator.Or:
opStr = "||";
break;

case BinaryOperator.Plus:
opStr = "+";
break;

case BinaryOperator.Minus:
opStr = "-";
break;

case BinaryOperator.Divide:
opStr = "/";
break;

case BinaryOperator.Multiply:
opStr = "*";
break;

case BinaryOperator.Modulo:
opStr = "%";
break;

case BinaryOperator.Lower:
opStr = "<";
break;

case BinaryOperator.LowerEquals:
opStr = "<=";
break;

case BinaryOperator.Bigger:
opStr = ">";
break;

case BinaryOperator.BiggerEquals:
opStr = ">=";
break;

default:
throw new Error("Unknown operator " + ast.operator);
}
ctx.print("(");
ast.lhs.visitExpression(this, ctx);
ctx.print(" " + opStr + " ");
ast.rhs.visitExpression(this, ctx);
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
ast.receiver.visitExpression(this, ctx);
ctx.print(".");
ctx.print(ast.name);
return null;
};
AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
ast.receiver.visitExpression(this, ctx);
ctx.print("[");
ast.index.visitExpression(this, ctx);
ctx.print("]");
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
var useNewLine = ast.entries.length > 1;
ctx.print("[", useNewLine);
ctx.incIndent();
this.visitAllExpressions(ast.entries, ctx, ",", useNewLine);
ctx.decIndent();
ctx.print("]", useNewLine);
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
var _this = this;
var useNewLine = ast.entries.length > 1;
ctx.print("{", useNewLine);
ctx.incIndent();
this.visitAllObjects(function(entry) {
ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
entry[1].visitExpression(_this, ctx);
}, ast.entries, ctx, ",", useNewLine);
ctx.decIndent();
ctx.print("}", useNewLine);
return null;
};
AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
var _this = this;
if (newLine === void 0) {
newLine = false;
}
this.visitAllObjects(function(expr) {
return expr.visitExpression(_this, ctx);
}, expressions, ctx, separator, newLine);
};
AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
if (newLine === void 0) {
newLine = false;
}
for (var i = 0; i < expressions.length; i++) {
if (i > 0) {
ctx.print(separator, newLine);
}
handler(expressions[i]);
}
if (newLine) {
ctx.println();
}
};
AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
var _this = this;
statements.forEach(function(stmt) {
return stmt.visitStatement(_this, ctx);
});
};
return AbstractEmitterVisitor;
}();
function escapeIdentifier(input, escapeDollar, alwaysQuote) {
if (alwaysQuote === void 0) {
alwaysQuote = true;
}
if (isBlank(input)) {
return null;
}
var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function() {
var match = [];
for (var _i = 0; _i < arguments.length; _i++) {
match[_i - 0] = arguments[_i];
}
if (match[0] == "$") {
return escapeDollar ? "\\$" : "$";
} else if (match[0] == "\n") {
return "\\n";
} else if (match[0] == "\r") {
return "\\r";
} else {
return "\\" + match[0];
}
});
var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
return requiresQuotes ? "'" + body + "'" : body;
}
function _createIndent(count) {
var res = "";
for (var i = 0; i < count; i++) {
res += "  ";
}
return res;
}
var __extends$18 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _debugModuleUrl = "asset://debug/lib";
function debugOutputAstAsTypeScript(ast) {
var converter = new _TsEmitterVisitor(_debugModuleUrl);
var ctx = EmitterVisitorContext.createRoot([]);
var asts = Array.isArray(ast) ? ast : [ ast ];
asts.forEach(function(ast) {
if (ast instanceof Statement) {
ast.visitStatement(converter, ctx);
} else if (ast instanceof Expression) {
ast.visitExpression(converter, ctx);
} else if (ast instanceof Type$1) {
ast.visitType(converter, ctx);
} else {
throw new Error("Don't know how to print debug info for " + ast);
}
});
return ctx.toSource();
}
var TypeScriptEmitter = function() {
function TypeScriptEmitter(_importGenerator) {
this._importGenerator = _importGenerator;
}
TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
var _this = this;
var converter = new _TsEmitterVisitor(moduleUrl);
var ctx = EmitterVisitorContext.createRoot(exportedVars);
converter.visitAllStatements(stmts, ctx);
var srcParts = [];
converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
});
srcParts.push(ctx.toSource());
return srcParts.join("\n");
};
return TypeScriptEmitter;
}();
var _TsEmitterVisitor = function(_super) {
__extends$18(_TsEmitterVisitor, _super);
function _TsEmitterVisitor(_moduleUrl) {
_super.call(this, false);
this._moduleUrl = _moduleUrl;
this.importsWithPrefixes = new Map();
}
_TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
if (defaultType === void 0) {
defaultType = "any";
}
if (isPresent(t)) {
t.visitType(this, ctx);
} else {
ctx.print(defaultType);
}
};
_TsEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
var value = ast.value;
if (isBlank(value) && ast.type != NULL_TYPE) {
ctx.print("(" + value + " as any)");
return null;
}
return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
};
_TsEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
if (ast.entries.length === 0) {
ctx.print("(");
}
var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
if (ast.entries.length === 0) {
ctx.print(" as any[])");
}
return result;
};
_TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
if (ctx.isExportedVar(stmt.name)) {
ctx.print("export ");
}
if (stmt.hasModifier(StmtModifier.Final)) {
ctx.print("const");
} else {
ctx.print("var");
}
ctx.print(" " + stmt.name + ":");
this.visitType(stmt.type, ctx);
ctx.print(" = ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
_TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ctx.print("(<");
ast.type.visitType(this, ctx);
ctx.print(">");
ast.value.visitExpression(this, ctx);
ctx.print(")");
return null;
};
_TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
if (ctx.isExportedVar(stmt.name)) {
ctx.print("export ");
}
ctx.print("class " + stmt.name);
if (isPresent(stmt.parent)) {
ctx.print(" extends ");
stmt.parent.visitExpression(this, ctx);
}
ctx.println(" {");
ctx.incIndent();
stmt.fields.forEach(function(field) {
return _this._visitClassField(field, ctx);
});
if (isPresent(stmt.constructorMethod)) {
this._visitClassConstructor(stmt, ctx);
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(method, ctx);
});
ctx.decIndent();
ctx.println("}");
ctx.popClass();
return null;
};
_TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
if (field.hasModifier(StmtModifier.Private)) {
ctx.print("/*private*/ ");
}
ctx.print(field.name);
ctx.print(":");
this.visitType(field.type, ctx);
ctx.println(";");
};
_TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
if (getter.hasModifier(StmtModifier.Private)) {
ctx.print("private ");
}
ctx.print("get " + getter.name + "()");
ctx.print(":");
this.visitType(getter.type, ctx);
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(getter.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print("constructor(");
this._visitParams(stmt.constructorMethod.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(stmt.constructorMethod.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
if (method.hasModifier(StmtModifier.Private)) {
ctx.print("private ");
}
ctx.print(method.name + "(");
this._visitParams(method.params, ctx);
ctx.print("):");
this.visitType(method.type, ctx, "void");
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(method.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print("(");
this._visitParams(ast.params, ctx);
ctx.print("):");
this.visitType(ast.type, ctx, "void");
ctx.println(" => {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print("}");
return null;
};
_TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
if (ctx.isExportedVar(stmt.name)) {
ctx.print("export ");
}
ctx.print("function " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.print("):");
this.visitType(stmt.type, ctx, "void");
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
_TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println("try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
ctx.incIndent();
var catchStmts = [ CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop("stack")).toDeclStmt(null, [ StmtModifier.Final ]) ].concat(stmt.catchStmts);
this.visitAllStatements(catchStmts, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
_TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
var typeStr;
switch (type.name) {
case BuiltinTypeName.Bool:
typeStr = "boolean";
break;

case BuiltinTypeName.Dynamic:
typeStr = "any";
break;

case BuiltinTypeName.Function:
typeStr = "Function";
break;

case BuiltinTypeName.Number:
typeStr = "number";
break;

case BuiltinTypeName.Int:
typeStr = "number";
break;

case BuiltinTypeName.String:
typeStr = "string";
break;

default:
throw new Error("Unsupported builtin type " + type.name);
}
ctx.print(typeStr);
return null;
};
_TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
this.visitType(type.of, ctx);
ctx.print("[]");
return null;
};
_TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
ctx.print("{[key: string]:");
this.visitType(type.valueType, ctx);
ctx.print("}");
return null;
};
_TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case BuiltinMethod.ConcatArray:
name = "concat";
break;

case BuiltinMethod.SubscribeObservable:
name = "subscribe";
break;

case BuiltinMethod.Bind:
name = "bind";
break;

default:
throw new Error("Unknown builtin method: " + method);
}
return name;
};
_TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
var _this = this;
this.visitAllObjects(function(param) {
ctx.print(param.name);
ctx.print(":");
_this.visitType(param.type, ctx);
}, params, ctx, ",");
};
_TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
var _this = this;
if (isBlank(value.name)) {
throw new Error("Internal error: unknown identifier " + value);
}
if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
var prefix = this.importsWithPrefixes.get(value.moduleUrl);
if (isBlank(prefix)) {
prefix = "import" + this.importsWithPrefixes.size;
this.importsWithPrefixes.set(value.moduleUrl, prefix);
}
ctx.print(prefix + ".");
}
if (value.reference && value.reference.members) {
ctx.print(value.reference.name);
ctx.print(".");
ctx.print(value.reference.members.join("."));
} else {
ctx.print(value.name);
}
if (isPresent(typeParams) && typeParams.length > 0) {
ctx.print("<");
this.visitAllObjects(function(type) {
return type.visitType(_this, ctx);
}, typeParams, ctx, ",");
ctx.print(">");
}
};
return _TsEmitterVisitor;
}(AbstractEmitterVisitor);
function interpretStatements(statements, resultVar) {
var stmtsWithReturn = statements.concat([ new ReturnStatement(variable(resultVar)) ]);
var ctx = new _ExecutionContext(null, null, null, new Map());
var visitor = new StatementInterpreter();
var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
return isPresent(result) ? result.value : null;
}
function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
var childCtx = ctx.createChildWihtLocalVars();
for (var i = 0; i < varNames.length; i++) {
childCtx.vars.set(varNames[i], varValues[i]);
}
var result = visitor.visitAllStatements(statements, childCtx);
return isPresent(result) ? result.value : null;
}
var _ExecutionContext = function() {
function _ExecutionContext(parent, instance, className, vars) {
this.parent = parent;
this.instance = instance;
this.className = className;
this.vars = vars;
}
_ExecutionContext.prototype.createChildWihtLocalVars = function() {
return new _ExecutionContext(this, this.instance, this.className, new Map());
};
return _ExecutionContext;
}();
var ReturnValue = function() {
function ReturnValue(value) {
this.value = value;
}
return ReturnValue;
}();
function createDynamicClass(_classStmt, _ctx, _visitor) {
var propertyDescriptors = {};
_classStmt.getters.forEach(function(getter) {
propertyDescriptors[getter.name] = {
configurable: false,
get: function() {
var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
}
};
});
_classStmt.methods.forEach(function(method) {
var paramNames = method.params.map(function(param) {
return param.name;
});
propertyDescriptors[method.name] = {
writable: false,
configurable: false,
value: function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
}
};
});
var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
return param.name;
});
var ctor = function() {
var _this = this;
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
_classStmt.fields.forEach(function(field) {
_this[field.name] = undefined;
});
_executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
};
var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
return ctor;
}
var StatementInterpreter = function() {
function StatementInterpreter() {}
StatementInterpreter.prototype.debugAst = function(ast) {
return debugOutputAstAsTypeScript(ast);
};
StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
return null;
};
StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
var value = expr.value.visitExpression(this, ctx);
var currCtx = ctx;
while (currCtx != null) {
if (currCtx.vars.has(expr.name)) {
currCtx.vars.set(expr.name, value);
return value;
}
currCtx = currCtx.parent;
}
throw new Error("Not declared variable " + expr.name);
};
StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
var varName = ast.name;
if (isPresent(ast.builtin)) {
switch (ast.builtin) {
case BuiltinVar.Super:
return ctx.instance.__proto__;

case BuiltinVar.This:
return ctx.instance;

case BuiltinVar.CatchError:
varName = CATCH_ERROR_VAR$1;
break;

case BuiltinVar.CatchStack:
varName = CATCH_STACK_VAR$1;
break;

default:
throw new Error("Unknown builtin variable " + ast.builtin);
}
}
var currCtx = ctx;
while (currCtx != null) {
if (currCtx.vars.has(varName)) {
return currCtx.vars.get(varName);
}
currCtx = currCtx.parent;
}
throw new Error("Not declared variable " + varName);
};
StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var index = expr.index.visitExpression(this, ctx);
var value = expr.value.visitExpression(this, ctx);
receiver[index] = value;
return value;
};
StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var value = expr.value.visitExpression(this, ctx);
receiver[expr.name] = value;
return value;
};
StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var args = this.visitAllExpressions(expr.args, ctx);
var result;
if (isPresent(expr.builtin)) {
switch (expr.builtin) {
case BuiltinMethod.ConcatArray:
result = receiver.concat.apply(receiver, args);
break;

case BuiltinMethod.SubscribeObservable:
result = receiver.subscribe({
next: args[0]
});
break;

case BuiltinMethod.Bind:
result = receiver.bind.apply(receiver, args);
break;

default:
throw new Error("Unknown builtin method " + expr.builtin);
}
} else {
result = receiver[expr.name].apply(receiver, args);
}
return result;
};
StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
var args = this.visitAllExpressions(stmt.args, ctx);
var fnExpr = stmt.fn;
if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
return null;
} else {
var fn = stmt.fn.visitExpression(this, ctx);
return fn.apply(null, args);
}
};
StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
return new ReturnValue(stmt.value.visitExpression(this, ctx));
};
StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var clazz = createDynamicClass(stmt, ctx, this);
ctx.vars.set(stmt.name, clazz);
return null;
};
StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
return stmt.expr.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
var condition = stmt.condition.visitExpression(this, ctx);
if (condition) {
return this.visitAllStatements(stmt.trueCase, ctx);
} else if (isPresent(stmt.falseCase)) {
return this.visitAllStatements(stmt.falseCase, ctx);
}
return null;
};
StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
try {
return this.visitAllStatements(stmt.bodyStmts, ctx);
} catch (e) {
var childCtx = ctx.createChildWihtLocalVars();
childCtx.vars.set(CATCH_ERROR_VAR$1, e);
childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);
return this.visitAllStatements(stmt.catchStmts, childCtx);
}
};
StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
throw stmt.error.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
return null;
};
StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
var args = this.visitAllExpressions(ast.args, ctx);
var clazz = ast.classExpr.visitExpression(this, ctx);
return new (clazz.bind.apply(clazz, [ void 0 ].concat(args)))();
};
StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
return ast.value;
};
StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
return ast.value.reference;
};
StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
if (ast.condition.visitExpression(this, ctx)) {
return ast.trueCase.visitExpression(this, ctx);
} else if (isPresent(ast.falseCase)) {
return ast.falseCase.visitExpression(this, ctx);
}
return null;
};
StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
return !ast.condition.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
return ast.value.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
var paramNames = ast.params.map(function(param) {
return param.name;
});
return _declareFn(paramNames, ast.statements, ctx, this);
};
StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
var paramNames = stmt.params.map(function(param) {
return param.name;
});
ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
return null;
};
StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
var _this = this;
var lhs = function() {
return ast.lhs.visitExpression(_this, ctx);
};
var rhs = function() {
return ast.rhs.visitExpression(_this, ctx);
};
switch (ast.operator) {
case BinaryOperator.Equals:
return lhs() == rhs();

case BinaryOperator.Identical:
return lhs() === rhs();

case BinaryOperator.NotEquals:
return lhs() != rhs();

case BinaryOperator.NotIdentical:
return lhs() !== rhs();

case BinaryOperator.And:
return lhs() && rhs();

case BinaryOperator.Or:
return lhs() || rhs();

case BinaryOperator.Plus:
return lhs() + rhs();

case BinaryOperator.Minus:
return lhs() - rhs();

case BinaryOperator.Divide:
return lhs() / rhs();

case BinaryOperator.Multiply:
return lhs() * rhs();

case BinaryOperator.Modulo:
return lhs() % rhs();

case BinaryOperator.Lower:
return lhs() < rhs();

case BinaryOperator.LowerEquals:
return lhs() <= rhs();

case BinaryOperator.Bigger:
return lhs() > rhs();

case BinaryOperator.BiggerEquals:
return lhs() >= rhs();

default:
throw new Error("Unknown operator " + ast.operator);
}
};
StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
var result;
var receiver = ast.receiver.visitExpression(this, ctx);
result = receiver[ast.name];
return result;
};
StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
var receiver = ast.receiver.visitExpression(this, ctx);
var prop = ast.index.visitExpression(this, ctx);
return receiver[prop];
};
StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
return this.visitAllExpressions(ast.entries, ctx);
};
StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
var _this = this;
var result = {};
ast.entries.forEach(function(entry) {
return result[entry[0]] = entry[1].visitExpression(_this, ctx);
});
return result;
};
StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
var _this = this;
return expressions.map(function(expr) {
return expr.visitExpression(_this, ctx);
});
};
StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
for (var i = 0; i < statements.length; i++) {
var stmt = statements[i];
var val = stmt.visitStatement(this, ctx);
if (val instanceof ReturnValue) {
return val;
}
}
return null;
};
return StatementInterpreter;
}();
function _declareFn(varNames, statements, ctx, visitor) {
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
};
}
var CATCH_ERROR_VAR$1 = "error";
var CATCH_STACK_VAR$1 = "stack";
var __extends$20 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractJsEmitterVisitor = function(_super) {
__extends$20(AbstractJsEmitterVisitor, _super);
function AbstractJsEmitterVisitor() {
_super.call(this, false);
}
AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
this._visitClassConstructor(stmt, ctx);
if (isPresent(stmt.parent)) {
ctx.print(stmt.name + ".prototype = Object.create(");
stmt.parent.visitExpression(this, ctx);
ctx.println(".prototype);");
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(stmt, getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(stmt, method, ctx);
});
ctx.popClass();
return null;
};
AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print("function " + stmt.name + "(");
if (isPresent(stmt.constructorMethod)) {
this._visitParams(stmt.constructorMethod.params, ctx);
}
ctx.println(") {");
ctx.incIndent();
if (isPresent(stmt.constructorMethod)) {
if (stmt.constructorMethod.body.length > 0) {
ctx.println("var self = this;");
this.visitAllStatements(stmt.constructorMethod.body, ctx);
}
}
ctx.decIndent();
ctx.println("}");
};
AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
ctx.incIndent();
if (getter.body.length > 0) {
ctx.println("var self = this;");
this.visitAllStatements(getter.body, ctx);
}
ctx.decIndent();
ctx.println("}});");
};
AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
ctx.print(stmt.name + ".prototype." + method.name + " = function(");
this._visitParams(method.params, ctx);
ctx.println(") {");
ctx.incIndent();
if (method.body.length > 0) {
ctx.println("var self = this;");
this.visitAllStatements(method.body, ctx);
}
ctx.decIndent();
ctx.println("};");
};
AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
if (ast.builtin === BuiltinVar.This) {
ctx.print("self");
} else if (ast.builtin === BuiltinVar.Super) {
throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
} else {
_super.prototype.visitReadVarExpr.call(this, ast, ctx);
}
return null;
};
AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
ctx.print("var " + stmt.name + " = ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ast.value.visitExpression(this, ctx);
return null;
};
AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
var fnExpr = expr.fn;
if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
ctx.currentClass.parent.visitExpression(this, ctx);
ctx.print(".call(this");
if (expr.args.length > 0) {
ctx.print(", ");
this.visitAllExpressions(expr.args, ctx, ",");
}
ctx.print(")");
} else {
_super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
}
return null;
};
AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print("function(");
this._visitParams(ast.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print("}");
return null;
};
AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
ctx.print("function " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println("try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
ctx.incIndent();
var catchStmts = [ CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop("stack")).toDeclStmt(null, [ StmtModifier.Final ]) ].concat(stmt.catchStmts);
this.visitAllStatements(catchStmts, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
this.visitAllObjects(function(param) {
return ctx.print(param.name);
}, params, ctx, ",");
};
AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case BuiltinMethod.ConcatArray:
name = "concat";
break;

case BuiltinMethod.SubscribeObservable:
name = "subscribe";
break;

case BuiltinMethod.Bind:
name = "bind";
break;

default:
throw new Error("Unknown builtin method: " + method);
}
return name;
};
return AbstractJsEmitterVisitor;
}(AbstractEmitterVisitor);
var __extends$19 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
function jitStatements(sourceUrl, statements, resultVar) {
var converter = new JitEmitterVisitor();
var ctx = EmitterVisitorContext.createRoot([ resultVar ]);
converter.visitAllStatements(statements, ctx);
return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
}
var JitEmitterVisitor = function(_super) {
__extends$19(JitEmitterVisitor, _super);
function JitEmitterVisitor() {
_super.apply(this, arguments);
this._evalArgNames = [];
this._evalArgValues = [];
}
JitEmitterVisitor.prototype.getArgs = function() {
var result = {};
for (var i = 0; i < this._evalArgNames.length; i++) {
result[this._evalArgNames[i]] = this._evalArgValues[i];
}
return result;
};
JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
var value = ast.value.reference;
var id = this._evalArgValues.indexOf(value);
if (id === -1) {
id = this._evalArgValues.length;
this._evalArgValues.push(value);
var name_1 = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : "val";
this._evalArgNames.push(sanitizeIdentifier("jit_" + name_1 + id));
}
ctx.print(this._evalArgNames[id]);
return null;
};
return JitEmitterVisitor;
}(AbstractJsEmitterVisitor);
var ShadowCss = function() {
function ShadowCss() {
this.strictStyling = true;
}
ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
if (hostSelector === void 0) {
hostSelector = "";
}
var sourceMappingUrl = extractSourceMappingUrl(cssText);
cssText = stripComments(cssText);
cssText = this._insertDirectives(cssText);
return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
};
ShadowCss.prototype._insertDirectives = function(cssText) {
cssText = this._insertPolyfillDirectivesInCssText(cssText);
return this._insertPolyfillRulesInCssText(cssText);
};
ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
return cssText.replace(_cssContentNextSelectorRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
return m[2] + "{";
});
};
ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
return cssText.replace(_cssContentRuleRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
var rule = m[0].replace(m[1], "").replace(m[2], "");
return m[4] + rule;
});
};
ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
cssText = this._insertPolyfillHostInCssText(cssText);
cssText = this._convertColonHost(cssText);
cssText = this._convertColonHostContext(cssText);
cssText = this._convertShadowDOMSelectors(cssText);
if (scopeSelector) {
cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
}
cssText = cssText + "\n" + unscopedRules;
return cssText.trim();
};
ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
var r = "";
var m;
_cssContentUnscopedRuleRe.lastIndex = 0;
while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
var rule = m[0].replace(m[2], "").replace(m[1], m[4]);
r += rule + "\n\n";
}
return r;
};
ShadowCss.prototype._convertColonHost = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
};
ShadowCss.prototype._convertColonHostContext = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
};
ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
return cssText.replace(regExp, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
if (m[2]) {
var parts = m[2].split(",");
var r = [];
for (var i = 0; i < parts.length; i++) {
var p = parts[i].trim();
if (!p) break;
r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
}
return r.join(",");
} else {
return _polyfillHostNoCombinator + m[3];
}
});
};
ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
if (part.indexOf(_polyfillHost) > -1) {
return this._colonHostPartReplacer(host, part, suffix);
} else {
return host + part + suffix + ", " + part + " " + host + suffix;
}
};
ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
return host + part.replace(_polyfillHost, "") + suffix;
};
ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
return _shadowDOMSelectorsRe.reduce(function(result, pattern) {
return result.replace(pattern, " ");
}, cssText);
};
ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
var _this = this;
return processRules(cssText, function(rule) {
var selector = rule.selector;
var content = rule.content;
if (rule.selector[0] != "@") {
selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
} else if (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) {
content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
}
return new CssRule(selector, content);
});
};
ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
var _this = this;
return selector.split(",").map(function(part) {
return part.trim().split(_shadowDeepSelectors);
}).map(function(deepParts) {
var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
var applyScope = function(shallowPart) {
if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
} else {
return shallowPart;
}
};
return [ applyScope(shallowPart) ].concat(otherParts).join(" ");
}).join(", ");
};
ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
var re = this._makeScopeMatcher(scopeSelector);
return !re.test(selector);
};
ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
var lre = /\[/g;
var rre = /\]/g;
scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]");
return new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
};
ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
};
ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
_polyfillHostRe.lastIndex = 0;
if (_polyfillHostRe.test(selector)) {
var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
return selector.replace(_polyfillHostNoCombinatorRe, function(hnc, selector) {
return selector.replace(/([^:]*)(:*)(.*)/, function(_, before, colon, after) {
return before + replaceBy_1 + colon + after;
});
}).replace(_polyfillHostRe, replaceBy_1 + " ");
}
return scopeSelector + " " + selector;
};
ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector, hostSelector) {
var _this = this;
var isRe = /\[is=([^\]]*)\]/g;
scopeSelector = scopeSelector.replace(isRe, function(_) {
var parts = [];
for (var _i = 1; _i < arguments.length; _i++) {
parts[_i - 1] = arguments[_i];
}
return parts[0];
});
var attrName = "[" + scopeSelector + "]";
var _scopeSelectorPart = function(p) {
var scopedP = p.trim();
if (!scopedP) {
return "";
}
if (p.indexOf(_polyfillHostNoCombinator) > -1) {
scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
} else {
var t = p.replace(_polyfillHostRe, "");
if (t.length > 0) {
var matches = t.match(/([^:]*)(:*)(.*)/);
if (matches) {
scopedP = matches[1] + attrName + matches[2] + matches[3];
}
}
}
return scopedP;
};
var safeContent = new SafeSelector(selector);
selector = safeContent.content();
var scopedSelector = "";
var startIndex = 0;
var res;
var sep = /( |>|\+|~(?!=))\s*/g;
var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
while ((res = sep.exec(selector)) !== null) {
var separator = res[1];
var part = selector.slice(startIndex, res.index).trim();
var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
scopedSelector += scopedPart + " " + separator + " ";
startIndex = sep.lastIndex;
}
scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
return safeContent.restore(scopedSelector);
};
ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
};
return ShadowCss;
}();
var SafeSelector = function() {
function SafeSelector(selector) {
var _this = this;
this.placeholders = [];
this.index = 0;
selector = selector.replace(/(\[[^\]]*\])/g, function(_, keep) {
var replaceBy = "__ph-" + _this.index + "__";
_this.placeholders.push(keep);
_this.index++;
return replaceBy;
});
this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function(_, pseudo, exp) {
var replaceBy = "__ph-" + _this.index + "__";
_this.placeholders.push(exp);
_this.index++;
return pseudo + replaceBy;
});
}
SafeSelector.prototype.restore = function(content) {
var _this = this;
return content.replace(/__ph-(\d+)__/g, function(ph, index) {
return _this.placeholders[+index];
});
};
SafeSelector.prototype.content = function() {
return this._content;
};
return SafeSelector;
}();
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _polyfillHost = "-shadowcsshost";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = ")(?:\\((" + "(?:\\([^)(]*\\)|[^)(]*)+?" + ")\\))?([^,{]*)";
var _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim");
var _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
var _shadowDOMSelectorsRe = [ /::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g ];
var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = /-shadowcsshost/gim;
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
function stripComments(input) {
return input.replace(_commentRe, "");
}
var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
function extractSourceMappingUrl(input) {
var matcher = input.match(_sourceMappingUrlRe);
return matcher ? matcher[0] : "";
}
var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var _curlyRe = /([{}])/g;
var OPEN_CURLY = "{";
var CLOSE_CURLY = "}";
var BLOCK_PLACEHOLDER = "%BLOCK%";
var CssRule = function() {
function CssRule(selector, content) {
this.selector = selector;
this.content = content;
}
return CssRule;
}();
function processRules(input, ruleCallback) {
var inputWithEscapedBlocks = escapeBlocks(input);
var nextBlockIndex = 0;
return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i - 0] = arguments[_i];
}
var selector = m[2];
var content = "";
var suffix = m[4];
var contentPrefix = "";
if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
contentPrefix = "{";
}
var rule = ruleCallback(new CssRule(selector, content));
return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
});
}
var StringWithEscapedBlocks = function() {
function StringWithEscapedBlocks(escapedString, blocks) {
this.escapedString = escapedString;
this.blocks = blocks;
}
return StringWithEscapedBlocks;
}();
function escapeBlocks(input) {
var inputParts = input.split(_curlyRe);
var resultParts = [];
var escapedBlocks = [];
var bracketCount = 0;
var currentBlockParts = [];
for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
var part = inputParts[partIndex];
if (part == CLOSE_CURLY) {
bracketCount--;
}
if (bracketCount > 0) {
currentBlockParts.push(part);
} else {
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
currentBlockParts = [];
}
resultParts.push(part);
}
if (part == OPEN_CURLY) {
bracketCount++;
}
}
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
}
return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
}
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
var StylesCompileDependency = function() {
function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
this.moduleUrl = moduleUrl;
this.isShimmed = isShimmed;
this.valuePlaceholder = valuePlaceholder;
}
return StylesCompileDependency;
}();
var StylesCompileResult = function() {
function StylesCompileResult(componentStylesheet, externalStylesheets) {
this.componentStylesheet = componentStylesheet;
this.externalStylesheets = externalStylesheets;
}
return StylesCompileResult;
}();
var CompiledStylesheet = function() {
function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
this.statements = statements;
this.stylesVar = stylesVar;
this.dependencies = dependencies;
this.isShimmed = isShimmed;
this.meta = meta;
}
return CompiledStylesheet;
}();
var StyleCompiler = function() {
function StyleCompiler(_urlResolver) {
this._urlResolver = _urlResolver;
this._shadowCss = new ShadowCss();
}
StyleCompiler.prototype.compileComponent = function(comp) {
var _this = this;
var externalStylesheets = [];
var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
styles: comp.template.styles,
styleUrls: comp.template.styleUrls,
moduleUrl: comp.type.moduleUrl
}), true);
comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
externalStylesheets.push(compiledStylesheet);
});
return new StylesCompileResult(componentStylesheet, externalStylesheets);
};
StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
var _this = this;
var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
var styleExpressions = stylesheet.styles.map(function(plainStyle) {
return literal(_this._shimIfNeeded(plainStyle, shim));
});
var dependencies = [];
for (var i = 0; i < stylesheet.styleUrls.length; i++) {
var identifier = new CompileIdentifierMetadata({
name: getStylesVarName(null)
});
dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
styleExpressions.push(new ExternalExpr(identifier));
}
var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [ TypeModifier.Const ]))).toDeclStmt(null, [ StmtModifier.Final ]);
return new CompiledStylesheet([ stmt ], stylesVar, dependencies, shim, stylesheet);
};
StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
};
StyleCompiler.decorators = [ {
type: _angular_core.Injectable
} ];
StyleCompiler.ctorParameters = [ {
type: UrlResolver
} ];
return StyleCompiler;
}();
function getStylesVarName(component) {
var result = "styles";
if (component) {
result += "_" + component.type.name;
}
return result;
}
var RuntimeCompiler = function() {
function RuntimeCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
this._injector = _injector;
this._metadataResolver = _metadataResolver;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._viewCompiler = _viewCompiler;
this._ngModuleCompiler = _ngModuleCompiler;
this._directiveWrapperCompiler = _directiveWrapperCompiler;
this._compilerConfig = _compilerConfig;
this._animationParser = _animationParser;
this._compiledTemplateCache = new Map();
this._compiledHostTemplateCache = new Map();
this._compiledDirectiveWrapperCache = new Map();
this._compiledNgModuleCache = new Map();
this._animationCompiler = new AnimationCompiler();
}
Object.defineProperty(RuntimeCompiler.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
RuntimeCompiler.prototype.compileModuleSync = function(moduleType) {
return this._compileModuleAndComponents(moduleType, true).syncResult;
};
RuntimeCompiler.prototype.compileModuleAsync = function(moduleType) {
return this._compileModuleAndComponents(moduleType, false).asyncResult;
};
RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
return this._compileModuleAndAllComponents(moduleType, true).syncResult;
};
RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
};
RuntimeCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
var _this = this;
var loadingPromise = this._loadModules(moduleType, isSync);
var createResult = function() {
_this._compileComponents(moduleType, null);
return _this._compileModule(moduleType);
};
if (isSync) {
return new SyncAsyncResult(createResult());
} else {
return new SyncAsyncResult(null, loadingPromise.then(createResult));
}
};
RuntimeCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
var _this = this;
var loadingPromise = this._loadModules(moduleType, isSync);
var createResult = function() {
var componentFactories = [];
_this._compileComponents(moduleType, componentFactories);
return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
};
if (isSync) {
return new SyncAsyncResult(createResult());
} else {
return new SyncAsyncResult(null, loadingPromise.then(createResult));
}
};
RuntimeCompiler.prototype._loadModules = function(mainModule, isSync) {
var _this = this;
var loadingPromises = [];
var _a = this._metadataResolver.loadNgModuleMetadata(mainModule, isSync), ngModule = _a.ngModule, loading = _a.loading;
loadingPromises.push(loading);
ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
loadingPromises.push(_this._metadataResolver.loadNgModuleMetadata(localModuleMeta.type.reference, isSync).loading);
});
return Promise.all(loadingPromises);
};
RuntimeCompiler.prototype._compileModule = function(moduleType) {
var _this = this;
var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
if (!ngModuleFactory) {
var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
var extraProviders = [ this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, {
useFactory: function() {
return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
}
})) ];
var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
compileResult.dependencies.forEach(function(dep) {
dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
dep.placeholder.name = "compFactory_" + dep.comp.name;
});
if (!this._compilerConfig.useJit) {
ngModuleFactory = interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
} else {
ngModuleFactory = jitStatements("/" + moduleMeta_1.type.name + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
}
this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
}
return ngModuleFactory;
};
RuntimeCompiler.prototype._compileComponents = function(mainModule, allComponentFactories) {
var _this = this;
var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
var moduleByDirective = new Map();
var templates = new Set();
ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
_this._compileDirectiveWrapper(dirMeta, localModuleMeta);
if (dirMeta.isComponent) {
templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
if (allComponentFactories) {
var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
templates.add(template);
allComponentFactories.push(template.proxyComponentFactory);
}
}
});
});
ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
if (dirMeta.isComponent) {
dirMeta.entryComponents.forEach(function(entryComponentType) {
var moduleMeta = moduleByDirective.get(entryComponentType.reference);
templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
});
}
});
localModuleMeta.entryComponents.forEach(function(entryComponentType) {
var moduleMeta = moduleByDirective.get(entryComponentType.reference);
templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
});
});
templates.forEach(function(template) {
return _this._compileTemplate(template);
});
};
RuntimeCompiler.prototype.clearCacheFor = function(type) {
this._compiledNgModuleCache.delete(type);
this._metadataResolver.clearCacheFor(type);
this._compiledHostTemplateCache.delete(type);
var compiledTemplate = this._compiledTemplateCache.get(type);
if (compiledTemplate) {
this._compiledTemplateCache.delete(type);
}
};
RuntimeCompiler.prototype.clearCache = function() {
this._metadataResolver.clearCache();
this._compiledTemplateCache.clear();
this._compiledHostTemplateCache.clear();
this._compiledNgModuleCache.clear();
};
RuntimeCompiler.prototype._createCompiledHostTemplate = function(compType, ngModule) {
if (!ngModule) {
throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
}
var compiledTemplate = this._compiledHostTemplateCache.get(compType);
if (!compiledTemplate) {
var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
assertComponent(compMeta);
var hostMeta = createHostComponentMeta(compMeta);
compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [ compMeta.type ]);
this._compiledHostTemplateCache.set(compType, compiledTemplate);
}
return compiledTemplate;
};
RuntimeCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
if (!compiledTemplate) {
assertComponent(compMeta);
compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
}
return compiledTemplate;
};
RuntimeCompiler.prototype._assertComponentKnown = function(compType, isHost) {
var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
if (!compiledTemplate) {
throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
}
return compiledTemplate;
};
RuntimeCompiler.prototype._assertDirectiveWrapper = function(dirType) {
var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
if (!dirWrapper) {
throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
}
return dirWrapper;
};
RuntimeCompiler.prototype._compileDirectiveWrapper = function(dirMeta, moduleMeta) {
var compileResult = this._directiveWrapperCompiler.compile(dirMeta);
var statements = compileResult.statements;
var directiveWrapperClass;
if (!this._compilerConfig.useJit) {
directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
} else {
directiveWrapperClass = jitStatements("/" + moduleMeta.type.name + "/" + dirMeta.type.name + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
}
this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
};
RuntimeCompiler.prototype._compileTemplate = function(template) {
var _this = this;
if (template.isCompiled) {
return;
}
var compMeta = template.compMeta;
var externalStylesheetsByModuleUrl = new Map();
var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
stylesCompileResult.externalStylesheets.forEach(function(r) {
externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
});
this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
var parsedAnimations = this._animationParser.parseComponent(compMeta);
var directives = template.directives.map(function(dir) {
return _this._metadataResolver.getDirectiveSummary(dir.reference);
});
var pipes = template.ngModule.transitiveModule.pipes.map(function(pipe) {
return _this._metadataResolver.getPipeSummary(pipe.reference);
});
var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, compMeta.type.name);
var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
compileResult.dependencies.forEach(function(dep) {
var depTemplate;
if (dep instanceof ViewClassDependency) {
var vfd = dep;
depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
vfd.placeholder.reference = depTemplate.proxyViewClass;
vfd.placeholder.name = "View_" + vfd.comp.name;
} else if (dep instanceof ComponentFactoryDependency) {
var cfd = dep;
depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
cfd.placeholder.reference = depTemplate.proxyComponentFactory;
cfd.placeholder.name = "compFactory_" + cfd.comp.name;
} else if (dep instanceof DirectiveWrapperDependency) {
var dwd = dep;
dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
}
});
var statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function(ca) {
return ca.statements;
})).concat(compileResult.statements);
var viewClass;
if (!this._compilerConfig.useJit) {
viewClass = interpretStatements(statements, compileResult.viewClassVar);
} else {
viewClass = jitStatements("/" + template.ngModule.type.name + "/" + template.compType.name + "/" + (template.isHost ? "host" : "component") + ".ngfactory.js", statements, compileResult.viewClassVar);
}
template.compiled(viewClass);
var _a;
};
RuntimeCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
var _this = this;
result.dependencies.forEach(function(dep, i) {
var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
dep.valuePlaceholder.reference = nestedStylesArr;
dep.valuePlaceholder.name = "importedStyles" + i;
});
};
RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
if (!this._compilerConfig.useJit) {
return interpretStatements(result.statements, result.stylesVar);
} else {
return jitStatements("/" + result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
}
};
RuntimeCompiler.decorators = [ {
type: _angular_core.Injectable
} ];
RuntimeCompiler.ctorParameters = [ {
type: _angular_core.Injector
}, {
type: CompileMetadataResolver
}, {
type: TemplateParser
}, {
type: StyleCompiler
}, {
type: ViewCompiler
}, {
type: NgModuleCompiler
}, {
type: DirectiveWrapperCompiler
}, {
type: CompilerConfig
}, {
type: AnimationParser
} ];
return RuntimeCompiler;
}();
var CompiledTemplate = function() {
function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
this.isHost = isHost;
this.compType = compType;
this.compMeta = compMeta;
this.ngModule = ngModule;
this.directives = directives;
this._viewClass = null;
this.isCompiled = false;
var self = this;
this.proxyViewClass = function() {
if (!self._viewClass) {
throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
}
return self._viewClass.apply(this, arguments);
};
this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) : null;
}
CompiledTemplate.prototype.compiled = function(viewClass) {
this._viewClass = viewClass;
this.proxyViewClass.prototype = viewClass.prototype;
this.isCompiled = true;
};
return CompiledTemplate;
}();
function assertComponent(meta) {
if (!meta.isComponent) {
throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
}
}
var ModuleBoundCompiler = function() {
function ModuleBoundCompiler(_delegate, _ngModule) {
this._delegate = _delegate;
this._ngModule = _ngModule;
}
Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
get: function() {
return this._delegate.injector;
},
enumerable: true,
configurable: true
});
ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
return this._delegate.compileModuleSync(moduleType);
};
ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
return this._delegate.compileModuleAsync(moduleType);
};
ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
return this._delegate.compileModuleAndAllComponentsSync(moduleType);
};
ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
};
ModuleBoundCompiler.prototype.clearCache = function() {
this._delegate.clearCache();
};
ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
this._delegate.clearCacheFor(type);
};
return ModuleBoundCompiler;
}();
var SECURITY_SCHEMA = {};
function registerContext(ctx, specs) {
for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
var spec = specs_1[_i];
SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
}
}
registerContext(_angular_core.SecurityContext.HTML, [ "iframe|srcdoc", "*|innerHTML", "*|outerHTML" ]);
registerContext(_angular_core.SecurityContext.STYLE, [ "*|style" ]);
registerContext(_angular_core.SecurityContext.URL, [ "*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "img|srcset", "input|src", "ins|cite", "q|cite", "source|src", "source|srcset", "track|src", "video|poster", "video|src" ]);
registerContext(_angular_core.SecurityContext.RESOURCE_URL, [ "applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src" ]);
var __extends$21 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BOOLEAN = "boolean";
var NUMBER = "number";
var STRING = "string";
var OBJECT = "object";
var SCHEMA = [ "[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume", ":svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username", "area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username", "audio^media|", "br^[HTMLElement]|clear", "base^[HTMLElement]|href,target", "body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas^[HTMLElement]|#height,#width", "content^[HTMLElement]|select", "dl^[HTMLElement]|!compact", "datalist^[HTMLElement]|", "details^[HTMLElement]|!open", "dialog^[HTMLElement]|!open,returnValue", "dir^[HTMLElement]|!compact", "div^[HTMLElement]|align", "embed^[HTMLElement]|align,height,name,src,type,width", "fieldset^[HTMLElement]|!disabled,name", "font^[HTMLElement]|color,face,size", "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr^[HTMLElement]|align,color,!noShade,size,width", "head^[HTMLElement]|", "h1,h2,h3,h4,h5,h6^[HTMLElement]|align", "html^[HTMLElement]|version", "iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width", "img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width", "input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name", "li^[HTMLElement]|type,#value", "label^[HTMLElement]|htmlFor", "legend^[HTMLElement]|align", "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map^[HTMLElement]|name", "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu^[HTMLElement]|!compact", "meta^[HTMLElement]|content,httpEquiv,name,scheme", "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value", "ins,del^[HTMLElement]|cite,dateTime", "ol^[HTMLElement]|!compact,!reversed,#start,type", "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup^[HTMLElement]|!disabled,label", "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value", "output^[HTMLElement]|defaultValue,%htmlFor,name,value", "p^[HTMLElement]|align", "param^[HTMLElement]|name,type,value,valueType", "picture^[HTMLElement]|", "pre^[HTMLElement]|#width", "progress^[HTMLElement]|#max,#value", "q,blockquote,cite^[HTMLElement]|", "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow^[HTMLElement]|", "source^[HTMLElement]|media,sizes,src,srcset,type", "span^[HTMLElement]|", "style^[HTMLElement]|!disabled,media,type", "caption^[HTMLElement]|align", "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width", "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign", "template^[HTMLElement]|", "textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title^[HTMLElement]|text", "track^[HTMLElement]|!default,kind,label,src,srclang", "ul^[HTMLElement]|!compact,type", "unknown^[HTMLElement]|", "video^media|#height,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:cursor^:svg:|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan", "data^[HTMLElement]|value", "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default", "summary^[HTMLElement]|", "time^[HTMLElement]|dateTime" ];
var _ATTR_TO_PROP = {
class: "className",
for: "htmlFor",
formaction: "formAction",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var DomElementSchemaRegistry = function(_super) {
__extends$21(DomElementSchemaRegistry, _super);
function DomElementSchemaRegistry() {
var _this = this;
_super.call(this);
this._schema = {};
SCHEMA.forEach(function(encodedType) {
var type = {};
var _a = encodedType.split("|"), strType = _a[0], strProperties = _a[1];
var properties = strProperties.split(",");
var _b = strType.split("^"), typeNames = _b[0], superName = _b[1];
typeNames.split(",").forEach(function(tag) {
return _this._schema[tag.toLowerCase()] = type;
});
var superType = superName && _this._schema[superName.toLowerCase()];
if (superType) {
Object.keys(superType).forEach(function(prop) {
type[prop] = superType[prop];
});
}
properties.forEach(function(property) {
if (property.length > 0) {
switch (property[0]) {
case "*":
break;

case "!":
type[property.substring(1)] = BOOLEAN;
break;

case "#":
type[property.substring(1)] = NUMBER;
break;

case "%":
type[property.substring(1)] = OBJECT;
break;

default:
type[property] = STRING;
}
}
});
});
}
DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
})) {
return true;
}
if (tagName.indexOf("-") > -1) {
if (tagName === "ng-container" || tagName === "ng-content") {
return false;
}
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
})) {
return true;
}
}
var elementProperties = this._schema[tagName.toLowerCase()] || this._schema["unknown"];
return !!elementProperties[propName];
};
DomElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
})) {
return true;
}
if (tagName.indexOf("-") > -1) {
if (tagName === "ng-container" || tagName === "ng-content") {
return true;
}
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
})) {
return true;
}
}
return !!this._schema[tagName.toLowerCase()];
};
DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName, isAttribute) {
if (isAttribute) {
propName = this.getMappedPropName(propName);
}
tagName = tagName.toLowerCase();
propName = propName.toLowerCase();
var ctx = SECURITY_SCHEMA[tagName + "|" + propName];
if (ctx) {
return ctx;
}
ctx = SECURITY_SCHEMA["*|" + propName];
return ctx ? ctx : _angular_core.SecurityContext.NONE;
};
DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
return _ATTR_TO_PROP[propName] || propName;
};
DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
return "ng-component";
};
DomElementSchemaRegistry.prototype.validateProperty = function(name) {
if (name.toLowerCase().startsWith("on")) {
var msg = "Binding to event property '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";
return {
error: true,
msg: msg
};
} else {
return {
error: false
};
}
};
DomElementSchemaRegistry.prototype.validateAttribute = function(name) {
if (name.toLowerCase().startsWith("on")) {
var msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...");
return {
error: true,
msg: msg
};
} else {
return {
error: false
};
}
};
DomElementSchemaRegistry.prototype.allKnownElementNames = function() {
return Object.keys(this._schema);
};
DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {
return dashCaseToCamelCase(propName);
};
DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(camelCaseProp, userProvidedProp, val) {
var unit = "";
var strVal = val.toString().trim();
var errorMsg = null;
if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== "0") {
if (typeof val === "number") {
unit = "px";
} else {
var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
}
}
}
return {
error: errorMsg,
value: strVal + unit
};
};
DomElementSchemaRegistry.decorators = [ {
type: _angular_core.Injectable
} ];
DomElementSchemaRegistry.ctorParameters = [];
return DomElementSchemaRegistry;
}(ElementSchemaRegistry);
function _isPixelDimensionStyle(prop) {
switch (prop) {
case "width":
case "height":
case "minWidth":
case "minHeight":
case "maxWidth":
case "maxHeight":
case "left":
case "top":
case "bottom":
case "right":
case "fontSize":
case "outlineWidth":
case "outlineOffset":
case "paddingTop":
case "paddingLeft":
case "paddingBottom":
case "paddingRight":
case "marginTop":
case "marginLeft":
case "marginBottom":
case "marginRight":
case "borderRadius":
case "borderWidth":
case "borderTopWidth":
case "borderLeftWidth":
case "borderRightWidth":
case "borderBottomWidth":
case "textIndent":
return true;

default:
return false;
}
}
var _NO_RESOURCE_LOADER = {
get: function(url) {
throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + '"');
}
};
var COMPILER_PROVIDERS = [ {
provide: Reflector,
useValue: reflector
}, {
provide: ReflectorReader,
useExisting: Reflector
}, {
provide: ResourceLoader,
useValue: _NO_RESOURCE_LOADER
}, Console, Lexer, Parser, HtmlParser, {
provide: I18NHtmlParser,
useFactory: function(parser, translations, format) {
return new I18NHtmlParser(parser, translations, format);
},
deps: [ HtmlParser, [ new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS) ], [ new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT) ] ]
}, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, {
provide: CompilerConfig,
useValue: new CompilerConfig()
}, RuntimeCompiler, {
provide: _angular_core.Compiler,
useExisting: RuntimeCompiler
}, DomElementSchemaRegistry, {
provide: ElementSchemaRegistry,
useExisting: DomElementSchemaRegistry
}, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver, AnimationParser ];
var RuntimeCompilerFactory = function() {
function RuntimeCompilerFactory(defaultOptions) {
this._defaultOptions = [ {
useDebug: _angular_core.isDevMode(),
useJit: true,
defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
} ].concat(defaultOptions);
}
RuntimeCompilerFactory.prototype.createCompiler = function(options) {
if (options === void 0) {
options = [];
}
var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
var injector = _angular_core.ReflectiveInjector.resolveAndCreate([ COMPILER_PROVIDERS, {
provide: CompilerConfig,
useFactory: function() {
return new CompilerConfig({
genDebugInfo: mergedOptions.useDebug,
useJit: mergedOptions.useJit,
defaultEncapsulation: mergedOptions.defaultEncapsulation,
logBindingUpdate: mergedOptions.useDebug
});
},
deps: []
}, mergedOptions.providers ]);
return injector.get(_angular_core.Compiler);
};
RuntimeCompilerFactory.decorators = [ {
type: _angular_core.Injectable
} ];
RuntimeCompilerFactory.ctorParameters = [ {
type: Array,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.COMPILER_OPTIONS ]
} ]
} ];
return RuntimeCompilerFactory;
}();
function _initReflector() {
reflector.reflectionCapabilities = new ReflectionCapabilities();
}
var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, "coreDynamic", [ {
provide: _angular_core.COMPILER_OPTIONS,
useValue: {},
multi: true
}, {
provide: _angular_core.CompilerFactory,
useClass: RuntimeCompilerFactory
}, {
provide: _angular_core.PLATFORM_INITIALIZER,
useValue: _initReflector,
multi: true
} ]);
function _mergeOptions(optionsArr) {
return {
useDebug: _lastDefined(optionsArr.map(function(options) {
return options.useDebug;
})),
useJit: _lastDefined(optionsArr.map(function(options) {
return options.useJit;
})),
defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
return options.defaultEncapsulation;
})),
providers: _mergeArrays(optionsArr.map(function(options) {
return options.providers;
}))
};
}
function _lastDefined(args) {
for (var i = args.length - 1; i >= 0; i--) {
if (args[i] !== undefined) {
return args[i];
}
}
return undefined;
}
function _mergeArrays(parts) {
var result = [];
parts.forEach(function(part) {
return part && result.push.apply(result, part);
});
return result;
}
var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
var ImportGenerator = function() {
function ImportGenerator() {}
ImportGenerator.parseAssetUrl = function(url) {
return AssetUrl.parse(url);
};
return ImportGenerator;
}();
var AssetUrl = function() {
function AssetUrl(packageName, firstLevelDir, modulePath) {
this.packageName = packageName;
this.firstLevelDir = firstLevelDir;
this.modulePath = modulePath;
}
AssetUrl.parse = function(url, allowNonMatching) {
if (allowNonMatching === void 0) {
allowNonMatching = true;
}
var match = url.match(_ASSET_URL_RE);
if (match !== null) {
return new AssetUrl(match[1], match[2], match[3]);
}
if (allowNonMatching) {
return null;
}
throw new Error("Url " + url + " is not a valid asset: url");
};
return AssetUrl;
}();
exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
exports.CompilerConfig = CompilerConfig;
exports.RenderTypes = RenderTypes;
exports.RuntimeCompiler = RuntimeCompiler;
exports.DirectiveResolver = DirectiveResolver;
exports.PipeResolver = PipeResolver;
exports.NgModuleResolver = NgModuleResolver;
exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
exports.InterpolationConfig = InterpolationConfig;
exports.NgModuleCompiler = NgModuleCompiler;
exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
exports.ViewCompiler = ViewCompiler;
exports.AnimationParser = AnimationParser;
exports.TextAst = TextAst;
exports.BoundTextAst = BoundTextAst;
exports.AttrAst = AttrAst;
exports.BoundElementPropertyAst = BoundElementPropertyAst;
exports.BoundEventAst = BoundEventAst;
exports.ReferenceAst = ReferenceAst;
exports.VariableAst = VariableAst;
exports.ElementAst = ElementAst;
exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
exports.DirectiveAst = DirectiveAst;
exports.ProviderAst = ProviderAst;
exports.NgContentAst = NgContentAst;
exports.templateVisitAll = templateVisitAll;
exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
exports.CompileAnimationMetadata = CompileAnimationMetadata;
exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
exports.CompileProviderMetadata = CompileProviderMetadata;
exports.CompileFactoryMetadata = CompileFactoryMetadata;
exports.CompileTokenMetadata = CompileTokenMetadata;
exports.CompileTypeMetadata = CompileTypeMetadata;
exports.CompileQueryMetadata = CompileQueryMetadata;
exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
exports.CompileTemplateMetadata = CompileTemplateMetadata;
exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
exports.createHostComponentMeta = createHostComponentMeta;
exports.CompilePipeMetadata = CompilePipeMetadata;
exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
exports.removeIdentifierDuplicates = removeIdentifierDuplicates;
exports.isStaticSymbol = isStaticSymbol;
exports.ProviderMeta = ProviderMeta;
exports.SourceModule = SourceModule;
exports.analyzeNgModules = analyzeNgModules;
exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
exports.loadNgModuleDirectives = loadNgModuleDirectives;
exports.OfflineCompiler = OfflineCompiler;
exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
exports.UrlResolver = UrlResolver;
exports.getUrlScheme = getUrlScheme;
exports.ResourceLoader = ResourceLoader;
exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
exports.RuntimeCompilerFactory = RuntimeCompilerFactory;
exports.platformCoreDynamic = platformCoreDynamic;
exports.ElementSchemaRegistry = ElementSchemaRegistry;
exports.I18NHtmlParser = I18NHtmlParser;
exports.MessageBundle = MessageBundle;
exports.Xliff = Xliff;
exports.Xmb = Xmb;
exports.Xtb = Xtb;
exports.DirectiveNormalizer = DirectiveNormalizer;
exports.Lexer = Lexer;
exports.Token = Token;
exports.EOF = EOF;
exports.isIdentifier = isIdentifier;
exports.isQuote = isQuote;
exports.SplitInterpolation = SplitInterpolation;
exports.TemplateBindingParseResult = TemplateBindingParseResult;
exports.Parser = Parser;
exports._ParseAST = _ParseAST;
exports.CompileMetadataResolver = CompileMetadataResolver;
exports.HtmlParser = HtmlParser;
exports.ParseTreeResult = ParseTreeResult;
exports.TreeError = TreeError;
exports.ImportGenerator = ImportGenerator;
exports.AssetUrl = AssetUrl;
exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
exports.TypeScriptEmitter = TypeScriptEmitter;
exports.ParseLocation = ParseLocation;
exports.ParseSourceFile = ParseSourceFile;
exports.ParseSourceSpan = ParseSourceSpan;
exports.ParseError = ParseError;
exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
exports.CssSelector = CssSelector;
exports.SelectorMatcher = SelectorMatcher;
exports.SelectorListContext = SelectorListContext;
exports.SelectorContext = SelectorContext;
exports.StylesCompileDependency = StylesCompileDependency;
exports.StylesCompileResult = StylesCompileResult;
exports.CompiledStylesheet = CompiledStylesheet;
exports.StyleCompiler = StyleCompiler;
exports.TemplateParseError = TemplateParseError;
exports.TemplateParseResult = TemplateParseResult;
exports.TemplateParser = TemplateParser;
exports.splitClasses = splitClasses;
exports.removeSummaryDuplicates = removeSummaryDuplicates;
});
}, function(module, exports, __webpack_require__) {
var compiler_1 = __webpack_require__(177);
var parse5_adapter_1 = __webpack_require__(179);
var private_import_platform_browser_1 = __webpack_require__(201);
var trace_1 = __webpack_require__(174);
var lang_facade_1 = __webpack_require__(200);
(function(SecurityContext) {
SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
SecurityContext[SecurityContext["URL"] = 4] = "URL";
SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(exports.SecurityContext || (exports.SecurityContext = {}));
var SecurityContext = exports.SecurityContext;
var NativeScriptElementSchemaRegistry = function(_super) {
__extends(NativeScriptElementSchemaRegistry, _super);
function NativeScriptElementSchemaRegistry() {
_super.apply(this, arguments);
}
NativeScriptElementSchemaRegistry.prototype.hasProperty = function(_tagName, _propName) {
return true;
};
NativeScriptElementSchemaRegistry.prototype.hasElement = function(_tagName, _schemaMetas) {
return true;
};
NativeScriptElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
return propName;
};
NativeScriptElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
return "ng-component";
};
NativeScriptElementSchemaRegistry.prototype.securityContext = function(_tagName, _propName) {
return SecurityContext.NONE;
};
NativeScriptElementSchemaRegistry.prototype.validateProperty = function(_name) {
return {
error: false
};
};
NativeScriptElementSchemaRegistry.prototype.validateAttribute = function(_name) {
return {
error: false
};
};
NativeScriptElementSchemaRegistry.prototype.allKnownElementNames = function() {
return [];
};
NativeScriptElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {
return propName;
};
NativeScriptElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(_camelCaseProp, _userProvidedProp, val) {
return {
error: null,
value: val.toString()
};
};
return NativeScriptElementSchemaRegistry;
}(compiler_1.ElementSchemaRegistry);
exports.NativeScriptElementSchemaRegistry = NativeScriptElementSchemaRegistry;
var NativeScriptDomAdapter = function(_super) {
__extends(NativeScriptDomAdapter, _super);
function NativeScriptDomAdapter() {
_super.apply(this, arguments);
}
NativeScriptDomAdapter.makeCurrent = function() {
trace_1.rendererLog("Setting DOM");
private_import_platform_browser_1.setRootDomAdapter(new NativeScriptDomAdapter());
};
NativeScriptDomAdapter.prototype.hasProperty = function(_element, _name) {
return true;
};
NativeScriptDomAdapter.prototype.log = function(arg) {
lang_facade_1.print(arg);
};
NativeScriptDomAdapter.prototype.logError = function(arg) {
lang_facade_1.print(arg);
};
NativeScriptDomAdapter.prototype.logGroup = function(arg) {
lang_facade_1.print(arg);
};
NativeScriptDomAdapter.prototype.logGroupEnd = function() {};
return NativeScriptDomAdapter;
}(parse5_adapter_1.Parse5DomAdapter);
exports.NativeScriptDomAdapter = NativeScriptDomAdapter;
}, function(module, exports, __webpack_require__) {
var parse5 = __webpack_require__(180);
var collection_facade_1 = __webpack_require__(199);
var private_import_platform_browser_1 = __webpack_require__(201);
var lang_facade_1 = __webpack_require__(200);
var compiler_1 = __webpack_require__(177);
var parser = null;
var serializer = null;
var treeAdapter = null;
var _attrToPropMap = {
class: "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var defDoc = null;
var mapProps = [ "attribs", "x-attribsNamespace", "x-attribsPrefix" ];
function _notImplemented(methodName) {
return new Error("This method is not implemented in Parse5DomAdapter: " + methodName);
}
var Parse5DomAdapter = function(_super) {
__extends(Parse5DomAdapter, _super);
function Parse5DomAdapter() {
_super.apply(this, arguments);
}
Parse5DomAdapter.makeCurrent = function() {
parser = new parse5.Parser(parse5.TreeAdapters.htmlparser2);
serializer = new parse5.Serializer(parse5.TreeAdapters.htmlparser2);
treeAdapter = parser.treeAdapter;
private_import_platform_browser_1.setRootDomAdapter(new Parse5DomAdapter());
};
Parse5DomAdapter.prototype.hasProperty = function(_element, name) {
return _HTMLElementPropertyList.indexOf(name) > -1;
};
Parse5DomAdapter.prototype.setProperty = function(el, name, value) {
if (name === "innerHTML") {
this.setInnerHTML(el, value);
} else if (name === "className") {
el.attribs["class"] = el.className = value;
} else {
el[name] = value;
}
};
Parse5DomAdapter.prototype.getProperty = function(el, name) {
return el[name];
};
Parse5DomAdapter.prototype.logError = function(error) {
console.error(error);
};
Parse5DomAdapter.prototype.log = function(error) {
console.log(error);
};
Parse5DomAdapter.prototype.logGroup = function(error) {
console.error(error);
};
Parse5DomAdapter.prototype.logGroupEnd = function() {};
Object.defineProperty(Parse5DomAdapter.prototype, "attrToPropMap", {
get: function() {
return _attrToPropMap;
},
enumerable: true,
configurable: true
});
Parse5DomAdapter.prototype.query = function(_selector) {
throw _notImplemented("query");
};
Parse5DomAdapter.prototype.querySelector = function(el, selector) {
return this.querySelectorAll(el, selector)[0];
};
Parse5DomAdapter.prototype.querySelectorAll = function(el, selector) {
var _this = this;
var res = [];
var _recursive = function(result, node, selector, matcher) {
var cNodes = node.childNodes;
if (cNodes && cNodes.length > 0) {
for (var i = 0; i < cNodes.length; i++) {
var childNode = cNodes[i];
if (_this.elementMatches(childNode, selector, matcher)) {
result.push(childNode);
}
_recursive(result, childNode, selector, matcher);
}
}
};
var matcher = new compiler_1.SelectorMatcher();
matcher.addSelectables(compiler_1.CssSelector.parse(selector));
_recursive(res, el, selector, matcher);
return res;
};
Parse5DomAdapter.prototype.elementMatches = function(node, selector, matcher) {
if (matcher === void 0) {
matcher = null;
}
if (this.isElementNode(node) && selector === "*") {
return true;
}
var result = false;
if (selector && selector.charAt(0) == "#") {
result = this.getAttribute(node, "id") == selector.substring(1);
} else if (selector) {
if (!matcher) {
matcher = new compiler_1.SelectorMatcher();
matcher.addSelectables(compiler_1.CssSelector.parse(selector));
}
var cssSelector = new compiler_1.CssSelector();
cssSelector.setElement(this.tagName(node));
if (node.attribs) {
for (var attrName in node.attribs) {
cssSelector.addAttribute(attrName, node.attribs[attrName]);
}
}
var classList = this.classList(node);
for (var i = 0; i < classList.length; i++) {
cssSelector.addClassName(classList[i]);
}
matcher.match(cssSelector, function(_selector, _cb) {
result = true;
});
}
return result;
};
Parse5DomAdapter.prototype.on = function(el, evt, listener) {
var listenersMap = el._eventListenersMap;
if (!listenersMap) {
listenersMap = {};
el._eventListenersMap = listenersMap;
}
var listeners = listenersMap[evt] || [];
listenersMap[evt] = listeners.concat([ listener ]);
};
Parse5DomAdapter.prototype.onAndCancel = function(el, evt, listener) {
this.on(el, evt, listener);
return function() {
collection_facade_1.ListWrapper.remove(el._eventListenersMap[evt], listener);
};
};
Parse5DomAdapter.prototype.dispatchEvent = function(el, evt) {
if (!evt.target) {
evt.target = el;
}
if (el._eventListenersMap) {
var listeners = el._eventListenersMap[evt.type];
if (listeners) {
for (var i = 0; i < listeners.length; i++) {
listeners[i](evt);
}
}
}
if (el.parent) {
this.dispatchEvent(el.parent, evt);
}
if (el._window) {
this.dispatchEvent(el._window, evt);
}
};
Parse5DomAdapter.prototype.createMouseEvent = function(eventType) {
return this.createEvent(eventType);
};
Parse5DomAdapter.prototype.createEvent = function(eventType) {
var event = {
type: eventType,
defaultPrevented: false,
preventDefault: function() {
event.defaultPrevented = true;
}
};
return event;
};
Parse5DomAdapter.prototype.preventDefault = function(event) {
event.returnValue = false;
};
Parse5DomAdapter.prototype.isPrevented = function(event) {
return lang_facade_1.isPresent(event.returnValue) && !event.returnValue;
};
Parse5DomAdapter.prototype.getInnerHTML = function(el) {
return parse5.serialize(this.templateAwareRoot(el), {
treeAdapter: treeAdapter
});
};
Parse5DomAdapter.prototype.getTemplateContent = function(_el) {
return null;
};
Parse5DomAdapter.prototype.getOuterHTML = function(el) {
var fragment = treeAdapter.createDocumentFragment();
this.appendChild(fragment, el);
return parse5.serialize(fragment, {
treeAdapter: treeAdapter
});
};
Parse5DomAdapter.prototype.nodeName = function(node) {
return node.tagName;
};
Parse5DomAdapter.prototype.nodeValue = function(node) {
return node.nodeValue;
};
Parse5DomAdapter.prototype.type = function(_node) {
throw _notImplemented("type");
};
Parse5DomAdapter.prototype.content = function(node) {
return node.childNodes[0];
};
Parse5DomAdapter.prototype.firstChild = function(el) {
return el.firstChild;
};
Parse5DomAdapter.prototype.nextSibling = function(el) {
return el.nextSibling;
};
Parse5DomAdapter.prototype.parentElement = function(el) {
return el.parent;
};
Parse5DomAdapter.prototype.childNodes = function(el) {
return el.childNodes;
};
Parse5DomAdapter.prototype.childNodesAsList = function(el) {
var childNodes = el.childNodes;
var res = new Array(childNodes.length);
for (var i = 0; i < childNodes.length; i++) {
res[i] = childNodes[i];
}
return res;
};
Parse5DomAdapter.prototype.clearNodes = function(el) {
while (el.childNodes.length > 0) {
this.remove(el.childNodes[0]);
}
};
Parse5DomAdapter.prototype.appendChild = function(el, node) {
this.remove(node);
treeAdapter.appendChild(this.templateAwareRoot(el), node);
};
Parse5DomAdapter.prototype.removeChild = function(el, node) {
if (el.childNodes.indexOf(node) > -1) {
this.remove(node);
}
};
Parse5DomAdapter.prototype.remove = function(el) {
var parent = el.parent;
if (parent) {
var index = parent.childNodes.indexOf(el);
parent.childNodes.splice(index, 1);
}
var prev = el.previousSibling;
var next = el.nextSibling;
if (prev) {
prev.next = next;
}
if (next) {
next.prev = prev;
}
el.prev = null;
el.next = null;
el.parent = null;
return el;
};
Parse5DomAdapter.prototype.insertBefore = function(el, node) {
this.remove(node);
treeAdapter.insertBefore(el.parent, node, el);
};
Parse5DomAdapter.prototype.insertAllBefore = function(el, nodes) {
var _this = this;
nodes.forEach(function(n) {
return _this.insertBefore(el, n);
});
};
Parse5DomAdapter.prototype.insertAfter = function(el, node) {
if (el.nextSibling) {
this.insertBefore(el.nextSibling, node);
} else {
this.appendChild(el.parent, node);
}
};
Parse5DomAdapter.prototype.setInnerHTML = function(el, value) {
this.clearNodes(el);
var content = parser.parseFragment(value);
for (var i = 0; i < content.childNodes.length; i++) {
treeAdapter.appendChild(el, content.childNodes[i]);
}
};
Parse5DomAdapter.prototype.getText = function(el, isRecursive) {
if (this.isTextNode(el)) {
return el.data;
}
if (this.isCommentNode(el)) {
return isRecursive ? "" : el.data;
}
if (!el.childNodes || el.childNodes.length == 0) {
return "";
}
var textContent = "";
for (var i = 0; i < el.childNodes.length; i++) {
textContent += this.getText(el.childNodes[i], true);
}
return textContent;
};
Parse5DomAdapter.prototype.setText = function(el, value) {
if (this.isTextNode(el) || this.isCommentNode(el)) {
el.data = value;
} else {
this.clearNodes(el);
if (value !== "") treeAdapter.insertText(el, value);
}
};
Parse5DomAdapter.prototype.getValue = function(el) {
return el.value;
};
Parse5DomAdapter.prototype.setValue = function(el, value) {
el.value = value;
};
Parse5DomAdapter.prototype.getChecked = function(el) {
return el.checked;
};
Parse5DomAdapter.prototype.setChecked = function(el, value) {
el.checked = value;
};
Parse5DomAdapter.prototype.createComment = function(text) {
return treeAdapter.createCommentNode(text);
};
Parse5DomAdapter.prototype.createTemplate = function(html) {
var template = treeAdapter.createElement("template", "http://www.w3.org/1999/xhtml", []);
var content = parser.parseFragment(html);
treeAdapter.appendChild(template, content);
return template;
};
Parse5DomAdapter.prototype.createElement = function(tagName) {
return treeAdapter.createElement(tagName, "http://www.w3.org/1999/xhtml", []);
};
Parse5DomAdapter.prototype.createElementNS = function(ns, tagName) {
return treeAdapter.createElement(tagName, ns, []);
};
Parse5DomAdapter.prototype.createTextNode = function(text) {
var t = this.createComment(text);
t.type = "text";
return t;
};
Parse5DomAdapter.prototype.createScriptTag = function(attrName, attrValue) {
return treeAdapter.createElement("script", "http://www.w3.org/1999/xhtml", [ {
name: attrName,
value: attrValue
} ]);
};
Parse5DomAdapter.prototype.createStyleElement = function(css) {
var style = this.createElement("style");
this.setText(style, css);
return style;
};
Parse5DomAdapter.prototype.createShadowRoot = function(el) {
el.shadowRoot = treeAdapter.createDocumentFragment();
el.shadowRoot.parent = el;
return el.shadowRoot;
};
Parse5DomAdapter.prototype.getShadowRoot = function(el) {
return el.shadowRoot;
};
Parse5DomAdapter.prototype.getHost = function(el) {
return el.host;
};
Parse5DomAdapter.prototype.getDistributedNodes = function(_el) {
throw _notImplemented("getDistributedNodes");
};
Parse5DomAdapter.prototype.clone = function(node) {
var _recursive = function(node) {
var nodeClone = Object.create(Object.getPrototypeOf(node));
for (var prop in node) {
var desc = Object.getOwnPropertyDescriptor(node, prop);
if (desc && "value" in desc && typeof desc.value !== "object") {
nodeClone[prop] = node[prop];
}
}
nodeClone.parent = null;
nodeClone.prev = null;
nodeClone.next = null;
nodeClone.children = null;
mapProps.forEach(function(mapName) {
if (lang_facade_1.isPresent(node[mapName])) {
nodeClone[mapName] = {};
for (var prop in node[mapName]) {
nodeClone[mapName][prop] = node[mapName][prop];
}
}
});
var cNodes = node.children;
if (cNodes) {
var cNodesClone = new Array(cNodes.length);
for (var i = 0; i < cNodes.length; i++) {
var childNode = cNodes[i];
var childNodeClone = _recursive(childNode);
cNodesClone[i] = childNodeClone;
if (i > 0) {
childNodeClone.prev = cNodesClone[i - 1];
cNodesClone[i - 1].next = childNodeClone;
}
childNodeClone.parent = nodeClone;
}
nodeClone.children = cNodesClone;
}
return nodeClone;
};
return _recursive(node);
};
Parse5DomAdapter.prototype.getElementsByClassName = function(element, name) {
return this.querySelectorAll(element, "." + name);
};
Parse5DomAdapter.prototype.getElementsByTagName = function(_element, _name) {
throw _notImplemented("getElementsByTagName");
};
Parse5DomAdapter.prototype.classList = function(element) {
var classAttrValue = null;
var attributes = element.attribs;
if (attributes && attributes.hasOwnProperty("class")) {
classAttrValue = attributes["class"];
}
return classAttrValue ? classAttrValue.trim().split(/\s+/g) : [];
};
Parse5DomAdapter.prototype.addClass = function(element, className) {
var classList = this.classList(element);
var index = classList.indexOf(className);
if (index == -1) {
classList.push(className);
element.attribs["class"] = element.className = classList.join(" ");
}
};
Parse5DomAdapter.prototype.removeClass = function(element, className) {
var classList = this.classList(element);
var index = classList.indexOf(className);
if (index > -1) {
classList.splice(index, 1);
element.attribs["class"] = element.className = classList.join(" ");
}
};
Parse5DomAdapter.prototype.hasClass = function(element, className) {
return collection_facade_1.ListWrapper.contains(this.classList(element), className);
};
Parse5DomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
if (styleValue === void 0) {
styleValue = null;
}
var value = this.getStyle(element, styleName) || "";
return styleValue ? value == styleValue : value.length > 0;
};
Parse5DomAdapter.prototype._readStyleAttribute = function(element) {
var styleMap = {};
var attributes = element.attribs;
if (attributes && attributes.hasOwnProperty("style")) {
var styleAttrValue = attributes["style"];
var styleList = styleAttrValue.split(/;+/g);
for (var i = 0; i < styleList.length; i++) {
if (styleList[i].length > 0) {
var elems = styleList[i].split(/:+/g);
styleMap[elems[0].trim()] = elems[1].trim();
}
}
}
return styleMap;
};
Parse5DomAdapter.prototype._writeStyleAttribute = function(element, styleMap) {
var styleAttrValue = "";
for (var key in styleMap) {
var newValue = styleMap[key];
if (newValue) {
styleAttrValue += key + ":" + styleMap[key] + ";";
}
}
element.attribs["style"] = styleAttrValue;
};
Parse5DomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
var styleMap = this._readStyleAttribute(element);
styleMap[styleName] = styleValue;
this._writeStyleAttribute(element, styleMap);
};
Parse5DomAdapter.prototype.removeStyle = function(element, styleName) {
this.setStyle(element, styleName, null);
};
Parse5DomAdapter.prototype.getStyle = function(element, styleName) {
var styleMap = this._readStyleAttribute(element);
return styleMap.hasOwnProperty(styleName) ? styleMap[styleName] : "";
};
Parse5DomAdapter.prototype.tagName = function(element) {
return element.tagName == "style" ? "STYLE" : element.tagName;
};
Parse5DomAdapter.prototype.attributeMap = function(element) {
var res = new Map();
var elAttrs = treeAdapter.getAttrList(element);
for (var i = 0; i < elAttrs.length; i++) {
var attrib = elAttrs[i];
res.set(attrib.name, attrib.value);
}
return res;
};
Parse5DomAdapter.prototype.hasAttribute = function(element, attribute) {
return element.attribs && element.attribs.hasOwnProperty(attribute);
};
Parse5DomAdapter.prototype.hasAttributeNS = function(_element, _ns, _attribute) {
throw "not implemented";
};
Parse5DomAdapter.prototype.getAttribute = function(element, attribute) {
return element.attribs && element.attribs.hasOwnProperty(attribute) ? element.attribs[attribute] : null;
};
Parse5DomAdapter.prototype.getAttributeNS = function(_element, _ns, _attribute) {
throw "not implemented";
};
Parse5DomAdapter.prototype.setAttribute = function(element, attribute, value) {
if (attribute) {
element.attribs[attribute] = value;
if (attribute === "class") {
element.className = value;
}
}
};
Parse5DomAdapter.prototype.setAttributeNS = function(_element, _ns, _attribute, _value) {
throw "not implemented";
};
Parse5DomAdapter.prototype.removeAttribute = function(element, attribute) {
if (attribute) {
delete element.attribs[attribute];
}
};
Parse5DomAdapter.prototype.removeAttributeNS = function(_element, _ns, _name) {
throw "not implemented";
};
Parse5DomAdapter.prototype.templateAwareRoot = function(el) {
return this.isTemplateElement(el) ? treeAdapter.getTemplateContent(el) : el;
};
Parse5DomAdapter.prototype.createHtmlDocument = function() {
var newDoc = treeAdapter.createDocument();
newDoc.title = "fake title";
var head = treeAdapter.createElement("head", null, []);
var body = treeAdapter.createElement("body", "http://www.w3.org/1999/xhtml", []);
this.appendChild(newDoc, head);
this.appendChild(newDoc, body);
newDoc["head"] = head;
newDoc["body"] = body;
newDoc["_window"] = {};
return newDoc;
};
Parse5DomAdapter.prototype.defaultDoc = function() {
return defDoc = defDoc || this.createHtmlDocument();
};
Parse5DomAdapter.prototype.getBoundingClientRect = function(_el) {
return {
left: 0,
top: 0,
width: 0,
height: 0
};
};
Parse5DomAdapter.prototype.getTitle = function() {
return this.defaultDoc().title || "";
};
Parse5DomAdapter.prototype.setTitle = function(newTitle) {
this.defaultDoc().title = newTitle;
};
Parse5DomAdapter.prototype.isTemplateElement = function(el) {
return this.isElementNode(el) && this.tagName(el) === "template";
};
Parse5DomAdapter.prototype.isTextNode = function(node) {
return treeAdapter.isTextNode(node);
};
Parse5DomAdapter.prototype.isCommentNode = function(node) {
return treeAdapter.isCommentNode(node);
};
Parse5DomAdapter.prototype.isElementNode = function(node) {
return node ? treeAdapter.isElementNode(node) : false;
};
Parse5DomAdapter.prototype.hasShadowRoot = function(node) {
return lang_facade_1.isPresent(node.shadowRoot);
};
Parse5DomAdapter.prototype.isShadowRoot = function(node) {
return this.getShadowRoot(node) == node;
};
Parse5DomAdapter.prototype.importIntoDoc = function(node) {
return this.clone(node);
};
Parse5DomAdapter.prototype.adoptNode = function(node) {
return node;
};
Parse5DomAdapter.prototype.getHref = function(el) {
return el.href;
};
Parse5DomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
if (href == null) {
el.href = baseUrl;
} else {
el.href = baseUrl + "/../" + href;
}
};
Parse5DomAdapter.prototype._buildRules = function(parsedRules, css) {
var rules = [];
for (var i = 0; i < parsedRules.length; i++) {
var parsedRule = parsedRules[i];
var rule = {};
rule["cssText"] = css;
rule["style"] = {
content: "",
cssText: ""
};
if (parsedRule.type == "rule") {
rule["type"] = 1;
rule["selectorText"] = parsedRule.selectors.join(", ".replace(/\s{2,}/g, " ").replace(/\s*~\s*/g, " ~ ").replace(/\s*\+\s*/g, " + ").replace(/\s*>\s*/g, " > ").replace(/\[(\w+)=(\w+)\]/g, '[$1="$2"]'));
if (lang_facade_1.isBlank(parsedRule.declarations)) {
continue;
}
for (var j = 0; j < parsedRule.declarations.length; j++) {
var declaration = parsedRule.declarations[j];
rule["style"] = declaration.property[declaration.value];
rule["style"].cssText += declaration.property + ": " + declaration.value + ";";
}
} else if (parsedRule.type == "media") {
rule["type"] = 4;
rule["media"] = {
mediaText: parsedRule.media
};
if (parsedRule.rules) {
rule["cssRules"] = this._buildRules(parsedRule.rules);
}
}
rules.push(rule);
}
return rules;
};
Parse5DomAdapter.prototype.supportsDOMEvents = function() {
return false;
};
Parse5DomAdapter.prototype.supportsNativeShadowDOM = function() {
return false;
};
Parse5DomAdapter.prototype.getGlobalEventTarget = function(target) {
if (target == "window") {
return this.defaultDoc()._window;
} else if (target == "document") {
return this.defaultDoc();
} else if (target == "body") {
return this.defaultDoc().body;
}
};
Parse5DomAdapter.prototype.getBaseHref = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.resetBaseElement = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getHistory = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getLocation = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getUserAgent = function() {
return "Fake user agent";
};
Parse5DomAdapter.prototype.getData = function(el, name) {
return this.getAttribute(el, "data-" + name);
};
Parse5DomAdapter.prototype.getComputedStyle = function(_el) {
throw "not implemented";
};
Parse5DomAdapter.prototype.setData = function(el, name, value) {
this.setAttribute(el, "data-" + name, value);
};
Parse5DomAdapter.prototype.setGlobalVar = function(path, value) {
lang_facade_1.setValueOnPath(global, path, value);
};
Parse5DomAdapter.prototype.supportsWebAnimation = function() {
return false;
};
Parse5DomAdapter.prototype.performanceNow = function() {
return Date.now();
};
Parse5DomAdapter.prototype.getAnimationPrefix = function() {
return "";
};
Parse5DomAdapter.prototype.getTransitionEnd = function() {
return "transitionend";
};
Parse5DomAdapter.prototype.supportsAnimation = function() {
return true;
};
Parse5DomAdapter.prototype.replaceChild = function(_el, _newNode, _oldNode) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.parse = function(_templateHtml) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.invoke = function(_el, _methodName, _args) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.getEventKey = function(_event) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.supportsCookies = function() {
return false;
};
Parse5DomAdapter.prototype.getCookie = function(_name) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.setCookie = function(_name, _value) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.animate = function(_element, _keyframes, _options) {
throw new Error("not implemented");
};
return Parse5DomAdapter;
}(private_import_platform_browser_1.DomAdapter);
exports.Parse5DomAdapter = Parse5DomAdapter;
var _HTMLElementPropertyList = [ "webkitEntries", "incremental", "webkitdirectory", "selectionDirection", "selectionEnd", "selectionStart", "labels", "validationMessage", "validity", "willValidate", "width", "valueAsNumber", "valueAsDate", "value", "useMap", "defaultValue", "type", "step", "src", "size", "required", "readOnly", "placeholder", "pattern", "name", "multiple", "min", "minLength", "maxLength", "max", "list", "indeterminate", "height", "formTarget", "formNoValidate", "formMethod", "formEnctype", "formAction", "files", "form", "disabled", "dirName", "checked", "defaultChecked", "autofocus", "autocomplete", "alt", "align", "accept", "onautocompleteerror", "onautocomplete", "onwaiting", "onvolumechange", "ontoggle", "ontimeupdate", "onsuspend", "onsubmit", "onstalled", "onshow", "onselect", "onseeking", "onseeked", "onscroll", "onresize", "onreset", "onratechange", "onprogress", "onplaying", "onplay", "onpause", "onmousewheel", "onmouseup", "onmouseover", "onmouseout", "onmousemove", "onmouseleave", "onmouseenter", "onmousedown", "onloadstart", "onloadedmetadata", "onloadeddata", "onload", "onkeyup", "onkeypress", "onkeydown", "oninvalid", "oninput", "onfocus", "onerror", "onended", "onemptied", "ondurationchange", "ondrop", "ondragstart", "ondragover", "ondragleave", "ondragenter", "ondragend", "ondrag", "ondblclick", "oncuechange", "oncontextmenu", "onclose", "onclick", "onchange", "oncanplaythrough", "oncanplay", "oncancel", "onblur", "onabort", "spellcheck", "isContentEditable", "contentEditable", "outerText", "innerText", "accessKey", "hidden", "webkitdropzone", "draggable", "tabIndex", "dir", "translate", "lang", "title", "childElementCount", "lastElementChild", "firstElementChild", "children", "onwebkitfullscreenerror", "onwebkitfullscreenchange", "nextElementSibling", "previousElementSibling", "onwheel", "onselectstart", "onsearch", "onpaste", "oncut", "oncopy", "onbeforepaste", "onbeforecut", "onbeforecopy", "shadowRoot", "dataset", "classList", "className", "outerHTML", "innerHTML", "scrollHeight", "scrollWidth", "scrollTop", "scrollLeft", "clientHeight", "clientWidth", "clientTop", "clientLeft", "offsetParent", "offsetHeight", "offsetWidth", "offsetTop", "offsetLeft", "localName", "prefix", "namespaceURI", "id", "style", "attributes", "tagName", "parentElement", "textContent", "baseURI", "ownerDocument", "nextSibling", "previousSibling", "lastChild", "firstChild", "childNodes", "parentNode", "nodeType", "nodeValue", "nodeName", "closure_lm_714617", "__jsaction" ];
}, function(module, exports, __webpack_require__) {
"use strict";
exports.Parser = __webpack_require__(181);
exports.SimpleApiParser = __webpack_require__(192);
exports.TreeSerializer = exports.Serializer = __webpack_require__(194);
exports.JsDomParser = __webpack_require__(196);
exports.TreeAdapters = {
default: __webpack_require__(190),
htmlparser2: __webpack_require__(198)
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(182), OpenElementStack = __webpack_require__(186), FormattingElementList = __webpack_require__(188), Doctype = __webpack_require__(189), DefaultTreeAdapter = __webpack_require__(190), ForeignContent = __webpack_require__(191), UNICODE = __webpack_require__(184), HTML = __webpack_require__(187);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES, ATTRS = HTML.ATTRS;
var SEARCHABLE_INDEX_DEFAULT_PROMPT = "This is a searchable index. Enter search keywords: ", SEARCHABLE_INDEX_INPUT_NAME = "isindex", HIDDEN_INPUT_TYPE = "hidden";
var AA_OUTER_LOOP_ITER = 8, AA_INNER_LOOP_ITER = 3;
var INITIAL_MODE = "INITIAL_MODE", BEFORE_HTML_MODE = "BEFORE_HTML_MODE", BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE", IN_HEAD_MODE = "IN_HEAD_MODE", AFTER_HEAD_MODE = "AFTER_HEAD_MODE", IN_BODY_MODE = "IN_BODY_MODE", TEXT_MODE = "TEXT_MODE", IN_TABLE_MODE = "IN_TABLE_MODE", IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE", IN_CAPTION_MODE = "IN_CAPTION_MODE", IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE", IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE", IN_ROW_MODE = "IN_ROW_MODE", IN_CELL_MODE = "IN_CELL_MODE", IN_SELECT_MODE = "IN_SELECT_MODE", IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE", IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE", AFTER_BODY_MODE = "AFTER_BODY_MODE", IN_FRAMESET_MODE = "IN_FRAMESET_MODE", AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE", AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE", AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
var INSERTION_MODE_RESET_MAP = {};
INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
INSERTION_MODE_RESET_MAP[$.TBODY] = INSERTION_MODE_RESET_MAP[$.THEAD] = INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;
var _ = {};
_[INITIAL_MODE] = {};
_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] = _[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;
_[BEFORE_HTML_MODE] = {};
_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;
_[BEFORE_HEAD_MODE] = {};
_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;
_[IN_HEAD_MODE] = {};
_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;
_[AFTER_HEAD_MODE] = {};
_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;
_[IN_BODY_MODE] = {};
_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[TEXT_MODE] = {};
_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;
_[IN_TABLE_MODE] = {};
_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_TEXT_MODE] = {};
_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;
_[IN_CAPTION_MODE] = {};
_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_COLUMN_GROUP_MODE] = {};
_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_BODY_MODE] = {};
_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_ROW_MODE] = {};
_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_CELL_MODE] = {};
_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_MODE] = {};
_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_IN_TABLE_MODE] = {};
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TEMPLATE_MODE] = {};
_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;
_[AFTER_BODY_MODE] = {};
_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[IN_FRAMESET_MODE] = {};
_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_FRAMESET_MODE] = {};
_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_BODY_MODE] = {};
_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_FRAMESET_MODE] = {};
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
function getSearchableIndexFormAttrs(isindexStartTagToken) {
var indexAction = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.ACTION), attrs = [];
if (indexAction !== null) {
attrs.push({
name: ATTRS.ACTION,
value: indexAction
});
}
return attrs;
}
function getSearchableIndexLabelText(isindexStartTagToken) {
var indexPrompt = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.PROMPT);
return indexPrompt === null ? SEARCHABLE_INDEX_DEFAULT_PROMPT : indexPrompt;
}
function getSearchableIndexInputAttrs(isindexStartTagToken) {
var isindexAttrs = isindexStartTagToken.attrs, inputAttrs = [];
for (var i = 0; i < isindexAttrs.length; i++) {
var name = isindexAttrs[i].name;
if (name !== ATTRS.NAME && name !== ATTRS.ACTION && name !== ATTRS.PROMPT) inputAttrs.push(isindexAttrs[i]);
}
inputAttrs.push({
name: ATTRS.NAME,
value: SEARCHABLE_INDEX_INPUT_NAME
});
return inputAttrs;
}
var Parser = module.exports = function(treeAdapter) {
this.treeAdapter = treeAdapter || DefaultTreeAdapter;
this.scriptHandler = null;
};
Parser.prototype.parse = function(html) {
var document = this.treeAdapter.createDocument();
this._reset(html, document, null);
this._runParsingLoop();
return document;
};
Parser.prototype.parseFragment = function(html, fragmentContext) {
if (!fragmentContext) fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
var documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
this._reset(html, documentMock, fragmentContext);
if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
this._initTokenizerForFragmentParsing();
this._insertFakeRootElement();
this._resetInsertionMode();
this._findFormInFragmentContext();
this._runParsingLoop();
var rootElement = this.treeAdapter.getFirstChild(documentMock), fragment = this.treeAdapter.createDocumentFragment();
this._adoptNodes(rootElement, fragment);
return fragment;
};
Parser.prototype._reset = function(html, document, fragmentContext) {
this.tokenizer = new Tokenizer(html);
this.stopped = false;
this.insertionMode = INITIAL_MODE;
this.originalInsertionMode = "";
this.document = document;
this.fragmentContext = fragmentContext;
this.headElement = null;
this.formElement = null;
this.openElements = new OpenElementStack(this.document, this.treeAdapter);
this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
this.tmplInsertionModeStack = [];
this.tmplInsertionModeStackTop = -1;
this.currentTmplInsertionMode = null;
this.pendingCharacterTokens = [];
this.hasNonWhitespacePendingCharacterToken = false;
this.framesetOk = true;
this.skipNextNewLine = false;
this.fosterParentingEnabled = false;
};
Parser.prototype._iterateParsingLoop = function() {
this._setupTokenizerCDATAMode();
var token = this.tokenizer.getNextToken();
if (this.skipNextNewLine) {
this.skipNextNewLine = false;
if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
if (token.chars.length === 1) return;
token.chars = token.chars.substr(1);
}
}
if (this._shouldProcessTokenInForeignContent(token)) this._processTokenInForeignContent(token); else this._processToken(token);
};
Parser.prototype._runParsingLoop = function() {
while (!this.stopped) this._iterateParsingLoop();
};
Parser.prototype._setupTokenizerCDATAMode = function() {
var current = this._getAdjustedCurrentElement();
this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isHtmlIntegrationPoint(current) && !this._isMathMLTextIntegrationPoint(current);
};
Parser.prototype._switchToTextParsing = function(currentToken, nextTokenizerState) {
this._insertElement(currentToken, NS.HTML);
this.tokenizer.state = nextTokenizerState;
this.originalInsertionMode = this.insertionMode;
this.insertionMode = TEXT_MODE;
};
Parser.prototype._getAdjustedCurrentElement = function() {
return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
};
Parser.prototype._findFormInFragmentContext = function() {
var node = this.fragmentContext;
do {
if (this.treeAdapter.getTagName(node) === $.FORM) {
this.formElement = node;
break;
}
node = this.treeAdapter.getParentNode(node);
} while (node);
};
Parser.prototype._initTokenizerForFragmentParsing = function() {
var tn = this.treeAdapter.getTagName(this.fragmentContext);
if (tn === $.TITLE || tn === $.TEXTAREA) this.tokenizer.state = Tokenizer.RCDATA_STATE; else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
this.tokenizer.state = Tokenizer.RAWTEXT_STATE;
} else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.SCRIPT_DATA_STATE; else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.PLAINTEXT_STATE;
};
Parser.prototype._setDocumentType = function(token) {
this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
};
Parser.prototype._attachElementToTree = function(element) {
if (this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current)) this._fosterParentElement(element); else {
var parent = this.openElements.currentTmplContent || this.openElements.current;
this.treeAdapter.appendChild(parent, element);
}
};
Parser.prototype._appendElement = function(token, namespaceURI) {
var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
this._attachElementToTree(element);
};
Parser.prototype._insertElement = function(token, namespaceURI) {
var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
this._attachElementToTree(element);
this.openElements.push(element);
};
Parser.prototype._insertTemplate = function(token) {
var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs), content = this.treeAdapter.createDocumentFragment();
this.treeAdapter.appendChild(tmpl, content);
this._attachElementToTree(tmpl);
this.openElements.push(tmpl);
};
Parser.prototype._insertFakeRootElement = function() {
var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
this.treeAdapter.appendChild(this.openElements.current, element);
this.openElements.push(element);
};
Parser.prototype._appendCommentNode = function(token, parent) {
var commentNode = this.treeAdapter.createCommentNode(token.data);
this.treeAdapter.appendChild(parent, commentNode);
};
Parser.prototype._insertCharacters = function(token) {
if (this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current)) this._fosterParentText(token.chars); else {
var parent = this.openElements.currentTmplContent || this.openElements.current;
this.treeAdapter.insertText(parent, token.chars);
}
};
Parser.prototype._adoptNodes = function(donor, recipient) {
while (true) {
var child = this.treeAdapter.getFirstChild(donor);
if (!child) break;
this.treeAdapter.detachNode(child);
this.treeAdapter.appendChild(recipient, child);
}
};
Parser.prototype._shouldProcessTokenInForeignContent = function(token) {
var current = this._getAdjustedCurrentElement();
if (!current || current === this.document) return false;
var ns = this.treeAdapter.getNamespaceURI(current);
if (ns === NS.HTML) return false;
if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
return false;
}
var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN, isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
if ((isMathMLTextStartTag || isCharacterToken) && this._isMathMLTextIntegrationPoint(current)) return false;
if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isHtmlIntegrationPoint(current)) return false;
return token.type !== Tokenizer.EOF_TOKEN;
};
Parser.prototype._processToken = function(token) {
_[this.insertionMode][token.type](this, token);
};
Parser.prototype._processTokenInBodyMode = function(token) {
_[IN_BODY_MODE][token.type](this, token);
};
Parser.prototype._processTokenInForeignContent = function(token) {
if (token.type === Tokenizer.CHARACTER_TOKEN) characterInForeignContent(this, token); else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) nullCharacterInForeignContent(this, token); else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) insertCharacters(this, token); else if (token.type === Tokenizer.COMMENT_TOKEN) appendComment(this, token); else if (token.type === Tokenizer.START_TAG_TOKEN) startTagInForeignContent(this, token); else if (token.type === Tokenizer.END_TAG_TOKEN) endTagInForeignContent(this, token);
};
Parser.prototype._processFakeStartTagWithAttrs = function(tagName, attrs) {
var fakeToken = this.tokenizer.buildStartTagToken(tagName);
fakeToken.attrs = attrs;
this._processToken(fakeToken);
};
Parser.prototype._processFakeStartTag = function(tagName) {
var fakeToken = this.tokenizer.buildStartTagToken(tagName);
this._processToken(fakeToken);
return fakeToken;
};
Parser.prototype._processFakeEndTag = function(tagName) {
var fakeToken = this.tokenizer.buildEndTagToken(tagName);
this._processToken(fakeToken);
return fakeToken;
};
Parser.prototype._isMathMLTextIntegrationPoint = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element);
return ForeignContent.isMathMLTextIntegrationPoint(tn, ns);
};
Parser.prototype._isHtmlIntegrationPoint = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element), attrs = this.treeAdapter.getAttrList(element);
return ForeignContent.isHtmlIntegrationPoint(tn, ns, attrs);
};
Parser.prototype._reconstructActiveFormattingElements = function() {
var listLength = this.activeFormattingElements.length;
if (listLength) {
var unopenIdx = listLength, entry = null;
do {
unopenIdx--;
entry = this.activeFormattingElements.entries[unopenIdx];
if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
unopenIdx++;
break;
}
} while (unopenIdx > 0);
for (var i = unopenIdx; i < listLength; i++) {
entry = this.activeFormattingElements.entries[i];
this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
entry.element = this.openElements.current;
}
}
};
Parser.prototype._closeTableCell = function() {
if (this.openElements.hasInTableScope($.TD)) this._processFakeEndTag($.TD); else this._processFakeEndTag($.TH);
};
Parser.prototype._closePElement = function() {
this.openElements.generateImpliedEndTagsWithExclusion($.P);
this.openElements.popUntilTagNamePopped($.P);
};
Parser.prototype._resetInsertionMode = function() {
for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
var element = this.openElements.items[i];
if (i === 0) {
last = true;
if (this.fragmentContext) element = this.fragmentContext;
}
var tn = this.treeAdapter.getTagName(element), newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
if (newInsertionMode) {
this.insertionMode = newInsertionMode;
break;
} else if (!last && (tn === $.TD || tn === $.TH)) {
this.insertionMode = IN_CELL_MODE;
break;
} else if (!last && tn === $.HEAD) {
this.insertionMode = IN_HEAD_MODE;
break;
} else if (tn === $.SELECT) {
this._resetInsertionModeForSelect(i);
break;
} else if (tn === $.TEMPLATE) {
this.insertionMode = this.currentTmplInsertionMode;
break;
} else if (tn === $.HTML) {
this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
break;
} else if (last) {
this.insertionMode = IN_BODY_MODE;
break;
}
}
};
Parser.prototype._resetInsertionModeForSelect = function(selectIdx) {
if (selectIdx > 0) {
for (var i = selectIdx - 1; i > 0; i--) {
var ancestor = this.openElements.items[i], tn = this.treeAdapter.getTagName(ancestor);
if (tn === $.TEMPLATE) break; else if (tn === $.TABLE) {
this.insertionMode = IN_SELECT_IN_TABLE_MODE;
return;
}
}
}
this.insertionMode = IN_SELECT_MODE;
};
Parser.prototype._pushTmplInsertionMode = function(mode) {
this.tmplInsertionModeStack.push(mode);
this.tmplInsertionModeStackTop++;
this.currentTmplInsertionMode = mode;
};
Parser.prototype._popTmplInsertionMode = function() {
this.tmplInsertionModeStack.pop();
this.tmplInsertionModeStackTop--;
this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
};
Parser.prototype._isElementCausesFosterParenting = function(element) {
var tn = this.treeAdapter.getTagName(element);
return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn == $.THEAD || tn === $.TR;
};
Parser.prototype._findFosterParentingLocation = function() {
var location = {
parent: null,
beforeElement: null
};
for (var i = this.openElements.stackTop; i >= 0; i--) {
var openElement = this.openElements.items[i], tn = this.treeAdapter.getTagName(openElement), ns = this.treeAdapter.getNamespaceURI(openElement);
if (tn === $.TEMPLATE && ns === NS.HTML) {
location.parent = this.treeAdapter.getChildNodes(openElement)[0];
break;
} else if (tn === $.TABLE) {
location.parent = this.treeAdapter.getParentNode(openElement);
if (location.parent) location.beforeElement = openElement; else location.parent = this.openElements.items[i - 1];
break;
}
}
if (!location.parent) location.parent = this.openElements.items[0];
return location;
};
Parser.prototype._fosterParentElement = function(element) {
var location = this._findFosterParentingLocation();
if (location.beforeElement) this.treeAdapter.insertBefore(location.parent, element, location.beforeElement); else this.treeAdapter.appendChild(location.parent, element);
};
Parser.prototype._fosterParentText = function(chars) {
var location = this._findFosterParentingLocation();
if (location.beforeElement) this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement); else this.treeAdapter.insertText(location.parent, chars);
};
Parser.prototype._isSpecialElement = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element);
return HTML.SPECIAL_ELEMENTS[ns][tn];
};
function aaObtainFormattingElementEntry(p, token) {
var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
if (formattingElementEntry) {
if (!p.openElements.contains(formattingElementEntry.element)) {
p.activeFormattingElements.removeEntry(formattingElementEntry);
formattingElementEntry = null;
} else if (!p.openElements.hasInScope(token.tagName)) formattingElementEntry = null;
} else genericEndTagInBody(p, token);
return formattingElementEntry;
}
function aaObtainFurthestBlock(p, formattingElementEntry) {
var furthestBlock = null;
for (var i = p.openElements.stackTop; i >= 0; i--) {
var element = p.openElements.items[i];
if (element === formattingElementEntry.element) break;
if (p._isSpecialElement(element)) furthestBlock = element;
}
if (!furthestBlock) {
p.openElements.popUntilElementPopped(formattingElementEntry.element);
p.activeFormattingElements.removeEntry(formattingElementEntry);
}
return furthestBlock;
}
function aaInnerLoop(p, furthestBlock, formattingElement) {
var element = null, lastElement = furthestBlock, nextElement = p.openElements.getCommonAncestor(furthestBlock);
for (var i = 0; i < AA_INNER_LOOP_ITER; i++) {
element = nextElement;
nextElement = p.openElements.getCommonAncestor(element);
var elementEntry = p.activeFormattingElements.getElementEntry(element);
if (!elementEntry) {
p.openElements.remove(element);
continue;
}
if (element === formattingElement) break;
element = aaRecreateElementFromEntry(p, elementEntry);
if (lastElement === furthestBlock) p.activeFormattingElements.bookmark = elementEntry;
p.treeAdapter.detachNode(lastElement);
p.treeAdapter.appendChild(element, lastElement);
lastElement = element;
}
return lastElement;
}
function aaRecreateElementFromEntry(p, elementEntry) {
var ns = p.treeAdapter.getNamespaceURI(elementEntry.element), newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
p.openElements.replace(elementEntry.element, newElement);
elementEntry.element = newElement;
return newElement;
}
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
if (p._isElementCausesFosterParenting(commonAncestor)) p._fosterParentElement(lastElement); else {
var tn = p.treeAdapter.getTagName(commonAncestor), ns = p.treeAdapter.getNamespaceURI(commonAncestor);
if (tn === $.TEMPLATE && ns === NS.HTML) commonAncestor = p.treeAdapter.getChildNodes(commonAncestor)[0];
p.treeAdapter.appendChild(commonAncestor, lastElement);
}
}
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element), token = formattingElementEntry.token, newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
p._adoptNodes(furthestBlock, newElement);
p.treeAdapter.appendChild(furthestBlock, newElement);
p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
p.activeFormattingElements.removeEntry(formattingElementEntry);
p.openElements.remove(formattingElementEntry.element);
p.openElements.insertAfter(furthestBlock, newElement);
}
function callAdoptionAgency(p, token) {
for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
var formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
if (!formattingElementEntry) break;
var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
if (!furthestBlock) break;
p.activeFormattingElements.bookmark = formattingElementEntry;
var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element), commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
p.treeAdapter.detachNode(lastElement);
aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
}
}
function ignoreToken(p, token) {}
function appendComment(p, token) {
p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}
function appendCommentToRootHtmlElement(p, token) {
p._appendCommentNode(token, p.openElements.items[0]);
}
function appendCommentToDocument(p, token) {
p._appendCommentNode(token, p.document);
}
function insertCharacters(p, token) {
p._insertCharacters(token);
}
function stopParsing(p, token) {
p.stopped = true;
}
function doctypeInInitialMode(p, token) {
p._setDocumentType(token);
if (token.forceQuirks || Doctype.isQuirks(token.name, token.publicId, token.systemId)) p.treeAdapter.setQuirksMode(p.document);
p.insertionMode = BEFORE_HTML_MODE;
}
function tokenInInitialMode(p, token) {
p.treeAdapter.setQuirksMode(p.document);
p.insertionMode = BEFORE_HTML_MODE;
p._processToken(token);
}
function startTagBeforeHtml(p, token) {
if (token.tagName === $.HTML) {
p._insertElement(token, NS.HTML);
p.insertionMode = BEFORE_HEAD_MODE;
} else tokenBeforeHtml(p, token);
}
function endTagBeforeHtml(p, token) {
var tn = token.tagName;
if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) tokenBeforeHtml(p, token);
}
function tokenBeforeHtml(p, token) {
p._insertFakeRootElement();
p.insertionMode = BEFORE_HEAD_MODE;
p._processToken(token);
}
function startTagBeforeHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.HEAD) {
p._insertElement(token, NS.HTML);
p.headElement = p.openElements.current;
p.insertionMode = IN_HEAD_MODE;
} else tokenBeforeHead(p, token);
}
function endTagBeforeHead(p, token) {
var tn = token.tagName;
if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) tokenBeforeHead(p, token);
}
function tokenBeforeHead(p, token) {
p._processFakeStartTag($.HEAD);
p._processToken(token);
}
function startTagInHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.COMMAND || tn === $.LINK || tn === $.META) {
p._appendElement(token, NS.HTML);
} else if (tn === $.TITLE) p._switchToTextParsing(token, Tokenizer.RCDATA_STATE); else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE) p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE); else if (tn === $.SCRIPT) {
p._insertElement(token, NS.HTML);
p.tokenizer.state = Tokenizer.SCRIPT_DATA_STATE;
p.originalInsertionMode = p.insertionMode;
p.insertionMode = TEXT_MODE;
} else if (tn === $.TEMPLATE) {
p._insertTemplate(token, NS.HTML);
p.activeFormattingElements.insertMarker();
p.framesetOk = false;
p.insertionMode = IN_TEMPLATE_MODE;
p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
} else if (tn !== $.HEAD) tokenInHead(p, token);
}
function endTagInHead(p, token) {
var tn = token.tagName;
if (tn === $.HEAD) {
p.openElements.pop();
p.insertionMode = AFTER_HEAD_MODE;
} else if (tn === $.BODY || tn === $.BR || tn === $.HTML) tokenInHead(p, token); else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTemplatePopped();
p.activeFormattingElements.clearToLastMarker();
p._popTmplInsertionMode();
p._resetInsertionMode();
}
}
function tokenInHead(p, token) {
p._processFakeEndTag($.HEAD);
p._processToken(token);
}
function startTagAfterHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.BODY) {
p._insertElement(token, NS.HTML);
p.framesetOk = false;
p.insertionMode = IN_BODY_MODE;
} else if (tn === $.FRAMESET) {
p._insertElement(token, NS.HTML);
p.insertionMode = IN_FRAMESET_MODE;
} else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
p.openElements.push(p.headElement);
startTagInHead(p, token);
p.openElements.remove(p.headElement);
} else if (tn !== $.HEAD) tokenAfterHead(p, token);
}
function endTagAfterHead(p, token) {
var tn = token.tagName;
if (tn === $.BODY || tn === $.HTML || tn === $.BR) tokenAfterHead(p, token); else if (tn === $.TEMPLATE) endTagInHead(p, token);
}
function tokenAfterHead(p, token) {
p._processFakeStartTag($.BODY);
p.framesetOk = true;
p._processToken(token);
}
function whitespaceCharacterInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertCharacters(token);
}
function characterInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertCharacters(token);
p.framesetOk = false;
}
function htmlStartTagInBody(p, token) {
if (p.openElements.tmplCount === 0) p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
}
function bodyStartTagInBody(p, token) {
var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
if (bodyElement && p.openElements.tmplCount === 0) {
p.framesetOk = false;
p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
}
}
function framesetStartTagInBody(p, token) {
var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
if (p.framesetOk && bodyElement) {
p.treeAdapter.detachNode(bodyElement);
p.openElements.popAllUpToHtmlElement();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_FRAMESET_MODE;
}
}
function addressStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
}
function numberedHeaderStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
var tn = p.openElements.currentTagName;
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) p.openElements.pop();
p._insertElement(token, NS.HTML);
}
function preStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.skipNextNewLine = true;
p.framesetOk = false;
}
function formStartTagInBody(p, token) {
var inTemplate = p.openElements.tmplCount > 0;
if (!p.formElement || inTemplate) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
if (!inTemplate) p.formElement = p.openElements.current;
}
}
function listItemStartTagInBody(p, token) {
p.framesetOk = false;
for (var i = p.openElements.stackTop; i >= 0; i--) {
var element = p.openElements.items[i], tn = p.treeAdapter.getTagName(element);
if (token.tagName === $.LI && tn === $.LI || (token.tagName === $.DD || token.tagName === $.DT) && (tn === $.DD || tn == $.DT)) {
p._processFakeEndTag(tn);
break;
}
if (tn !== $.ADDRESS && tn !== $.DIV && tn !== $.P && p._isSpecialElement(element)) break;
}
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
}
function plaintextStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.tokenizer.state = Tokenizer.PLAINTEXT_STATE;
}
function buttonStartTagInBody(p, token) {
if (p.openElements.hasInScope($.BUTTON)) {
p._processFakeEndTag($.BUTTON);
buttonStartTagInBody(p, token);
} else {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
}
}
function aStartTagInBody(p, token) {
var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
if (activeElementEntry) {
p._processFakeEndTag($.A);
p.openElements.remove(activeElementEntry.element);
p.activeFormattingElements.removeEntry(activeElementEntry);
}
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function bStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function nobrStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
if (p.openElements.hasInScope($.NOBR)) {
p._processFakeEndTag($.NOBR);
p._reconstructActiveFormattingElements();
}
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function appletStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.insertMarker();
p.framesetOk = false;
}
function tableStartTagInBody(p, token) {
if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
p.insertionMode = IN_TABLE_MODE;
}
function areaStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._appendElement(token, NS.HTML);
p.framesetOk = false;
}
function inputStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._appendElement(token, NS.HTML);
var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) p.framesetOk = false;
}
function paramStartTagInBody(p, token) {
p._appendElement(token, NS.HTML);
}
function hrStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._appendElement(token, NS.HTML);
p.framesetOk = false;
}
function imageStartTagInBody(p, token) {
token.tagName = $.IMG;
areaStartTagInBody(p, token);
}
function isindexStartTagInBody(p, token) {
if (!p.formElement || p.openElements.tmplCount > 0) {
p._processFakeStartTagWithAttrs($.FORM, getSearchableIndexFormAttrs(token));
p._processFakeStartTag($.HR);
p._processFakeStartTag($.LABEL);
p.treeAdapter.insertText(p.openElements.current, getSearchableIndexLabelText(token));
p._processFakeStartTagWithAttrs($.INPUT, getSearchableIndexInputAttrs(token));
p._processFakeEndTag($.LABEL);
p._processFakeStartTag($.HR);
p._processFakeEndTag($.FORM);
}
}
function textareaStartTagInBody(p, token) {
p._insertElement(token, NS.HTML);
p.skipNextNewLine = true;
p.tokenizer.state = Tokenizer.RCDATA_STATE;
p.originalInsertionMode = p.insertionMode;
p.framesetOk = false;
p.insertionMode = TEXT_MODE;
}
function xmpStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._reconstructActiveFormattingElements();
p.framesetOk = false;
p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);
}
function iframeStartTagInBody(p, token) {
p.framesetOk = false;
p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);
}
function noembedStartTagInBody(p, token) {
p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);
}
function selectStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
p.insertionMode = IN_SELECT_IN_TABLE_MODE;
} else p.insertionMode = IN_SELECT_MODE;
}
function optgroupStartTagInBody(p, token) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
}
function rpStartTagInBody(p, token) {
if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTags();
p._insertElement(token, NS.HTML);
}
function menuitemStartTagInBody(p, token) {
p._appendElement(token, NS.HTML);
}
function mathStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
ForeignContent.adjustTokenMathMLAttrs(token);
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, NS.MATHML); else p._insertElement(token, NS.MATHML);
}
function svgStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
ForeignContent.adjustTokenSVGAttrs(token);
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, NS.SVG); else p._insertElement(token, NS.SVG);
}
function genericStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
}
function startTagInBody(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 1:
if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) bStartTagInBody(p, token); else if (tn === $.P) addressStartTagInBody(p, token); else if (tn === $.A) aStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 2:
if (tn === $.DL || tn === $.OL || tn === $.UL) addressStartTagInBody(p, token); else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderStartTagInBody(p, token); else if (tn === $.LI || tn === $.DD || tn === $.DT) listItemStartTagInBody(p, token); else if (tn === $.EM || tn === $.TT) bStartTagInBody(p, token); else if (tn === $.BR) areaStartTagInBody(p, token); else if (tn === $.HR) hrStartTagInBody(p, token); else if (tn === $.RP || tn === $.RT) rpStartTagInBody(p, token); else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) genericStartTagInBody(p, token);
break;

case 3:
if (tn === $.DIV || tn === $.DIR || tn === $.NAV) addressStartTagInBody(p, token); else if (tn === $.PRE) preStartTagInBody(p, token); else if (tn === $.BIG) bStartTagInBody(p, token); else if (tn === $.IMG || tn === $.WBR) areaStartTagInBody(p, token); else if (tn === $.XMP) xmpStartTagInBody(p, token); else if (tn === $.SVG) svgStartTagInBody(p, token); else if (tn !== $.COL) genericStartTagInBody(p, token);
break;

case 4:
if (tn === $.HTML) htmlStartTagInBody(p, token); else if (tn === $.BASE || tn === $.LINK || tn === $.META) startTagInHead(p, token); else if (tn === $.BODY) bodyStartTagInBody(p, token); else if (tn === $.MAIN || tn === $.MENU) addressStartTagInBody(p, token); else if (tn === $.FORM) formStartTagInBody(p, token); else if (tn === $.CODE || tn === $.FONT) bStartTagInBody(p, token); else if (tn === $.NOBR) nobrStartTagInBody(p, token); else if (tn === $.AREA) areaStartTagInBody(p, token); else if (tn === $.MATH) mathStartTagInBody(p, token); else if (tn !== $.HEAD) genericStartTagInBody(p, token);
break;

case 5:
if (tn === $.STYLE || tn === $.TITLE) startTagInHead(p, token); else if (tn === $.ASIDE) addressStartTagInBody(p, token); else if (tn === $.SMALL) bStartTagInBody(p, token); else if (tn === $.TABLE) tableStartTagInBody(p, token); else if (tn === $.EMBED) areaStartTagInBody(p, token); else if (tn === $.INPUT) inputStartTagInBody(p, token); else if (tn === $.PARAM || tn === $.TRACK) paramStartTagInBody(p, token); else if (tn === $.IMAGE) imageStartTagInBody(p, token); else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) genericStartTagInBody(p, token);
break;

case 6:
if (tn === $.SCRIPT) startTagInHead(p, token); else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressStartTagInBody(p, token); else if (tn === $.BUTTON) buttonStartTagInBody(p, token); else if (tn === $.STRIKE || tn === $.STRONG) bStartTagInBody(p, token); else if (tn === $.APPLET || tn === $.OBJECT) appletStartTagInBody(p, token); else if (tn === $.KEYGEN) areaStartTagInBody(p, token); else if (tn === $.SOURCE) paramStartTagInBody(p, token); else if (tn === $.IFRAME) iframeStartTagInBody(p, token); else if (tn === $.SELECT) selectStartTagInBody(p, token); else if (tn === $.OPTION) optgroupStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 7:
if (tn === $.BGSOUND || tn === $.COMMAND) startTagInHead(p, token); else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) addressStartTagInBody(p, token); else if (tn === $.LISTING) preStartTagInBody(p, token); else if (tn === $.MARQUEE) appletStartTagInBody(p, token); else if (tn === $.ISINDEX) isindexStartTagInBody(p, token); else if (tn === $.NOEMBED) noembedStartTagInBody(p, token); else if (tn !== $.CAPTION) genericStartTagInBody(p, token);
break;

case 8:
if (tn === $.BASEFONT || tn === $.MENUITEM) menuitemStartTagInBody(p, token); else if (tn === $.FRAMESET) framesetStartTagInBody(p, token); else if (tn === $.FIELDSET) addressStartTagInBody(p, token); else if (tn === $.TEXTAREA) textareaStartTagInBody(p, token); else if (tn === $.TEMPLATE) startTagInHead(p, token); else if (tn === $.NOSCRIPT) noembedStartTagInBody(p, token); else if (tn === $.OPTGROUP) optgroupStartTagInBody(p, token); else if (tn !== $.COLGROUP) genericStartTagInBody(p, token);
break;

case 9:
if (tn === $.PLAINTEXT) plaintextStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 10:
if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

default:
genericStartTagInBody(p, token);
}
}
function bodyEndTagInBody(p, token) {
if (p.openElements.hasInScope($.BODY)) p.insertionMode = AFTER_BODY_MODE; else token.ignored = true;
}
function htmlEndTagInBody(p, token) {
var fakeToken = p._processFakeEndTag($.BODY);
if (!fakeToken.ignored) p._processToken(token);
}
function addressEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
}
}
function formEndTagInBody(p, token) {
var inTemplate = p.openElements.tmplCount > 0, formElement = p.formElement;
if (!inTemplate) p.formElement = null;
if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
p.openElements.generateImpliedEndTags();
if (inTemplate) p.openElements.popUntilTagNamePopped($.FORM); else p.openElements.remove(formElement);
}
}
function pEndTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) {
p.openElements.generateImpliedEndTagsWithExclusion($.P);
p.openElements.popUntilTagNamePopped($.P);
} else {
p._processFakeStartTag($.P);
p._processToken(token);
}
}
function liEndTagInBody(p, token) {
if (p.openElements.hasInListItemScope($.LI)) {
p.openElements.generateImpliedEndTagsWithExclusion($.LI);
p.openElements.popUntilTagNamePopped($.LI);
}
}
function ddEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTagsWithExclusion(tn);
p.openElements.popUntilTagNamePopped(tn);
}
}
function numberedHeaderEndTagInBody(p, token) {
if (p.openElements.hasNumberedHeaderInScope()) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilNumberedHeaderPopped();
}
}
function appletEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
p.activeFormattingElements.clearToLastMarker();
}
}
function brEndTagInBody(p, token) {
p._processFakeStartTag($.BR);
}
function genericEndTagInBody(p, token) {
var tn = token.tagName;
for (var i = p.openElements.stackTop; i > 0; i--) {
var element = p.openElements.items[i];
if (p.treeAdapter.getTagName(element) === tn) {
p.openElements.generateImpliedEndTagsWithExclusion(tn);
p.openElements.popUntilElementPopped(element);
break;
}
if (p._isSpecialElement(element)) break;
}
}
function endTagInBody(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 1:
if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn == $.U) callAdoptionAgency(p, token); else if (tn === $.P) pEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 2:
if (tn == $.DL || tn === $.UL || tn === $.OL) addressEndTagInBody(p, token); else if (tn === $.LI) liEndTagInBody(p, token); else if (tn === $.DD || tn === $.DT) ddEndTagInBody(p, token); else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderEndTagInBody(p, token); else if (tn === $.BR) brEndTagInBody(p, token); else if (tn === $.EM || tn === $.TT) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 3:
if (tn === $.BIG) callAdoptionAgency(p, token); else if (tn === $.DIR || tn === $.DIV || tn === $.NAV) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 4:
if (tn === $.BODY) bodyEndTagInBody(p, token); else if (tn === $.HTML) htmlEndTagInBody(p, token); else if (tn === $.FORM) formEndTagInBody(p, token); else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) callAdoptionAgency(p, token); else if (tn === $.MAIN || tn === $.MENU) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 5:
if (tn === $.ASIDE) addressEndTagInBody(p, token); else if (tn === $.SMALL) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 6:
if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressEndTagInBody(p, token); else if (tn === $.APPLET || tn === $.OBJECT) appletEndTagInBody(p, token); else if (tn == $.STRIKE || tn === $.STRONG) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 7:
if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY) addressEndTagInBody(p, token); else if (tn === $.MARQUEE) appletEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 8:
if (tn === $.FIELDSET) addressEndTagInBody(p, token); else if (tn === $.TEMPLATE) endTagInHead(p, token); else genericEndTagInBody(p, token);
break;

case 10:
if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

default:
genericEndTagInBody(p, token);
}
}
function eofInBody(p, token) {
if (p.tmplInsertionModeStackTop > -1) eofInTemplate(p, token); else p.stopped = true;
}
function endTagInText(p, token) {
if (!p.fragmentContext && p.scriptHandler && token.tagName === $.SCRIPT) p.scriptHandler(p.document, p.openElements.current);
p.openElements.pop();
p.insertionMode = p.originalInsertionMode;
}
function eofInText(p, token) {
p.openElements.pop();
p.insertionMode = p.originalInsertionMode;
p._processToken(token);
}
function characterInTable(p, token) {
var curTn = p.openElements.currentTagName;
if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
p.pendingCharacterTokens = [];
p.hasNonWhitespacePendingCharacterToken = false;
p.originalInsertionMode = p.insertionMode;
p.insertionMode = IN_TABLE_TEXT_MODE;
p._processToken(token);
} else tokenInTable(p, token);
}
function captionStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p.activeFormattingElements.insertMarker();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_CAPTION_MODE;
}
function colgroupStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_COLUMN_GROUP_MODE;
}
function colStartTagInTable(p, token) {
p._processFakeStartTag($.COLGROUP);
p._processToken(token);
}
function tbodyStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_TABLE_BODY_MODE;
}
function tdStartTagInTable(p, token) {
p._processFakeStartTag($.TBODY);
p._processToken(token);
}
function tableStartTagInTable(p, token) {
var fakeToken = p._processFakeEndTag($.TABLE);
if (!fakeToken.ignored) p._processToken(token);
}
function inputStartTagInTable(p, token) {
var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) p._appendElement(token, NS.HTML); else tokenInTable(p, token);
}
function formStartTagInTable(p, token) {
if (!p.formElement && p.openElements.tmplCount === 0) {
p._insertElement(token, NS.HTML);
p.formElement = p.openElements.current;
p.openElements.pop();
}
}
function startTagInTable(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 2:
if (tn === $.TD || tn === $.TH || tn === $.TR) tdStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 3:
if (tn === $.COL) colStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 4:
if (tn === $.FORM) formStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 5:
if (tn === $.TABLE) tableStartTagInTable(p, token); else if (tn === $.STYLE) startTagInHead(p, token); else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) tbodyStartTagInTable(p, token); else if (tn === $.INPUT) inputStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 6:
if (tn === $.SCRIPT) startTagInHead(p, token); else tokenInTable(p, token);
break;

case 7:
if (tn === $.CAPTION) captionStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 8:
if (tn === $.COLGROUP) colgroupStartTagInTable(p, token); else if (tn === $.TEMPLATE) startTagInHead(p, token); else tokenInTable(p, token);
break;

default:
tokenInTable(p, token);
}
}
function endTagInTable(p, token) {
var tn = token.tagName;
if (tn === $.TABLE) {
if (p.openElements.hasInTableScope($.TABLE)) {
p.openElements.popUntilTagNamePopped($.TABLE);
p._resetInsertionMode();
} else token.ignored = true;
} else if (tn === $.TEMPLATE) endTagInHead(p, token); else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
tokenInTable(p, token);
}
}
function tokenInTable(p, token) {
var savedFosterParentingState = p.fosterParentingEnabled;
p.fosterParentingEnabled = true;
p._processTokenInBodyMode(token);
p.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p, token) {
p.pendingCharacterTokens.push(token);
}
function characterInTableText(p, token) {
p.pendingCharacterTokens.push(token);
p.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p, token) {
if (p.hasNonWhitespacePendingCharacterToken) {
for (var i = 0; i < p.pendingCharacterTokens.length; i++) tokenInTable(p, p.pendingCharacterTokens[i]);
} else {
for (var i = 0; i < p.pendingCharacterTokens.length; i++) p._insertCharacters(p.pendingCharacterTokens[i]);
}
p.insertionMode = p.originalInsertionMode;
p._processToken(token);
}
function startTagInCaption(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
var fakeToken = p._processFakeEndTag($.CAPTION);
if (!fakeToken.ignored) p._processToken(token);
} else startTagInBody(p, token);
}
function endTagInCaption(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION) {
if (p.openElements.hasInTableScope($.CAPTION)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped($.CAPTION);
p.activeFormattingElements.clearToLastMarker();
p.insertionMode = IN_TABLE_MODE;
} else token.ignored = true;
} else if (tn === $.TABLE) {
var fakeToken = p._processFakeEndTag($.CAPTION);
if (!fakeToken.ignored) p._processToken(token);
} else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
endTagInBody(p, token);
}
}
function startTagInColumnGroup(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.COL) p._appendElement(token, NS.HTML); else if (tn === $.TEMPLATE) startTagInHead(p, token); else tokenInColumnGroup(p, token);
}
function endTagInColumnGroup(p, token) {
var tn = token.tagName;
if (tn === $.COLGROUP) {
if (p.openElements.currentTagName !== $.COLGROUP) token.ignored = true; else {
p.openElements.pop();
p.insertionMode = IN_TABLE_MODE;
}
} else if (tn === $.TEMPLATE) endTagInHead(p, token); else if (tn !== $.COL) tokenInColumnGroup(p, token);
}
function tokenInColumnGroup(p, token) {
var fakeToken = p._processFakeEndTag($.COLGROUP);
if (!fakeToken.ignored) p._processToken(token);
}
function startTagInTableBody(p, token) {
var tn = token.tagName;
if (tn === $.TR) {
p.openElements.clearBackToTableBodyContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_ROW_MODE;
} else if (tn === $.TH || tn === $.TD) {
p._processFakeStartTag($.TR);
p._processToken(token);
} else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasTableBodyContextInTableScope()) {
p.openElements.clearBackToTableBodyContext();
p._processFakeEndTag(p.openElements.currentTagName);
p._processToken(token);
}
} else startTagInTable(p, token);
}
function endTagInTableBody(p, token) {
var tn = token.tagName;
if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasInTableScope(tn)) {
p.openElements.clearBackToTableBodyContext();
p.openElements.pop();
p.insertionMode = IN_TABLE_MODE;
}
} else if (tn === $.TABLE) {
if (p.openElements.hasTableBodyContextInTableScope()) {
p.openElements.clearBackToTableBodyContext();
p._processFakeEndTag(p.openElements.currentTagName);
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
endTagInTable(p, token);
}
}
function startTagInRow(p, token) {
var tn = token.tagName;
if (tn === $.TH || tn === $.TD) {
p.openElements.clearBackToTableRowContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_CELL_MODE;
p.activeFormattingElements.insertMarker();
} else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
var fakeToken = p._processFakeEndTag($.TR);
if (!fakeToken.ignored) p._processToken(token);
} else startTagInTable(p, token);
}
function endTagInRow(p, token) {
var tn = token.tagName;
if (tn === $.TR) {
if (p.openElements.hasInTableScope($.TR)) {
p.openElements.clearBackToTableRowContext();
p.openElements.pop();
p.insertionMode = IN_TABLE_BODY_MODE;
} else token.ignored = true;
} else if (tn === $.TABLE) {
var fakeToken = p._processFakeEndTag($.TR);
if (!fakeToken.ignored) p._processToken(token);
} else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasInTableScope(tn)) {
p._processFakeEndTag($.TR);
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
endTagInTable(p, token);
}
}
function startTagInCell(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
p._closeTableCell();
p._processToken(token);
}
} else startTagInBody(p, token);
}
function endTagInCell(p, token) {
var tn = token.tagName;
if (tn === $.TD || tn === $.TH) {
if (p.openElements.hasInTableScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
p.activeFormattingElements.clearToLastMarker();
p.insertionMode = IN_ROW_MODE;
}
} else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
if (p.openElements.hasInTableScope(tn)) {
p._closeTableCell();
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) endTagInBody(p, token);
}
function startTagInSelect(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.OPTION) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
p._insertElement(token, NS.HTML);
} else if (tn === $.OPTGROUP) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
if (p.openElements.currentTagName === $.OPTGROUP) p._processFakeEndTag($.OPTGROUP);
p._insertElement(token, NS.HTML);
} else if (tn === $.SELECT) p._processFakeEndTag($.SELECT); else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA) {
if (p.openElements.hasInSelectScope($.SELECT)) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
}
} else if (tn === $.SCRIPT || tn === $.TEMPLATE) startTagInHead(p, token);
}
function endTagInSelect(p, token) {
var tn = token.tagName;
if (tn === $.OPTGROUP) {
var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1], prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) p._processFakeEndTag($.OPTION);
if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();
} else if (tn === $.OPTION) {
if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();
} else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
p.openElements.popUntilTagNamePopped($.SELECT);
p._resetInsertionMode();
} else if (tn === $.TEMPLATE) endTagInHead(p, token);
}
function startTagInSelectInTable(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
} else startTagInSelect(p, token);
}
function endTagInSelectInTable(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
if (p.openElements.hasInTableScope(tn)) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
}
} else endTagInSelect(p, token);
}
function startTagInTemplate(p, token) {
var tn = token.tagName;
if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
startTagInHead(p, token);
} else {
var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
p._popTmplInsertionMode();
p._pushTmplInsertionMode(newInsertionMode);
p.insertionMode = newInsertionMode;
p._processToken(token);
}
}
function endTagInTemplate(p, token) {
if (token.tagName === $.TEMPLATE) endTagInHead(p, token);
}
function eofInTemplate(p, token) {
if (p.openElements.tmplCount > 0) {
p.openElements.popUntilTemplatePopped();
p.activeFormattingElements.clearToLastMarker();
p._popTmplInsertionMode();
p._resetInsertionMode();
p._processToken(token);
} else p.stopped = true;
}
function startTagAfterBody(p, token) {
if (token.tagName === $.HTML) startTagInBody(p, token); else tokenAfterBody(p, token);
}
function endTagAfterBody(p, token) {
if (token.tagName === $.HTML) {
if (!p.fragmentContext) p.insertionMode = AFTER_AFTER_BODY_MODE;
} else tokenAfterBody(p, token);
}
function tokenAfterBody(p, token) {
p.insertionMode = IN_BODY_MODE;
p._processToken(token);
}
function startTagInFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.FRAMESET) p._insertElement(token, NS.HTML); else if (tn === $.FRAME) p._appendElement(token, NS.HTML); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function endTagInFrameset(p, token) {
if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
p.openElements.pop();
if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) p.insertionMode = AFTER_FRAMESET_MODE;
}
}
function startTagAfterFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function endTagAfterFrameset(p, token) {
if (token.tagName === $.HTML) p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
}
function startTagAfterAfterBody(p, token) {
if (token.tagName === $.HTML) startTagInBody(p, token); else tokenAfterAfterBody(p, token);
}
function tokenAfterAfterBody(p, token) {
p.insertionMode = IN_BODY_MODE;
p._processToken(token);
}
function startTagAfterAfterFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function nullCharacterInForeignContent(p, token) {
token.chars = UNICODE.REPLACEMENT_CHARACTER;
p._insertCharacters(token);
}
function characterInForeignContent(p, token) {
p._insertCharacters(token);
p.framesetOk = false;
}
function startTagInForeignContent(p, token) {
if (ForeignContent.causesExit(token) && !p.fragmentContext) {
while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isMathMLTextIntegrationPoint(p.openElements.current) && !p._isHtmlIntegrationPoint(p.openElements.current)) {
p.openElements.pop();
}
p._processToken(token);
} else {
var current = p._getAdjustedCurrentElement(), currentNs = p.treeAdapter.getNamespaceURI(current);
if (currentNs === NS.MATHML) ForeignContent.adjustTokenMathMLAttrs(token); else if (currentNs === NS.SVG) {
ForeignContent.adjustTokenSVGTagName(token);
ForeignContent.adjustTokenSVGAttrs(token);
}
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, currentNs); else p._insertElement(token, currentNs);
}
}
function endTagInForeignContent(p, token) {
for (var i = p.openElements.stackTop; i > 0; i--) {
var element = p.openElements.items[i];
if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
p._processToken(token);
break;
}
if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
p.openElements.popUntilElementPopped(element);
break;
}
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Preprocessor = __webpack_require__(183), UNICODE = __webpack_require__(184), NAMED_ENTITY_TRIE = __webpack_require__(185);
var $ = UNICODE.CODE_POINTS, $$ = UNICODE.CODE_POINT_SEQUENCES;
var NUMERIC_ENTITY_REPLACEMENTS = {
0: 65533,
13: 13,
128: 8364,
129: 129,
130: 8218,
131: 402,
132: 8222,
133: 8230,
134: 8224,
135: 8225,
136: 710,
137: 8240,
138: 352,
139: 8249,
140: 338,
141: 141,
142: 381,
143: 143,
144: 144,
145: 8216,
146: 8217,
147: 8220,
148: 8221,
149: 8226,
150: 8211,
151: 8212,
152: 732,
153: 8482,
154: 353,
155: 8250,
156: 339,
157: 157,
158: 382,
159: 376
};
var DATA_STATE = "DATA_STATE", CHARACTER_REFERENCE_IN_DATA_STATE = "CHARACTER_REFERENCE_IN_DATA_STATE", RCDATA_STATE = "RCDATA_STATE", CHARACTER_REFERENCE_IN_RCDATA_STATE = "CHARACTER_REFERENCE_IN_RCDATA_STATE", RAWTEXT_STATE = "RAWTEXT_STATE", SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE", PLAINTEXT_STATE = "PLAINTEXT_STATE", TAG_OPEN_STATE = "TAG_OPEN_STATE", END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE", TAG_NAME_STATE = "TAG_NAME_STATE", RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE", RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE", RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE", RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE", RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE", RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE", SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE", SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE", SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE", SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE", SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE", SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE", SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE", SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE", SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE", SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE", SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE", SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE", SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE", BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE", ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE", AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE", BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE", ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE", ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE", ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE", CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = "CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE", AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE", SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE", BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE", MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE", COMMENT_START_STATE = "COMMENT_START_STATE", COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE", COMMENT_STATE = "COMMENT_STATE", COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE", COMMENT_END_STATE = "COMMENT_END_STATE", COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE", DOCTYPE_STATE = "DOCTYPE_STATE", BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE", DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE", AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE", AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE", BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE", DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE", DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE", AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE", BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE", AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE", BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE", DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE", DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE", AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE", BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE", CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
function isWhitespace(cp) {
return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}
function isAsciiDigit(cp) {
return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}
function isAsciiUpper(cp) {
return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}
function isAsciiAlphaNumeric(cp) {
return isAsciiDigit(cp) || isAsciiUpper(cp) || isAsciiLower(cp);
}
function isDigit(cp, isHex) {
return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F || cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
}
function isReservedCodePoint(cp) {
return cp >= 55296 && cp <= 57343 || cp > 1114111;
}
function toAsciiLowerCodePoint(cp) {
return cp + 32;
}
function toChar(cp) {
if (cp <= 65535) return String.fromCharCode(cp);
cp -= 65536;
return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
}
function toAsciiLowerChar(cp) {
return String.fromCharCode(toAsciiLowerCodePoint(cp));
}
var Tokenizer = module.exports = function(html) {
this.preprocessor = new Preprocessor(html);
this.tokenQueue = [];
this.allowCDATA = false;
this.state = DATA_STATE;
this.returnState = "";
this.consumptionPos = 0;
this.tempBuff = [];
this.additionalAllowedCp = void 0;
this.lastStartTagName = "";
this.currentCharacterToken = null;
this.currentToken = null;
this.currentAttr = null;
};
Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
Tokenizer.EOF_TOKEN = "EOF_TOKEN";
Tokenizer.DATA_STATE = DATA_STATE;
Tokenizer.RCDATA_STATE = RCDATA_STATE;
Tokenizer.RAWTEXT_STATE = RAWTEXT_STATE;
Tokenizer.SCRIPT_DATA_STATE = SCRIPT_DATA_STATE;
Tokenizer.PLAINTEXT_STATE = PLAINTEXT_STATE;
Tokenizer.getTokenAttr = function(token, attrName) {
for (var i = token.attrs.length - 1; i >= 0; i--) {
if (token.attrs[i].name === attrName) return token.attrs[i].value;
}
return null;
};
Tokenizer.prototype.getNextToken = function() {
while (!this.tokenQueue.length) this[this.state](this._consume());
return this.tokenQueue.shift();
};
Tokenizer.prototype._consume = function() {
this.consumptionPos++;
return this.preprocessor.advanceAndPeekCodePoint();
};
Tokenizer.prototype._unconsume = function() {
this.consumptionPos--;
this.preprocessor.retreat();
};
Tokenizer.prototype._unconsumeSeveral = function(count) {
while (count--) this._unconsume();
};
Tokenizer.prototype._reconsumeInState = function(state) {
this.state = state;
this._unconsume();
};
Tokenizer.prototype._consumeSubsequentIfMatch = function(pattern, startCp, caseSensitive) {
var rollbackPos = this.consumptionPos, isMatch = true, patternLength = pattern.length, patternPos = 0, cp = startCp, patternCp = void 0;
for (;patternPos < patternLength; patternPos++) {
if (patternPos > 0) cp = this._consume();
if (cp === $.EOF) {
isMatch = false;
break;
}
patternCp = pattern[patternPos];
if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
isMatch = false;
break;
}
}
if (!isMatch) this._unconsumeSeveral(this.consumptionPos - rollbackPos);
return isMatch;
};
Tokenizer.prototype._lookahead = function() {
var cp = this.preprocessor.advanceAndPeekCodePoint();
this.preprocessor.retreat();
return cp;
};
Tokenizer.prototype.isTempBufferEqualToScriptString = function() {
if (this.tempBuff.length !== $$.SCRIPT_STRING.length) return false;
for (var i = 0; i < this.tempBuff.length; i++) {
if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) return false;
}
return true;
};
Tokenizer.prototype.buildStartTagToken = function(tagName) {
return {
type: Tokenizer.START_TAG_TOKEN,
tagName: tagName,
selfClosing: false,
attrs: []
};
};
Tokenizer.prototype.buildEndTagToken = function(tagName) {
return {
type: Tokenizer.END_TAG_TOKEN,
tagName: tagName,
ignored: false,
attrs: []
};
};
Tokenizer.prototype._createStartTagToken = function(tagNameFirstCh) {
this.currentToken = this.buildStartTagToken(tagNameFirstCh);
};
Tokenizer.prototype._createEndTagToken = function(tagNameFirstCh) {
this.currentToken = this.buildEndTagToken(tagNameFirstCh);
};
Tokenizer.prototype._createCommentToken = function() {
this.currentToken = {
type: Tokenizer.COMMENT_TOKEN,
data: ""
};
};
Tokenizer.prototype._createDoctypeToken = function(doctypeNameFirstCh) {
this.currentToken = {
type: Tokenizer.DOCTYPE_TOKEN,
name: doctypeNameFirstCh || "",
forceQuirks: false,
publicId: null,
systemId: null
};
};
Tokenizer.prototype._createAttr = function(attrNameFirstCh) {
this.currentAttr = {
name: attrNameFirstCh,
value: ""
};
};
Tokenizer.prototype._isDuplicateAttr = function() {
return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
};
Tokenizer.prototype._leaveAttrName = function(toState) {
this.state = toState;
if (!this._isDuplicateAttr()) this.currentToken.attrs.push(this.currentAttr);
};
Tokenizer.prototype._isAppropriateEndTagToken = function() {
return this.lastStartTagName === this.currentToken.tagName;
};
Tokenizer.prototype._emitCurrentToken = function() {
this._emitCurrentCharacterToken();
if (this.currentToken.type === Tokenizer.START_TAG_TOKEN) this.lastStartTagName = this.currentToken.tagName;
this.tokenQueue.push(this.currentToken);
this.currentToken = null;
};
Tokenizer.prototype._emitCurrentCharacterToken = function() {
if (this.currentCharacterToken) {
this.tokenQueue.push(this.currentCharacterToken);
this.currentCharacterToken = null;
}
};
Tokenizer.prototype._emitEOFToken = function() {
this._emitCurrentCharacterToken();
this.tokenQueue.push({
type: Tokenizer.EOF_TOKEN
});
};
Tokenizer.prototype._appendCharToCurrentCharacterToken = function(type, ch) {
if (this.currentCharacterToken && this.currentCharacterToken.type !== type) this._emitCurrentCharacterToken();
if (this.currentCharacterToken) this.currentCharacterToken.chars += ch; else {
this.currentCharacterToken = {
type: type,
chars: ch
};
}
};
Tokenizer.prototype._emitCodePoint = function(cp) {
var type = Tokenizer.CHARACTER_TOKEN;
if (isWhitespace(cp)) type = Tokenizer.WHITESPACE_CHARACTER_TOKEN; else if (cp === $.NULL) type = Tokenizer.NULL_CHARACTER_TOKEN;
this._appendCharToCurrentCharacterToken(type, toChar(cp));
};
Tokenizer.prototype._emitSeveralCodePoints = function(codePoints) {
for (var i = 0; i < codePoints.length; i++) this._emitCodePoint(codePoints[i]);
};
Tokenizer.prototype._emitChar = function(ch) {
this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
};
Tokenizer.prototype._consumeNumericEntity = function(isHex) {
var digits = "", nextCp = void 0;
do {
digits += toChar(this._consume());
nextCp = this._lookahead();
} while (nextCp !== $.EOF && isDigit(nextCp, isHex));
if (this._lookahead() === $.SEMICOLON) this._consume();
var referencedCp = parseInt(digits, isHex ? 16 : 10), replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];
if (replacement) return replacement;
if (isReservedCodePoint(referencedCp)) return $.REPLACEMENT_CHARACTER;
return referencedCp;
};
Tokenizer.prototype._consumeNamedEntity = function(startCp, inAttr) {
var referencedCodePoints = null, entityCodePointsCount = 0, cp = startCp, leaf = NAMED_ENTITY_TRIE[cp], consumedCount = 1, semicolonTerminated = false;
for (;leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
if (leaf.c) {
referencedCodePoints = leaf.c;
entityCodePointsCount = consumedCount;
if (cp === $.SEMICOLON) {
semicolonTerminated = true;
break;
}
}
}
if (referencedCodePoints) {
if (!semicolonTerminated) {
this._unconsumeSeveral(consumedCount - entityCodePointsCount);
if (inAttr) {
var nextCp = this._lookahead();
if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
this._unconsumeSeveral(entityCodePointsCount);
return null;
}
}
}
return referencedCodePoints;
}
this._unconsumeSeveral(consumedCount);
return null;
};
Tokenizer.prototype._consumeCharacterReference = function(startCp, inAttr) {
if (isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN || startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
this._unconsume();
return null;
} else if (startCp === $.NUMBER_SIGN) {
var isHex = false, nextCp = this._lookahead();
if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
this._consume();
isHex = true;
}
nextCp = this._lookahead();
if (nextCp !== $.EOF && isDigit(nextCp, isHex)) return [ this._consumeNumericEntity(isHex) ]; else {
this._unconsumeSeveral(isHex ? 2 : 1);
return null;
}
} else return this._consumeNamedEntity(startCp, inAttr);
};
var _ = Tokenizer.prototype;
_[DATA_STATE] = function dataState(cp) {
if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_DATA_STATE; else if (cp === $.LESS_THAN_SIGN) this.state = TAG_OPEN_STATE; else if (cp === $.NULL) this._emitCodePoint(cp); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
this.state = DATA_STATE;
this.additionalAllowedCp = void 0;
var referencedCodePoints = this._consumeCharacterReference(cp, false);
if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints); else this._emitChar("&");
};
_[RCDATA_STATE] = function rcdataState(cp) {
if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE; else if (cp === $.LESS_THAN_SIGN) this.state = RCDATA_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
this.state = RCDATA_STATE;
this.additionalAllowedCp = void 0;
var referencedCodePoints = this._consumeCharacterReference(cp, false);
if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints); else this._emitChar("&");
};
_[RAWTEXT_STATE] = function rawtextState(cp) {
if (cp === $.LESS_THAN_SIGN) this.state = RAWTEXT_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[PLAINTEXT_STATE] = function plaintextState(cp) {
if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[TAG_OPEN_STATE] = function tagOpenState(cp) {
if (cp === $.EXCLAMATION_MARK) this.state = MARKUP_DECLARATION_OPEN_STATE; else if (cp === $.SOLIDUS) this.state = END_TAG_OPEN_STATE; else if (isAsciiUpper(cp)) {
this._createStartTagToken(toAsciiLowerChar(cp));
this.state = TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createStartTagToken(toChar(cp));
this.state = TAG_NAME_STATE;
} else if (cp === $.QUESTION_MARK) {
this[BOGUS_COMMENT_STATE](cp);
} else {
this._emitChar("<");
this._reconsumeInState(DATA_STATE);
}
};
_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.state = TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.state = TAG_NAME_STATE;
} else if (cp === $.GREATER_THAN_SIGN) this.state = DATA_STATE; else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
this._emitChar("<");
this._emitChar("/");
} else {
this[BOGUS_COMMENT_STATE](cp);
}
};
_[TAG_NAME_STATE] = function tagNameState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) this.currentToken.tagName += toAsciiLowerChar(cp); else if (cp === $.NULL) this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentToken.tagName += toChar(cp);
};
_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = RCDATA_END_TAG_OPEN_STATE;
} else {
this._emitChar("<");
this._reconsumeInState(RCDATA_STATE);
}
};
_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = RCDATA_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = RCDATA_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(RCDATA_STATE);
}
};
_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(RCDATA_STATE);
}
};
_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = RAWTEXT_END_TAG_OPEN_STATE;
} else {
this._emitChar("<");
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = RAWTEXT_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = RAWTEXT_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
} else if (cp === $.EXCLAMATION_MARK) {
this.state = SCRIPT_DATA_ESCAPE_START_STATE;
this._emitChar("<");
this._emitChar("!");
} else {
this._emitChar("<");
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
} else if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
} else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
this._emitChar("-");
} else this._reconsumeInState(SCRIPT_DATA_STATE);
};
_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else this._reconsumeInState(SCRIPT_DATA_STATE);
};
_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
if (cp === $.HYPHEN_MINUS) this._emitChar("-"); else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = SCRIPT_DATA_STATE;
this._emitChar(">");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
} else if (isAsciiUpper(cp)) {
this.tempBuff = [];
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
this._emitChar("<");
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff = [];
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
this._emitChar("<");
this._emitCodePoint(cp);
} else {
this._emitChar("<");
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
} else if (isAsciiUpper(cp)) {
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff.push(cp);
this._emitCodePoint(cp);
} else this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
if (cp === $.HYPHEN_MINUS) this._emitChar("-"); else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = SCRIPT_DATA_STATE;
this._emitChar(">");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
this._emitChar("/");
} else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};
_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
} else if (isAsciiUpper(cp)) {
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff.push(cp);
this._emitCodePoint(cp);
} else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};
_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) {
this._createAttr(toAsciiLowerChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.NULL) {
this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN) {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
}
};
_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
if (isWhitespace(cp)) this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE); else if (cp === $.SOLIDUS) this._leaveAttrName(SELF_CLOSING_START_TAG_STATE); else if (cp === $.EQUALS_SIGN) this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE); else if (cp === $.GREATER_THAN_SIGN) {
this._leaveAttrName(DATA_STATE);
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) this.currentAttr.name += toAsciiLowerChar(cp); else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) this.currentAttr.name += toChar(cp); else if (cp === $.NULL) this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.name += toChar(cp);
};
_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.EQUALS_SIGN) this.state = BEFORE_ATTRIBUTE_VALUE_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) {
this._createAttr(toAsciiLowerChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.NULL) {
this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
}
};
_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE; else if (cp === $.AMPERSAND) this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE); else if (cp === $.APOSTROPHE) this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE; else if (cp === $.NULL) {
this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
this.currentAttr.value += toChar(cp);
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.currentAttr.value += toChar(cp);
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
}
};
_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.QUOTATION_MARK;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.APOSTROPHE;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.GREATER_THAN_SIGN;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
this.currentAttr.value += toChar(cp);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
var referencedCodePoints = this._consumeCharacterReference(cp, true);
if (referencedCodePoints) {
for (var i = 0; i < referencedCodePoints.length; i++) this.currentAttr.value += toChar(referencedCodePoints[i]);
} else this.currentAttr.value += "&";
this.state = this.returnState;
};
_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};
_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.selfClosing = true;
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};
_[BOGUS_COMMENT_STATE] = function bogusCommentState(cp) {
this._createCommentToken();
while (true) {
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
break;
} else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
break;
} else {
this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);
cp = this._consume();
}
}
this._emitCurrentToken();
};
_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
if (this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true)) {
this._createCommentToken();
this.state = COMMENT_START_STATE;
} else if (this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false)) this.state = DOCTYPE_STATE; else if (this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true)) this.state = CDATA_SECTION_STATE; else {
this[BOGUS_COMMENT_STATE](cp);
}
};
_[COMMENT_START_STATE] = function commentStartState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_START_DASH_STATE; else if (cp === $.NULL) {
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE; else if (cp === $.NULL) {
this.currentToken.data += "-";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "-";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_STATE] = function commentState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_DASH_STATE; else if (cp === $.NULL) this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.data += toChar(cp);
};
_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE; else if (cp === $.NULL) {
this.currentToken.data += "-";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "-";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_END_STATE] = function commentEndState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EXCLAMATION_MARK) this.state = COMMENT_END_BANG_STATE; else if (cp === $.HYPHEN_MINUS) this.currentToken.data += "-"; else if (cp === $.NULL) {
this.currentToken.data += "--";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
this._emitCurrentToken();
} else {
this.currentToken.data += "--";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.currentToken.data += "--!";
this.state = COMMENT_END_DASH_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.NULL) {
this.currentToken.data += "--!";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "--!";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[DOCTYPE_STATE] = function doctypeState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_NAME_STATE; else if (cp === $.EOF) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
};
_[BEFORE_DOCTYPE_NAME_STATE] = function beforeDoctypeNameState(cp) {
if (isWhitespace(cp)) return;
if (isAsciiUpper(cp)) {
this._createDoctypeToken(toAsciiLowerChar(cp));
this.state = DOCTYPE_NAME_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else if (cp === $.NULL) {
this._createDoctypeToken(UNICODE.REPLACEMENT_CHARACTER);
this.state = DOCTYPE_NAME_STATE;
} else {
this._createDoctypeToken(toChar(cp));
this.state = DOCTYPE_NAME_STATE;
}
};
_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
if (isWhitespace(cp)) this.state = AFTER_DOCTYPE_NAME_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (isAsciiUpper(cp)) this.currentToken.name += toAsciiLowerChar(cp); else if (cp === $.NULL) this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.name += toChar(cp);
};
_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else if (this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false)) this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE; else if (this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false)) this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE; else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE] = function afterDoctypePublicKeywordState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.QUOTATION_MARK) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.publicId += toChar(cp);
};
_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.publicId += toChar(cp);
};
_[AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function afterDoctypePublicIdentifierState(cp) {
if (isWhitespace(cp)) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE] = function afterDoctypeSystemKeywordState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.systemId += toChar(cp);
};
_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.systemId += toChar(cp);
};
_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.state = BOGUS_DOCTYPE_STATE;
};
_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
}
};
_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
while (true) {
if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
break;
} else if (this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true)) {
this.state = DATA_STATE;
break;
} else {
this._emitCodePoint(cp);
cp = this._consume();
}
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var UNICODE = __webpack_require__(184);
var $ = UNICODE.CODE_POINTS;
function isReservedCodePoint(cp) {
return cp >= 55296 && cp <= 57343 || cp > 1114111;
}
function isSurrogatePair(cp1, cp2) {
return cp1 >= 55296 && cp1 <= 56319 && cp2 >= 56320 && cp2 <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
return (cp1 - 55296) * 1024 + 9216 + cp2;
}
var Preprocessor = module.exports = function(html) {
this.write(html);
this.pos = this.html.charCodeAt(0) === $.BOM ? 0 : -1;
this.gapStack = [];
this.lastGapPos = -1;
this.skipNextNewLine = false;
};
Preprocessor.prototype.write = function(html) {
if (this.html) {
this.html = this.html.substring(0, this.pos + 1) + html + this.html.substring(this.pos + 1, this.html.length);
} else this.html = html;
this.lastCharPos = this.html.length - 1;
};
Preprocessor.prototype.advanceAndPeekCodePoint = function() {
this.pos++;
if (this.pos > this.lastCharPos) return $.EOF;
var cp = this.html.charCodeAt(this.pos);
if (this.skipNextNewLine && cp === $.LINE_FEED) {
this.skipNextNewLine = false;
this._addGap();
return this.advanceAndPeekCodePoint();
}
if (cp === $.CARRIAGE_RETURN) {
this.skipNextNewLine = true;
return $.LINE_FEED;
}
this.skipNextNewLine = false;
return cp >= 55296 ? this._processHighRangeCodePoint(cp) : cp;
};
Preprocessor.prototype._processHighRangeCodePoint = function(cp) {
if (this.pos !== this.lastCharPos) {
var nextCp = this.html.charCodeAt(this.pos + 1);
if (isSurrogatePair(cp, nextCp)) {
this.pos++;
cp = getSurrogatePairCodePoint(cp, nextCp);
this._addGap();
}
}
if (isReservedCodePoint(cp)) cp = $.REPLACEMENT_CHARACTER;
return cp;
};
Preprocessor.prototype._addGap = function() {
this.gapStack.push(this.lastGapPos);
this.lastGapPos = this.pos;
};
Preprocessor.prototype.retreat = function() {
if (this.pos === this.lastGapPos) {
this.lastGapPos = this.gapStack.pop();
this.pos--;
}
this.pos--;
};
}, function(module, exports) {
"use strict";
exports.REPLACEMENT_CHARACTER = "�";
exports.CODE_POINTS = {
EOF: -1,
NULL: 0,
TABULATION: 9,
CARRIAGE_RETURN: 13,
LINE_FEED: 10,
FORM_FEED: 12,
SPACE: 32,
EXCLAMATION_MARK: 33,
QUOTATION_MARK: 34,
NUMBER_SIGN: 35,
AMPERSAND: 38,
APOSTROPHE: 39,
HYPHEN_MINUS: 45,
SOLIDUS: 47,
DIGIT_0: 48,
DIGIT_9: 57,
SEMICOLON: 59,
LESS_THAN_SIGN: 60,
EQUALS_SIGN: 61,
GREATER_THAN_SIGN: 62,
QUESTION_MARK: 63,
LATIN_CAPITAL_A: 65,
LATIN_CAPITAL_F: 70,
LATIN_CAPITAL_X: 88,
LATIN_CAPITAL_Z: 90,
GRAVE_ACCENT: 96,
LATIN_SMALL_A: 97,
LATIN_SMALL_F: 102,
LATIN_SMALL_X: 120,
LATIN_SMALL_Z: 122,
BOM: 65279,
REPLACEMENT_CHARACTER: 65533
};
exports.CODE_POINT_SEQUENCES = {
DASH_DASH_STRING: [ 45, 45 ],
DOCTYPE_STRING: [ 68, 79, 67, 84, 89, 80, 69 ],
CDATA_START_STRING: [ 91, 67, 68, 65, 84, 65, 91 ],
CDATA_END_STRING: [ 93, 93, 62 ],
SCRIPT_STRING: [ 115, 99, 114, 105, 112, 116 ],
PUBLIC_STRING: [ 80, 85, 66, 76, 73, 67 ],
SYSTEM_STRING: [ 83, 89, 83, 84, 69, 77 ]
};
}, function(module, exports) {
"use strict";
module.exports = {
65: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 193 ]
}
},
c: [ 193 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 258 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 194 ]
}
},
c: [ 194 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1040 ]
}
}
}
}
},
69: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 198 ]
}
},
c: [ 198 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120068 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 192 ]
}
},
c: [ 192 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
112: {
l: {
104: {
l: {
97: {
l: {
59: {
c: [ 913 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 256 ]
}
}
}
}
}
}
}
}
},
77: {
l: {
80: {
l: {
59: {
c: [ 38 ]
}
},
c: [ 38 ]
}
}
},
110: {
l: {
100: {
l: {
59: {
c: [ 10835 ]
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 260 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120120 ]
}
}
}
}
}
}
},
112: {
l: {
112: {
l: {
108: {
l: {
121: {
l: {
70: {
l: {
117: {
l: {
110: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8289 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 197 ]
}
},
c: [ 197 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119964 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
103: {
l: {
110: {
l: {
59: {
c: [ 8788 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 195 ]
}
},
c: [ 195 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 196 ]
}
},
c: [ 196 ]
}
}
}
}
}
}
},
97: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 225 ]
}
},
c: [ 225 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 259 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 8766 ]
},
100: {
l: {
59: {
c: [ 8767 ]
}
}
},
69: {
l: {
59: {
c: [ 8766, 819 ]
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 226 ]
}
},
c: [ 226 ]
}
}
}
}
},
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 180 ]
}
},
c: [ 180 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1072 ]
}
}
}
}
},
101: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 230 ]
}
},
c: [ 230 ]
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 8289 ]
},
114: {
l: {
59: {
c: [ 120094 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 224 ]
}
},
c: [ 224 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
115: {
l: {
121: {
l: {
109: {
l: {
59: {
c: [ 8501 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
59: {
c: [ 8501 ]
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
97: {
l: {
59: {
c: [ 945 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 257 ]
}
}
}
}
},
108: {
l: {
103: {
l: {
59: {
c: [ 10815 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 38 ]
}
},
c: [ 38 ]
}
}
},
110: {
l: {
100: {
l: {
97: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 10837 ]
}
}
}
}
}
}
},
59: {
c: [ 8743 ]
},
100: {
l: {
59: {
c: [ 10844 ]
}
}
},
115: {
l: {
108: {
l: {
111: {
l: {
112: {
l: {
101: {
l: {
59: {
c: [ 10840 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 10842 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8736 ]
},
101: {
l: {
59: {
c: [ 10660 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 8736 ]
}
}
}
}
},
109: {
l: {
115: {
l: {
100: {
l: {
97: {
l: {
97: {
l: {
59: {
c: [ 10664 ]
}
}
},
98: {
l: {
59: {
c: [ 10665 ]
}
}
},
99: {
l: {
59: {
c: [ 10666 ]
}
}
},
100: {
l: {
59: {
c: [ 10667 ]
}
}
},
101: {
l: {
59: {
c: [ 10668 ]
}
}
},
102: {
l: {
59: {
c: [ 10669 ]
}
}
},
103: {
l: {
59: {
c: [ 10670 ]
}
}
},
104: {
l: {
59: {
c: [ 10671 ]
}
}
}
}
},
59: {
c: [ 8737 ]
}
}
}
}
}
}
},
114: {
l: {
116: {
l: {
59: {
c: [ 8735 ]
},
118: {
l: {
98: {
l: {
59: {
c: [ 8894 ]
},
100: {
l: {
59: {
c: [ 10653 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
104: {
l: {
59: {
c: [ 8738 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 197 ]
}
}
}
}
},
122: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 9084 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 261 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120146 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10863 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8776 ]
},
69: {
l: {
59: {
c: [ 10864 ]
}
}
},
101: {
l: {
59: {
c: [ 8778 ]
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8779 ]
}
}
}
}
},
111: {
l: {
115: {
l: {
59: {
c: [ 39 ]
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8776 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8778 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 229 ]
}
},
c: [ 229 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119990 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 42 ]
}
}
},
121: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8776 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8781 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 227 ]
}
},
c: [ 227 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 228 ]
}
},
c: [ 228 ]
}
}
}
}
},
119: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8755 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10769 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8780 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1014 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8245 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8765 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8909 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8893 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8965 ]
},
103: {
l: {
101: {
l: {
59: {
c: [ 8965 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9141 ]
},
116: {
l: {
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9142 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8780 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1073 ]
}
}
}
}
},
100: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8222 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8757 ]
},
101: {
l: {
59: {
c: [ 8757 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10672 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
105: {
l: {
59: {
c: [ 1014 ]
}
}
}
}
}
}
},
114: {
l: {
110: {
l: {
111: {
l: {
117: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 946 ]
}
}
},
104: {
l: {
59: {
c: [ 8502 ]
}
}
},
119: {
l: {
101: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 8812 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120095 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 9711 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8899 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10752 ]
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10753 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10754 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10758 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9733 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9661 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 9651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10756 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10509 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
108: {
l: {
111: {
l: {
122: {
l: {
101: {
l: {
110: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 10731 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9652 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9662 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 9666 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 9656 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
107: {
l: {
59: {
c: [ 9251 ]
}
}
}
}
}
}
},
107: {
l: {
49: {
l: {
50: {
l: {
59: {
c: [ 9618 ]
}
}
},
52: {
l: {
59: {
c: [ 9617 ]
}
}
}
}
},
51: {
l: {
52: {
l: {
59: {
c: [ 9619 ]
}
}
}
}
}
}
},
111: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 9608 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
59: {
c: [ 61, 8421 ]
},
113: {
l: {
117: {
l: {
105: {
l: {
118: {
l: {
59: {
c: [ 8801, 8421 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8976 ]
}
}
}
}
}
}
},
78: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10989 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120147 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8869 ]
},
116: {
l: {
111: {
l: {
109: {
l: {
59: {
c: [ 8869 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
116: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8904 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
98: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10697 ]
}
}
}
}
}
}
},
100: {
l: {
108: {
l: {
59: {
c: [ 9488 ]
}
}
},
76: {
l: {
59: {
c: [ 9557 ]
}
}
},
114: {
l: {
59: {
c: [ 9484 ]
}
}
},
82: {
l: {
59: {
c: [ 9554 ]
}
}
}
}
},
68: {
l: {
108: {
l: {
59: {
c: [ 9558 ]
}
}
},
76: {
l: {
59: {
c: [ 9559 ]
}
}
},
114: {
l: {
59: {
c: [ 9555 ]
}
}
},
82: {
l: {
59: {
c: [ 9556 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 9472 ]
},
100: {
l: {
59: {
c: [ 9516 ]
}
}
},
68: {
l: {
59: {
c: [ 9573 ]
}
}
},
117: {
l: {
59: {
c: [ 9524 ]
}
}
},
85: {
l: {
59: {
c: [ 9576 ]
}
}
}
}
},
72: {
l: {
59: {
c: [ 9552 ]
},
100: {
l: {
59: {
c: [ 9572 ]
}
}
},
68: {
l: {
59: {
c: [ 9574 ]
}
}
},
117: {
l: {
59: {
c: [ 9575 ]
}
}
},
85: {
l: {
59: {
c: [ 9577 ]
}
}
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8863 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8862 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8864 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
59: {
c: [ 9496 ]
}
}
},
76: {
l: {
59: {
c: [ 9563 ]
}
}
},
114: {
l: {
59: {
c: [ 9492 ]
}
}
},
82: {
l: {
59: {
c: [ 9560 ]
}
}
}
}
},
85: {
l: {
108: {
l: {
59: {
c: [ 9564 ]
}
}
},
76: {
l: {
59: {
c: [ 9565 ]
}
}
},
114: {
l: {
59: {
c: [ 9561 ]
}
}
},
82: {
l: {
59: {
c: [ 9562 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 9474 ]
},
104: {
l: {
59: {
c: [ 9532 ]
}
}
},
72: {
l: {
59: {
c: [ 9578 ]
}
}
},
108: {
l: {
59: {
c: [ 9508 ]
}
}
},
76: {
l: {
59: {
c: [ 9569 ]
}
}
},
114: {
l: {
59: {
c: [ 9500 ]
}
}
},
82: {
l: {
59: {
c: [ 9566 ]
}
}
}
}
},
86: {
l: {
59: {
c: [ 9553 ]
},
104: {
l: {
59: {
c: [ 9579 ]
}
}
},
72: {
l: {
59: {
c: [ 9580 ]
}
}
},
108: {
l: {
59: {
c: [ 9570 ]
}
}
},
76: {
l: {
59: {
c: [ 9571 ]
}
}
},
114: {
l: {
59: {
c: [ 9567 ]
}
}
},
82: {
l: {
59: {
c: [ 9568 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8245 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 728 ]
}
}
}
}
}
}
},
118: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 166 ]
}
},
c: [ 166 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119991 ]
}
}
}
}
},
101: {
l: {
109: {
l: {
105: {
l: {
59: {
c: [ 8271 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8765 ]
},
101: {
l: {
59: {
c: [ 8909 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
98: {
l: {
59: {
c: [ 10693 ]
}
}
},
59: {
c: [ 92 ]
},
104: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 10184 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8226 ]
},
101: {
l: {
116: {
l: {
59: {
c: [ 8226 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
59: {
c: [ 8782 ]
},
69: {
l: {
59: {
c: [ 10926 ]
}
}
},
101: {
l: {
59: {
c: [ 8783 ]
},
113: {
l: {
59: {
c: [ 8783 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
115: {
l: {
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
118: {
l: {
59: {
c: [ 10983 ]
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8966 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1041 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
117: {
l: {
115: {
l: {
101: {
l: {
59: {
c: [ 8757 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
110: {
l: {
111: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 914 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120069 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120121 ]
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 728 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8782 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 262 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8914 ]
},
105: {
l: {
116: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
105: {
l: {
102: {
l: {
102: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8517 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
108: {
l: {
101: {
l: {
121: {
l: {
115: {
l: {
59: {
c: [ 8493 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 268 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 199 ]
}
},
c: [ 199 ]
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 264 ]
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8752 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 266 ]
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
108: {
l: {
97: {
l: {
59: {
c: [ 184 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8493 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1063 ]
}
}
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 935 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8857 ]
}
}
}
}
}
}
},
77: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8854 ]
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8853 ]
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8855 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
99: {
l: {
107: {
l: {
119: {
l: {
105: {
l: {
115: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8754 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
67: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8221 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8217 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8759 ]
},
101: {
l: {
59: {
c: [ 10868 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
114: {
l: {
117: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8801 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8751 ]
}
}
}
}
}
}
},
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8450 ]
}
}
},
114: {
l: {
111: {
l: {
100: {
l: {
117: {
l: {
99: {
l: {
116: {
l: {
59: {
c: [ 8720 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
67: {
l: {
108: {
l: {
111: {
l: {
99: {
l: {
107: {
l: {
119: {
l: {
105: {
l: {
115: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8755 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
80: {
l: {
89: {
l: {
59: {
c: [ 169 ]
}
},
c: [ 169 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10799 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119966 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
67: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8781 ]
}
}
}
}
}
}
},
59: {
c: [ 8915 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 263 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 10820 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10825 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10827 ]
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10823 ]
}
}
}
}
}
}
},
59: {
c: [ 8745 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10816 ]
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 8745, 65024 ]
}
}
}
}
},
114: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8257 ]
}
}
}
}
},
111: {
l: {
110: {
l: {
59: {
c: [ 711 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
115: {
l: {
59: {
c: [ 10829 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 269 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 231 ]
}
},
c: [ 231 ]
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 265 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
115: {
l: {
59: {
c: [ 10828 ]
},
115: {
l: {
109: {
l: {
59: {
c: [ 10832 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 267 ]
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 184 ]
}
},
c: [ 184 ]
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10674 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 162 ]
},
101: {
l: {
114: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
}
}
}
}
}
}
}
}
}
}
},
c: [ 162 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120096 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1095 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 10003 ]
},
109: {
l: {
97: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10003 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 967 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 710 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8791 ]
}
}
}
}
},
108: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8634 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8635 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8859 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 8858 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8861 ]
}
}
}
}
}
}
}
}
},
82: {
l: {
59: {
c: [ 174 ]
}
}
},
83: {
l: {
59: {
c: [ 9416 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 9675 ]
},
69: {
l: {
59: {
c: [ 10691 ]
}
}
},
101: {
l: {
59: {
c: [ 8791 ]
}
}
},
102: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10768 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 10991 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10690 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
59: {
c: [ 9827 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9827 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 58 ]
},
101: {
l: {
59: {
c: [ 8788 ]
},
113: {
l: {
59: {
c: [ 8788 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 44 ]
},
116: {
l: {
59: {
c: [ 64 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8705 ]
},
102: {
l: {
110: {
l: {
59: {
c: [ 8728 ]
}
}
}
}
},
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8705 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8450 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 8773 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10861 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120148 ]
}
}
},
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 8720 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 169 ]
},
115: {
l: {
114: {
l: {
59: {
c: [ 8471 ]
}
}
}
}
}
},
c: [ 169 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8629 ]
}
}
}
}
}
}
},
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10007 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119992 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10959 ]
},
101: {
l: {
59: {
c: [ 10961 ]
}
}
}
}
},
112: {
l: {
59: {
c: [ 10960 ]
},
101: {
l: {
59: {
c: [ 10962 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8943 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
100: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 10552 ]
}
}
},
114: {
l: {
59: {
c: [ 10549 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
114: {
l: {
59: {
c: [ 8926 ]
}
}
}
}
},
115: {
l: {
99: {
l: {
59: {
c: [ 8927 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8630 ]
},
112: {
l: {
59: {
c: [ 10557 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
98: {
l: {
114: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10824 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10822 ]
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10826 ]
}
}
}
}
}
}
},
59: {
c: [ 8746 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8845 ]
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
59: {
c: [ 10821 ]
}
}
}
}
},
115: {
l: {
59: {
c: [ 8746, 65024 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8631 ]
},
109: {
l: {
59: {
c: [ 10556 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
112: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
59: {
c: [ 8926 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 8927 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8910 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8911 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 164 ]
}
},
c: [ 164 ]
}
}
}
}
},
118: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8630 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8631 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8910 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8911 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8754 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8753 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
108: {
l: {
99: {
l: {
116: {
l: {
121: {
l: {
59: {
c: [ 9005 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8224 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 8504 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8208 ]
},
118: {
l: {
59: {
c: [ 8867 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
},
98: {
l: {
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10511 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 733 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 271 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1076 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8225 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8650 ]
}
}
}
}
}
}
},
59: {
c: [ 8518 ]
},
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 10871 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
59: {
c: [ 176 ]
}
},
c: [ 176 ]
},
108: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 948 ]
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10673 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10623 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120097 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10597 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 8643 ]
}
}
},
114: {
l: {
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
109: {
l: {
59: {
c: [ 8900 ]
},
111: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 8900 ]
},
115: {
l: {
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9830 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 9830 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 168 ]
}
}
},
103: {
l: {
97: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 989 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 8946 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 247 ]
},
105: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 247 ]
},
111: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8903 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
c: [ 247 ]
}
}
}
}
},
111: {
l: {
110: {
l: {
120: {
l: {
59: {
c: [ 8903 ]
}
}
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1106 ]
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8990 ]
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8973 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
108: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 36 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120149 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 729 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8784 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8785 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8760 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8724 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8865 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8966 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8650 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8643 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
98: {
l: {
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10512 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8991 ]
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8972 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119993 ]
}
}
},
121: {
l: {
59: {
c: [ 1109 ]
}
}
}
}
},
111: {
l: {
108: {
l: {
59: {
c: [ 10742 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 273 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8945 ]
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9663 ]
},
102: {
l: {
59: {
c: [ 9662 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8693 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10607 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 10662 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1119 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10239 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8225 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8609 ]
}
}
}
}
},
115: {
l: {
104: {
l: {
118: {
l: {
59: {
c: [ 10980 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 270 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1044 ]
}
}
}
}
},
68: {
l: {
59: {
c: [ 8517 ]
},
111: {
l: {
116: {
l: {
114: {
l: {
97: {
l: {
104: {
l: {
100: {
l: {
59: {
c: [ 10513 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
59: {
c: [ 8711 ]
},
116: {
l: {
97: {
l: {
59: {
c: [ 916 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120071 ]
}
}
}
}
},
105: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
105: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
65: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 180 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 729 ]
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
65: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 733 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 96 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 732 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 8900 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
102: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8518 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1026 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120123 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 168 ]
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8412 ]
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8784 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8751 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 168 ]
}
}
},
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 10980 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8872 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10515 ]
}
}
}
}
}
}
},
59: {
c: [ 8595 ]
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8693 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 785 ]
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10576 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10590 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10582 ]
}
}
}
}
}
}
},
59: {
c: [ 8637 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10591 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10583 ]
}
}
}
}
}
}
},
59: {
c: [ 8641 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8615 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8868 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119967 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 272 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1029 ]
}
}
}
}
}
}
},
90: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1039 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 201 ]
}
},
c: [ 201 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 282 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 202 ]
}
},
c: [ 202 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1069 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 278 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120072 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 200 ]
}
},
c: [ 200 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8712 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 274 ]
}
}
}
}
}
}
},
112: {
l: {
116: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9723 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9643 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
71: {
l: {
59: {
c: [ 330 ]
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 280 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120124 ]
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 917 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10869 ]
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8496 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10867 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 919 ]
}
}
}
}
},
84: {
l: {
72: {
l: {
59: {
c: [ 208 ]
}
},
c: [ 208 ]
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 203 ]
}
},
c: [ 203 ]
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 8707 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
110: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
69: {
l: {
59: {
c: [ 8519 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 233 ]
}
},
c: [ 233 ]
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10862 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 283 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 234 ]
}
},
c: [ 234 ]
},
59: {
c: [ 8790 ]
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8789 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1101 ]
}
}
}
}
},
68: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10871 ]
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8785 ]
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 279 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8519 ]
}
}
},
102: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8786 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120098 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 10906 ]
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 232 ]
}
},
c: [ 232 ]
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10902 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10904 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 10905 ]
},
105: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
59: {
c: [ 9191 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8467 ]
}
}
},
115: {
l: {
59: {
c: [ 10901 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10903 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 275 ]
}
}
}
}
}
}
},
112: {
l: {
116: {
l: {
121: {
l: {
59: {
c: [ 8709 ]
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
49: {
l: {
51: {
l: {
59: {
c: [ 8196 ]
}
}
},
52: {
l: {
59: {
c: [ 8197 ]
}
}
}
}
},
59: {
c: [ 8195 ]
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 331 ]
}
}
},
115: {
l: {
112: {
l: {
59: {
c: [ 8194 ]
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 281 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120150 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8917 ]
},
115: {
l: {
108: {
l: {
59: {
c: [ 10723 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10865 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 949 ]
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 949 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 8790 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8789 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 10902 ]
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10901 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 61 ]
}
}
}
}
}
}
},
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8799 ]
}
}
}
}
}
}
},
105: {
l: {
118: {
l: {
59: {
c: [ 8801 ]
},
68: {
l: {
68: {
l: {
59: {
c: [ 10872 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
115: {
l: {
108: {
l: {
59: {
c: [ 10725 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10609 ]
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8787 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8495 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8784 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 951 ]
}
}
},
104: {
l: {
59: {
c: [ 240 ]
}
},
c: [ 240 ]
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 235 ]
}
},
c: [ 235 ]
}
}
},
114: {
l: {
111: {
l: {
59: {
c: [ 8364 ]
}
}
}
}
}
}
},
120: {
l: {
99: {
l: {
108: {
l: {
59: {
c: [ 33 ]
}
}
}
}
},
105: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8707 ]
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
97: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8496 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8519 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8786 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1092 ]
}
}
}
}
},
101: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9792 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64259 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64256 ]
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64260 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120099 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64257 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 102, 106 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 9837 ]
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64258 ]
}
}
}
}
}
}
},
116: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 9649 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
111: {
l: {
102: {
l: {
59: {
c: [ 402 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120151 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8704 ]
}
}
}
}
}
}
},
107: {
l: {
59: {
c: [ 8916 ]
},
118: {
l: {
59: {
c: [ 10969 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10765 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
49: {
l: {
50: {
l: {
59: {
c: [ 189 ]
}
},
c: [ 189 ]
},
51: {
l: {
59: {
c: [ 8531 ]
}
}
},
52: {
l: {
59: {
c: [ 188 ]
}
},
c: [ 188 ]
},
53: {
l: {
59: {
c: [ 8533 ]
}
}
},
54: {
l: {
59: {
c: [ 8537 ]
}
}
},
56: {
l: {
59: {
c: [ 8539 ]
}
}
}
}
},
50: {
l: {
51: {
l: {
59: {
c: [ 8532 ]
}
}
},
53: {
l: {
59: {
c: [ 8534 ]
}
}
}
}
},
51: {
l: {
52: {
l: {
59: {
c: [ 190 ]
}
},
c: [ 190 ]
},
53: {
l: {
59: {
c: [ 8535 ]
}
}
},
56: {
l: {
59: {
c: [ 8540 ]
}
}
}
}
},
52: {
l: {
53: {
l: {
59: {
c: [ 8536 ]
}
}
}
}
},
53: {
l: {
54: {
l: {
59: {
c: [ 8538 ]
}
}
},
56: {
l: {
59: {
c: [ 8541 ]
}
}
}
}
},
55: {
l: {
56: {
l: {
59: {
c: [ 8542 ]
}
}
}
}
}
}
},
115: {
l: {
108: {
l: {
59: {
c: [ 8260 ]
}
}
}
}
}
}
},
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8994 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119995 ]
}
}
}
}
}
}
}
}
},
70: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1060 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120073 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
100: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9724 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120125 ]
}
}
}
}
},
114: {
l: {
65: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8704 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
114: {
l: {
105: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8497 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8497 ]
}
}
}
}
}
}
}
}
},
103: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 501 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 947 ]
},
100: {
l: {
59: {
c: [ 989 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 10886 ]
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 287 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 285 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1075 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 289 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8805 ]
},
108: {
l: {
59: {
c: [ 8923 ]
}
}
},
113: {
l: {
59: {
c: [ 8805 ]
},
113: {
l: {
59: {
c: [ 8807 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10878 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10921 ]
}
}
}
}
},
59: {
c: [ 10878 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10880 ]
},
111: {
l: {
59: {
c: [ 10882 ]
},
108: {
l: {
59: {
c: [ 10884 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8923, 65024 ]
},
101: {
l: {
115: {
l: {
59: {
c: [ 10900 ]
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8807 ]
},
108: {
l: {
59: {
c: [ 10892 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120100 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8811 ]
},
103: {
l: {
59: {
c: [ 8921 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8503 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1107 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
59: {
c: [ 10917 ]
}
}
},
59: {
c: [ 8823 ]
},
69: {
l: {
59: {
c: [ 10898 ]
}
}
},
106: {
l: {
59: {
c: [ 10916 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10890 ]
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10890 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10888 ]
},
113: {
l: {
59: {
c: [ 10888 ]
},
113: {
l: {
59: {
c: [ 8809 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8809 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8935 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120152 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 96 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8458 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8819 ]
},
101: {
l: {
59: {
c: [ 10894 ]
}
}
},
108: {
l: {
59: {
c: [ 10896 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10919 ]
}
}
},
105: {
l: {
114: {
l: {
59: {
c: [ 10874 ]
}
}
}
}
}
}
},
59: {
c: [ 62 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8919 ]
}
}
}
}
}
}
},
108: {
l: {
80: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10645 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 10876 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10886 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 10616 ]
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8919 ]
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8923 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10892 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8823 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8819 ]
}
}
}
}
}
}
}
}
}
},
c: [ 62 ]
},
118: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 8809, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 8809, 65024 ]
}
}
}
}
}
}
}
}
},
71: {
l: {
97: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 915 ]
},
100: {
l: {
59: {
c: [ 988 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 286 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 290 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 284 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1043 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 288 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120074 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8921 ]
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1027 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120126 ]
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8805 ]
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8923 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8807 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10914 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8823 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10878 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8819 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119970 ]
}
}
}
}
}
}
},
84: {
l: {
59: {
c: [ 62 ]
}
},
c: [ 62 ]
},
116: {
l: {
59: {
c: [ 8811 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
107: {
l: {
59: {
c: [ 711 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 94 ]
}
}
}
}
},
65: {
l: {
82: {
l: {
68: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1066 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 292 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8460 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
98: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8461 ]
}
}
}
}
},
114: {
l: {
105: {
l: {
122: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
97: {
l: {
108: {
l: {
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 9472 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 294 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8783 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
105: {
l: {
114: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8202 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
102: {
l: {
59: {
c: [ 189 ]
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
100: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1098 ]
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10568 ]
}
}
}
}
}
}
},
59: {
c: [ 8596 ]
},
119: {
l: {
59: {
c: [ 8621 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 293 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 9829 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
112: {
l: {
59: {
c: [ 8230 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8889 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120101 ]
}
}
}
}
},
107: {
l: {
115: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10533 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10534 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8703 ]
}
}
}
}
}
}
},
109: {
l: {
116: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8763 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
107: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8617 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8618 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120153 ]
}
}
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8213 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119997 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 295 ]
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
98: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8259 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 8208 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
73: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 205 ]
}
},
c: [ 205 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 206 ]
}
},
c: [ 206 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1048 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 304 ]
}
}
}
}
}
}
},
69: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1045 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8465 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 204 ]
}
},
c: [ 204 ]
}
}
}
}
}
}
}
}
},
74: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 306 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 298 ]
}
}
}
}
},
103: {
l: {
105: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
121: {
l: {
73: {
l: {
59: {
c: [ 8520 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8465 ]
},
112: {
l: {
108: {
l: {
105: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8748 ]
},
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8747 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
115: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
105: {
l: {
115: {
l: {
105: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 8291 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8290 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1025 ]
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 302 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120128 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 921 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8464 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 296 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1030 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 207 ]
}
},
c: [ 207 ]
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 237 ]
}
},
c: [ 237 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 8291 ]
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 238 ]
}
},
c: [ 238 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1080 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1077 ]
}
}
}
}
},
120: {
l: {
99: {
l: {
108: {
l: {
59: {
c: [ 161 ]
}
},
c: [ 161 ]
}
}
}
}
}
}
},
102: {
l: {
102: {
l: {
59: {
c: [ 8660 ]
}
}
},
114: {
l: {
59: {
c: [ 120102 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 236 ]
}
},
c: [ 236 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 8520 ]
},
105: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10764 ]
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8749 ]
}
}
}
}
}
}
},
110: {
l: {
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 10716 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 8489 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 307 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 299 ]
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8465 ]
}
}
},
108: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8464 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8465 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
59: {
c: [ 305 ]
}
}
}
}
}
}
},
111: {
l: {
102: {
l: {
59: {
c: [ 8887 ]
}
}
}
}
},
112: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 437 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
99: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8453 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8712 ]
},
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 8734 ]
},
116: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 10717 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 305 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8890 ]
}
}
}
}
}
}
},
59: {
c: [ 8747 ]
},
101: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
59: {
c: [ 8484 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8890 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10775 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 10812 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1105 ]
}
}
}
}
},
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 303 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120154 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 953 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 10812 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 191 ]
}
},
c: [ 191 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119998 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
59: {
c: [ 8712 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8949 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8953 ]
}
}
},
115: {
l: {
59: {
c: [ 8948 ]
},
118: {
l: {
59: {
c: [ 8947 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 8712 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8290 ]
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 297 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1110 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 239 ]
}
},
c: [ 239 ]
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 308 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1049 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120077 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120129 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119973 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1032 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1028 ]
}
}
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 309 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1081 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120103 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 567 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120155 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119999 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1112 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1108 ]
}
}
}
}
}
}
}
}
}
}
},
75: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 922 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 310 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1050 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120078 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1061 ]
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1036 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120130 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119974 ]
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 954 ]
},
118: {
l: {
59: {
c: [ 1008 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 311 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1082 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120104 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 312 ]
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1093 ]
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1116 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120156 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 12e4 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
65: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8666 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10523 ]
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 314 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10676 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
110: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
98: {
l: {
100: {
l: {
97: {
l: {
59: {
c: [ 955 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10216 ]
},
100: {
l: {
59: {
c: [ 10641 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 10216 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 10885 ]
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 171 ]
}
},
c: [ 171 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
98: {
l: {
59: {
c: [ 8676 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10527 ]
}
}
}
}
}
}
},
59: {
c: [ 8592 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10525 ]
}
}
}
}
},
104: {
l: {
107: {
l: {
59: {
c: [ 8617 ]
}
}
}
}
},
108: {
l: {
112: {
l: {
59: {
c: [ 8619 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
59: {
c: [ 10553 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10611 ]
}
}
}
}
}
}
},
116: {
l: {
108: {
l: {
59: {
c: [ 8610 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10521 ]
}
}
}
}
}
}
},
59: {
c: [ 10923 ]
},
101: {
l: {
59: {
c: [ 10925 ]
},
115: {
l: {
59: {
c: [ 10925, 65024 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10508 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10098 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 123 ]
}
}
},
107: {
l: {
59: {
c: [ 91 ]
}
}
}
}
}
}
},
107: {
l: {
101: {
l: {
59: {
c: [ 10635 ]
}
}
},
115: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10639 ]
}
}
},
117: {
l: {
59: {
c: [ 10637 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10510 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 318 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 316 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
59: {
c: [ 8968 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 123 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1083 ]
}
}
}
}
},
100: {
l: {
99: {
l: {
97: {
l: {
59: {
c: [ 10550 ]
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8220 ]
},
114: {
l: {
59: {
c: [ 8222 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
100: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10599 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
115: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10571 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8626 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8804 ]
},
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8592 ]
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8610 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8637 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8636 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8647 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8596 ]
},
115: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
103: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8621 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8907 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
59: {
c: [ 8922 ]
}
}
},
113: {
l: {
59: {
c: [ 8804 ]
},
113: {
l: {
59: {
c: [ 8806 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10877 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10920 ]
}
}
}
}
},
59: {
c: [ 10877 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10879 ]
},
111: {
l: {
59: {
c: [ 10881 ]
},
114: {
l: {
59: {
c: [ 10883 ]
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
59: {
c: [ 8922, 65024 ]
},
101: {
l: {
115: {
l: {
59: {
c: [ 10899 ]
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10885 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8918 ]
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 8922 ]
}
}
}
}
}
}
},
113: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 10891 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 8822 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8818 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8806 ]
},
103: {
l: {
59: {
c: [ 10891 ]
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10620 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8970 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120105 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8822 ]
},
69: {
l: {
59: {
c: [ 10897 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10594 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 8637 ]
}
}
},
117: {
l: {
59: {
c: [ 8636 ]
},
108: {
l: {
59: {
c: [ 10602 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
107: {
l: {
59: {
c: [ 9604 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1113 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8647 ]
}
}
}
}
}
}
},
59: {
c: [ 8810 ]
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8990 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 10603 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9722 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 320 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
117: {
l: {
115: {
l: {
116: {
l: {
97: {
l: {
99: {
l: {
104: {
l: {
101: {
l: {
59: {
c: [ 9136 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 9136 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10889 ]
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10889 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10887 ]
},
113: {
l: {
59: {
c: [ 10887 ]
},
113: {
l: {
59: {
c: [ 8808 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8808 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8934 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 10220 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8701 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10214 ]
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
115: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 10236 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8619 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8620 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10629 ]
}
}
}
}
},
102: {
l: {
59: {
c: [ 120157 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10797 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10804 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8727 ]
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 95 ]
}
}
}
}
}
}
}
}
},
122: {
l: {
59: {
c: [ 9674 ]
},
101: {
l: {
110: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 9674 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 10731 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 40 ]
},
108: {
l: {
116: {
l: {
59: {
c: [ 10643 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8991 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8651 ]
},
100: {
l: {
59: {
c: [ 10605 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8206 ]
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8895 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8249 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
114: {
l: {
59: {
c: [ 120001 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8624 ]
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8818 ]
},
101: {
l: {
59: {
c: [ 10893 ]
}
}
},
103: {
l: {
59: {
c: [ 10895 ]
}
}
}
}
}
}
},
113: {
l: {
98: {
l: {
59: {
c: [ 91 ]
}
}
},
117: {
l: {
111: {
l: {
59: {
c: [ 8216 ]
},
114: {
l: {
59: {
c: [ 8218 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 322 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10918 ]
}
}
},
105: {
l: {
114: {
l: {
59: {
c: [ 10873 ]
}
}
}
}
}
}
},
59: {
c: [ 60 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8918 ]
}
}
}
}
}
}
},
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8907 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8905 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10614 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 10875 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9667 ]
},
101: {
l: {
59: {
c: [ 8884 ]
}
}
},
102: {
l: {
59: {
c: [ 9666 ]
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10646 ]
}
}
}
}
}
}
}
}
}
},
c: [ 60 ]
},
117: {
l: {
114: {
l: {
100: {
l: {
115: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10570 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10598 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 8808, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 8808, 65024 ]
}
}
}
}
}
}
}
}
},
76: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 313 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
98: {
l: {
100: {
l: {
97: {
l: {
59: {
c: [ 923 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10218 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8606 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 317 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 315 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1051 ]
}
}
}
}
},
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10216 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8676 ]
}
}
}
}
}
}
},
59: {
c: [ 8592 ]
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
101: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8968 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10214 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10593 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10585 ]
}
}
}
}
}
}
},
59: {
c: [ 8643 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8970 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8596 ]
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10574 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8612 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8867 ]
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10586 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10703 ]
}
}
}
}
}
}
},
59: {
c: [ 8882 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8884 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10577 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10592 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10584 ]
}
}
}
}
}
}
},
59: {
c: [ 8639 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10578 ]
}
}
}
}
}
}
},
59: {
c: [ 8636 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
115: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8922 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8806 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8822 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10913 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10877 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8818 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120079 ]
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1033 ]
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8920 ]
},
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8666 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 319 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120131 ]
}
}
}
}
},
119: {
l: {
101: {
l: {
114: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8601 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8600 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8624 ]
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 321 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
59: {
c: [ 60 ]
}
},
c: [ 60 ]
},
116: {
l: {
59: {
c: [ 8810 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 175 ]
}
},
c: [ 175 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 9794 ]
}
}
},
116: {
l: {
59: {
c: [ 10016 ]
},
101: {
l: {
115: {
l: {
101: {
l: {
59: {
c: [ 10016 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8614 ]
},
115: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 8614 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8615 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8612 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8613 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
107: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 9646 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 10793 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1084 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8212 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8762 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
115: {
l: {
117: {
l: {
114: {
l: {
101: {
l: {
100: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8737 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120106 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
59: {
c: [ 8487 ]
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
59: {
c: [ 181 ]
}
},
c: [ 181 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 42 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10992 ]
}
}
}
}
}
}
},
59: {
c: [ 8739 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
},
c: [ 183 ]
}
}
}
}
}
}
},
110: {
l: {
117: {
l: {
115: {
l: {
98: {
l: {
59: {
c: [ 8863 ]
}
}
},
59: {
c: [ 8722 ]
},
100: {
l: {
59: {
c: [ 8760 ]
},
117: {
l: {
59: {
c: [ 10794 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
112: {
l: {
59: {
c: [ 10971 ]
}
}
}
}
},
100: {
l: {
114: {
l: {
59: {
c: [ 8230 ]
}
}
}
}
}
}
},
110: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8723 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
101: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 8871 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120158 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8723 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120002 ]
}
}
}
}
},
116: {
l: {
112: {
l: {
111: {
l: {
115: {
l: {
59: {
c: [ 8766 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 956 ]
},
108: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8888 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8888 ]
}
}
}
}
}
}
}
}
}
}
},
77: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10501 ]
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1052 ]
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8287 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120080 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8723 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120132 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 924 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
59: {
c: [ 8711 ]
}
}
}
}
}
}
},
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 324 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 8736, 8402 ]
}
}
}
}
},
112: {
l: {
59: {
c: [ 8777 ]
},
69: {
l: {
59: {
c: [ 10864, 824 ]
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8779, 824 ]
}
}
}
}
},
111: {
l: {
115: {
l: {
59: {
c: [ 329 ]
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8777 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
117: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 9838 ]
},
115: {
l: {
59: {
c: [ 8469 ]
}
}
}
}
}
}
},
59: {
c: [ 9838 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 160 ]
}
},
c: [ 160 ]
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782, 824 ]
},
101: {
l: {
59: {
c: [ 8783, 824 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10819 ]
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 328 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 326 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8775 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10861, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10818 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1085 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8211 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10532 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8599 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8599 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8663 ]
}
}
}
}
}
}
},
59: {
c: [ 8800 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8784, 824 ]
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
105: {
l: {
118: {
l: {
59: {
c: [ 8802 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10536 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8770, 824 ]
}
}
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8708 ]
},
115: {
l: {
59: {
c: [ 8708 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120107 ]
}
}
}
}
},
103: {
l: {
69: {
l: {
59: {
c: [ 8807, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8817 ]
},
113: {
l: {
59: {
c: [ 8817 ]
},
113: {
l: {
59: {
c: [ 8807, 824 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8821 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8815 ]
},
114: {
l: {
59: {
c: [ 8815 ]
}
}
}
}
}
}
},
71: {
l: {
103: {
l: {
59: {
c: [ 8921, 824 ]
}
}
},
116: {
l: {
59: {
c: [ 8811, 8402 ]
},
118: {
l: {
59: {
c: [ 8811, 824 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8622 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8654 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10994 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 8715 ]
},
115: {
l: {
59: {
c: [ 8956 ]
},
100: {
l: {
59: {
c: [ 8954 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1114 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8602 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8653 ]
}
}
}
}
}
}
},
100: {
l: {
114: {
l: {
59: {
c: [ 8229 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 8806, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8816 ]
},
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8602 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8622 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
59: {
c: [ 8816 ]
},
113: {
l: {
59: {
c: [ 8806, 824 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10877, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10877, 824 ]
},
115: {
l: {
59: {
c: [ 8814 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8820 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8814 ]
},
114: {
l: {
105: {
l: {
59: {
c: [ 8938 ]
},
101: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8653 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8654 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8920, 824 ]
}
}
},
116: {
l: {
59: {
c: [ 8810, 8402 ]
},
118: {
l: {
59: {
c: [ 8810, 824 ]
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120159 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 172 ]
},
105: {
l: {
110: {
l: {
59: {
c: [ 8713 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8949, 824 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8953, 824 ]
}
}
},
118: {
l: {
97: {
l: {
59: {
c: [ 8713 ]
}
}
},
98: {
l: {
59: {
c: [ 8951 ]
}
}
},
99: {
l: {
59: {
c: [ 8950 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
105: {
l: {
59: {
c: [ 8716 ]
},
118: {
l: {
97: {
l: {
59: {
c: [ 8716 ]
}
}
},
98: {
l: {
59: {
c: [ 8958 ]
}
}
},
99: {
l: {
59: {
c: [ 8957 ]
}
}
}
}
}
}
}
}
}
},
c: [ 172 ]
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8742 ]
},
115: {
l: {
108: {
l: {
59: {
c: [ 11005, 8421 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8706, 824 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10772 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8832 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8928 ]
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
59: {
c: [ 8832 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 10547, 824 ]
}
}
},
59: {
c: [ 8603 ]
},
119: {
l: {
59: {
c: [ 8605, 824 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8655 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8603 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8939 ]
},
101: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8655 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
59: {
c: [ 8833 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8929 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10928, 824 ]
}
}
},
114: {
l: {
59: {
c: [ 120003 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8769 ]
},
101: {
l: {
59: {
c: [ 8772 ]
},
113: {
l: {
59: {
c: [ 8772 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
},
113: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
101: {
l: {
59: {
c: [ 8930 ]
}
}
}
}
},
112: {
l: {
101: {
l: {
59: {
c: [ 8931 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8836 ]
},
69: {
l: {
59: {
c: [ 10949, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8840 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834, 8402 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8840 ]
},
113: {
l: {
59: {
c: [ 10949, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
59: {
c: [ 8833 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 10928, 824 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8837 ]
},
69: {
l: {
59: {
c: [ 10950, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8841 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835, 8402 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8841 ]
},
113: {
l: {
59: {
c: [ 10950, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
103: {
l: {
108: {
l: {
59: {
c: [ 8825 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 241 ]
}
},
c: [ 241 ]
}
}
}
}
}
}
},
108: {
l: {
103: {
l: {
59: {
c: [ 8824 ]
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8938 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8939 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 957 ]
},
109: {
l: {
59: {
c: [ 35 ]
},
101: {
l: {
114: {
l: {
111: {
l: {
59: {
c: [ 8470 ]
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
59: {
c: [ 8199 ]
}
}
}
}
}
}
}
}
},
118: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8781, 8402 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8876 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8877 ]
}
}
}
}
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8805, 8402 ]
}
}
},
116: {
l: {
59: {
c: [ 62, 8402 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10500 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 10718 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10498 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8804, 8402 ]
}
}
},
116: {
l: {
59: {
c: [ 60, 8402 ]
},
114: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8884, 8402 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10499 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8885, 8402 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764, 8402 ]
}
}
}
}
}
}
}
}
},
86: {
l: {
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8878 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8879 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10531 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8598 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8598 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8662 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10535 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 323 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 327 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 325 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1053 ]
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
116: {
l: {
105: {
l: {
118: {
l: {
101: {
l: {
77: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
104: {
l: {
105: {
l: {
99: {
l: {
107: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
84: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
101: {
l: {
100: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8811 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8810 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 10 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120081 ]
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1034 ]
}
}
}
}
}
}
},
111: {
l: {
66: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
107: {
l: {
59: {
c: [ 8288 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
66: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
107: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 160 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8469 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 10988 ]
},
67: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
114: {
l: {
117: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8802 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
67: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8813 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8713 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8800 ]
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8770, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 8708 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8815 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8817 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8807, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8811, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8825 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8821 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8783, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
84: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10703, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 8938 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
115: {
l: {
59: {
c: [ 8814 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8816 ]
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8810, 824 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10877, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8820 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
101: {
l: {
100: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10914, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10913, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
101: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8832 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8928 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8716 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
84: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10704, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 8939 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
83: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847, 824 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8930 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848, 824 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8931 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834, 8402 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8840 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
101: {
l: {
101: {
l: {
100: {
l: {
115: {
l: {
59: {
c: [ 8833 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10928, 824 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8929 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8831, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835, 8402 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8841 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8769 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8772 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8775 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8777 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119977 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 209 ]
}
},
c: [ 209 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 925 ]
}
}
}
}
},
79: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 211 ]
}
},
c: [ 211 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 212 ]
}
},
c: [ 212 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1054 ]
}
}
}
}
},
100: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 336 ]
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 338 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120082 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 210 ]
}
},
c: [ 210 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 332 ]
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
59: {
c: [ 937 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 927 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120134 ]
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
110: {
l: {
67: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8220 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8216 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 10836 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119978 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 216 ]
}
},
c: [ 216 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 213 ]
}
},
c: [ 213 ]
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10807 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 214 ]
}
},
c: [ 214 ]
}
}
}
}
},
118: {
l: {
101: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8254 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 9182 ]
}
}
},
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 9140 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
104: {
l: {
101: {
l: {
115: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 9180 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 243 ]
}
},
c: [ 243 ]
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
59: {
c: [ 8859 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 244 ]
}
},
c: [ 244 ]
},
59: {
c: [ 8858 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1086 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8861 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 337 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
118: {
l: {
59: {
c: [ 10808 ]
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8857 ]
}
}
}
}
},
115: {
l: {
111: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10684 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 339 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10687 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120108 ]
}
}
}
}
},
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 731 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 242 ]
}
},
c: [ 242 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10689 ]
}
}
}
}
},
104: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10677 ]
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 937 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8634 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10686 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10683 ]
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8254 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10688 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 333 ]
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
59: {
c: [ 969 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 959 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
59: {
c: [ 10678 ]
}
}
},
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8854 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120160 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10679 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 10681 ]
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8853 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8635 ]
}
}
}
}
}
}
},
59: {
c: [ 8744 ]
},
100: {
l: {
59: {
c: [ 10845 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8500 ]
},
111: {
l: {
102: {
l: {
59: {
c: [ 8500 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 170 ]
}
},
c: [ 170 ]
},
109: {
l: {
59: {
c: [ 186 ]
}
},
c: [ 186 ]
}
}
},
105: {
l: {
103: {
l: {
111: {
l: {
102: {
l: {
59: {
c: [ 8886 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
59: {
c: [ 10838 ]
}
}
}
}
},
115: {
l: {
108: {
l: {
111: {
l: {
112: {
l: {
101: {
l: {
59: {
c: [ 10839 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 10843 ]
}
}
}
}
},
83: {
l: {
59: {
c: [ 9416 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8500 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 248 ]
}
},
c: [ 248 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
59: {
c: [ 8856 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 245 ]
}
},
c: [ 245 ]
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
97: {
l: {
115: {
l: {
59: {
c: [ 10806 ]
}
}
}
}
},
59: {
c: [ 8855 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 246 ]
}
},
c: [ 246 ]
}
}
}
}
},
118: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9021 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
59: {
c: [ 182 ]
},
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
},
c: [ 182 ]
},
59: {
c: [ 8741 ]
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10995 ]
}
}
}
}
},
108: {
l: {
59: {
c: [ 11005 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8706 ]
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1087 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 37 ]
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 46 ]
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8240 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8869 ]
}
}
},
116: {
l: {
101: {
l: {
110: {
l: {
107: {
l: {
59: {
c: [ 8241 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120109 ]
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 966 ]
},
118: {
l: {
59: {
c: [ 981 ]
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 9742 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 960 ]
},
116: {
l: {
99: {
l: {
104: {
l: {
102: {
l: {
111: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 8916 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 982 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
110: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 8463 ]
},
104: {
l: {
59: {
c: [ 8462 ]
}
}
}
}
}
}
},
107: {
l: {
118: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
115: {
l: {
97: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10787 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
59: {
c: [ 8862 ]
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10786 ]
}
}
}
}
}
}
},
59: {
c: [ 43 ]
},
100: {
l: {
111: {
l: {
59: {
c: [ 8724 ]
}
}
},
117: {
l: {
59: {
c: [ 10789 ]
}
}
}
}
},
101: {
l: {
59: {
c: [ 10866 ]
}
}
},
109: {
l: {
110: {
l: {
59: {
c: [ 177 ]
}
},
c: [ 177 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10790 ]
}
}
}
}
}
}
},
116: {
l: {
119: {
l: {
111: {
l: {
59: {
c: [ 10791 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 177 ]
}
}
},
111: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10773 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120161 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 163 ]
}
},
c: [ 163 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10935 ]
}
}
}
}
},
59: {
c: [ 8826 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10935 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8826 ]
},
99: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
59: {
c: [ 10927 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10937 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 10933 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8936 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 10927 ]
}
}
},
69: {
l: {
59: {
c: [ 10931 ]
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8242 ]
},
115: {
l: {
59: {
c: [ 8473 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10937 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 10933 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8936 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
59: {
c: [ 8719 ]
}
}
},
102: {
l: {
97: {
l: {
108: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9006 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8978 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8979 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8733 ]
},
116: {
l: {
111: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
},
117: {
l: {
114: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8880 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120005 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 968 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
99: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8200 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8706 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1055 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120083 ]
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 934 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 928 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
77: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 177 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
105: {
l: {
110: {
l: {
99: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
112: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8460 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8473 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 10939 ]
},
101: {
l: {
99: {
l: {
101: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8826 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10927 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8243 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
117: {
l: {
99: {
l: {
116: {
l: {
59: {
c: [ 8719 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
},
59: {
c: [ 8759 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119979 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 936 ]
}
}
}
}
}
}
},
81: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120084 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8474 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119980 ]
}
}
}
}
}
}
},
85: {
l: {
79: {
l: {
84: {
l: {
59: {
c: [ 34 ]
}
},
c: [ 34 ]
}
}
}
}
}
}
},
113: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120110 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10764 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120162 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8279 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120006 ]
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
110: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8461 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10774 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 63 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8799 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 34 ]
}
},
c: [ 34 ]
}
}
}
}
}
}
},
114: {
l: {
65: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8667 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10524 ]
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8765, 817 ]
}
}
},
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 341 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
105: {
l: {
99: {
l: {
59: {
c: [ 8730 ]
}
}
}
}
}
}
},
101: {
l: {
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10675 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10217 ]
},
100: {
l: {
59: {
c: [ 10642 ]
}
}
},
101: {
l: {
59: {
c: [ 10661 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 10217 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 187 ]
}
},
c: [ 187 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10613 ]
}
}
}
}
},
98: {
l: {
59: {
c: [ 8677 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10528 ]
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 10547 ]
}
}
},
59: {
c: [ 8594 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10526 ]
}
}
}
}
},
104: {
l: {
107: {
l: {
59: {
c: [ 8618 ]
}
}
}
}
},
108: {
l: {
112: {
l: {
59: {
c: [ 8620 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
59: {
c: [ 10565 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10612 ]
}
}
}
}
}
}
},
116: {
l: {
108: {
l: {
59: {
c: [ 8611 ]
}
}
}
}
},
119: {
l: {
59: {
c: [ 8605 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10522 ]
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
59: {
c: [ 8758 ]
},
110: {
l: {
97: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 8474 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10509 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10099 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 125 ]
}
}
},
107: {
l: {
59: {
c: [ 93 ]
}
}
}
}
}
}
},
107: {
l: {
101: {
l: {
59: {
c: [ 10636 ]
}
}
},
115: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10638 ]
}
}
},
117: {
l: {
59: {
c: [ 10640 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10511 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 345 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 343 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
59: {
c: [ 8969 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 125 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1088 ]
}
}
}
}
},
100: {
l: {
99: {
l: {
97: {
l: {
59: {
c: [ 10551 ]
}
}
}
}
},
108: {
l: {
100: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10601 ]
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8221 ]
},
114: {
l: {
59: {
c: [ 8221 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8627 ]
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8476 ]
},
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8475 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8476 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 8477 ]
}
}
}
}
}
}
},
99: {
l: {
116: {
l: {
59: {
c: [ 9645 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 174 ]
}
},
c: [ 174 ]
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10621 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8971 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120111 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10596 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 8641 ]
}
}
},
117: {
l: {
59: {
c: [ 8640 ]
},
108: {
l: {
59: {
c: [ 10604 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
59: {
c: [ 961 ]
},
118: {
l: {
59: {
c: [ 1009 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8594 ]
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8611 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8641 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8640 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8649 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
103: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8605 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8908 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 730 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8787 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8207 ]
}
}
}
}
},
109: {
l: {
111: {
l: {
117: {
l: {
115: {
l: {
116: {
l: {
97: {
l: {
99: {
l: {
104: {
l: {
101: {
l: {
59: {
c: [ 9137 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 9137 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 10990 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 10221 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8702 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10215 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10630 ]
}
}
}
}
},
102: {
l: {
59: {
c: [ 120163 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10798 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10805 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 41 ]
},
103: {
l: {
116: {
l: {
59: {
c: [ 10644 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10770 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8649 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8250 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
114: {
l: {
59: {
c: [ 120007 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8625 ]
}
}
},
113: {
l: {
98: {
l: {
59: {
c: [ 93 ]
}
}
},
117: {
l: {
111: {
l: {
59: {
c: [ 8217 ]
},
114: {
l: {
59: {
c: [ 8217 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8908 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8906 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9657 ]
},
101: {
l: {
59: {
c: [ 8885 ]
}
}
},
102: {
l: {
59: {
c: [ 9656 ]
}
}
},
108: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 10702 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
117: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10600 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
120: {
l: {
59: {
c: [ 8478 ]
}
}
}
}
},
82: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 340 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10219 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8608 ]
},
116: {
l: {
108: {
l: {
59: {
c: [ 10518 ]
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10512 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 344 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 342 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1056 ]
}
}
}
}
},
101: {
l: {
59: {
c: [ 8476 ]
},
118: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 8651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 10607 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
71: {
l: {
59: {
c: [ 174 ]
}
},
c: [ 174 ]
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8476 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
59: {
c: [ 929 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10217 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8677 ]
}
}
}
}
}
}
},
59: {
c: [ 8594 ]
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
101: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8969 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10215 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10589 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10581 ]
}
}
}
}
}
}
},
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8971 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8614 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8866 ]
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10587 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10704 ]
}
}
}
}
}
}
},
59: {
c: [ 8883 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8885 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10575 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10588 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10580 ]
}
}
}
}
}
}
},
59: {
c: [ 8638 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10579 ]
}
}
}
}
}
}
},
59: {
c: [ 8640 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8477 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
100: {
l: {
73: {
l: {
109: {
l: {
112: {
l: {
108: {
l: {
105: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10608 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8667 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8475 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8625 ]
}
}
}
}
},
117: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
101: {
l: {
108: {
l: {
97: {
l: {
121: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 10740 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 346 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 352 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 10940 ]
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 350 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 348 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1057 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120086 ]
}
}
}
}
},
72: {
l: {
67: {
l: {
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1065 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1064 ]
}
}
}
}
}
}
},
104: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8592 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8594 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 931 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
67: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8728 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
70: {
l: {
84: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1068 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120138 ]
}
}
}
}
}
}
},
113: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8730 ]
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9633 ]
},
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8851 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8849 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8850 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
110: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8852 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119982 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8902 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8912 ]
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8912 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8838 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
101: {
l: {
101: {
l: {
100: {
l: {
115: {
l: {
59: {
c: [ 8827 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10928 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
84: {
l: {
104: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8721 ]
}
}
},
112: {
l: {
59: {
c: [ 8913 ]
},
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8839 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8913 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 347 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8218 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10936 ]
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 353 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8827 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10928 ]
},
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 351 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10932 ]
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 349 ]
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10938 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 10934 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8937 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10771 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1089 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
98: {
l: {
59: {
c: [ 8865 ]
}
}
},
59: {
c: [ 8901 ]
},
101: {
l: {
59: {
c: [ 10854 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10533 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8600 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8600 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8664 ]
}
}
}
}
}
}
},
99: {
l: {
116: {
l: {
59: {
c: [ 167 ]
}
},
c: [ 167 ]
}
}
},
109: {
l: {
105: {
l: {
59: {
c: [ 59 ]
}
}
}
}
},
115: {
l: {
119: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10537 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
},
120: {
l: {
116: {
l: {
59: {
c: [ 10038 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120112 ]
},
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8994 ]
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 9839 ]
}
}
}
}
}
}
},
99: {
l: {
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1097 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1096 ]
}
}
}
}
},
111: {
l: {
114: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8739 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 173 ]
}
},
c: [ 173 ]
}
}
},
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 963 ]
},
102: {
l: {
59: {
c: [ 962 ]
}
}
},
118: {
l: {
59: {
c: [ 962 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8764 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10858 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8771 ]
},
113: {
l: {
59: {
c: [ 8771 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 10910 ]
},
69: {
l: {
59: {
c: [ 10912 ]
}
}
}
}
},
108: {
l: {
59: {
c: [ 10909 ]
},
69: {
l: {
59: {
c: [ 10911 ]
}
}
}
}
},
110: {
l: {
101: {
l: {
59: {
c: [ 8774 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10788 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10610 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8592 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
112: {
l: {
59: {
c: [ 10803 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
115: {
l: {
108: {
l: {
59: {
c: [ 10724 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8739 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 8995 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10922 ]
},
101: {
l: {
59: {
c: [ 10924 ]
},
115: {
l: {
59: {
c: [ 10924, 65024 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
102: {
l: {
116: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1100 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9023 ]
}
}
}
}
},
59: {
c: [ 10692 ]
}
}
},
59: {
c: [ 47 ]
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120164 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 9824 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
},
113: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8851 ]
},
115: {
l: {
59: {
c: [ 8851, 65024 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8852 ]
},
115: {
l: {
59: {
c: [ 8852, 65024 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 8847 ]
},
101: {
l: {
59: {
c: [ 8849 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8849 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8848 ]
},
101: {
l: {
59: {
c: [ 8850 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8850 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9633 ]
}
}
},
102: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
},
59: {
c: [ 9633 ]
},
102: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8594 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120008 ]
}
}
}
}
},
101: {
l: {
116: {
l: {
109: {
l: {
110: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8995 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8902 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9734 ]
},
102: {
l: {
59: {
c: [ 9733 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
105: {
l: {
59: {
c: [ 981 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
59: {
c: [ 175 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8834 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10941 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10949 ]
}
}
},
101: {
l: {
59: {
c: [ 8838 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10947 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
117: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 10945 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 10955 ]
}
}
},
101: {
l: {
59: {
c: [ 8842 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10943 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10617 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8838 ]
},
113: {
l: {
59: {
c: [ 10949 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8842 ]
},
113: {
l: {
59: {
c: [ 10955 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10951 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10965 ]
}
}
},
112: {
l: {
59: {
c: [ 10963 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10936 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8827 ]
},
99: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
59: {
c: [ 10928 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10938 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 10934 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8937 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8721 ]
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 9834 ]
}
}
}
}
},
112: {
l: {
49: {
l: {
59: {
c: [ 185 ]
}
},
c: [ 185 ]
},
50: {
l: {
59: {
c: [ 178 ]
}
},
c: [ 178 ]
},
51: {
l: {
59: {
c: [ 179 ]
}
},
c: [ 179 ]
},
59: {
c: [ 8835 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10942 ]
}
}
}
}
},
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 10968 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10950 ]
}
}
},
101: {
l: {
59: {
c: [ 8839 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10948 ]
}
}
}
}
}
}
}
}
},
104: {
l: {
115: {
l: {
111: {
l: {
108: {
l: {
59: {
c: [ 10185 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10967 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10619 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
117: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 10946 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 10956 ]
}
}
},
101: {
l: {
59: {
c: [ 8843 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10944 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8839 ]
},
113: {
l: {
59: {
c: [ 10950 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8843 ]
},
113: {
l: {
59: {
c: [ 10956 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10952 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10964 ]
}
}
},
112: {
l: {
59: {
c: [ 10966 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10534 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8601 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8601 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8665 ]
}
}
}
}
}
}
},
110: {
l: {
119: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10538 ]
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 223 ]
}
},
c: [ 223 ]
}
}
}
}
}
}
}
}
},
84: {
l: {
97: {
l: {
98: {
l: {
59: {
c: [ 9 ]
}
}
},
117: {
l: {
59: {
c: [ 932 ]
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 356 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 354 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1058 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120087 ]
}
}
}
}
},
104: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
102: {
l: {
111: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8756 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 920 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
107: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8287, 8202 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8201 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
72: {
l: {
79: {
l: {
82: {
l: {
78: {
l: {
59: {
c: [ 222 ]
}
},
c: [ 222 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8764 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8771 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8773 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120139 ]
}
}
}
}
}
}
},
82: {
l: {
65: {
l: {
68: {
l: {
69: {
l: {
59: {
c: [ 8482 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
112: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8411 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119983 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 358 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1062 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1035 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
103: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8982 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 964 ]
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9140 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 357 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 355 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1090 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8411 ]
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
59: {
c: [ 8981 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120113 ]
}
}
}
}
},
104: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
52: {
l: {
59: {
c: [ 8756 ]
}
}
},
102: {
l: {
111: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8756 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 952 ]
},
115: {
l: {
121: {
l: {
109: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8201 ]
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 254 ]
}
},
c: [ 254 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 732 ]
}
}
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10801 ]
}
}
}
}
},
59: {
c: [ 8864 ]
}
}
},
59: {
c: [ 215 ]
},
100: {
l: {
59: {
c: [ 10800 ]
}
}
}
},
c: [ 215 ]
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8749 ]
}
}
}
}
}
}
},
111: {
l: {
101: {
l: {
97: {
l: {
59: {
c: [ 10536 ]
}
}
}
}
},
112: {
l: {
98: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 9014 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10993 ]
}
}
}
}
}
}
},
59: {
c: [ 8868 ]
},
102: {
l: {
59: {
c: [ 120165 ]
},
111: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10970 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
59: {
c: [ 10537 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8244 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8482 ]
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9653 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9663 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 9667 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8884 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
59: {
c: [ 8796 ]
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 9657 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8885 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 9708 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8796 ]
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10810 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10809 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
98: {
l: {
59: {
c: [ 10701 ]
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 10811 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
122: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 9186 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120009 ]
}
}
},
121: {
l: {
59: {
c: [ 1094 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1115 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 359 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
105: {
l: {
120: {
l: {
116: {
l: {
59: {
c: [ 8812 ]
}
}
}
}
}
}
},
111: {
l: {
104: {
l: {
101: {
l: {
97: {
l: {
100: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8606 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8608 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 218 ]
}
},
c: [ 218 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8607 ]
},
111: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10569 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1038 ]
}
}
}
}
},
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 364 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 219 ]
}
},
c: [ 219 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1059 ]
}
}
}
}
},
100: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 368 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120088 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 217 ]
}
},
c: [ 217 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 362 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
100: {
l: {
101: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 95 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 9183 ]
}
}
},
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 9141 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
104: {
l: {
101: {
l: {
115: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 9181 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8899 ]
},
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8846 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 370 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120140 ]
}
}
}
}
}
}
},
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10514 ]
}
}
}
}
}
}
},
59: {
c: [ 8593 ]
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8645 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8597 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 10606 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8598 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8599 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 978 ]
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 933 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8613 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8869 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 366 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119984 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 360 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 220 ]
}
},
c: [ 220 ]
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 250 ]
}
},
c: [ 250 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1118 ]
}
}
}
}
},
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 365 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 251 ]
}
},
c: [ 251 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1091 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8645 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 369 ]
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10606 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10622 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120114 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 249 ]
}
},
c: [ 249 ]
}
}
}
}
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10595 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 8639 ]
}
}
},
114: {
l: {
59: {
c: [ 8638 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
107: {
l: {
59: {
c: [ 9600 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8988 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8988 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8975 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9720 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 363 ]
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 168 ]
}
},
c: [ 168 ]
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 371 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120166 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8597 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8639 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8638 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8846 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 965 ]
},
104: {
l: {
59: {
c: [ 978 ]
}
}
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 965 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8648 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8989 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8989 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8974 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 367 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9721 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120010 ]
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8944 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 361 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9653 ]
},
102: {
l: {
59: {
c: [ 9652 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8648 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 252 ]
}
},
c: [ 252 ]
}
}
}
}
},
119: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 10663 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 10652 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 1008 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
111: {
l: {
116: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
105: {
l: {
59: {
c: [ 981 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 982 ]
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8597 ]
},
104: {
l: {
111: {
l: {
59: {
c: [ 1009 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 962 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8842, 65024 ]
},
113: {
l: {
59: {
c: [ 10955, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8843, 65024 ]
},
113: {
l: {
59: {
c: [ 10956, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
101: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8882 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8883 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10984 ]
},
118: {
l: {
59: {
c: [ 10985 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1074 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8866 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8872 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8891 ]
}
}
}
}
}
}
},
59: {
c: [ 8744 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8794 ]
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
112: {
l: {
59: {
c: [ 8942 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120115 ]
}
}
}
}
},
108: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8882 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 8834, 8402 ]
}
}
},
112: {
l: {
59: {
c: [ 8835, 8402 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120167 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8883 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120011 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
110: {
l: {
69: {
l: {
59: {
c: [ 10955, 65024 ]
}
}
},
101: {
l: {
59: {
c: [ 8842, 65024 ]
}
}
}
}
}
}
},
112: {
l: {
110: {
l: {
69: {
l: {
59: {
c: [ 10956, 65024 ]
}
}
},
101: {
l: {
59: {
c: [ 8843, 65024 ]
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
105: {
l: {
103: {
l: {
122: {
l: {
97: {
l: {
103: {
l: {
59: {
c: [ 10650 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10987 ]
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1042 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8873 ]
},
108: {
l: {
59: {
c: [ 10982 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8875 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8214 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8214 ]
},
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8739 ]
}
}
}
}
}
}
},
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
101: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10072 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8768 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
84: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8202 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120089 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120141 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119985 ]
}
}
}
}
}
}
},
118: {
l: {
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8874 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
87: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 372 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120090 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120142 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119986 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 373 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10847 ]
}
}
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8743 ]
},
113: {
l: {
59: {
c: [ 8793 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
101: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 8472 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120116 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120168 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8472 ]
}
}
},
114: {
l: {
59: {
c: [ 8768 ]
},
101: {
l: {
97: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 8768 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120012 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 9711 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8899 ]
}
}
}
}
}
}
},
100: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9661 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120117 ]
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 958 ]
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10236 ]
}
}
}
}
}
}
},
110: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 8955 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10752 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120169 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10753 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 10754 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120013 ]
}
}
}
}
},
113: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10758 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10756 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9651 ]
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
88: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120091 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 926 ]
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120143 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119987 ]
}
}
}
}
}
}
}
}
},
89: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 221 ]
}
},
c: [ 221 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1071 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 374 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1067 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120092 ]
}
}
}
}
},
73: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1031 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120144 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119988 ]
}
}
}
}
}
}
},
85: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1070 ]
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 376 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 253 ]
}
},
c: [ 253 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1103 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 375 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1099 ]
}
}
}
}
},
101: {
l: {
110: {
l: {
59: {
c: [ 165 ]
}
},
c: [ 165 ]
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120118 ]
}
}
}
}
},
105: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1111 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120170 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120014 ]
}
}
}
}
}
}
},
117: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1102 ]
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 255 ]
}
},
c: [ 255 ]
}
}
}
}
}
}
},
90: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 377 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 381 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1047 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 379 ]
}
}
}
}
}
}
},
101: {
l: {
114: {
l: {
111: {
l: {
87: {
l: {
105: {
l: {
100: {
l: {
116: {
l: {
104: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 918 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8488 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1046 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8484 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119989 ]
}
}
}
}
}
}
}
}
},
122: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 378 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 382 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1079 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 380 ]
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8488 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 950 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120119 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1078 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8669 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120171 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120015 ]
}
}
}
}
}
}
},
119: {
l: {
106: {
l: {
59: {
c: [ 8205 ]
}
}
},
110: {
l: {
106: {
l: {
59: {
c: [ 8204 ]
}
}
}
}
}
}
}
}
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var HTML = __webpack_require__(187);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
function isImpliedEndTagRequired(tn) {
switch (tn.length) {
case 1:
return tn === $.P;

case 2:
return tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

case 6:
return tn === $.OPTION;

case 8:
return tn === $.OPTGROUP;
}
return false;
}
function isScopingElement(tn, ns) {
switch (tn.length) {
case 2:
if (tn === $.TD || tn === $.TH) return ns === NS.HTML; else if (tn === $.MI || tn === $.MO || tn == $.MN || tn === $.MS) return ns === NS.MATHML;
break;

case 4:
if (tn === $.HTML) return ns === NS.HTML; else if (tn === $.DESC) return ns === NS.SVG;
break;

case 5:
if (tn === $.TABLE) return ns === NS.HTML; else if (tn === $.MTEXT) return ns === NS.MATHML; else if (tn === $.TITLE) return ns === NS.SVG;
break;

case 6:
return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

case 7:
return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

case 8:
return tn === $.TEMPLATE && ns === NS.HTML;

case 13:
return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

case 14:
return tn === $.ANNOTATION_XML && ns === NS.MATHML;
}
return false;
}
var OpenElementStack = module.exports = function(document, treeAdapter) {
this.stackTop = -1;
this.items = [];
this.current = document;
this.currentTagName = null;
this.currentTmplContent = null;
this.tmplCount = 0;
this.treeAdapter = treeAdapter;
};
OpenElementStack.prototype._indexOf = function(element) {
var idx = -1;
for (var i = this.stackTop; i >= 0; i--) {
if (this.items[i] === element) {
idx = i;
break;
}
}
return idx;
};
OpenElementStack.prototype._isInTemplate = function() {
if (this.currentTagName !== $.TEMPLATE) return false;
return this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
};
OpenElementStack.prototype._updateCurrentElement = function() {
this.current = this.items[this.stackTop];
this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getChildNodes(this.current)[0] : null;
};
OpenElementStack.prototype.push = function(element) {
this.items[++this.stackTop] = element;
this._updateCurrentElement();
if (this._isInTemplate()) this.tmplCount++;
};
OpenElementStack.prototype.pop = function() {
this.stackTop--;
if (this.tmplCount > 0 && this._isInTemplate()) this.tmplCount--;
this._updateCurrentElement();
};
OpenElementStack.prototype.replace = function(oldElement, newElement) {
var idx = this._indexOf(oldElement);
this.items[idx] = newElement;
if (idx === this.stackTop) this._updateCurrentElement();
};
OpenElementStack.prototype.insertAfter = function(referenceElement, newElement) {
var insertionIdx = this._indexOf(referenceElement) + 1;
this.items.splice(insertionIdx, 0, newElement);
if (insertionIdx == ++this.stackTop) this._updateCurrentElement();
};
OpenElementStack.prototype.popUntilTagNamePopped = function(tagName) {
while (this.stackTop > -1) {
var tn = this.currentTagName;
this.pop();
if (tn === tagName) break;
}
};
OpenElementStack.prototype.popUntilTemplatePopped = function() {
while (this.stackTop > -1) {
var tn = this.currentTagName, ns = this.treeAdapter.getNamespaceURI(this.current);
this.pop();
if (tn === $.TEMPLATE && ns === NS.HTML) break;
}
};
OpenElementStack.prototype.popUntilElementPopped = function(element) {
while (this.stackTop > -1) {
var poppedElement = this.current;
this.pop();
if (poppedElement === element) break;
}
};
OpenElementStack.prototype.popUntilNumberedHeaderPopped = function() {
while (this.stackTop > -1) {
var tn = this.currentTagName;
this.pop();
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) break;
}
};
OpenElementStack.prototype.popAllUpToHtmlElement = function() {
this.stackTop = 0;
this._updateCurrentElement();
};
OpenElementStack.prototype.clearBackToTableContext = function() {
while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) this.pop();
};
OpenElementStack.prototype.clearBackToTableBodyContext = function() {
while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) {
this.pop();
}
};
OpenElementStack.prototype.clearBackToTableRowContext = function() {
while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) this.pop();
};
OpenElementStack.prototype.remove = function(element) {
for (var i = this.stackTop; i >= 0; i--) {
if (this.items[i] === element) {
this.items.splice(i, 1);
this.stackTop--;
this._updateCurrentElement();
break;
}
}
};
OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function() {
var element = this.items[1];
return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
};
OpenElementStack.prototype.contains = function(element) {
return this._indexOf(element) > -1;
};
OpenElementStack.prototype.getCommonAncestor = function(element) {
var elementIdx = this._indexOf(element);
return --elementIdx >= 0 ? this.items[elementIdx] : null;
};
OpenElementStack.prototype.isRootHtmlElementCurrent = function() {
return this.stackTop === 0 && this.currentTagName === $.HTML;
};
OpenElementStack.prototype.hasInScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasNumberedHeaderInScope = function() {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) return true;
if (isScopingElement(tn, this.treeAdapter.getNamespaceURI(this.items[i]))) return false;
}
return true;
};
OpenElementStack.prototype.hasInListItemScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasInButtonScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasInTableScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.hasTableBodyContextInTableScope = function() {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.TABLE || tn === $.HTML) && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.hasInSelectScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (tn !== $.OPTION && tn !== $.OPTGROUP && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.generateImpliedEndTags = function() {
while (isImpliedEndTagRequired(this.currentTagName)) this.pop();
};
OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function(exclusionTagName) {
while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) this.pop();
};
}, function(module, exports) {
"use strict";
var NS = exports.NAMESPACES = {
HTML: "http://www.w3.org/1999/xhtml",
MATHML: "http://www.w3.org/1998/Math/MathML",
SVG: "http://www.w3.org/2000/svg",
XLINK: "http://www.w3.org/1999/xlink",
XML: "http://www.w3.org/XML/1998/namespace",
XMLNS: "http://www.w3.org/2000/xmlns/"
};
exports.ATTRS = {
TYPE: "type",
ACTION: "action",
ENCODING: "encoding",
PROMPT: "prompt",
NAME: "name",
COLOR: "color",
FACE: "face",
SIZE: "size"
};
var $ = exports.TAG_NAMES = {
A: "a",
ADDRESS: "address",
ANNOTATION_XML: "annotation-xml",
APPLET: "applet",
AREA: "area",
ARTICLE: "article",
ASIDE: "aside",
B: "b",
BASE: "base",
BASEFONT: "basefont",
BGSOUND: "bgsound",
BIG: "big",
BLOCKQUOTE: "blockquote",
BODY: "body",
BR: "br",
BUTTON: "button",
CAPTION: "caption",
CENTER: "center",
CODE: "code",
COL: "col",
COLGROUP: "colgroup",
COMMAND: "command",
DD: "dd",
DESC: "desc",
DETAILS: "details",
DIALOG: "dialog",
DIR: "dir",
DIV: "div",
DL: "dl",
DT: "dt",
EM: "em",
EMBED: "embed",
FIELDSET: "fieldset",
FIGCAPTION: "figcaption",
FIGURE: "figure",
FONT: "font",
FOOTER: "footer",
FOREIGN_OBJECT: "foreignObject",
FORM: "form",
FRAME: "frame",
FRAMESET: "frameset",
H1: "h1",
H2: "h2",
H3: "h3",
H4: "h4",
H5: "h5",
H6: "h6",
HEAD: "head",
HEADER: "header",
HGROUP: "hgroup",
HR: "hr",
HTML: "html",
I: "i",
IMG: "img",
IMAGE: "image",
INPUT: "input",
IFRAME: "iframe",
ISINDEX: "isindex",
KEYGEN: "keygen",
LABEL: "label",
LI: "li",
LINK: "link",
LISTING: "listing",
MAIN: "main",
MALIGNMARK: "malignmark",
MARQUEE: "marquee",
MATH: "math",
MENU: "menu",
MENUITEM: "menuitem",
META: "meta",
MGLYPH: "mglyph",
MI: "mi",
MO: "mo",
MN: "mn",
MS: "ms",
MTEXT: "mtext",
NAV: "nav",
NOBR: "nobr",
NOFRAMES: "noframes",
NOEMBED: "noembed",
NOSCRIPT: "noscript",
OBJECT: "object",
OL: "ol",
OPTGROUP: "optgroup",
OPTION: "option",
P: "p",
PARAM: "param",
PLAINTEXT: "plaintext",
PRE: "pre",
RP: "rp",
RT: "rt",
RUBY: "ruby",
S: "s",
SCRIPT: "script",
SECTION: "section",
SELECT: "select",
SOURCE: "source",
SMALL: "small",
SPAN: "span",
STRIKE: "strike",
STRONG: "strong",
STYLE: "style",
SUB: "sub",
SUMMARY: "summary",
SUP: "sup",
TABLE: "table",
TBODY: "tbody",
TEMPLATE: "template",
TEXTAREA: "textarea",
TFOOT: "tfoot",
TD: "td",
TH: "th",
THEAD: "thead",
TITLE: "title",
TR: "tr",
TRACK: "track",
TT: "tt",
U: "u",
UL: "ul",
SVG: "svg",
VAR: "var",
WBR: "wbr",
XMP: "xmp"
};
var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};
SPECIAL_ELEMENTS[NS.HTML] = {};
SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ISINDEX] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENUITEM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;
SPECIAL_ELEMENTS[NS.MATHML] = {};
SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;
SPECIAL_ELEMENTS[NS.SVG] = {};
SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;
}, function(module, exports) {
"use strict";
var NOAH_ARK_CAPACITY = 3;
var FormattingElementList = module.exports = function(treeAdapter) {
this.length = 0;
this.entries = [];
this.treeAdapter = treeAdapter;
this.bookmark = null;
};
FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
FormattingElementList.prototype._getNoahArkConditionCandidates = function(newElement) {
var candidates = [];
if (this.length >= NOAH_ARK_CAPACITY) {
var neAttrsLength = this.treeAdapter.getAttrList(newElement).length, neTagName = this.treeAdapter.getTagName(newElement), neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.MARKER_ENTRY) break;
var element = entry.element, elementAttrs = this.treeAdapter.getAttrList(element);
if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength) {
candidates.push({
idx: i,
attrs: elementAttrs
});
}
}
}
return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
};
FormattingElementList.prototype._ensureNoahArkCondition = function(newElement) {
var candidates = this._getNoahArkConditionCandidates(newElement), cLength = candidates.length;
if (cLength) {
var neAttrs = this.treeAdapter.getAttrList(newElement), neAttrsLength = neAttrs.length, neAttrsMap = {};
for (var i = 0; i < neAttrsLength; i++) {
var neAttr = neAttrs[i];
neAttrsMap[neAttr.name] = neAttr.value;
}
for (var i = 0; i < neAttrsLength; i++) {
for (var j = 0; j < cLength; j++) {
var cAttr = candidates[j].attrs[i];
if (neAttrsMap[cAttr.name] !== cAttr.value) {
candidates.splice(j, 1);
cLength--;
}
if (candidates.length < NOAH_ARK_CAPACITY) return;
}
}
for (var i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
this.entries.splice(candidates[i].idx, 1);
this.length--;
}
}
};
FormattingElementList.prototype.insertMarker = function() {
this.entries.push({
type: FormattingElementList.MARKER_ENTRY
});
this.length++;
};
FormattingElementList.prototype.pushElement = function(element, token) {
this._ensureNoahArkCondition(element);
this.entries.push({
type: FormattingElementList.ELEMENT_ENTRY,
element: element,
token: token
});
this.length++;
};
FormattingElementList.prototype.insertElementAfterBookmark = function(element, token) {
var bookmarkIdx = this.length - 1;
for (;bookmarkIdx >= 0; bookmarkIdx--) {
if (this.entries[bookmarkIdx] === this.bookmark) break;
}
this.entries.splice(bookmarkIdx + 1, 0, {
type: FormattingElementList.ELEMENT_ENTRY,
element: element,
token: token
});
this.length++;
};
FormattingElementList.prototype.removeEntry = function(entry) {
for (var i = this.length - 1; i >= 0; i--) {
if (this.entries[i] === entry) {
this.entries.splice(i, 1);
this.length--;
break;
}
}
};
FormattingElementList.prototype.clearToLastMarker = function() {
while (this.length) {
var entry = this.entries.pop();
this.length--;
if (entry.type === FormattingElementList.MARKER_ENTRY) break;
}
};
FormattingElementList.prototype.getElementEntryInScopeWithTagName = function(tagName) {
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.MARKER_ENTRY) return null;
if (this.treeAdapter.getTagName(entry.element) === tagName) return entry;
}
return null;
};
FormattingElementList.prototype.getElementEntry = function(element) {
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element == element) return entry;
}
return null;
};
}, function(module, exports) {
"use strict";
var VALID_DOCTYPE_NAME = "html", QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", QUIRKS_MODE_PUBLIC_ID_PREFIXES = [ "+//silmaril//dtd html pro v0r11 19970101//en", "-//advasoft ltd//dtd html 3.0 aswedit + extensions//en", "-//as//dtd html 3.0 aswedit + extensions//en", "-//ietf//dtd html 2.0 level 1//en", "-//ietf//dtd html 2.0 level 2//en", "-//ietf//dtd html 2.0 strict level 1//en", "-//ietf//dtd html 2.0 strict level 2//en", "-//ietf//dtd html 2.0 strict//en", "-//ietf//dtd html 2.0//en", "-//ietf//dtd html 2.1e//en", "-//ietf//dtd html 3.0//en", "-//ietf//dtd html 3.0//en//", "-//ietf//dtd html 3.2 final//en", "-//ietf//dtd html 3.2//en", "-//ietf//dtd html 3//en", "-//ietf//dtd html level 0//en", "-//ietf//dtd html level 0//en//2.0", "-//ietf//dtd html level 1//en", "-//ietf//dtd html level 1//en//2.0", "-//ietf//dtd html level 2//en", "-//ietf//dtd html level 2//en//2.0", "-//ietf//dtd html level 3//en", "-//ietf//dtd html level 3//en//3.0", "-//ietf//dtd html strict level 0//en", "-//ietf//dtd html strict level 0//en//2.0", "-//ietf//dtd html strict level 1//en", "-//ietf//dtd html strict level 1//en//2.0", "-//ietf//dtd html strict level 2//en", "-//ietf//dtd html strict level 2//en//2.0", "-//ietf//dtd html strict level 3//en", "-//ietf//dtd html strict level 3//en//3.0", "-//ietf//dtd html strict//en", "-//ietf//dtd html strict//en//2.0", "-//ietf//dtd html strict//en//3.0", "-//ietf//dtd html//en", "-//ietf//dtd html//en//2.0", "-//ietf//dtd html//en//3.0", "-//metrius//dtd metrius presentational//en", "-//microsoft//dtd internet explorer 2.0 html strict//en", "-//microsoft//dtd internet explorer 2.0 html//en", "-//microsoft//dtd internet explorer 2.0 tables//en", "-//microsoft//dtd internet explorer 3.0 html strict//en", "-//microsoft//dtd internet explorer 3.0 html//en", "-//microsoft//dtd internet explorer 3.0 tables//en", "-//netscape comm. corp.//dtd html//en", "-//netscape comm. corp.//dtd strict html//en", "-//o'reilly and associates//dtd html 2.0//en", "-//o'reilly and associates//dtd html extended 1.0//en", "-//spyglass//dtd html 2.0 extended//en", "-//sq//dtd html 2.0 hotmetal + extensions//en", "-//sun microsystems corp.//dtd hotjava html//en", "-//sun microsystems corp.//dtd hotjava strict html//en", "-//w3c//dtd html 3 1995-03-24//en", "-//w3c//dtd html 3.2 draft//en", "-//w3c//dtd html 3.2 final//en", "-//w3c//dtd html 3.2//en", "-//w3c//dtd html 3.2s draft//en", "-//w3c//dtd html 4.0 frameset//en", "-//w3c//dtd html 4.0 transitional//en", "-//w3c//dtd html experimental 19960712//en", "-//w3c//dtd html experimental 970421//en", "-//w3c//dtd w3 html//en", "-//w3o//dtd w3 html 3.0//en", "-//w3o//dtd w3 html 3.0//en//", "-//webtechs//dtd mozilla html 2.0//en", "-//webtechs//dtd mozilla html//en" ], QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [ "-//w3c//dtd html 4.01 frameset//", "-//w3c//dtd html 4.01 transitional//" ], QUIRKS_MODE_PUBLIC_IDS = [ "-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html" ];
exports.isQuirks = function(name, publicId, systemId) {
if (name !== VALID_DOCTYPE_NAME) return true;
if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) return true;
if (publicId !== null) {
publicId = publicId.toLowerCase();
if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) return true;
var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;
if (systemId === null) prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);
for (var i = 0; i < prefixes.length; i++) {
if (publicId.indexOf(prefixes[i]) === 0) return true;
}
}
return false;
};
}, function(module, exports) {
"use strict";
exports.createDocument = function() {
return {
nodeName: "#document",
quirksMode: false,
childNodes: []
};
};
exports.createDocumentFragment = function() {
return {
nodeName: "#document-fragment",
quirksMode: false,
childNodes: []
};
};
exports.createElement = function(tagName, namespaceURI, attrs) {
return {
nodeName: tagName,
tagName: tagName,
attrs: attrs,
namespaceURI: namespaceURI,
childNodes: [],
parentNode: null
};
};
exports.createCommentNode = function(data) {
return {
nodeName: "#comment",
data: data,
parentNode: null
};
};
var createTextNode = function(value) {
return {
nodeName: "#text",
value: value,
parentNode: null
};
};
exports.setDocumentType = function(document, name, publicId, systemId) {
var doctypeNode = null;
for (var i = 0; i < document.childNodes.length; i++) {
if (document.childNodes[i].nodeName === "#documentType") {
doctypeNode = document.childNodes[i];
break;
}
}
if (doctypeNode) {
doctypeNode.name = name;
doctypeNode.publicId = publicId;
doctypeNode.systemId = systemId;
} else {
appendChild(document, {
nodeName: "#documentType",
name: name,
publicId: publicId,
systemId: systemId
});
}
};
exports.setQuirksMode = function(document) {
document.quirksMode = true;
};
exports.isQuirksMode = function(document) {
return document.quirksMode;
};
var appendChild = exports.appendChild = function(parentNode, newNode) {
parentNode.childNodes.push(newNode);
newNode.parentNode = parentNode;
};
var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
var insertionIdx = parentNode.childNodes.indexOf(referenceNode);
parentNode.childNodes.splice(insertionIdx, 0, newNode);
newNode.parentNode = parentNode;
};
exports.detachNode = function(node) {
if (node.parentNode) {
var idx = node.parentNode.childNodes.indexOf(node);
node.parentNode.childNodes.splice(idx, 1);
node.parentNode = null;
}
};
exports.insertText = function(parentNode, text) {
if (parentNode.childNodes.length) {
var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
if (prevNode.nodeName === "#text") {
prevNode.value += text;
return;
}
}
appendChild(parentNode, createTextNode(text));
};
exports.insertTextBefore = function(parentNode, text, referenceNode) {
var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
if (prevNode && prevNode.nodeName === "#text") prevNode.value += text; else insertBefore(parentNode, createTextNode(text), referenceNode);
};
exports.adoptAttributes = function(recipientNode, attrs) {
var recipientAttrsMap = [];
for (var i = 0; i < recipientNode.attrs.length; i++) recipientAttrsMap.push(recipientNode.attrs[i].name);
for (var j = 0; j < attrs.length; j++) {
if (recipientAttrsMap.indexOf(attrs[j].name) === -1) recipientNode.attrs.push(attrs[j]);
}
};
exports.getFirstChild = function(node) {
return node.childNodes[0];
};
exports.getChildNodes = function(node) {
return node.childNodes;
};
exports.getParentNode = function(node) {
return node.parentNode;
};
exports.getAttrList = function(node) {
return node.attrs;
};
exports.getTagName = function(element) {
return element.tagName;
};
exports.getNamespaceURI = function(element) {
return element.namespaceURI;
};
exports.getTextNodeContent = function(textNode) {
return textNode.value;
};
exports.getCommentNodeContent = function(commentNode) {
return commentNode.data;
};
exports.getDocumentTypeNodeName = function(doctypeNode) {
return doctypeNode.name;
};
exports.getDocumentTypeNodePublicId = function(doctypeNode) {
return doctypeNode.publicId;
};
exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
return doctypeNode.systemId;
};
exports.isTextNode = function(node) {
return node.nodeName === "#text";
};
exports.isCommentNode = function(node) {
return node.nodeName === "#comment";
};
exports.isDocumentTypeNode = function(node) {
return node.nodeName === "#documentType";
};
exports.isElementNode = function(node) {
return !!node.tagName;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(182), HTML = __webpack_require__(187);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES, ATTRS = HTML.ATTRS;
var MIME_TYPES = {
TEXT_HTML: "text/html",
APPLICATION_XML: "application/xhtml+xml"
};
var DEFINITION_URL_ATTR = "definitionurl", ADJUSTED_DEFINITION_URL_ATTR = "definitionURL", SVG_ATTRS_ADJUSTMENT_MAP = {
attributename: "attributeName",
attributetype: "attributeType",
basefrequency: "baseFrequency",
baseprofile: "baseProfile",
calcmode: "calcMode",
clippathunits: "clipPathUnits",
contentscripttype: "contentScriptType",
contentstyletype: "contentStyleType",
diffuseconstant: "diffuseConstant",
edgemode: "edgeMode",
externalresourcesrequired: "externalResourcesRequired",
filterres: "filterRes",
filterunits: "filterUnits",
glyphref: "glyphRef",
gradienttransform: "gradientTransform",
gradientunits: "gradientUnits",
kernelmatrix: "kernelMatrix",
kernelunitlength: "kernelUnitLength",
keypoints: "keyPoints",
keysplines: "keySplines",
keytimes: "keyTimes",
lengthadjust: "lengthAdjust",
limitingconeangle: "limitingConeAngle",
markerheight: "markerHeight",
markerunits: "markerUnits",
markerwidth: "markerWidth",
maskcontentunits: "maskContentUnits",
maskunits: "maskUnits",
numoctaves: "numOctaves",
pathlength: "pathLength",
patterncontentunits: "patternContentUnits",
patterntransform: "patternTransform",
patternunits: "patternUnits",
pointsatx: "pointsAtX",
pointsaty: "pointsAtY",
pointsatz: "pointsAtZ",
preservealpha: "preserveAlpha",
preserveaspectratio: "preserveAspectRatio",
primitiveunits: "primitiveUnits",
refx: "refX",
refy: "refY",
repeatcount: "repeatCount",
repeatdur: "repeatDur",
requiredextensions: "requiredExtensions",
requiredfeatures: "requiredFeatures",
specularconstant: "specularConstant",
specularexponent: "specularExponent",
spreadmethod: "spreadMethod",
startoffset: "startOffset",
stddeviation: "stdDeviation",
stitchtiles: "stitchTiles",
surfacescale: "surfaceScale",
systemlanguage: "systemLanguage",
tablevalues: "tableValues",
targetx: "targetX",
targety: "targetY",
textlength: "textLength",
viewbox: "viewBox",
viewtarget: "viewTarget",
xchannelselector: "xChannelSelector",
ychannelselector: "yChannelSelector",
zoomandpan: "zoomAndPan"
}, XML_ATTRS_ADJUSTMENT_MAP = {
"xlink:actuate": {
prefix: "xlink",
name: "actuate",
namespace: NS.XLINK
},
"xlink:arcrole": {
prefix: "xlink",
name: "arcrole",
namespace: NS.XLINK
},
"xlink:href": {
prefix: "xlink",
name: "href",
namespace: NS.XLINK
},
"xlink:role": {
prefix: "xlink",
name: "role",
namespace: NS.XLINK
},
"xlink:show": {
prefix: "xlink",
name: "show",
namespace: NS.XLINK
},
"xlink:title": {
prefix: "xlink",
name: "title",
namespace: NS.XLINK
},
"xlink:type": {
prefix: "xlink",
name: "type",
namespace: NS.XLINK
},
"xml:base": {
prefix: "xml",
name: "base",
namespace: NS.XML
},
"xml:lang": {
prefix: "xml",
name: "lang",
namespace: NS.XML
},
"xml:space": {
prefix: "xml",
name: "space",
namespace: NS.XML
},
xmlns: {
prefix: "",
name: "xmlns",
namespace: NS.XMLNS
},
"xmlns:xlink": {
prefix: "xmlns",
name: "xlink",
namespace: NS.XMLNS
}
};
var SVG_TAG_NAMES_ADJUSTMENT_MAP = {
altglyph: "altGlyph",
altglyphdef: "altGlyphDef",
altglyphitem: "altGlyphItem",
animatecolor: "animateColor",
animatemotion: "animateMotion",
animatetransform: "animateTransform",
clippath: "clipPath",
feblend: "feBlend",
fecolormatrix: "feColorMatrix",
fecomponenttransfer: "feComponentTransfer",
fecomposite: "feComposite",
feconvolvematrix: "feConvolveMatrix",
fediffuselighting: "feDiffuseLighting",
fedisplacementmap: "feDisplacementMap",
fedistantlight: "feDistantLight",
feflood: "feFlood",
fefunca: "feFuncA",
fefuncb: "feFuncB",
fefuncg: "feFuncG",
fefuncr: "feFuncR",
fegaussianblur: "feGaussianBlur",
feimage: "feImage",
femerge: "feMerge",
femergenode: "feMergeNode",
femorphology: "feMorphology",
feoffset: "feOffset",
fepointlight: "fePointLight",
fespecularlighting: "feSpecularLighting",
fespotlight: "feSpotLight",
fetile: "feTile",
feturbulence: "feTurbulence",
foreignobject: "foreignObject",
glyphref: "glyphRef",
lineargradient: "linearGradient",
radialgradient: "radialGradient",
textpath: "textPath"
};
var EXITS_FOREIGN_CONTENT = {};
EXITS_FOREIGN_CONTENT[$.B] = true;
EXITS_FOREIGN_CONTENT[$.BIG] = true;
EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
EXITS_FOREIGN_CONTENT[$.BODY] = true;
EXITS_FOREIGN_CONTENT[$.BR] = true;
EXITS_FOREIGN_CONTENT[$.CENTER] = true;
EXITS_FOREIGN_CONTENT[$.CODE] = true;
EXITS_FOREIGN_CONTENT[$.DD] = true;
EXITS_FOREIGN_CONTENT[$.DIV] = true;
EXITS_FOREIGN_CONTENT[$.DL] = true;
EXITS_FOREIGN_CONTENT[$.DT] = true;
EXITS_FOREIGN_CONTENT[$.EM] = true;
EXITS_FOREIGN_CONTENT[$.EMBED] = true;
EXITS_FOREIGN_CONTENT[$.H1] = true;
EXITS_FOREIGN_CONTENT[$.H2] = true;
EXITS_FOREIGN_CONTENT[$.H3] = true;
EXITS_FOREIGN_CONTENT[$.H4] = true;
EXITS_FOREIGN_CONTENT[$.H5] = true;
EXITS_FOREIGN_CONTENT[$.H6] = true;
EXITS_FOREIGN_CONTENT[$.HEAD] = true;
EXITS_FOREIGN_CONTENT[$.HR] = true;
EXITS_FOREIGN_CONTENT[$.I] = true;
EXITS_FOREIGN_CONTENT[$.IMG] = true;
EXITS_FOREIGN_CONTENT[$.LI] = true;
EXITS_FOREIGN_CONTENT[$.LISTING] = true;
EXITS_FOREIGN_CONTENT[$.MENU] = true;
EXITS_FOREIGN_CONTENT[$.META] = true;
EXITS_FOREIGN_CONTENT[$.NOBR] = true;
EXITS_FOREIGN_CONTENT[$.OL] = true;
EXITS_FOREIGN_CONTENT[$.P] = true;
EXITS_FOREIGN_CONTENT[$.PRE] = true;
EXITS_FOREIGN_CONTENT[$.RUBY] = true;
EXITS_FOREIGN_CONTENT[$.S] = true;
EXITS_FOREIGN_CONTENT[$.SMALL] = true;
EXITS_FOREIGN_CONTENT[$.SPAN] = true;
EXITS_FOREIGN_CONTENT[$.STRONG] = true;
EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
EXITS_FOREIGN_CONTENT[$.SUB] = true;
EXITS_FOREIGN_CONTENT[$.SUP] = true;
EXITS_FOREIGN_CONTENT[$.TABLE] = true;
EXITS_FOREIGN_CONTENT[$.TT] = true;
EXITS_FOREIGN_CONTENT[$.U] = true;
EXITS_FOREIGN_CONTENT[$.UL] = true;
EXITS_FOREIGN_CONTENT[$.VAR] = true;
exports.causesExit = function(startTagToken) {
var tn = startTagToken.tagName;
if (tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null)) {
return true;
}
return EXITS_FOREIGN_CONTENT[tn];
};
exports.adjustTokenMathMLAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
if (token.attrs[i].name === DEFINITION_URL_ATTR) {
token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
break;
}
}
};
exports.adjustTokenSVGAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
if (adjustedAttrName) token.attrs[i].name = adjustedAttrName;
}
};
exports.adjustTokenXMLAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
if (adjustedAttrEntry) {
token.attrs[i].prefix = adjustedAttrEntry.prefix;
token.attrs[i].name = adjustedAttrEntry.name;
token.attrs[i].namespace = adjustedAttrEntry.namespace;
}
}
};
exports.adjustTokenSVGTagName = function(token) {
var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
if (adjustedTagName) token.tagName = adjustedTagName;
};
exports.isMathMLTextIntegrationPoint = function(tn, ns) {
return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
};
exports.isHtmlIntegrationPoint = function(tn, ns, attrs) {
if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
for (var i = 0; i < attrs.length; i++) {
if (attrs[i].name === ATTRS.ENCODING) {
var value = attrs[i].value.toLowerCase();
return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
}
}
}
return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(182), TokenizerProxy = __webpack_require__(193);
function skip() {}
var SimpleApiParser = module.exports = function(handlers) {
this.handlers = {
doctype: handlers.doctype || skip,
startTag: handlers.startTag || skip,
endTag: handlers.endTag || skip,
text: handlers.text || skip,
comment: handlers.comment || skip
};
};
SimpleApiParser.prototype.parse = function(html) {
var token = null;
this._reset(html);
do {
token = this.tokenizerProxy.getNextToken();
if (token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
this.pendingText = (this.pendingText || "") + token.chars;
} else {
this._emitPendingText();
this._handleToken(token);
}
} while (token.type !== Tokenizer.EOF_TOKEN);
};
SimpleApiParser.prototype._handleToken = function(token) {
if (token.type === Tokenizer.START_TAG_TOKEN) this.handlers.startTag(token.tagName, token.attrs, token.selfClosing); else if (token.type === Tokenizer.END_TAG_TOKEN) this.handlers.endTag(token.tagName); else if (token.type === Tokenizer.COMMENT_TOKEN) this.handlers.comment(token.data); else if (token.type === Tokenizer.DOCTYPE_TOKEN) this.handlers.doctype(token.name, token.publicId, token.systemId);
};
SimpleApiParser.prototype._reset = function(html) {
this.tokenizerProxy = new TokenizerProxy(html);
this.pendingText = null;
};
SimpleApiParser.prototype._emitPendingText = function() {
if (this.pendingText !== null) {
this.handlers.text(this.pendingText);
this.pendingText = null;
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(182), ForeignContent = __webpack_require__(191), UNICODE = __webpack_require__(184), HTML = __webpack_require__(187);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
var TokenizerProxy = module.exports = function(html) {
this.tokenizer = new Tokenizer(html);
this.namespaceStack = [];
this.namespaceStackTop = -1;
this.currentNamespace = null;
this.inForeignContent = false;
};
TokenizerProxy.prototype.getNextToken = function() {
var token = this.tokenizer.getNextToken();
if (token.type === Tokenizer.START_TAG_TOKEN) this._handleStartTagToken(token); else if (token.type === Tokenizer.END_TAG_TOKEN) this._handleEndTagToken(token); else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
token.type = Tokenizer.CHARACTER_TOKEN;
token.chars = UNICODE.REPLACEMENT_CHARACTER;
}
return token;
};
TokenizerProxy.prototype._enterNamespace = function(namespace) {
this.namespaceStackTop++;
this.namespaceStack.push(namespace);
this.inForeignContent = namespace !== NS.HTML;
this.currentNamespace = namespace;
this.tokenizer.allowCDATA = this.inForeignContent;
};
TokenizerProxy.prototype._leaveCurrentNamespace = function() {
this.namespaceStackTop--;
this.namespaceStack.pop();
this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
this.inForeignContent = this.currentNamespace !== NS.HTML;
this.tokenizer.allowCDATA = this.inForeignContent;
};
TokenizerProxy.prototype._ensureTokenizerState = function(tn) {
if (tn === $.TEXTAREA || tn === $.TITLE) this.tokenizer.state = Tokenizer.RCDATA_STATE; else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.PLAINTEXT_STATE; else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.SCRIPT_DATA_STATE; else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
this.tokenizer.state = Tokenizer.RAWTEXT_STATE;
}
};
TokenizerProxy.prototype._handleStartTagToken = function(token) {
var tn = token.tagName;
if (tn === $.SVG) this._enterNamespace(NS.SVG); else if (tn === $.MATH) this._enterNamespace(NS.MATHML); else {
if (this.inForeignContent) {
if (ForeignContent.causesExit(token)) this._leaveCurrentNamespace(); else if (ForeignContent.isMathMLTextIntegrationPoint(tn, this.currentNamespace) || ForeignContent.isHtmlIntegrationPoint(tn, this.currentNamespace, token.attrs)) {
this._enterNamespace(NS.HTML);
}
} else this._ensureTokenizerState(tn);
}
};
TokenizerProxy.prototype._handleEndTagToken = function(token) {
var tn = token.tagName;
if (!this.inForeignContent) {
var previousNs = this.namespaceStack[this.namespaceStackTop - 1];
if (ForeignContent.isMathMLTextIntegrationPoint(tn, previousNs) || ForeignContent.isHtmlIntegrationPoint(tn, previousNs, token.attrs)) {
this._leaveCurrentNamespace();
} else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.DATA_STATE;
} else if (tn === $.SVG && this.currentNamespace === NS.SVG || tn === $.MATH && this.currentNamespace === NS.MATHML) this._leaveCurrentNamespace();
};
}, function(module, exports, __webpack_require__) {
"use strict";
var DefaultTreeAdapter = __webpack_require__(190), Utils = __webpack_require__(195), HTML = __webpack_require__(187);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
var DEFAULT_OPTIONS = {
encodeHtmlEntities: true
};
var AMP_REGEX = /&/g, NBSP_REGEX = /\u00a0/g, DOUBLE_QUOTE_REGEX = /"/g, LT_REGEX = /</g, GT_REGEX = />/g;
function escapeString(str, attrMode) {
str = str.replace(AMP_REGEX, "&amp;").replace(NBSP_REGEX, "&nbsp;");
if (attrMode) str = str.replace(DOUBLE_QUOTE_REGEX, "&quot;"); else {
str = str.replace(LT_REGEX, "&lt;").replace(GT_REGEX, "&gt;");
}
return str;
}
function enquoteDoctypeId(id) {
var quote = id.indexOf('"') !== -1 ? "'" : '"';
return quote + id + quote;
}
var Serializer = module.exports = function(treeAdapter, options) {
this.treeAdapter = treeAdapter || DefaultTreeAdapter;
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
};
Serializer.prototype.serialize = function(node) {
this.html = "";
this._serializeChildNodes(node);
return this.html;
};
Serializer.prototype._serializeChildNodes = function(parentNode) {
var childNodes = this.treeAdapter.getChildNodes(parentNode);
if (childNodes) {
for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
var currentNode = childNodes[i];
if (this.treeAdapter.isElementNode(currentNode)) this._serializeElement(currentNode); else if (this.treeAdapter.isTextNode(currentNode)) this._serializeTextNode(currentNode); else if (this.treeAdapter.isCommentNode(currentNode)) this._serializeCommentNode(currentNode); else if (this.treeAdapter.isDocumentTypeNode(currentNode)) this._serializeDocumentTypeNode(currentNode);
}
}
};
Serializer.prototype._serializeElement = function(node) {
var tn = this.treeAdapter.getTagName(node), ns = this.treeAdapter.getNamespaceURI(node), qualifiedTn = ns === NS.HTML || ns === NS.SVG || ns === NS.MATHML ? tn : ns + ":" + tn;
this.html += "<" + qualifiedTn;
this._serializeAttributes(node);
this.html += ">";
if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {
if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {
var firstChild = this.treeAdapter.getFirstChild(node);
if (firstChild && this.treeAdapter.isTextNode(firstChild)) {
var content = this.treeAdapter.getTextNodeContent(firstChild);
if (content[0] === "\n") this.html += "\n";
}
}
var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getChildNodes(node)[0] : node;
this._serializeChildNodes(childNodesHolder);
this.html += "</" + qualifiedTn + ">";
}
};
Serializer.prototype._serializeAttributes = function(node) {
var attrs = this.treeAdapter.getAttrList(node);
for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
var attr = attrs[i], value = this.options.encodeHtmlEntities ? escapeString(attr.value, true) : attr.value;
this.html += " ";
if (!attr.namespace) this.html += attr.name; else if (attr.namespace === NS.XML) this.html += "xml:" + attr.name; else if (attr.namespace === NS.XMLNS) {
if (attr.name !== "xmlns") this.html += "xmlns:";
this.html += attr.name;
} else if (attr.namespace === NS.XLINK) this.html += "xlink:" + attr.name; else this.html += attr.namespace + ":" + attr.name;
this.html += '="' + value + '"';
}
};
Serializer.prototype._serializeTextNode = function(node) {
var content = this.treeAdapter.getTextNodeContent(node), parent = this.treeAdapter.getParentNode(node), parentTn = void 0;
if (parent && this.treeAdapter.isElementNode(parent)) parentTn = this.treeAdapter.getTagName(parent);
if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {
this.html += content;
} else this.html += this.options.encodeHtmlEntities ? escapeString(content, false) : content;
};
Serializer.prototype._serializeCommentNode = function(node) {
this.html += "<!--" + this.treeAdapter.getCommentNodeContent(node) + "-->";
};
Serializer.prototype._serializeDocumentTypeNode = function(node) {
var name = this.treeAdapter.getDocumentTypeNodeName(node), publicId = this.treeAdapter.getDocumentTypeNodePublicId(node), systemId = this.treeAdapter.getDocumentTypeNodeSystemId(node);
this.html += "<!DOCTYPE " + name;
if (publicId !== null) this.html += " PUBLIC " + enquoteDoctypeId(publicId); else if (systemId !== null) this.html += " SYSTEM";
if (systemId !== null) this.html += " " + enquoteDoctypeId(systemId);
this.html += ">";
};
}, function(module, exports) {
"use strict";
exports.mergeOptions = function(defaults, options) {
options = options || {};
return [ defaults, options ].reduce(function(merged, optObj) {
Object.keys(optObj).forEach(function(key) {
merged[key] = optObj[key];
});
return merged;
}, {});
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Parser = __webpack_require__(181), ParsingUnit = __webpack_require__(197);
exports.parseDocument = function(html, treeAdapter) {
var parser = new Parser(treeAdapter), parsingUnit = new ParsingUnit(parser);
parser._runParsingLoop = function() {
parsingUnit.parsingLoopLock = true;
while (!parsingUnit.suspended && !this.stopped) this._iterateParsingLoop();
parsingUnit.parsingLoopLock = false;
if (this.stopped) parsingUnit.callback(this.document);
};
process.nextTick(function() {
parser.parse(html);
});
return parsingUnit;
};
exports.parseInnerHtml = function(innerHtml, contextElement, treeAdapter) {
var parser = new Parser(treeAdapter);
return parser.parseFragment(innerHtml, contextElement);
};
}, function(module, exports) {
"use strict";
var ParsingUnit = module.exports = function(parser) {
this.parser = parser;
this.suspended = false;
this.parsingLoopLock = false;
this.callback = null;
};
ParsingUnit.prototype._stateGuard = function(suspend) {
if (this.suspended && suspend) throw new Error("parse5: Parser was already suspended. Please, check your control flow logic."); else if (!this.suspended && !suspend) throw new Error("parse5: Parser was already resumed. Please, check your control flow logic.");
return suspend;
};
ParsingUnit.prototype.suspend = function() {
this.suspended = this._stateGuard(true);
return this;
};
ParsingUnit.prototype.resume = function() {
this.suspended = this._stateGuard(false);
if (!this.parsingLoopLock) this.parser._runParsingLoop();
return this;
};
ParsingUnit.prototype.documentWrite = function(html) {
this.parser.tokenizer.preprocessor.write(html);
return this;
};
ParsingUnit.prototype.handleScripts = function(scriptHandler) {
this.parser.scriptHandler = scriptHandler;
return this;
};
ParsingUnit.prototype.done = function(callback) {
this.callback = callback;
return this;
};
}, function(module, exports) {
"use strict";
var nodeTypes = {
element: 1,
text: 3,
cdata: 4,
comment: 8
};
var nodePropertyShorthands = {
tagName: "name",
childNodes: "children",
parentNode: "parent",
previousSibling: "prev",
nextSibling: "next",
nodeValue: "data"
};
var Node = function(props) {
for (var key in props) {
if (props.hasOwnProperty(key)) this[key] = props[key];
}
};
Node.prototype = {
get firstChild() {
var children = this.children;
return children && children[0] || null;
},
get lastChild() {
var children = this.children;
return children && children[children.length - 1] || null;
},
get nodeType() {
return nodeTypes[this.type] || nodeTypes.element;
}
};
Object.keys(nodePropertyShorthands).forEach(function(key) {
var shorthand = nodePropertyShorthands[key];
Object.defineProperty(Node.prototype, key, {
get: function() {
return this[shorthand] || null;
},
set: function(val) {
this[shorthand] = val;
return val;
}
});
});
exports.createDocument = exports.createDocumentFragment = function() {
return new Node({
type: "root",
name: "root",
parent: null,
prev: null,
next: null,
children: []
});
};
exports.createElement = function(tagName, namespaceURI, attrs) {
var attribs = {}, attribsNamespace = {}, attribsPrefix = {};
for (var i = 0; i < attrs.length; i++) {
var attrName = attrs[i].name;
attribs[attrName] = attrs[i].value;
attribsNamespace[attrName] = attrs[i].namespace;
attribsPrefix[attrName] = attrs[i].prefix;
}
return new Node({
type: tagName === "script" || tagName === "style" ? tagName : "tag",
name: tagName,
namespace: namespaceURI,
attribs: attribs,
"x-attribsNamespace": attribsNamespace,
"x-attribsPrefix": attribsPrefix,
children: [],
parent: null,
prev: null,
next: null
});
};
exports.createCommentNode = function(data) {
return new Node({
type: "comment",
data: data,
parent: null,
prev: null,
next: null
});
};
var createTextNode = function(value) {
return new Node({
type: "text",
data: value,
parent: null,
prev: null,
next: null
});
};
exports.setDocumentType = function(document, name, publicId, systemId) {
var data = "!DOCTYPE";
if (name) data += " " + name;
if (publicId) data += ' PUBLIC "' + publicId + '"';
if (systemId) data += ' "' + systemId + '"';
var doctypeNode = null;
for (var i = 0; i < document.children.length; i++) {
if (document.children[i].type === "directive" && document.children[i].name === "!doctype") {
doctypeNode = document.children[i];
break;
}
}
if (doctypeNode) {
doctypeNode.data = data;
doctypeNode["x-name"] = name;
doctypeNode["x-publicId"] = publicId;
doctypeNode["x-systemId"] = systemId;
} else {
appendChild(document, new Node({
type: "directive",
name: "!doctype",
data: data,
"x-name": name,
"x-publicId": publicId,
"x-systemId": systemId
}));
}
};
exports.setQuirksMode = function(document) {
document.quirksMode = true;
};
exports.isQuirksMode = function(document) {
return document.quirksMode;
};
var appendChild = exports.appendChild = function(parentNode, newNode) {
var prev = parentNode.children[parentNode.children.length - 1];
if (prev) {
prev.next = newNode;
newNode.prev = prev;
}
parentNode.children.push(newNode);
newNode.parent = parentNode;
};
var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
var insertionIdx = parentNode.children.indexOf(referenceNode), prev = referenceNode.prev;
if (prev) {
prev.next = newNode;
newNode.prev = prev;
}
referenceNode.prev = newNode;
newNode.next = referenceNode;
parentNode.children.splice(insertionIdx, 0, newNode);
newNode.parent = parentNode;
};
exports.detachNode = function(node) {
if (node.parent) {
var idx = node.parent.children.indexOf(node), prev = node.prev, next = node.next;
node.prev = null;
node.next = null;
if (prev) prev.next = next;
if (next) next.prev = prev;
node.parent.children.splice(idx, 1);
node.parent = null;
}
};
exports.insertText = function(parentNode, text) {
var lastChild = parentNode.children[parentNode.children.length - 1];
if (lastChild && lastChild.type === "text") lastChild.data += text; else appendChild(parentNode, createTextNode(text));
};
exports.insertTextBefore = function(parentNode, text, referenceNode) {
var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
if (prevNode && prevNode.type === "text") prevNode.data += text; else insertBefore(parentNode, createTextNode(text), referenceNode);
};
exports.adoptAttributes = function(recipientNode, attrs) {
for (var i = 0; i < attrs.length; i++) {
var attrName = attrs[i].name;
if (typeof recipientNode.attribs[attrName] === "undefined") {
recipientNode.attribs[attrName] = attrs[i].value;
recipientNode["x-attribsNamespace"][attrName] = attrs[i].namespace;
recipientNode["x-attribsPrefix"][attrName] = attrs[i].prefix;
}
}
};
exports.getFirstChild = function(node) {
return node.children[0];
};
exports.getChildNodes = function(node) {
return node.children;
};
exports.getParentNode = function(node) {
return node.parent;
};
exports.getAttrList = function(node) {
var attrList = [];
for (var name in node.attribs) {
if (node.attribs.hasOwnProperty(name)) {
attrList.push({
name: name,
value: node.attribs[name],
namespace: node["x-attribsNamespace"][name],
prefix: node["x-attribsPrefix"][name]
});
}
}
return attrList;
};
exports.getTagName = function(element) {
return element.name;
};
exports.getNamespaceURI = function(element) {
return element.namespace;
};
exports.getTextNodeContent = function(textNode) {
return textNode.data;
};
exports.getCommentNodeContent = function(commentNode) {
return commentNode.data;
};
exports.getDocumentTypeNodeName = function(doctypeNode) {
return doctypeNode["x-name"];
};
exports.getDocumentTypeNodePublicId = function(doctypeNode) {
return doctypeNode["x-publicId"];
};
exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
return doctypeNode["x-systemId"];
};
exports.isTextNode = function(node) {
return node.type === "text";
};
exports.isCommentNode = function(node) {
return node.type === "comment";
};
exports.isDocumentTypeNode = function(node) {
return node.type === "directive" && node.name === "!doctype";
};
exports.isElementNode = function(node) {
return !!node.attribs;
};
}, function(module, exports, __webpack_require__) {
var lang_facade_1 = __webpack_require__(200);
function isListLikeIterable(obj) {
if (!lang_facade_1.isJsObject(obj)) return false;
return lang_facade_1.isArray(obj) || !(obj instanceof Map) && lang_facade_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_facade_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_facade_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_facade_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_facade_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
}, function(module, exports) {
var globalScope = exports.global;
exports.global = globalScope;
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isDate(obj) {
return obj instanceof Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function print(obj) {
console.log(obj);
}
exports.print = print;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name_1 = parts.shift();
if (obj.hasOwnProperty(name_1) && isPresent(obj[name_1])) {
obj = obj[name_1];
} else {
obj = obj[name_1] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
}, function(module, exports, __webpack_require__) {
var platform_browser_1 = __webpack_require__(202);
exports.DomAdapter = platform_browser_1.__platform_browser_private__.DomAdapter;
exports.setRootDomAdapter = platform_browser_1.__platform_browser_private__.setRootDomAdapter;
exports.getDOM = platform_browser_1.__platform_browser_private__.getDOM;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(203), __webpack_require__(156)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/common", "@angular/core" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core);
})(this, function(exports, _angular_common, _angular_core) {
"use strict";
var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;
var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
var _NoOpAnimationDriver = function() {
function _NoOpAnimationDriver() {}
_NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
return new NoOpAnimationPlayer();
};
return _NoOpAnimationDriver;
}();
var AnimationDriver = function() {
function AnimationDriver() {}
AnimationDriver.NOOP = new _NoOpAnimationDriver();
return AnimationDriver;
}();
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
var global$1 = globalScope;
global$1.assert = function assert(condition) {};
function isPresent(obj) {
return obj != null;
}
function isBlank(obj) {
return obj == null;
}
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token == null) {
return "" + token;
}
if (token.overriddenName) {
return token.overriddenName;
}
if (token.name) {
return token.name;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name_1 = parts.shift();
if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
obj = obj[name_1];
} else {
obj = obj[name_1] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
var _DOM = null;
function getDOM() {
return _DOM;
}
function setRootDomAdapter(adapter) {
if (!_DOM) {
_DOM = adapter;
}
}
var DomAdapter = function() {
function DomAdapter() {
this.resourceLoaderType = null;
}
Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
get: function() {
return this._attrToPropMap;
},
set: function(value) {
this._attrToPropMap = value;
},
enumerable: true,
configurable: true
});
return DomAdapter;
}();
var WebAnimationsPlayer = function() {
function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
var _this = this;
if (previousPlayers === void 0) {
previousPlayers = [];
}
this.element = element;
this.keyframes = keyframes;
this.options = options;
this._onDoneFns = [];
this._onStartFns = [];
this._initialized = false;
this._finished = false;
this._started = false;
this._destroyed = false;
this.parentPlayer = null;
this._duration = options["duration"];
this.previousStyles = {};
previousPlayers.forEach(function(player) {
var styles = player._captureStyles();
Object.keys(styles).forEach(function(prop) {
return _this.previousStyles[prop] = styles[prop];
});
});
}
WebAnimationsPlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
}
};
WebAnimationsPlayer.prototype.init = function() {
var _this = this;
if (this._initialized) return;
this._initialized = true;
var keyframes = this.keyframes.map(function(styles) {
var formattedKeyframe = {};
Object.keys(styles).forEach(function(prop, index) {
var value = styles[prop];
if (value == _angular_core.AUTO_STYLE) {
value = _computeStyle(_this.element, prop);
}
if (value != undefined) {
formattedKeyframe[prop] = value;
}
});
return formattedKeyframe;
});
var previousStyleProps = Object.keys(this.previousStyles);
if (previousStyleProps.length) {
var startingKeyframe_1 = findStartingKeyframe(keyframes);
previousStyleProps.forEach(function(prop) {
if (isPresent(startingKeyframe_1[prop])) {
startingKeyframe_1[prop] = _this.previousStyles[prop];
}
});
}
this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
this._resetDomPlayerState();
this._player.addEventListener("finish", function() {
return _this._onFinish();
});
};
WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
return element.animate(keyframes, options);
};
Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
get: function() {
return this._player;
},
enumerable: true,
configurable: true
});
WebAnimationsPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
WebAnimationsPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
WebAnimationsPlayer.prototype.play = function() {
this.init();
if (!this.hasStarted()) {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
this._started = true;
}
this._player.play();
};
WebAnimationsPlayer.prototype.pause = function() {
this.init();
this._player.pause();
};
WebAnimationsPlayer.prototype.finish = function() {
this.init();
this._onFinish();
this._player.finish();
};
WebAnimationsPlayer.prototype.reset = function() {
this._resetDomPlayerState();
this._destroyed = false;
this._finished = false;
this._started = false;
};
WebAnimationsPlayer.prototype._resetDomPlayerState = function() {
this._player.cancel();
};
WebAnimationsPlayer.prototype.restart = function() {
this.reset();
this.play();
};
WebAnimationsPlayer.prototype.hasStarted = function() {
return this._started;
};
WebAnimationsPlayer.prototype.destroy = function() {
if (!this._destroyed) {
this._resetDomPlayerState();
this._onFinish();
this._destroyed = true;
}
};
Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
get: function() {
return this._duration;
},
enumerable: true,
configurable: true
});
WebAnimationsPlayer.prototype.setPosition = function(p) {
this._player.currentTime = p * this.totalTime;
};
WebAnimationsPlayer.prototype.getPosition = function() {
return this._player.currentTime / this.totalTime;
};
WebAnimationsPlayer.prototype._captureStyles = function() {
var _this = this;
var styles = {};
if (this.hasStarted()) {
Object.keys(this._finalKeyframe).forEach(function(prop) {
if (prop != "offset") {
styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
}
});
}
return styles;
};
return WebAnimationsPlayer;
}();
function _computeStyle(element, prop) {
return getDOM().getComputedStyle(element)[prop];
}
function _copyKeyframeStyles(styles) {
var newStyles = {};
Object.keys(styles).forEach(function(prop) {
if (prop != "offset") {
newStyles[prop] = styles[prop];
}
});
return newStyles;
}
function findStartingKeyframe(keyframes) {
var startingKeyframe = keyframes[0];
for (var i = 1; i < keyframes.length; i++) {
var kf = keyframes[i];
var offset = kf["offset"];
if (offset !== 0) break;
startingKeyframe = kf;
}
return startingKeyframe;
}
var WebAnimationsDriver = function() {
function WebAnimationsDriver() {}
WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
var formattedSteps = [];
var startingStyleLookup = {};
if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
startingStyleLookup = _populateStyles(startingStyles, {});
startingStyleLookup["offset"] = 0;
formattedSteps.push(startingStyleLookup);
}
keyframes.forEach(function(keyframe) {
var data = _populateStyles(keyframe.styles, startingStyleLookup);
data["offset"] = keyframe.offset;
formattedSteps.push(data);
});
if (formattedSteps.length == 1) {
var start = formattedSteps[0];
start["offset"] = null;
formattedSteps = [ start, start ];
}
var playerOptions = {
duration: duration,
delay: delay,
fill: "both"
};
if (easing) {
playerOptions["easing"] = easing;
}
previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
return new WebAnimationsPlayer(element, formattedSteps, playerOptions, previousPlayers);
};
return WebAnimationsDriver;
}();
function _populateStyles(styles, defaultStyles) {
var data = {};
styles.styles.forEach(function(entry) {
Object.keys(entry).forEach(function(prop) {
data[prop] = entry[prop];
});
});
Object.keys(defaultStyles).forEach(function(prop) {
if (!isPresent(data[prop])) {
data[prop] = defaultStyles[prop];
}
});
return data;
}
function filterWebAnimationPlayerFn(player) {
return player instanceof WebAnimationsPlayer;
}
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var GenericBrowserDomAdapter = function(_super) {
__extends$1(GenericBrowserDomAdapter, _super);
function GenericBrowserDomAdapter() {
var _this = this;
_super.call(this);
this._animationPrefix = null;
this._transitionEnd = null;
try {
var element_1 = this.createElement("div", this.defaultDoc());
if (isPresent(this.getStyle(element_1, "animationName"))) {
this._animationPrefix = "";
} else {
var domPrefixes = [ "Webkit", "Moz", "O", "ms" ];
for (var i = 0; i < domPrefixes.length; i++) {
if (isPresent(this.getStyle(element_1, domPrefixes[i] + "AnimationName"))) {
this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-";
break;
}
}
}
var transEndEventNames_1 = {
WebkitTransition: "webkitTransitionEnd",
MozTransition: "transitionend",
OTransition: "oTransitionEnd otransitionend",
transition: "transitionend"
};
Object.keys(transEndEventNames_1).forEach(function(key) {
if (isPresent(_this.getStyle(element_1, key))) {
_this._transitionEnd = transEndEventNames_1[key];
}
});
} catch (e) {
this._animationPrefix = null;
this._transitionEnd = null;
}
}
GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
return el.getDistributedNodes();
};
GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
el.href = href == null ? baseUrl : baseUrl + "/../" + href;
};
GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
return true;
};
GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
return typeof this.defaultDoc().body.createShadowRoot === "function";
};
GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
return this._animationPrefix ? this._animationPrefix : "";
};
GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
return this._transitionEnd ? this._transitionEnd : "";
};
GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
};
return GenericBrowserDomAdapter;
}(DomAdapter);
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _attrToPropMap = {
class: "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var DOM_KEY_LOCATION_NUMPAD = 3;
var _keyMap = {
"\b": "Backspace",
"\t": "Tab",
"": "Delete",
"": "Escape",
Del: "Delete",
Esc: "Escape",
Left: "ArrowLeft",
Right: "ArrowRight",
Up: "ArrowUp",
Down: "ArrowDown",
Menu: "ContextMenu",
Scroll: "ScrollLock",
Win: "OS"
};
var _chromeNumKeyPadMap = {
A: "1",
B: "2",
C: "3",
D: "4",
E: "5",
F: "6",
G: "7",
H: "8",
I: "9",
J: "*",
K: "+",
M: "-",
N: ".",
O: "/",
"`": "0",
"": "NumLock"
};
var BrowserDomAdapter = function(_super) {
__extends(BrowserDomAdapter, _super);
function BrowserDomAdapter() {
_super.apply(this, arguments);
}
BrowserDomAdapter.prototype.parse = function(templateHtml) {
throw new Error("parse not implemented");
};
BrowserDomAdapter.makeCurrent = function() {
setRootDomAdapter(new BrowserDomAdapter());
};
BrowserDomAdapter.prototype.hasProperty = function(element, name) {
return name in element;
};
BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
el[name] = value;
};
BrowserDomAdapter.prototype.getProperty = function(el, name) {
return el[name];
};
BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
(_a = el)[methodName].apply(_a, args);
var _a;
};
BrowserDomAdapter.prototype.logError = function(error) {
if (window.console) {
(window.console.error || window.console.log)(error);
}
};
BrowserDomAdapter.prototype.log = function(error) {
if (window.console) {
window.console.log && window.console.log(error);
}
};
BrowserDomAdapter.prototype.logGroup = function(error) {
if (window.console) {
window.console.group && window.console.group(error);
this.logError(error);
}
};
BrowserDomAdapter.prototype.logGroupEnd = function() {
if (window.console) {
window.console.groupEnd && window.console.groupEnd();
}
};
Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
get: function() {
return _attrToPropMap;
},
enumerable: true,
configurable: true
});
BrowserDomAdapter.prototype.query = function(selector) {
return document.querySelector(selector);
};
BrowserDomAdapter.prototype.querySelector = function(el, selector) {
return el.querySelector(selector);
};
BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
return el.querySelectorAll(selector);
};
BrowserDomAdapter.prototype.on = function(el, evt, listener) {
el.addEventListener(evt, listener, false);
};
BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
el.addEventListener(evt, listener, false);
return function() {
el.removeEventListener(evt, listener, false);
};
};
BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
el.dispatchEvent(evt);
};
BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
var evt = document.createEvent("MouseEvent");
evt.initEvent(eventType, true, true);
return evt;
};
BrowserDomAdapter.prototype.createEvent = function(eventType) {
var evt = document.createEvent("Event");
evt.initEvent(eventType, true, true);
return evt;
};
BrowserDomAdapter.prototype.preventDefault = function(evt) {
evt.preventDefault();
evt.returnValue = false;
};
BrowserDomAdapter.prototype.isPrevented = function(evt) {
return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
};
BrowserDomAdapter.prototype.getInnerHTML = function(el) {
return el.innerHTML;
};
BrowserDomAdapter.prototype.getTemplateContent = function(el) {
return "content" in el && el instanceof HTMLTemplateElement ? el.content : null;
};
BrowserDomAdapter.prototype.getOuterHTML = function(el) {
return el.outerHTML;
};
BrowserDomAdapter.prototype.nodeName = function(node) {
return node.nodeName;
};
BrowserDomAdapter.prototype.nodeValue = function(node) {
return node.nodeValue;
};
BrowserDomAdapter.prototype.type = function(node) {
return node.type;
};
BrowserDomAdapter.prototype.content = function(node) {
if (this.hasProperty(node, "content")) {
return node.content;
} else {
return node;
}
};
BrowserDomAdapter.prototype.firstChild = function(el) {
return el.firstChild;
};
BrowserDomAdapter.prototype.nextSibling = function(el) {
return el.nextSibling;
};
BrowserDomAdapter.prototype.parentElement = function(el) {
return el.parentNode;
};
BrowserDomAdapter.prototype.childNodes = function(el) {
return el.childNodes;
};
BrowserDomAdapter.prototype.childNodesAsList = function(el) {
var childNodes = el.childNodes;
var res = new Array(childNodes.length);
for (var i = 0; i < childNodes.length; i++) {
res[i] = childNodes[i];
}
return res;
};
BrowserDomAdapter.prototype.clearNodes = function(el) {
while (el.firstChild) {
el.removeChild(el.firstChild);
}
};
BrowserDomAdapter.prototype.appendChild = function(el, node) {
el.appendChild(node);
};
BrowserDomAdapter.prototype.removeChild = function(el, node) {
el.removeChild(node);
};
BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
el.replaceChild(newChild, oldChild);
};
BrowserDomAdapter.prototype.remove = function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
return node;
};
BrowserDomAdapter.prototype.insertBefore = function(el, node) {
el.parentNode.insertBefore(node, el);
};
BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
nodes.forEach(function(n) {
return el.parentNode.insertBefore(n, el);
});
};
BrowserDomAdapter.prototype.insertAfter = function(el, node) {
el.parentNode.insertBefore(node, el.nextSibling);
};
BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
el.innerHTML = value;
};
BrowserDomAdapter.prototype.getText = function(el) {
return el.textContent;
};
BrowserDomAdapter.prototype.setText = function(el, value) {
el.textContent = value;
};
BrowserDomAdapter.prototype.getValue = function(el) {
return el.value;
};
BrowserDomAdapter.prototype.setValue = function(el, value) {
el.value = value;
};
BrowserDomAdapter.prototype.getChecked = function(el) {
return el.checked;
};
BrowserDomAdapter.prototype.setChecked = function(el, value) {
el.checked = value;
};
BrowserDomAdapter.prototype.createComment = function(text) {
return document.createComment(text);
};
BrowserDomAdapter.prototype.createTemplate = function(html) {
var t = document.createElement("template");
t.innerHTML = html;
return t;
};
BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createElement(tagName);
};
BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createElementNS(ns, tagName);
};
BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createTextNode(text);
};
BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
if (doc === void 0) {
doc = document;
}
var el = doc.createElement("SCRIPT");
el.setAttribute(attrName, attrValue);
return el;
};
BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
if (doc === void 0) {
doc = document;
}
var style = doc.createElement("style");
this.appendChild(style, this.createTextNode(css));
return style;
};
BrowserDomAdapter.prototype.createShadowRoot = function(el) {
return el.createShadowRoot();
};
BrowserDomAdapter.prototype.getShadowRoot = function(el) {
return el.shadowRoot;
};
BrowserDomAdapter.prototype.getHost = function(el) {
return el.host;
};
BrowserDomAdapter.prototype.clone = function(node) {
return node.cloneNode(true);
};
BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
return element.getElementsByClassName(name);
};
BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
return element.getElementsByTagName(name);
};
BrowserDomAdapter.prototype.classList = function(element) {
return Array.prototype.slice.call(element.classList, 0);
};
BrowserDomAdapter.prototype.addClass = function(element, className) {
element.classList.add(className);
};
BrowserDomAdapter.prototype.removeClass = function(element, className) {
element.classList.remove(className);
};
BrowserDomAdapter.prototype.hasClass = function(element, className) {
return element.classList.contains(className);
};
BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
element.style[styleName] = styleValue;
};
BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
element.style[stylename] = "";
};
BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
return element.style[stylename];
};
BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
if (styleValue === void 0) {
styleValue = null;
}
var value = this.getStyle(element, styleName) || "";
return styleValue ? value == styleValue : value.length > 0;
};
BrowserDomAdapter.prototype.tagName = function(element) {
return element.tagName;
};
BrowserDomAdapter.prototype.attributeMap = function(element) {
var res = new Map();
var elAttrs = element.attributes;
for (var i = 0; i < elAttrs.length; i++) {
var attrib = elAttrs[i];
res.set(attrib.name, attrib.value);
}
return res;
};
BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
return element.hasAttribute(attribute);
};
BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
return element.hasAttributeNS(ns, attribute);
};
BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
return element.getAttribute(attribute);
};
BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
return element.getAttributeNS(ns, name);
};
BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
element.setAttribute(name, value);
};
BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
element.setAttributeNS(ns, name, value);
};
BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
element.removeAttribute(attribute);
};
BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
element.removeAttributeNS(ns, name);
};
BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
return this.isTemplateElement(el) ? this.content(el) : el;
};
BrowserDomAdapter.prototype.createHtmlDocument = function() {
return document.implementation.createHTMLDocument("fakeTitle");
};
BrowserDomAdapter.prototype.defaultDoc = function() {
return document;
};
BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
try {
return el.getBoundingClientRect();
} catch (e) {
return {
top: 0,
bottom: 0,
left: 0,
right: 0,
width: 0,
height: 0
};
}
};
BrowserDomAdapter.prototype.getTitle = function() {
return document.title;
};
BrowserDomAdapter.prototype.setTitle = function(newTitle) {
document.title = newTitle || "";
};
BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
if (n instanceof HTMLElement) {
return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
}
return false;
};
BrowserDomAdapter.prototype.isTemplateElement = function(el) {
return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
};
BrowserDomAdapter.prototype.isTextNode = function(node) {
return node.nodeType === Node.TEXT_NODE;
};
BrowserDomAdapter.prototype.isCommentNode = function(node) {
return node.nodeType === Node.COMMENT_NODE;
};
BrowserDomAdapter.prototype.isElementNode = function(node) {
return node.nodeType === Node.ELEMENT_NODE;
};
BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
return isPresent(node.shadowRoot) && node instanceof HTMLElement;
};
BrowserDomAdapter.prototype.isShadowRoot = function(node) {
return node instanceof DocumentFragment;
};
BrowserDomAdapter.prototype.importIntoDoc = function(node) {
return document.importNode(this.templateAwareRoot(node), true);
};
BrowserDomAdapter.prototype.adoptNode = function(node) {
return document.adoptNode(node);
};
BrowserDomAdapter.prototype.getHref = function(el) {
return el.href;
};
BrowserDomAdapter.prototype.getEventKey = function(event) {
var key = event.key;
if (isBlank(key)) {
key = event.keyIdentifier;
if (isBlank(key)) {
return "Unidentified";
}
if (key.startsWith("U+")) {
key = String.fromCharCode(parseInt(key.substring(2), 16));
if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
key = _chromeNumKeyPadMap[key];
}
}
}
return _keyMap[key] || key;
};
BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
if (target === "window") {
return window;
}
if (target === "document") {
return document;
}
if (target === "body") {
return document.body;
}
};
BrowserDomAdapter.prototype.getHistory = function() {
return window.history;
};
BrowserDomAdapter.prototype.getLocation = function() {
return window.location;
};
BrowserDomAdapter.prototype.getBaseHref = function() {
var href = getBaseElementHref();
return isBlank(href) ? null : relativePath(href);
};
BrowserDomAdapter.prototype.resetBaseElement = function() {
baseElement = null;
};
BrowserDomAdapter.prototype.getUserAgent = function() {
return window.navigator.userAgent;
};
BrowserDomAdapter.prototype.setData = function(element, name, value) {
this.setAttribute(element, "data-" + name, value);
};
BrowserDomAdapter.prototype.getData = function(element, name) {
return this.getAttribute(element, "data-" + name);
};
BrowserDomAdapter.prototype.getComputedStyle = function(element) {
return getComputedStyle(element);
};
BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
setValueOnPath(global$1, path, value);
};
BrowserDomAdapter.prototype.supportsWebAnimation = function() {
return typeof Element.prototype["animate"] === "function";
};
BrowserDomAdapter.prototype.performanceNow = function() {
return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
};
BrowserDomAdapter.prototype.supportsCookies = function() {
return true;
};
BrowserDomAdapter.prototype.getCookie = function(name) {
return parseCookieValue(document.cookie, name);
};
BrowserDomAdapter.prototype.setCookie = function(name, value) {
document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
};
return BrowserDomAdapter;
}(GenericBrowserDomAdapter);
var baseElement = null;
function getBaseElementHref() {
if (!baseElement) {
baseElement = document.querySelector("base");
if (!baseElement) {
return null;
}
}
return baseElement.getAttribute("href");
}
var urlParsingNode;
function relativePath(url) {
if (!urlParsingNode) {
urlParsingNode = document.createElement("a");
}
urlParsingNode.setAttribute("href", url);
return urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname;
}
function parseCookieValue(cookieStr, name) {
name = encodeURIComponent(name);
for (var _i = 0, _a = cookieStr.split(";"); _i < _a.length; _i++) {
var cookie = _a[_i];
var eqIndex = cookie.indexOf("=");
var _b = eqIndex == -1 ? [ cookie, "" ] : [ cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1) ], cookieName = _b[0], cookieValue = _b[1];
if (cookieName.trim() === name) {
return decodeURIComponent(cookieValue);
}
}
return null;
}
function supportsState() {
return !!window.history.pushState;
}
var __extends$2 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BrowserPlatformLocation = function(_super) {
__extends$2(BrowserPlatformLocation, _super);
function BrowserPlatformLocation() {
_super.call(this);
this._init();
}
BrowserPlatformLocation.prototype._init = function() {
this._location = getDOM().getLocation();
this._history = getDOM().getHistory();
};
Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
get: function() {
return this._location;
},
enumerable: true,
configurable: true
});
BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
return getDOM().getBaseHref();
};
BrowserPlatformLocation.prototype.onPopState = function(fn) {
getDOM().getGlobalEventTarget("window").addEventListener("popstate", fn, false);
};
BrowserPlatformLocation.prototype.onHashChange = function(fn) {
getDOM().getGlobalEventTarget("window").addEventListener("hashchange", fn, false);
};
Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
get: function() {
return this._location.pathname;
},
set: function(newPath) {
this._location.pathname = newPath;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
get: function() {
return this._location.search;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
get: function() {
return this._location.hash;
},
enumerable: true,
configurable: true
});
BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
if (supportsState()) {
this._history.pushState(state, title, url);
} else {
this._location.hash = url;
}
};
BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
if (supportsState()) {
this._history.replaceState(state, title, url);
} else {
this._location.hash = url;
}
};
BrowserPlatformLocation.prototype.forward = function() {
this._history.forward();
};
BrowserPlatformLocation.prototype.back = function() {
this._history.back();
};
BrowserPlatformLocation.decorators = [ {
type: _angular_core.Injectable
} ];
BrowserPlatformLocation.ctorParameters = [];
return BrowserPlatformLocation;
}(_angular_common.PlatformLocation);
var BrowserGetTestability = function() {
function BrowserGetTestability() {}
BrowserGetTestability.init = function() {
_angular_core.setTestabilityGetter(new BrowserGetTestability());
};
BrowserGetTestability.prototype.addToWindow = function(registry) {
global$1.getAngularTestability = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
var testability = registry.findTestabilityInTree(elem, findInAncestors);
if (testability == null) {
throw new Error("Could not find testability for element.");
}
return testability;
};
global$1.getAllAngularTestabilities = function() {
return registry.getAllTestabilities();
};
global$1.getAllAngularRootElements = function() {
return registry.getAllRootElements();
};
var whenAllStable = function(callback) {
var testabilities = global$1.getAllAngularTestabilities();
var count = testabilities.length;
var didWork = false;
var decrement = function(didWork_) {
didWork = didWork || didWork_;
count--;
if (count == 0) {
callback(didWork);
}
};
testabilities.forEach(function(testability) {
testability.whenStable(decrement);
});
};
if (!global$1["frameworkStabilizers"]) {
global$1["frameworkStabilizers"] = [];
}
global$1["frameworkStabilizers"].push(whenAllStable);
};
BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
if (elem == null) {
return null;
}
var t = registry.getTestability(elem);
if (isPresent(t)) {
return t;
} else if (!findInAncestors) {
return null;
}
if (getDOM().isShadowRoot(elem)) {
return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
}
return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
};
return BrowserGetTestability;
}();
var Title = function() {
function Title() {}
Title.prototype.getTitle = function() {
return getDOM().getTitle();
};
Title.prototype.setTitle = function(newTitle) {
getDOM().setTitle(newTitle);
};
return Title;
}();
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
var k = _a[_i];
m[k] = m1[k];
}
for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
var k = _c[_b];
m[k] = m2[k];
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
for (var i = 0; i < k1.length; i++) {
var key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
var DOCUMENT = new _angular_core.OpaqueToken("DocumentToken");
var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken("EventManagerPlugins");
var EventManager = function() {
function EventManager(plugins, _zone) {
var _this = this;
this._zone = _zone;
this._eventNameToPlugin = new Map();
plugins.forEach(function(p) {
return p.manager = _this;
});
this._plugins = plugins.slice().reverse();
}
EventManager.prototype.addEventListener = function(element, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addEventListener(element, eventName, handler);
};
EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addGlobalEventListener(target, eventName, handler);
};
EventManager.prototype.getZone = function() {
return this._zone;
};
EventManager.prototype._findPluginFor = function(eventName) {
var plugin = this._eventNameToPlugin.get(eventName);
if (plugin) {
return plugin;
}
var plugins = this._plugins;
for (var i = 0; i < plugins.length; i++) {
var plugin_1 = plugins[i];
if (plugin_1.supports(eventName)) {
this._eventNameToPlugin.set(eventName, plugin_1);
return plugin_1;
}
}
throw new Error("No event manager plugin found for event " + eventName);
};
EventManager.decorators = [ {
type: _angular_core.Injectable
} ];
EventManager.ctorParameters = [ {
type: Array,
decorators: [ {
type: _angular_core.Inject,
args: [ EVENT_MANAGER_PLUGINS ]
} ]
}, {
type: _angular_core.NgZone
} ];
return EventManager;
}();
var EventManagerPlugin = function() {
function EventManagerPlugin() {}
EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
var target = getDOM().getGlobalEventTarget(element);
if (!target) {
throw new Error("Unsupported event target " + target + " for event " + eventName);
}
return this.addEventListener(target, eventName, handler);
};
return EventManagerPlugin;
}();
var __extends$4 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SharedStylesHost = function() {
function SharedStylesHost() {
this._styles = [];
this._stylesSet = new Set();
}
SharedStylesHost.prototype.addStyles = function(styles) {
var _this = this;
var additions = [];
styles.forEach(function(style) {
if (!_this._stylesSet.has(style)) {
_this._stylesSet.add(style);
_this._styles.push(style);
additions.push(style);
}
});
this.onStylesAdded(additions);
};
SharedStylesHost.prototype.onStylesAdded = function(additions) {};
SharedStylesHost.prototype.getAllStyles = function() {
return this._styles;
};
SharedStylesHost.decorators = [ {
type: _angular_core.Injectable
} ];
SharedStylesHost.ctorParameters = [];
return SharedStylesHost;
}();
var DomSharedStylesHost = function(_super) {
__extends$4(DomSharedStylesHost, _super);
function DomSharedStylesHost(doc) {
_super.call(this);
this._hostNodes = new Set();
this._hostNodes.add(doc.head);
}
DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
for (var i = 0; i < styles.length; i++) {
var styleEl = document.createElement("style");
styleEl.textContent = styles[i];
host.appendChild(styleEl);
}
};
DomSharedStylesHost.prototype.addHost = function(hostNode) {
this._addStylesToHost(this._styles, hostNode);
this._hostNodes.add(hostNode);
};
DomSharedStylesHost.prototype.removeHost = function(hostNode) {
this._hostNodes.delete(hostNode);
};
DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
var _this = this;
this._hostNodes.forEach(function(hostNode) {
_this._addStylesToHost(additions, hostNode);
});
};
DomSharedStylesHost.decorators = [ {
type: _angular_core.Injectable
} ];
DomSharedStylesHost.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
return DomSharedStylesHost;
}(SharedStylesHost);
var __extends$3 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NAMESPACE_URIS = {
xlink: "http://www.w3.org/1999/xlink",
svg: "http://www.w3.org/2000/svg",
xhtml: "http://www.w3.org/1999/xhtml"
};
var TEMPLATE_COMMENT_TEXT = "template bindings={}";
var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
var DomRootRenderer = function() {
function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
this.document = document;
this.eventManager = eventManager;
this.sharedStylesHost = sharedStylesHost;
this.animationDriver = animationDriver;
this.appId = appId;
this.registeredComponents = new Map();
}
DomRootRenderer.prototype.renderComponent = function(componentProto) {
var renderer = this.registeredComponents.get(componentProto.id);
if (!renderer) {
renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
this.registeredComponents.set(componentProto.id, renderer);
}
return renderer;
};
return DomRootRenderer;
}();
var DomRootRenderer_ = function(_super) {
__extends$3(DomRootRenderer_, _super);
function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
_super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
}
DomRootRenderer_.decorators = [ {
type: _angular_core.Injectable
} ];
DomRootRenderer_.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
}, {
type: EventManager
}, {
type: DomSharedStylesHost
}, {
type: AnimationDriver
}, {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.APP_ID ]
} ]
} ];
return DomRootRenderer_;
}(DomRootRenderer);
var DIRECT_DOM_RENDERER = {
remove: function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
},
appendChild: function(node, parent) {
parent.appendChild(node);
},
insertBefore: function(node, refNode) {
refNode.parentNode.insertBefore(node, refNode);
},
nextSibling: function(node) {
return node.nextSibling;
},
parentElement: function(node) {
return node.parentNode;
}
};
var DomRenderer = function() {
function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
this._rootRenderer = _rootRenderer;
this.componentProto = componentProto;
this._animationDriver = _animationDriver;
this.directRenderer = DIRECT_DOM_RENDERER;
this._styles = flattenStyles(styleShimId, componentProto.styles, []);
if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {
this._rootRenderer.sharedStylesHost.addStyles(this._styles);
}
if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {
this._contentAttr = shimContentAttribute(styleShimId);
this._hostAttr = shimHostAttribute(styleShimId);
} else {
this._contentAttr = null;
this._hostAttr = null;
}
}
DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
var el;
if (typeof selectorOrNode === "string") {
el = this._rootRenderer.document.querySelector(selectorOrNode);
if (!el) {
throw new Error('The selector "' + selectorOrNode + '" did not match any elements');
}
} else {
el = selectorOrNode;
}
while (el.firstChild) {
el.removeChild(el.firstChild);
}
return el;
};
DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
var el;
if (isNamespaced(name)) {
var nsAndName = splitNamespace(name);
el = document.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]);
} else {
el = document.createElement(name);
}
if (this._contentAttr) {
el.setAttribute(this._contentAttr, "");
}
if (parent) {
parent.appendChild(el);
}
return el;
};
DomRenderer.prototype.createViewRoot = function(hostElement) {
var nodesParent;
if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
nodesParent = hostElement.createShadowRoot();
this._rootRenderer.sharedStylesHost.addHost(nodesParent);
for (var i = 0; i < this._styles.length; i++) {
var styleEl = document.createElement("style");
styleEl.textContent = this._styles[i];
nodesParent.appendChild(styleEl);
}
} else {
if (this._hostAttr) {
hostElement.setAttribute(this._hostAttr, "");
}
nodesParent = hostElement;
}
return nodesParent;
};
DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
var comment = document.createComment(TEMPLATE_COMMENT_TEXT);
if (parentElement) {
parentElement.appendChild(comment);
}
return comment;
};
DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
var node = document.createTextNode(value);
if (parentElement) {
parentElement.appendChild(node);
}
return node;
};
DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
if (!parentElement) return;
appendNodes(parentElement, nodes);
};
DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
moveNodesAfterSibling(node, viewRootNodes);
};
DomRenderer.prototype.detachView = function(viewRootNodes) {
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
if (node.parentNode) {
node.parentNode.removeChild(node);
}
}
};
DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && hostElement) {
this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);
}
};
DomRenderer.prototype.listen = function(renderElement, name, callback) {
return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
};
DomRenderer.prototype.listenGlobal = function(target, name, callback) {
return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
};
DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
renderElement[propertyName] = propertyValue;
};
DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
var attrNs;
var attrNameWithoutNs = attributeName;
if (isNamespaced(attributeName)) {
var nsAndName = splitNamespace(attributeName);
attrNameWithoutNs = nsAndName[1];
attributeName = nsAndName[0] + ":" + nsAndName[1];
attrNs = NAMESPACE_URIS[nsAndName[0]];
}
if (isPresent(attributeValue)) {
if (attrNs) {
renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
} else {
renderElement.setAttribute(attributeName, attributeValue);
}
} else {
if (isPresent(attrNs)) {
renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
} else {
renderElement.removeAttribute(attributeName);
}
}
};
DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
if (renderElement.nodeType === Node.COMMENT_NODE) {
var existingBindings = renderElement.nodeValue.replace(/\n/g, "").match(TEMPLATE_BINDINGS_EXP);
var parsedBindings = JSON.parse(existingBindings[1]);
parsedBindings[propertyName] = propertyValue;
renderElement.nodeValue = TEMPLATE_COMMENT_TEXT.replace("{}", JSON.stringify(parsedBindings, null, 2));
} else {
this.setElementAttribute(renderElement, propertyName, propertyValue);
}
};
DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
if (isAdd) {
renderElement.classList.add(className);
} else {
renderElement.classList.remove(className);
}
};
DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
if (isPresent(styleValue)) {
renderElement.style[styleName] = stringify(styleValue);
} else {
renderElement.style[styleName] = "";
}
};
DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
renderElement[methodName].apply(renderElement, args);
};
DomRenderer.prototype.setText = function(renderNode, text) {
renderNode.nodeValue = text;
};
DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
};
return DomRenderer;
}();
function moveNodesAfterSibling(sibling, nodes) {
var parent = sibling.parentNode;
if (nodes.length > 0 && parent) {
var nextSibling = sibling.nextSibling;
if (nextSibling) {
for (var i = 0; i < nodes.length; i++) {
parent.insertBefore(nodes[i], nextSibling);
}
} else {
for (var i = 0; i < nodes.length; i++) {
parent.appendChild(nodes[i]);
}
}
}
}
function appendNodes(parent, nodes) {
for (var i = 0; i < nodes.length; i++) {
parent.appendChild(nodes[i]);
}
}
function decoratePreventDefault(eventHandler) {
return function(event) {
var allowDefaultBehavior = eventHandler(event);
if (allowDefaultBehavior === false) {
event.preventDefault();
event.returnValue = false;
}
};
}
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
function shimContentAttribute(componentShortId) {
return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function flattenStyles(compId, styles, target) {
for (var i = 0; i < styles.length; i++) {
var style = styles[i];
if (Array.isArray(style)) {
flattenStyles(compId, style, target);
} else {
style = style.replace(COMPONENT_REGEX, compId);
target.push(style);
}
}
return target;
}
var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
function isNamespaced(name) {
return name[0] === ":";
}
function splitNamespace(name) {
var match = name.match(NS_PREFIX_RE);
return [ match[1], match[2] ];
}
var CORE_TOKENS = {
ApplicationRef: _angular_core.ApplicationRef,
NgZone: _angular_core.NgZone
};
var INSPECT_GLOBAL_NAME = "ng.probe";
var CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens";
function inspectNativeElement(element) {
return _angular_core.getDebugNode(element);
}
var NgProbeToken = function() {
function NgProbeToken(name, token) {
this.name = name;
this.token = token;
}
return NgProbeToken;
}();
function _createConditionalRootRenderer(rootRenderer, extraTokens) {
if (_angular_core.isDevMode()) {
return _createRootRenderer(rootRenderer, extraTokens);
}
return rootRenderer;
}
function _createRootRenderer(rootRenderer, extraTokens) {
getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
return new DebugDomRootRenderer(rootRenderer);
}
function _ngProbeTokensToMap(tokens) {
return tokens.reduce(function(prev, t) {
return prev[t.name] = t.token, prev;
}, {});
}
var ELEMENT_PROBE_PROVIDERS = [ {
provide: _angular_core.RootRenderer,
useFactory: _createConditionalRootRenderer,
deps: [ DomRootRenderer, [ NgProbeToken, new _angular_core.Optional() ] ]
} ];
var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [ {
provide: _angular_core.RootRenderer,
useFactory: _createRootRenderer,
deps: [ DomRootRenderer, [ NgProbeToken, new _angular_core.Optional() ] ]
} ];
var __extends$5 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DomEventsPlugin = function(_super) {
__extends$5(DomEventsPlugin, _super);
function DomEventsPlugin() {
_super.apply(this, arguments);
}
DomEventsPlugin.prototype.supports = function(eventName) {
return true;
};
DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
element.addEventListener(eventName, handler, false);
return function() {
return element.removeEventListener(eventName, handler, false);
};
};
DomEventsPlugin.decorators = [ {
type: _angular_core.Injectable
} ];
DomEventsPlugin.ctorParameters = [];
return DomEventsPlugin;
}(EventManagerPlugin);
var __extends$6 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EVENT_NAMES = {
pan: true,
panstart: true,
panmove: true,
panend: true,
pancancel: true,
panleft: true,
panright: true,
panup: true,
pandown: true,
pinch: true,
pinchstart: true,
pinchmove: true,
pinchend: true,
pinchcancel: true,
pinchin: true,
pinchout: true,
press: true,
pressup: true,
rotate: true,
rotatestart: true,
rotatemove: true,
rotateend: true,
rotatecancel: true,
swipe: true,
swipeleft: true,
swiperight: true,
swipeup: true,
swipedown: true,
tap: true
};
var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken("HammerGestureConfig");
var HammerGestureConfig = function() {
function HammerGestureConfig() {
this.events = [];
this.overrides = {};
}
HammerGestureConfig.prototype.buildHammer = function(element) {
var mc = new Hammer(element);
mc.get("pinch").set({
enable: true
});
mc.get("rotate").set({
enable: true
});
for (var eventName in this.overrides) {
mc.get(eventName).set(this.overrides[eventName]);
}
return mc;
};
HammerGestureConfig.decorators = [ {
type: _angular_core.Injectable
} ];
HammerGestureConfig.ctorParameters = [];
return HammerGestureConfig;
}();
var HammerGesturesPlugin = function(_super) {
__extends$6(HammerGesturesPlugin, _super);
function HammerGesturesPlugin(_config) {
_super.call(this);
this._config = _config;
}
HammerGesturesPlugin.prototype.supports = function(eventName) {
if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
return false;
}
if (!window.Hammer) {
throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
}
return true;
};
HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
var _this = this;
var zone = this.manager.getZone();
eventName = eventName.toLowerCase();
return zone.runOutsideAngular(function() {
var mc = _this._config.buildHammer(element);
var callback = function(eventObj) {
zone.runGuarded(function() {
handler(eventObj);
});
};
mc.on(eventName, callback);
return function() {
return mc.off(eventName, callback);
};
});
};
HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
return this._config.events.indexOf(eventName) > -1;
};
HammerGesturesPlugin.decorators = [ {
type: _angular_core.Injectable
} ];
HammerGesturesPlugin.ctorParameters = [ {
type: HammerGestureConfig,
decorators: [ {
type: _angular_core.Inject,
args: [ HAMMER_GESTURE_CONFIG ]
} ]
} ];
return HammerGesturesPlugin;
}(EventManagerPlugin);
var __extends$7 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MODIFIER_KEYS = [ "alt", "control", "meta", "shift" ];
var MODIFIER_KEY_GETTERS = {
alt: function(event) {
return event.altKey;
},
control: function(event) {
return event.ctrlKey;
},
meta: function(event) {
return event.metaKey;
},
shift: function(event) {
return event.shiftKey;
}
};
var KeyEventsPlugin = function(_super) {
__extends$7(KeyEventsPlugin, _super);
function KeyEventsPlugin() {
_super.call(this);
}
KeyEventsPlugin.prototype.supports = function(eventName) {
return KeyEventsPlugin.parseEventName(eventName) != null;
};
KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
return this.manager.getZone().runOutsideAngular(function() {
return getDOM().onAndCancel(element, parsedEvent["domEventName"], outsideHandler);
});
};
KeyEventsPlugin.parseEventName = function(eventName) {
var parts = eventName.toLowerCase().split(".");
var domEventName = parts.shift();
if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
return null;
}
var key = KeyEventsPlugin._normalizeKey(parts.pop());
var fullKey = "";
MODIFIER_KEYS.forEach(function(modifierName) {
var index = parts.indexOf(modifierName);
if (index > -1) {
parts.splice(index, 1);
fullKey += modifierName + ".";
}
});
fullKey += key;
if (parts.length != 0 || key.length === 0) {
return null;
}
var result = {};
result["domEventName"] = domEventName;
result["fullKey"] = fullKey;
return result;
};
KeyEventsPlugin.getEventFullKey = function(event) {
var fullKey = "";
var key = getDOM().getEventKey(event);
key = key.toLowerCase();
if (key === " ") {
key = "space";
} else if (key === ".") {
key = "dot";
}
MODIFIER_KEYS.forEach(function(modifierName) {
if (modifierName != key) {
var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
if (modifierGetter(event)) {
fullKey += modifierName + ".";
}
}
});
fullKey += key;
return fullKey;
};
KeyEventsPlugin.eventCallback = function(fullKey, handler, zone) {
return function(event) {
if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
zone.runGuarded(function() {
return handler(event);
});
}
};
};
KeyEventsPlugin._normalizeKey = function(keyName) {
switch (keyName) {
case "esc":
return "escape";

default:
return keyName;
}
};
KeyEventsPlugin.decorators = [ {
type: _angular_core.Injectable
} ];
KeyEventsPlugin.ctorParameters = [];
return KeyEventsPlugin;
}(EventManagerPlugin);
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi;
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
function sanitizeUrl(url) {
url = String(url);
if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;
if (_angular_core.isDevMode()) {
getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
}
return "unsafe:" + url;
}
function sanitizeSrcset(srcset) {
srcset = String(srcset);
return srcset.split(",").map(function(srcset) {
return sanitizeUrl(srcset.trim());
}).join(", ");
}
var inertElement = null;
var DOM = null;
function getInertElement() {
if (inertElement) return inertElement;
DOM = getDOM();
var templateEl = DOM.createElement("template");
if ("content" in templateEl) return templateEl;
var doc = DOM.createHtmlDocument();
inertElement = DOM.querySelector(doc, "body");
if (inertElement == null) {
var html = DOM.createElement("html", doc);
inertElement = DOM.createElement("body", doc);
DOM.appendChild(html, inertElement);
DOM.appendChild(doc, html);
}
return inertElement;
}
function tagSet(tags) {
var res = {};
for (var _i = 0, _a = tags.split(","); _i < _a.length; _i++) {
var t = _a[_i];
res[t] = true;
}
return res;
}
function merge() {
var sets = [];
for (var _i = 0; _i < arguments.length; _i++) {
sets[_i - 0] = arguments[_i];
}
var res = {};
for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
var s = sets_1[_a];
for (var v in s) {
if (s.hasOwnProperty(v)) res[v] = true;
}
}
return res;
}
var VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article," + "aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," + "h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b," + "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s," + "samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
var URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
var SRCSET_ATTRS = tagSet("srcset");
var HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan," + "compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace," + "ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules," + "scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap," + "valign,value,vspace,width");
var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
var SanitizingHtmlSerializer = function() {
function SanitizingHtmlSerializer() {
this.sanitizedSomething = false;
this.buf = [];
}
SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
var current = el.firstChild;
while (current) {
if (DOM.isElementNode(current)) {
this.startElement(current);
} else if (DOM.isTextNode(current)) {
this.chars(DOM.nodeValue(current));
} else {
this.sanitizedSomething = true;
}
if (DOM.firstChild(current)) {
current = DOM.firstChild(current);
continue;
}
while (current) {
if (DOM.isElementNode(current)) {
this.endElement(current);
}
if (DOM.nextSibling(current)) {
current = DOM.nextSibling(current);
break;
}
current = DOM.parentElement(current);
}
}
return this.buf.join("");
};
SanitizingHtmlSerializer.prototype.startElement = function(element) {
var _this = this;
var tagName = DOM.nodeName(element).toLowerCase();
if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
this.sanitizedSomething = true;
return;
}
this.buf.push("<");
this.buf.push(tagName);
DOM.attributeMap(element).forEach(function(value, attrName) {
var lower = attrName.toLowerCase();
if (!VALID_ATTRS.hasOwnProperty(lower)) {
_this.sanitizedSomething = true;
return;
}
if (URI_ATTRS[lower]) value = sanitizeUrl(value);
if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
_this.buf.push(" ");
_this.buf.push(attrName);
_this.buf.push('="');
_this.buf.push(encodeEntities(value));
_this.buf.push('"');
});
this.buf.push(">");
};
SanitizingHtmlSerializer.prototype.endElement = function(current) {
var tagName = DOM.nodeName(current).toLowerCase();
if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
this.buf.push("</");
this.buf.push(tagName);
this.buf.push(">");
}
};
SanitizingHtmlSerializer.prototype.chars = function(chars) {
this.buf.push(encodeEntities(chars));
};
return SanitizingHtmlSerializer;
}();
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
function encodeEntities(value) {
return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match) {
var hi = match.charCodeAt(0);
var low = match.charCodeAt(1);
return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
}).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
return "&#" + match.charCodeAt(0) + ";";
}).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function stripCustomNsAttrs(el) {
DOM.attributeMap(el).forEach(function(_, attrName) {
if (attrName === "xmlns:ns1" || attrName.indexOf("ns1:") === 0) {
DOM.removeAttribute(el, attrName);
}
});
for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
var n = _a[_i];
if (DOM.isElementNode(n)) stripCustomNsAttrs(n);
}
}
function sanitizeHtml(unsafeHtmlInput) {
try {
var containerEl = getInertElement();
var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
var mXSSAttempts = 5;
var parsedHtml = unsafeHtml;
do {
if (mXSSAttempts === 0) {
throw new Error("Failed to sanitize html because the input is unstable");
}
mXSSAttempts--;
unsafeHtml = parsedHtml;
DOM.setInnerHTML(containerEl, unsafeHtml);
if (DOM.defaultDoc().documentMode) {
stripCustomNsAttrs(containerEl);
}
parsedHtml = DOM.getInnerHTML(containerEl);
} while (unsafeHtml !== parsedHtml);
var sanitizer = new SanitizingHtmlSerializer();
var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
var child = _a[_i];
DOM.removeChild(parent_1, child);
}
if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
DOM.log("WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).");
}
return safeHtml;
} catch (e) {
inertElement = null;
throw e;
}
}
var VALUES = "[-,.\"'%_!# a-zA-Z0-9]+";
var TRANSFORMATION_FNS = "(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?";
var COLOR_FNS = "(?:rgb|hsl)a?";
var FN_ARGS = "\\([-0-9.%, a-zA-Z]+\\)";
var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", "g");
var URL_RE = /^url\(([^)]+)\)$/;
function hasBalancedQuotes(value) {
var outsideSingle = true;
var outsideDouble = true;
for (var i = 0; i < value.length; i++) {
var c = value.charAt(i);
if (c === "'" && outsideDouble) {
outsideSingle = !outsideSingle;
} else if (c === '"' && outsideSingle) {
outsideDouble = !outsideDouble;
}
}
return outsideSingle && outsideDouble;
}
function sanitizeStyle(value) {
value = String(value).trim();
if (!value) return "";
var urlMatch = value.match(URL_RE);
if (urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
return value;
}
if (_angular_core.isDevMode()) {
getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
}
return "unsafe";
}
var __extends$8 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DomSanitizer = function() {
function DomSanitizer() {}
return DomSanitizer;
}();
var DomSanitizerImpl = function(_super) {
__extends$8(DomSanitizerImpl, _super);
function DomSanitizerImpl() {
_super.apply(this, arguments);
}
DomSanitizerImpl.prototype.sanitize = function(ctx, value) {
if (value == null) return null;
switch (ctx) {
case _angular_core.SecurityContext.NONE:
return value;

case _angular_core.SecurityContext.HTML:
if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "HTML");
return sanitizeHtml(String(value));

case _angular_core.SecurityContext.STYLE:
if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "Style");
return sanitizeStyle(value);

case _angular_core.SecurityContext.SCRIPT:
if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "Script");
throw new Error("unsafe value used in a script context");

case _angular_core.SecurityContext.URL:
if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
return value.changingThisBreaksApplicationSecurity;
}
this.checkNotSafeValue(value, "URL");
return sanitizeUrl(String(value));

case _angular_core.SecurityContext.RESOURCE_URL:
if (value instanceof SafeResourceUrlImpl) {
return value.changingThisBreaksApplicationSecurity;
}
this.checkNotSafeValue(value, "ResourceURL");
throw new Error("unsafe value used in a resource URL context (see http://g.co/ng/security#xss)");

default:
throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
}
};
DomSanitizerImpl.prototype.checkNotSafeValue = function(value, expectedType) {
if (value instanceof SafeValueImpl) {
throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " + "(see http://g.co/ng/security#xss)");
}
};
DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function(value) {
return new SafeHtmlImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function(value) {
return new SafeStyleImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustScript = function(value) {
return new SafeScriptImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function(value) {
return new SafeUrlImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
return new SafeResourceUrlImpl(value);
};
DomSanitizerImpl.decorators = [ {
type: _angular_core.Injectable
} ];
DomSanitizerImpl.ctorParameters = [];
return DomSanitizerImpl;
}(DomSanitizer);
var SafeValueImpl = function() {
function SafeValueImpl(changingThisBreaksApplicationSecurity) {
this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
}
SafeValueImpl.prototype.toString = function() {
return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
};
return SafeValueImpl;
}();
var SafeHtmlImpl = function(_super) {
__extends$8(SafeHtmlImpl, _super);
function SafeHtmlImpl() {
_super.apply(this, arguments);
}
SafeHtmlImpl.prototype.getTypeName = function() {
return "HTML";
};
return SafeHtmlImpl;
}(SafeValueImpl);
var SafeStyleImpl = function(_super) {
__extends$8(SafeStyleImpl, _super);
function SafeStyleImpl() {
_super.apply(this, arguments);
}
SafeStyleImpl.prototype.getTypeName = function() {
return "Style";
};
return SafeStyleImpl;
}(SafeValueImpl);
var SafeScriptImpl = function(_super) {
__extends$8(SafeScriptImpl, _super);
function SafeScriptImpl() {
_super.apply(this, arguments);
}
SafeScriptImpl.prototype.getTypeName = function() {
return "Script";
};
return SafeScriptImpl;
}(SafeValueImpl);
var SafeUrlImpl = function(_super) {
__extends$8(SafeUrlImpl, _super);
function SafeUrlImpl() {
_super.apply(this, arguments);
}
SafeUrlImpl.prototype.getTypeName = function() {
return "URL";
};
return SafeUrlImpl;
}(SafeValueImpl);
var SafeResourceUrlImpl = function(_super) {
__extends$8(SafeResourceUrlImpl, _super);
function SafeResourceUrlImpl() {
_super.apply(this, arguments);
}
SafeResourceUrlImpl.prototype.getTypeName = function() {
return "ResourceURL";
};
return SafeResourceUrlImpl;
}(SafeValueImpl);
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [ {
provide: _angular_core.PLATFORM_INITIALIZER,
useValue: initDomAdapter,
multi: true
}, {
provide: _angular_common.PlatformLocation,
useClass: BrowserPlatformLocation
} ];
var BROWSER_SANITIZATION_PROVIDERS = [ {
provide: _angular_core.Sanitizer,
useExisting: DomSanitizer
}, {
provide: DomSanitizer,
useClass: DomSanitizerImpl
} ];
var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
function initDomAdapter() {
BrowserDomAdapter.makeCurrent();
BrowserGetTestability.init();
}
function errorHandler() {
return new _angular_core.ErrorHandler();
}
function _document() {
return getDOM().defaultDoc();
}
function _resolveDefaultAnimationDriver() {
if (getDOM().supportsWebAnimation()) {
return new WebAnimationsDriver();
}
return AnimationDriver.NOOP;
}
var BrowserModule = function() {
function BrowserModule(parentModule) {
if (parentModule) {
throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
}
}
BrowserModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
providers: [ BROWSER_SANITIZATION_PROVIDERS, {
provide: _angular_core.ErrorHandler,
useFactory: errorHandler,
deps: []
}, {
provide: DOCUMENT,
useFactory: _document,
deps: []
}, {
provide: EVENT_MANAGER_PLUGINS,
useClass: DomEventsPlugin,
multi: true
}, {
provide: EVENT_MANAGER_PLUGINS,
useClass: KeyEventsPlugin,
multi: true
}, {
provide: EVENT_MANAGER_PLUGINS,
useClass: HammerGesturesPlugin,
multi: true
}, {
provide: HAMMER_GESTURE_CONFIG,
useClass: HammerGestureConfig
}, {
provide: DomRootRenderer,
useClass: DomRootRenderer_
}, {
provide: _angular_core.RootRenderer,
useExisting: DomRootRenderer
}, {
provide: SharedStylesHost,
useExisting: DomSharedStylesHost
}, {
provide: AnimationDriver,
useFactory: _resolveDefaultAnimationDriver
}, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title ],
exports: [ _angular_common.CommonModule, _angular_core.ApplicationModule ]
} ]
} ];
BrowserModule.ctorParameters = [ {
type: BrowserModule,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.SkipSelf
} ]
} ];
return BrowserModule;
}();
var win = typeof window !== "undefined" && window || {};
var ChangeDetectionPerfRecord = function() {
function ChangeDetectionPerfRecord(msPerTick, numTicks) {
this.msPerTick = msPerTick;
this.numTicks = numTicks;
}
return ChangeDetectionPerfRecord;
}();
var AngularTools = function() {
function AngularTools(ref) {
this.profiler = new AngularProfiler(ref);
}
return AngularTools;
}();
var AngularProfiler = function() {
function AngularProfiler(ref) {
this.appRef = ref.injector.get(_angular_core.ApplicationRef);
}
AngularProfiler.prototype.timeChangeDetection = function(config) {
var record = config && config["record"];
var profileName = "Change Detection";
var isProfilerAvailable = isPresent(win.console.profile);
if (record && isProfilerAvailable) {
win.console.profile(profileName);
}
var start = getDOM().performanceNow();
var numTicks = 0;
while (numTicks < 5 || getDOM().performanceNow() - start < 500) {
this.appRef.tick();
numTicks++;
}
var end = getDOM().performanceNow();
if (record && isProfilerAvailable) {
win.console.profileEnd(profileName);
}
var msPerTick = (end - start) / numTicks;
win.console.log("ran " + numTicks + " change detection cycles");
win.console.log(msPerTick.toFixed(2) + " ms per check");
return new ChangeDetectionPerfRecord(msPerTick, numTicks);
};
return AngularProfiler;
}();
var context = global$1;
function enableDebugTools(ref) {
Object.assign(context.ng, new AngularTools(ref));
return ref;
}
function disableDebugTools() {
if (context.ng) {
delete context.ng.profiler;
}
}
var By = function() {
function By() {}
By.all = function() {
return function(debugElement) {
return true;
};
};
By.css = function(selector) {
return function(debugElement) {
return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
};
};
By.directive = function(type) {
return function(debugElement) {
return debugElement.providerTokens.indexOf(type) !== -1;
};
};
return By;
}();
var __platform_browser_private__ = {
BrowserPlatformLocation: BrowserPlatformLocation,
DomAdapter: DomAdapter,
BrowserDomAdapter: BrowserDomAdapter,
BrowserGetTestability: BrowserGetTestability,
getDOM: getDOM,
setRootDomAdapter: setRootDomAdapter,
DomRootRenderer_: DomRootRenderer_,
DomRootRenderer: DomRootRenderer,
NAMESPACE_URIS: NAMESPACE_URIS,
shimContentAttribute: shimContentAttribute,
shimHostAttribute: shimHostAttribute,
flattenStyles: flattenStyles,
splitNamespace: splitNamespace,
isNamespaced: isNamespaced,
DomSharedStylesHost: DomSharedStylesHost,
SharedStylesHost: SharedStylesHost,
ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
DomEventsPlugin: DomEventsPlugin,
KeyEventsPlugin: KeyEventsPlugin,
HammerGesturesPlugin: HammerGesturesPlugin,
initDomAdapter: initDomAdapter,
INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
WebAnimationsDriver: WebAnimationsDriver
};
exports.BrowserModule = BrowserModule;
exports.platformBrowser = platformBrowser;
exports.Title = Title;
exports.disableDebugTools = disableDebugTools;
exports.enableDebugTools = enableDebugTools;
exports.AnimationDriver = AnimationDriver;
exports.By = By;
exports.NgProbeToken = NgProbeToken;
exports.DOCUMENT = DOCUMENT;
exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
exports.EventManager = EventManager;
exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
exports.HammerGestureConfig = HammerGestureConfig;
exports.DomSanitizer = DomSanitizer;
exports.__platform_browser_private__ = __platform_browser_private__;
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(156)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.common = global.ng.common || {}), global.ng.core);
})(this, function(exports, _angular_core) {
"use strict";
var PlatformLocation = function() {
function PlatformLocation() {}
Object.defineProperty(PlatformLocation.prototype, "pathname", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformLocation.prototype, "search", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformLocation.prototype, "hash", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return PlatformLocation;
}();
var LocationStrategy = function() {
function LocationStrategy() {}
return LocationStrategy;
}();
var APP_BASE_HREF = new _angular_core.OpaqueToken("appBaseHref");
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
var _global = globalScope;
function getTypeNameForDebugging(type) {
return type["name"] || typeof type;
}
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj != null;
}
function isBlank(obj) {
return obj == null;
}
function isDate(obj) {
return obj instanceof Date && !isNaN(obj.valueOf());
}
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token == null) {
return "" + token;
}
if (token.overriddenName) {
return token.overriddenName;
}
if (token.name) {
return token.name;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new Error("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.isNumeric = function(value) {
return !isNaN(value - parseFloat(value));
};
return NumberWrapper;
}();
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
var _symbolIterator = null;
function getSymbolIterator() {
if (!_symbolIterator) {
if (globalScope.Symbol && Symbol.iterator) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
var Location = function() {
function Location(platformStrategy) {
var _this = this;
this._subject = new _angular_core.EventEmitter();
this._platformStrategy = platformStrategy;
var browserBaseHref = this._platformStrategy.getBaseHref();
this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
this._platformStrategy.onPopState(function(ev) {
_this._subject.emit({
url: _this.path(true),
pop: true,
type: ev.type
});
});
}
Location.prototype.path = function(includeHash) {
if (includeHash === void 0) {
includeHash = false;
}
return this.normalize(this._platformStrategy.path(includeHash));
};
Location.prototype.isCurrentPathEqualTo = function(path, query) {
if (query === void 0) {
query = "";
}
return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
};
Location.prototype.normalize = function(url) {
return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
};
Location.prototype.prepareExternalUrl = function(url) {
if (url.length > 0 && !url.startsWith("/")) {
url = "/" + url;
}
return this._platformStrategy.prepareExternalUrl(url);
};
Location.prototype.go = function(path, query) {
if (query === void 0) {
query = "";
}
this._platformStrategy.pushState(null, "", path, query);
};
Location.prototype.replaceState = function(path, query) {
if (query === void 0) {
query = "";
}
this._platformStrategy.replaceState(null, "", path, query);
};
Location.prototype.forward = function() {
this._platformStrategy.forward();
};
Location.prototype.back = function() {
this._platformStrategy.back();
};
Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
if (onThrow === void 0) {
onThrow = null;
}
if (onReturn === void 0) {
onReturn = null;
}
return this._subject.subscribe({
next: onNext,
error: onThrow,
complete: onReturn
});
};
Location.normalizeQueryParams = function(params) {
return params.length > 0 && params.substring(0, 1) != "?" ? "?" + params : params;
};
Location.joinWithSlash = function(start, end) {
if (start.length == 0) {
return end;
}
if (end.length == 0) {
return start;
}
var slashes = 0;
if (start.endsWith("/")) {
slashes++;
}
if (end.startsWith("/")) {
slashes++;
}
if (slashes == 2) {
return start + end.substring(1);
}
if (slashes == 1) {
return start + end;
}
return start + "/" + end;
};
Location.stripTrailingSlash = function(url) {
if (/\/$/g.test(url)) {
url = url.substring(0, url.length - 1);
}
return url;
};
Location.decorators = [ {
type: _angular_core.Injectable
} ];
Location.ctorParameters = [ {
type: LocationStrategy
} ];
return Location;
}();
function _stripBaseHref(baseHref, url) {
if (baseHref.length > 0 && url.startsWith(baseHref)) {
return url.substring(baseHref.length);
}
return url;
}
function _stripIndexHtml(url) {
if (/\/index.html$/g.test(url)) {
return url.substring(0, url.length - 11);
}
return url;
}
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var HashLocationStrategy = function(_super) {
__extends(HashLocationStrategy, _super);
function HashLocationStrategy(_platformLocation, _baseHref) {
_super.call(this);
this._platformLocation = _platformLocation;
this._baseHref = "";
if (isPresent(_baseHref)) {
this._baseHref = _baseHref;
}
}
HashLocationStrategy.prototype.onPopState = function(fn) {
this._platformLocation.onPopState(fn);
this._platformLocation.onHashChange(fn);
};
HashLocationStrategy.prototype.getBaseHref = function() {
return this._baseHref;
};
HashLocationStrategy.prototype.path = function(includeHash) {
if (includeHash === void 0) {
includeHash = false;
}
var path = this._platformLocation.hash;
if (!isPresent(path)) path = "#";
return path.length > 0 ? path.substring(1) : path;
};
HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
var url = Location.joinWithSlash(this._baseHref, internal);
return url.length > 0 ? "#" + url : url;
};
HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
if (url.length == 0) {
url = this._platformLocation.pathname;
}
this._platformLocation.pushState(state, title, url);
};
HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
if (url.length == 0) {
url = this._platformLocation.pathname;
}
this._platformLocation.replaceState(state, title, url);
};
HashLocationStrategy.prototype.forward = function() {
this._platformLocation.forward();
};
HashLocationStrategy.prototype.back = function() {
this._platformLocation.back();
};
HashLocationStrategy.decorators = [ {
type: _angular_core.Injectable
} ];
HashLocationStrategy.ctorParameters = [ {
type: PlatformLocation
}, {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ APP_BASE_HREF ]
} ]
} ];
return HashLocationStrategy;
}(LocationStrategy);
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PathLocationStrategy = function(_super) {
__extends$1(PathLocationStrategy, _super);
function PathLocationStrategy(_platformLocation, href) {
_super.call(this);
this._platformLocation = _platformLocation;
if (isBlank(href)) {
href = this._platformLocation.getBaseHrefFromDOM();
}
if (isBlank(href)) {
throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
}
this._baseHref = href;
}
PathLocationStrategy.prototype.onPopState = function(fn) {
this._platformLocation.onPopState(fn);
this._platformLocation.onHashChange(fn);
};
PathLocationStrategy.prototype.getBaseHref = function() {
return this._baseHref;
};
PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
return Location.joinWithSlash(this._baseHref, internal);
};
PathLocationStrategy.prototype.path = function(includeHash) {
if (includeHash === void 0) {
includeHash = false;
}
var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
var hash = this._platformLocation.hash;
return hash && includeHash ? "" + pathname + hash : pathname;
};
PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
this._platformLocation.pushState(state, title, externalUrl);
};
PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
this._platformLocation.replaceState(state, title, externalUrl);
};
PathLocationStrategy.prototype.forward = function() {
this._platformLocation.forward();
};
PathLocationStrategy.prototype.back = function() {
this._platformLocation.back();
};
PathLocationStrategy.decorators = [ {
type: _angular_core.Injectable
} ];
PathLocationStrategy.ctorParameters = [ {
type: PlatformLocation
}, {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ APP_BASE_HREF ]
} ]
} ];
return PathLocationStrategy;
}(LocationStrategy);
var __extends$2 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NgLocalization = function() {
function NgLocalization() {}
return NgLocalization;
}();
function getPluralCategory(value, cases, ngLocalization) {
var nbCase = "=" + value;
return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
}
var NgLocaleLocalization = function(_super) {
__extends$2(NgLocaleLocalization, _super);
function NgLocaleLocalization(_locale) {
_super.call(this);
this._locale = _locale;
}
NgLocaleLocalization.prototype.getPluralCategory = function(value) {
var plural = getPluralCase(this._locale, value);
switch (plural) {
case Plural.Zero:
return "zero";

case Plural.One:
return "one";

case Plural.Two:
return "two";

case Plural.Few:
return "few";

case Plural.Many:
return "many";

default:
return "other";
}
};
NgLocaleLocalization.decorators = [ {
type: _angular_core.Injectable
} ];
NgLocaleLocalization.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
return NgLocaleLocalization;
}(NgLocalization);
var Plural;
(function(Plural) {
Plural[Plural["Zero"] = 0] = "Zero";
Plural[Plural["One"] = 1] = "One";
Plural[Plural["Two"] = 2] = "Two";
Plural[Plural["Few"] = 3] = "Few";
Plural[Plural["Many"] = 4] = "Many";
Plural[Plural["Other"] = 5] = "Other";
})(Plural || (Plural = {}));
function getPluralCase(locale, nLike) {
if (typeof nLike === "string") {
nLike = parseInt(nLike, 10);
}
var n = nLike;
var nDecimal = n.toString().replace(/^[^.]*\.?/, "");
var i = Math.floor(Math.abs(n));
var v = nDecimal.length;
var f = parseInt(nDecimal, 10);
var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ""), 10) || 0;
var lang = locale.split("-")[0].toLowerCase();
switch (lang) {
case "af":
case "asa":
case "az":
case "bem":
case "bez":
case "bg":
case "brx":
case "ce":
case "cgg":
case "chr":
case "ckb":
case "ee":
case "el":
case "eo":
case "es":
case "eu":
case "fo":
case "fur":
case "gsw":
case "ha":
case "haw":
case "hu":
case "jgo":
case "jmc":
case "ka":
case "kk":
case "kkj":
case "kl":
case "ks":
case "ksb":
case "ky":
case "lb":
case "lg":
case "mas":
case "mgo":
case "ml":
case "mn":
case "nb":
case "nd":
case "ne":
case "nn":
case "nnh":
case "nyn":
case "om":
case "or":
case "os":
case "ps":
case "rm":
case "rof":
case "rwk":
case "saq":
case "seh":
case "sn":
case "so":
case "sq":
case "ta":
case "te":
case "teo":
case "tk":
case "tr":
case "ug":
case "uz":
case "vo":
case "vun":
case "wae":
case "xog":
if (n === 1) return Plural.One;
return Plural.Other;

case "agq":
case "bas":
case "cu":
case "dav":
case "dje":
case "dua":
case "dyo":
case "ebu":
case "ewo":
case "guz":
case "kam":
case "khq":
case "ki":
case "kln":
case "kok":
case "ksf":
case "lrc":
case "lu":
case "luo":
case "luy":
case "mer":
case "mfe":
case "mgh":
case "mua":
case "mzn":
case "nmg":
case "nus":
case "qu":
case "rn":
case "rw":
case "sbp":
case "twq":
case "vai":
case "yav":
case "yue":
case "zgh":
case "ak":
case "ln":
case "mg":
case "pa":
case "ti":
if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;
return Plural.Other;

case "am":
case "as":
case "bn":
case "fa":
case "gu":
case "hi":
case "kn":
case "mr":
case "zu":
if (i === 0 || n === 1) return Plural.One;
return Plural.Other;

case "ar":
if (n === 0) return Plural.Zero;
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;
if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;
return Plural.Other;

case "ast":
case "ca":
case "de":
case "en":
case "et":
case "fi":
case "fy":
case "gl":
case "it":
case "nl":
case "sv":
case "sw":
case "ur":
case "yi":
if (i === 1 && v === 0) return Plural.One;
return Plural.Other;

case "be":
if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;
if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14)) return Plural.Few;
if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14) return Plural.Many;
return Plural.Other;

case "br":
if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;
if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;
if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99)) return Plural.Few;
if (!(n === 0) && n % 1e6 === 0) return Plural.Many;
return Plural.Other;

case "bs":
case "hr":
case "sr":
if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11)) return Plural.One;
if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14)) return Plural.Few;
return Plural.Other;

case "cs":
case "sk":
if (i === 1 && v === 0) return Plural.One;
if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;
if (!(v === 0)) return Plural.Many;
return Plural.Other;

case "cy":
if (n === 0) return Plural.Zero;
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
if (n === 3) return Plural.Few;
if (n === 6) return Plural.Many;
return Plural.Other;

case "da":
if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;
return Plural.Other;

case "dsb":
case "hsb":
if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;
if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;
if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4) return Plural.Few;
return Plural.Other;

case "ff":
case "fr":
case "hy":
case "kab":
if (i === 0 || i === 1) return Plural.One;
return Plural.Other;

case "fil":
if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9)) return Plural.One;
return Plural.Other;

case "ga":
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;
if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;
return Plural.Other;

case "gd":
if (n === 1 || n === 11) return Plural.One;
if (n === 2 || n === 12) return Plural.Two;
if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;
return Plural.Other;

case "gv":
if (v === 0 && i % 10 === 1) return Plural.One;
if (v === 0 && i % 10 === 2) return Plural.Two;
if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80)) return Plural.Few;
if (!(v === 0)) return Plural.Many;
return Plural.Other;

case "he":
if (i === 1 && v === 0) return Plural.One;
if (i === 2 && v === 0) return Plural.Two;
if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;
return Plural.Other;

case "is":
if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;
return Plural.Other;

case "ksh":
if (n === 0) return Plural.Zero;
if (n === 1) return Plural.One;
return Plural.Other;

case "kw":
case "naq":
case "se":
case "smn":
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
return Plural.Other;

case "lag":
if (n === 0) return Plural.Zero;
if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;
return Plural.Other;

case "lt":
if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;
if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.Few;
if (!(f === 0)) return Plural.Many;
return Plural.Other;

case "lv":
case "prg":
if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return Plural.Zero;
if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1) return Plural.One;
return Plural.Other;

case "mk":
if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;
return Plural.Other;

case "mt":
if (n === 1) return Plural.One;
if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10) return Plural.Few;
if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;
return Plural.Other;

case "pl":
if (i === 1 && v === 0) return Plural.One;
if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14) return Plural.Many;
return Plural.Other;

case "pt":
if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;
return Plural.Other;

case "ro":
if (i === 1 && v === 0) return Plural.One;
if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return Plural.Few;
return Plural.Other;

case "ru":
case "uk":
if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;
if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14) return Plural.Many;
return Plural.Other;

case "shi":
if (i === 0 || n === 1) return Plural.One;
if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;
return Plural.Other;

case "si":
if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;
return Plural.Other;

case "sl":
if (v === 0 && i % 100 === 1) return Plural.One;
if (v === 0 && i % 100 === 2) return Plural.Two;
if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0)) return Plural.Few;
return Plural.Other;

case "tzm":
if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99) return Plural.One;
return Plural.Other;

default:
return Plural.Other;
}
}
function isListLikeIterable(obj) {
if (!isJsObject(obj)) return false;
return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj;
}
var NgClass = function() {
function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
this._iterableDiffers = _iterableDiffers;
this._keyValueDiffers = _keyValueDiffers;
this._ngEl = _ngEl;
this._renderer = _renderer;
this._initialClasses = [];
}
Object.defineProperty(NgClass.prototype, "klass", {
set: function(v) {
this._applyInitialClasses(true);
this._initialClasses = typeof v === "string" ? v.split(/\s+/) : [];
this._applyInitialClasses(false);
this._applyClasses(this._rawClass, false);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgClass.prototype, "ngClass", {
set: function(v) {
this._cleanupClasses(this._rawClass);
this._iterableDiffer = null;
this._keyValueDiffer = null;
this._rawClass = typeof v === "string" ? v.split(/\s+/) : v;
if (this._rawClass) {
if (isListLikeIterable(this._rawClass)) {
this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
} else {
this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
}
}
},
enumerable: true,
configurable: true
});
NgClass.prototype.ngDoCheck = function() {
if (this._iterableDiffer) {
var changes = this._iterableDiffer.diff(this._rawClass);
if (changes) {
this._applyIterableChanges(changes);
}
} else if (this._keyValueDiffer) {
var changes = this._keyValueDiffer.diff(this._rawClass);
if (changes) {
this._applyKeyValueChanges(changes);
}
}
};
NgClass.prototype._cleanupClasses = function(rawClassVal) {
this._applyClasses(rawClassVal, true);
this._applyInitialClasses(false);
};
NgClass.prototype._applyKeyValueChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
return _this._toggleClass(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
return _this._toggleClass(record.key, record.currentValue);
});
changes.forEachRemovedItem(function(record) {
if (record.previousValue) {
_this._toggleClass(record.key, false);
}
});
};
NgClass.prototype._applyIterableChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
if (typeof record.item === "string") {
_this._toggleClass(record.item, true);
} else {
throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
}
});
changes.forEachRemovedItem(function(record) {
return _this._toggleClass(record.item, false);
});
};
NgClass.prototype._applyInitialClasses = function(isCleanup) {
var _this = this;
this._initialClasses.forEach(function(klass) {
return _this._toggleClass(klass, !isCleanup);
});
};
NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
var _this = this;
if (rawClassVal) {
if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
rawClassVal.forEach(function(klass) {
return _this._toggleClass(klass, !isCleanup);
});
} else {
Object.keys(rawClassVal).forEach(function(klass) {
if (isPresent(rawClassVal[klass])) _this._toggleClass(klass, !isCleanup);
});
}
}
};
NgClass.prototype._toggleClass = function(klass, enabled) {
var _this = this;
klass = klass.trim();
if (klass) {
klass.split(/\s+/g).forEach(function(klass) {
_this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled);
});
}
};
NgClass.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngClass]"
} ]
} ];
NgClass.ctorParameters = [ {
type: _angular_core.IterableDiffers
}, {
type: _angular_core.KeyValueDiffers
}, {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
} ];
NgClass.propDecorators = {
klass: [ {
type: _angular_core.Input,
args: [ "class" ]
} ],
ngClass: [ {
type: _angular_core.Input
} ]
};
return NgClass;
}();
var NgForRow = function() {
function NgForRow($implicit, index, count) {
this.$implicit = $implicit;
this.index = index;
this.count = count;
}
Object.defineProperty(NgForRow.prototype, "first", {
get: function() {
return this.index === 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForRow.prototype, "last", {
get: function() {
return this.index === this.count - 1;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForRow.prototype, "even", {
get: function() {
return this.index % 2 === 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForRow.prototype, "odd", {
get: function() {
return !this.even;
},
enumerable: true,
configurable: true
});
return NgForRow;
}();
var NgFor = function() {
function NgFor(_viewContainer, _template, _differs, _cdr) {
this._viewContainer = _viewContainer;
this._template = _template;
this._differs = _differs;
this._cdr = _cdr;
this._differ = null;
}
Object.defineProperty(NgFor.prototype, "ngForTemplate", {
set: function(value) {
if (value) {
this._template = value;
}
},
enumerable: true,
configurable: true
});
NgFor.prototype.ngOnChanges = function(changes) {
if ("ngForOf" in changes) {
var value = changes["ngForOf"].currentValue;
if (!this._differ && value) {
try {
this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
} catch (e) {
throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
}
}
}
};
NgFor.prototype.ngDoCheck = function() {
if (this._differ) {
var changes = this._differ.diff(this.ngForOf);
if (changes) this._applyChanges(changes);
}
};
NgFor.prototype._applyChanges = function(changes) {
var _this = this;
var insertTuples = [];
changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
if (item.previousIndex == null) {
var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
var tuple = new RecordViewTuple(item, view);
insertTuples.push(tuple);
} else if (currentIndex == null) {
_this._viewContainer.remove(adjustedPreviousIndex);
} else {
var view = _this._viewContainer.get(adjustedPreviousIndex);
_this._viewContainer.move(view, currentIndex);
var tuple = new RecordViewTuple(item, view);
insertTuples.push(tuple);
}
});
for (var i = 0; i < insertTuples.length; i++) {
this._perViewChange(insertTuples[i].view, insertTuples[i].record);
}
for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
var viewRef = this._viewContainer.get(i);
viewRef.context.index = i;
viewRef.context.count = ilen;
}
changes.forEachIdentityChange(function(record) {
var viewRef = _this._viewContainer.get(record.currentIndex);
viewRef.context.$implicit = record.item;
});
};
NgFor.prototype._perViewChange = function(view, record) {
view.context.$implicit = record.item;
};
NgFor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngFor][ngForOf]"
} ]
} ];
NgFor.ctorParameters = [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
}, {
type: _angular_core.IterableDiffers
}, {
type: _angular_core.ChangeDetectorRef
} ];
NgFor.propDecorators = {
ngForOf: [ {
type: _angular_core.Input
} ],
ngForTrackBy: [ {
type: _angular_core.Input
} ],
ngForTemplate: [ {
type: _angular_core.Input
} ]
};
return NgFor;
}();
var RecordViewTuple = function() {
function RecordViewTuple(record, view) {
this.record = record;
this.view = view;
}
return RecordViewTuple;
}();
var NgIf = function() {
function NgIf(_viewContainer, _template) {
this._viewContainer = _viewContainer;
this._template = _template;
this._hasView = false;
}
Object.defineProperty(NgIf.prototype, "ngIf", {
set: function(condition) {
if (condition && !this._hasView) {
this._hasView = true;
this._viewContainer.createEmbeddedView(this._template);
} else if (!condition && this._hasView) {
this._hasView = false;
this._viewContainer.clear();
}
},
enumerable: true,
configurable: true
});
NgIf.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngIf]"
} ]
} ];
NgIf.ctorParameters = [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
} ];
NgIf.propDecorators = {
ngIf: [ {
type: _angular_core.Input
} ]
};
return NgIf;
}();
var SwitchView = function() {
function SwitchView(_viewContainerRef, _templateRef) {
this._viewContainerRef = _viewContainerRef;
this._templateRef = _templateRef;
this._created = false;
}
SwitchView.prototype.create = function() {
this._created = true;
this._viewContainerRef.createEmbeddedView(this._templateRef);
};
SwitchView.prototype.destroy = function() {
this._created = false;
this._viewContainerRef.clear();
};
SwitchView.prototype.enforceState = function(created) {
if (created && !this._created) {
this.create();
} else if (!created && this._created) {
this.destroy();
}
};
return SwitchView;
}();
var NgSwitch = function() {
function NgSwitch() {
this._defaultUsed = false;
this._caseCount = 0;
this._lastCaseCheckIndex = 0;
this._lastCasesMatched = false;
}
Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
set: function(newValue) {
this._ngSwitch = newValue;
if (this._caseCount === 0) {
this._updateDefaultCases(true);
}
},
enumerable: true,
configurable: true
});
NgSwitch.prototype._addCase = function() {
return this._caseCount++;
};
NgSwitch.prototype._addDefault = function(view) {
if (!this._defaultViews) {
this._defaultViews = [];
}
this._defaultViews.push(view);
};
NgSwitch.prototype._matchCase = function(value) {
var matched = value == this._ngSwitch;
this._lastCasesMatched = this._lastCasesMatched || matched;
this._lastCaseCheckIndex++;
if (this._lastCaseCheckIndex === this._caseCount) {
this._updateDefaultCases(!this._lastCasesMatched);
this._lastCaseCheckIndex = 0;
this._lastCasesMatched = false;
}
return matched;
};
NgSwitch.prototype._updateDefaultCases = function(useDefault) {
if (this._defaultViews && useDefault !== this._defaultUsed) {
this._defaultUsed = useDefault;
for (var i = 0; i < this._defaultViews.length; i++) {
var defaultView = this._defaultViews[i];
defaultView.enforceState(useDefault);
}
}
};
NgSwitch.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngSwitch]"
} ]
} ];
NgSwitch.ctorParameters = [];
NgSwitch.propDecorators = {
ngSwitch: [ {
type: _angular_core.Input
} ]
};
return NgSwitch;
}();
var NgSwitchCase = function() {
function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
this.ngSwitch = ngSwitch;
ngSwitch._addCase();
this._view = new SwitchView(viewContainer, templateRef);
}
NgSwitchCase.prototype.ngDoCheck = function() {
this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
};
NgSwitchCase.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngSwitchCase]"
} ]
} ];
NgSwitchCase.ctorParameters = [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
}, {
type: NgSwitch,
decorators: [ {
type: _angular_core.Host
} ]
} ];
NgSwitchCase.propDecorators = {
ngSwitchCase: [ {
type: _angular_core.Input
} ]
};
return NgSwitchCase;
}();
var NgSwitchDefault = function() {
function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
}
NgSwitchDefault.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngSwitchDefault]"
} ]
} ];
NgSwitchDefault.ctorParameters = [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
}, {
type: NgSwitch,
decorators: [ {
type: _angular_core.Host
} ]
} ];
return NgSwitchDefault;
}();
var NgPlural = function() {
function NgPlural(_localization) {
this._localization = _localization;
this._caseViews = {};
}
Object.defineProperty(NgPlural.prototype, "ngPlural", {
set: function(value) {
this._switchValue = value;
this._updateView();
},
enumerable: true,
configurable: true
});
NgPlural.prototype.addCase = function(value, switchView) {
this._caseViews[value] = switchView;
};
NgPlural.prototype._updateView = function() {
this._clearViews();
var cases = Object.keys(this._caseViews);
var key = getPluralCategory(this._switchValue, cases, this._localization);
this._activateView(this._caseViews[key]);
};
NgPlural.prototype._clearViews = function() {
if (this._activeView) this._activeView.destroy();
};
NgPlural.prototype._activateView = function(view) {
if (view) {
this._activeView = view;
this._activeView.create();
}
};
NgPlural.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngPlural]"
} ]
} ];
NgPlural.ctorParameters = [ {
type: NgLocalization
} ];
NgPlural.propDecorators = {
ngPlural: [ {
type: _angular_core.Input
} ]
};
return NgPlural;
}();
var NgPluralCase = function() {
function NgPluralCase(value, template, viewContainer, ngPlural) {
this.value = value;
ngPlural.addCase(value, new SwitchView(viewContainer, template));
}
NgPluralCase.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngPluralCase]"
} ]
} ];
NgPluralCase.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Attribute,
args: [ "ngPluralCase" ]
} ]
}, {
type: _angular_core.TemplateRef
}, {
type: _angular_core.ViewContainerRef
}, {
type: NgPlural,
decorators: [ {
type: _angular_core.Host
} ]
} ];
return NgPluralCase;
}();
var NgStyle = function() {
function NgStyle(_differs, _ngEl, _renderer) {
this._differs = _differs;
this._ngEl = _ngEl;
this._renderer = _renderer;
}
Object.defineProperty(NgStyle.prototype, "ngStyle", {
set: function(v) {
this._ngStyle = v;
if (!this._differ && v) {
this._differ = this._differs.find(v).create(null);
}
},
enumerable: true,
configurable: true
});
NgStyle.prototype.ngDoCheck = function() {
if (this._differ) {
var changes = this._differ.diff(this._ngStyle);
if (changes) {
this._applyChanges(changes);
}
}
};
NgStyle.prototype._applyChanges = function(changes) {
var _this = this;
changes.forEachRemovedItem(function(record) {
return _this._setStyle(record.key, null);
});
changes.forEachAddedItem(function(record) {
return _this._setStyle(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
return _this._setStyle(record.key, record.currentValue);
});
};
NgStyle.prototype._setStyle = function(nameAndUnit, value) {
var _a = nameAndUnit.split("."), name = _a[0], unit = _a[1];
value = value && unit ? "" + value + unit : value;
this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
};
NgStyle.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngStyle]"
} ]
} ];
NgStyle.ctorParameters = [ {
type: _angular_core.KeyValueDiffers
}, {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
} ];
NgStyle.propDecorators = {
ngStyle: [ {
type: _angular_core.Input
} ]
};
return NgStyle;
}();
var NgTemplateOutlet = function() {
function NgTemplateOutlet(_viewContainerRef) {
this._viewContainerRef = _viewContainerRef;
}
Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
set: function(context) {
this._context = context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
set: function(templateRef) {
this._templateRef = templateRef;
},
enumerable: true,
configurable: true
});
NgTemplateOutlet.prototype.ngOnChanges = function(changes) {
if (this._viewRef) {
this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
}
if (this._templateRef) {
this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
}
};
NgTemplateOutlet.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngTemplateOutlet]"
} ]
} ];
NgTemplateOutlet.ctorParameters = [ {
type: _angular_core.ViewContainerRef
} ];
NgTemplateOutlet.propDecorators = {
ngOutletContext: [ {
type: _angular_core.Input
} ],
ngTemplateOutlet: [ {
type: _angular_core.Input
} ]
};
return NgTemplateOutlet;
}();
var COMMON_DIRECTIVES = [ NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase ];
var isPromise = _angular_core.__core_private__.isPromise;
var __extends$4 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseError = function(_super) {
__extends$4(BaseError, _super);
function BaseError(message) {
var nativeError = _super.call(this, message);
this._nativeError = nativeError;
}
Object.defineProperty(BaseError.prototype, "message", {
get: function() {
return this._nativeError.message;
},
set: function(message) {
this._nativeError.message = message;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseError.prototype, "name", {
get: function() {
return this._nativeError.name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseError.prototype, "stack", {
get: function() {
return this._nativeError.stack;
},
set: function(value) {
this._nativeError.stack = value;
},
enumerable: true,
configurable: true
});
BaseError.prototype.toString = function() {
return this._nativeError.toString();
};
return BaseError;
}(Error);
var WrappedError = function(_super) {
__extends$4(WrappedError, _super);
function WrappedError(message, error) {
_super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
this.originalError = error;
}
Object.defineProperty(WrappedError.prototype, "stack", {
get: function() {
return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
},
enumerable: true,
configurable: true
});
return WrappedError;
}(BaseError);
var __extends$3 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var InvalidPipeArgumentError = function(_super) {
__extends$3(InvalidPipeArgumentError, _super);
function InvalidPipeArgumentError(type, value) {
_super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
}
return InvalidPipeArgumentError;
}(BaseError);
var ObservableStrategy = function() {
function ObservableStrategy() {}
ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async.subscribe({
next: updateLatestValue,
error: function(e) {
throw e;
}
});
};
ObservableStrategy.prototype.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableStrategy.prototype.onDestroy = function(subscription) {
subscription.unsubscribe();
};
return ObservableStrategy;
}();
var PromiseStrategy = function() {
function PromiseStrategy() {}
PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async.then(updateLatestValue, function(e) {
throw e;
});
};
PromiseStrategy.prototype.dispose = function(subscription) {};
PromiseStrategy.prototype.onDestroy = function(subscription) {};
return PromiseStrategy;
}();
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
var AsyncPipe = function() {
function AsyncPipe(_ref) {
this._ref = _ref;
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
this._strategy = null;
}
AsyncPipe.prototype.ngOnDestroy = function() {
if (this._subscription) {
this._dispose();
}
};
AsyncPipe.prototype.transform = function(obj) {
if (!this._obj) {
if (obj) {
this._subscribe(obj);
}
this._latestReturnedValue = this._latestValue;
return this._latestValue;
}
if (obj !== this._obj) {
this._dispose();
return this.transform(obj);
}
if (this._latestValue === this._latestReturnedValue) {
return this._latestReturnedValue;
}
this._latestReturnedValue = this._latestValue;
return _angular_core.WrappedValue.wrap(this._latestValue);
};
AsyncPipe.prototype._subscribe = function(obj) {
var _this = this;
this._obj = obj;
this._strategy = this._selectStrategy(obj);
this._subscription = this._strategy.createSubscription(obj, function(value) {
return _this._updateLatestValue(obj, value);
});
};
AsyncPipe.prototype._selectStrategy = function(obj) {
if (isPromise(obj)) {
return _promiseStrategy;
}
if (obj.subscribe) {
return _observableStrategy;
}
throw new InvalidPipeArgumentError(AsyncPipe, obj);
};
AsyncPipe.prototype._dispose = function() {
this._strategy.dispose(this._subscription);
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
};
AsyncPipe.prototype._updateLatestValue = function(async, value) {
if (async === this._obj) {
this._latestValue = value;
this._ref.markForCheck();
}
};
AsyncPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "async",
pure: false
} ]
} ];
AsyncPipe.ctorParameters = [ {
type: _angular_core.ChangeDetectorRef
} ];
return AsyncPipe;
}();
var NumberFormatStyle;
(function(NumberFormatStyle) {
NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
})(NumberFormatStyle || (NumberFormatStyle = {}));
var NumberFormatter = function() {
function NumberFormatter() {}
NumberFormatter.format = function(num, locale, style, _a) {
var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
var options = {
minimumIntegerDigits: minimumIntegerDigits,
minimumFractionDigits: minimumFractionDigits,
maximumFractionDigits: maximumFractionDigits,
style: NumberFormatStyle[style].toLowerCase()
};
if (style == NumberFormatStyle.Currency) {
options.currency = currency;
options.currencyDisplay = currencyAsSymbol ? "symbol" : "code";
}
return new Intl.NumberFormat(locale, options).format(num);
};
return NumberFormatter;
}();
var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var PATTERN_ALIASES = {
yMMMdjms: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1), digitCondition("second", 1) ])),
yMdjm: datePartGetterFactory(combine([ digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1) ])),
yMMMMEEEEd: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 4), nameCondition("weekday", 4), digitCondition("day", 1) ])),
yMMMMd: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 4), digitCondition("day", 1) ])),
yMMMd: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1) ])),
yMd: datePartGetterFactory(combine([ digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1) ])),
jms: datePartGetterFactory(combine([ digitCondition("hour", 1), digitCondition("second", 1), digitCondition("minute", 1) ])),
jm: datePartGetterFactory(combine([ digitCondition("hour", 1), digitCondition("minute", 1) ]))
};
var DATE_FORMATS = {
yyyy: datePartGetterFactory(digitCondition("year", 4)),
yy: datePartGetterFactory(digitCondition("year", 2)),
y: datePartGetterFactory(digitCondition("year", 1)),
MMMM: datePartGetterFactory(nameCondition("month", 4)),
MMM: datePartGetterFactory(nameCondition("month", 3)),
MM: datePartGetterFactory(digitCondition("month", 2)),
M: datePartGetterFactory(digitCondition("month", 1)),
LLLL: datePartGetterFactory(nameCondition("month", 4)),
L: datePartGetterFactory(nameCondition("month", 1)),
dd: datePartGetterFactory(digitCondition("day", 2)),
d: datePartGetterFactory(digitCondition("day", 1)),
HH: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), false)))),
H: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), false))),
hh: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), true)))),
h: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), true))),
jj: datePartGetterFactory(digitCondition("hour", 2)),
j: datePartGetterFactory(digitCondition("hour", 1)),
mm: digitModifier(datePartGetterFactory(digitCondition("minute", 2))),
m: datePartGetterFactory(digitCondition("minute", 1)),
ss: digitModifier(datePartGetterFactory(digitCondition("second", 2))),
s: datePartGetterFactory(digitCondition("second", 1)),
sss: datePartGetterFactory(digitCondition("second", 3)),
EEEE: datePartGetterFactory(nameCondition("weekday", 4)),
EEE: datePartGetterFactory(nameCondition("weekday", 3)),
EE: datePartGetterFactory(nameCondition("weekday", 2)),
E: datePartGetterFactory(nameCondition("weekday", 1)),
a: hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), true))),
Z: timeZoneGetter("short"),
z: timeZoneGetter("long"),
ww: datePartGetterFactory({}),
w: datePartGetterFactory({}),
G: datePartGetterFactory(nameCondition("era", 1)),
GG: datePartGetterFactory(nameCondition("era", 2)),
GGG: datePartGetterFactory(nameCondition("era", 3)),
GGGG: datePartGetterFactory(nameCondition("era", 4))
};
function digitModifier(inner) {
return function(date, locale) {
var result = inner(date, locale);
return result.length == 1 ? "0" + result : result;
};
}
function hourClockExtractor(inner) {
return function(date, locale) {
return inner(date, locale).split(" ")[1];
};
}
function hourExtractor(inner) {
return function(date, locale) {
return inner(date, locale).split(" ")[0];
};
}
function intlDateFormat(date, locale, options) {
return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, "");
}
function timeZoneGetter(timezone) {
var options = {
hour: "2-digit",
hour12: false,
timeZoneName: timezone
};
return function(date, locale) {
var result = intlDateFormat(date, locale, options);
return result ? result.substring(3) : "";
};
}
function hour12Modify(options, value) {
options.hour12 = value;
return options;
}
function digitCondition(prop, len) {
var result = {};
result[prop] = len === 2 ? "2-digit" : "numeric";
return result;
}
function nameCondition(prop, len) {
var result = {};
if (len < 4) {
result[prop] = len > 1 ? "short" : "narrow";
} else {
result[prop] = "long";
}
return result;
}
function combine(options) {
return (_a = Object).assign.apply(_a, [ {} ].concat(options));
var _a;
}
function datePartGetterFactory(ret) {
return function(date, locale) {
return intlDateFormat(date, locale, ret);
};
}
var DATE_FORMATTER_CACHE = new Map();
function dateFormatter(format, date, locale) {
var fn = PATTERN_ALIASES[format];
if (fn) return fn(date, locale);
var parts = DATE_FORMATTER_CACHE.get(format);
if (!parts) {
parts = [];
var match = void 0;
DATE_FORMATS_SPLIT.exec(format);
while (format) {
match = DATE_FORMATS_SPLIT.exec(format);
if (match) {
parts = parts.concat(match.slice(1));
format = parts.pop();
} else {
parts.push(format);
format = null;
}
}
DATE_FORMATTER_CACHE.set(format, parts);
}
return parts.reduce(function(text, part) {
var fn = DATE_FORMATS[part];
return text + (fn ? fn(date, locale) : partToTime(part));
}, "");
}
function partToTime(part) {
return part === "''" ? "'" : part.replace(/(^'|'$)/g, "").replace(/''/g, "'");
}
var DateFormatter = function() {
function DateFormatter() {}
DateFormatter.format = function(date, locale, pattern) {
return dateFormatter(pattern, date, locale);
};
return DateFormatter;
}();
var DatePipe = function() {
function DatePipe(_locale) {
this._locale = _locale;
}
DatePipe.prototype.transform = function(value, pattern) {
if (pattern === void 0) {
pattern = "mediumDate";
}
var date;
if (isBlank$1(value)) return null;
if (typeof value === "string") {
value = value.trim();
}
if (isDate(value)) {
date = value;
} else if (NumberWrapper.isNumeric(value)) {
date = new Date(parseFloat(value));
} else if (typeof value === "string" && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
var _a = value.split("-").map(function(val) {
return parseInt(val, 10);
}), y = _a[0], m = _a[1], d = _a[2];
date = new Date(y, m - 1, d);
} else {
date = new Date(value);
}
if (!isDate(date)) {
throw new InvalidPipeArgumentError(DatePipe, value);
}
return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
};
DatePipe._ALIASES = {
medium: "yMMMdjms",
short: "yMdjm",
fullDate: "yMMMMEEEEd",
longDate: "yMMMMd",
mediumDate: "yMMMd",
shortDate: "yMd",
mediumTime: "jms",
shortTime: "jm"
};
DatePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "date",
pure: true
} ]
} ];
DatePipe.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
return DatePipe;
}();
function isBlank$1(obj) {
return obj == null || obj === "";
}
var _INTERPOLATION_REGEXP = /#/g;
var I18nPluralPipe = function() {
function I18nPluralPipe(_localization) {
this._localization = _localization;
}
I18nPluralPipe.prototype.transform = function(value, pluralMap) {
if (isBlank(value)) return "";
if (typeof pluralMap !== "object" || pluralMap === null) {
throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
}
var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
};
I18nPluralPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "i18nPlural",
pure: true
} ]
} ];
I18nPluralPipe.ctorParameters = [ {
type: NgLocalization
} ];
return I18nPluralPipe;
}();
var I18nSelectPipe = function() {
function I18nSelectPipe() {}
I18nSelectPipe.prototype.transform = function(value, mapping) {
if (value == null) return "";
if (typeof mapping !== "object" || typeof value !== "string") {
throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
}
if (mapping.hasOwnProperty(value)) {
return mapping[value];
}
if (mapping.hasOwnProperty("other")) {
return mapping["other"];
}
return "";
};
I18nSelectPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "i18nSelect",
pure: true
} ]
} ];
I18nSelectPipe.ctorParameters = [];
return I18nSelectPipe;
}();
var JsonPipe = function() {
function JsonPipe() {}
JsonPipe.prototype.transform = function(value) {
return JSON.stringify(value, null, 2);
};
JsonPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "json",
pure: false
} ]
} ];
JsonPipe.ctorParameters = [];
return JsonPipe;
}();
var LowerCasePipe = function() {
function LowerCasePipe() {}
LowerCasePipe.prototype.transform = function(value) {
if (isBlank(value)) return value;
if (typeof value !== "string") {
throw new InvalidPipeArgumentError(LowerCasePipe, value);
}
return value.toLowerCase();
};
LowerCasePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "lowercase"
} ]
} ];
LowerCasePipe.ctorParameters = [];
return LowerCasePipe;
}();
var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
if (currency === void 0) {
currency = null;
}
if (currencyAsSymbol === void 0) {
currencyAsSymbol = false;
}
if (isBlank(value)) return null;
value = typeof value === "string" && NumberWrapper.isNumeric(value) ? +value : value;
if (typeof value !== "number") {
throw new InvalidPipeArgumentError(pipe, value);
}
var minInt;
var minFraction;
var maxFraction;
if (style !== NumberFormatStyle.Currency) {
minInt = 1;
minFraction = 0;
maxFraction = 3;
}
if (digits) {
var parts = digits.match(_NUMBER_FORMAT_REGEXP);
if (parts === null) {
throw new Error(digits + " is not a valid digit info for number pipes");
}
if (isPresent(parts[1])) {
minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
}
if (isPresent(parts[3])) {
minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
}
if (isPresent(parts[5])) {
maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
}
}
return NumberFormatter.format(value, locale, style, {
minimumIntegerDigits: minInt,
minimumFractionDigits: minFraction,
maximumFractionDigits: maxFraction,
currency: currency,
currencyAsSymbol: currencyAsSymbol
});
}
var DecimalPipe = function() {
function DecimalPipe(_locale) {
this._locale = _locale;
}
DecimalPipe.prototype.transform = function(value, digits) {
if (digits === void 0) {
digits = null;
}
return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
};
DecimalPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "number"
} ]
} ];
DecimalPipe.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
return DecimalPipe;
}();
var PercentPipe = function() {
function PercentPipe(_locale) {
this._locale = _locale;
}
PercentPipe.prototype.transform = function(value, digits) {
if (digits === void 0) {
digits = null;
}
return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
};
PercentPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "percent"
} ]
} ];
PercentPipe.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
return PercentPipe;
}();
var CurrencyPipe = function() {
function CurrencyPipe(_locale) {
this._locale = _locale;
}
CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
if (currencyCode === void 0) {
currencyCode = "USD";
}
if (symbolDisplay === void 0) {
symbolDisplay = false;
}
if (digits === void 0) {
digits = null;
}
return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
};
CurrencyPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "currency"
} ]
} ];
CurrencyPipe.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
return CurrencyPipe;
}();
var SlicePipe = function() {
function SlicePipe() {}
SlicePipe.prototype.transform = function(value, start, end) {
if (isBlank(value)) return value;
if (!this.supports(value)) {
throw new InvalidPipeArgumentError(SlicePipe, value);
}
return value.slice(start, end);
};
SlicePipe.prototype.supports = function(obj) {
return typeof obj === "string" || Array.isArray(obj);
};
SlicePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "slice",
pure: false
} ]
} ];
SlicePipe.ctorParameters = [];
return SlicePipe;
}();
var UpperCasePipe = function() {
function UpperCasePipe() {}
UpperCasePipe.prototype.transform = function(value) {
if (isBlank(value)) return value;
if (typeof value !== "string") {
throw new InvalidPipeArgumentError(UpperCasePipe, value);
}
return value.toUpperCase();
};
UpperCasePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "uppercase"
} ]
} ];
UpperCasePipe.ctorParameters = [];
return UpperCasePipe;
}();
var COMMON_PIPES = [ AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe ];
var CommonModule = function() {
function CommonModule() {}
CommonModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: [ COMMON_DIRECTIVES, COMMON_PIPES ],
exports: [ COMMON_DIRECTIVES, COMMON_PIPES ],
providers: [ {
provide: NgLocalization,
useClass: NgLocaleLocalization
} ]
} ]
} ];
CommonModule.ctorParameters = [];
return CommonModule;
}();
exports.NgLocalization = NgLocalization;
exports.CommonModule = CommonModule;
exports.NgClass = NgClass;
exports.NgFor = NgFor;
exports.NgIf = NgIf;
exports.NgPlural = NgPlural;
exports.NgPluralCase = NgPluralCase;
exports.NgStyle = NgStyle;
exports.NgSwitch = NgSwitch;
exports.NgSwitchCase = NgSwitchCase;
exports.NgSwitchDefault = NgSwitchDefault;
exports.NgTemplateOutlet = NgTemplateOutlet;
exports.AsyncPipe = AsyncPipe;
exports.DatePipe = DatePipe;
exports.I18nPluralPipe = I18nPluralPipe;
exports.I18nSelectPipe = I18nSelectPipe;
exports.JsonPipe = JsonPipe;
exports.LowerCasePipe = LowerCasePipe;
exports.CurrencyPipe = CurrencyPipe;
exports.DecimalPipe = DecimalPipe;
exports.PercentPipe = PercentPipe;
exports.SlicePipe = SlicePipe;
exports.UpperCasePipe = UpperCasePipe;
exports.PlatformLocation = PlatformLocation;
exports.LocationStrategy = LocationStrategy;
exports.APP_BASE_HREF = APP_BASE_HREF;
exports.HashLocationStrategy = HashLocationStrategy;
exports.PathLocationStrategy = PathLocationStrategy;
exports.Location = Location;
});
}, function(module, exports, __webpack_require__) {
var file_system_1 = __webpack_require__(46);
var compiler_1 = __webpack_require__(177);
var FileSystemResourceLoader = function(_super) {
__extends(FileSystemResourceLoader, _super);
function FileSystemResourceLoader() {
_super.apply(this, arguments);
}
FileSystemResourceLoader.prototype.resolve = function(url, baseUrl) {
if (url.indexOf("/") !== 0) {
return file_system_1.path.join(baseUrl, url);
} else {
return url;
}
};
FileSystemResourceLoader.prototype.get = function(url) {
var appDir = file_system_1.knownFolders.currentApp().path;
var templatePath = this.resolve(url, appDir);
if (!file_system_1.File.exists(templatePath)) {
throw new Error("File " + templatePath + " does not exist. Resolved from: " + url + ".");
}
var templateFile = file_system_1.File.fromPath(templatePath);
return templateFile.readText();
};
return FileSystemResourceLoader;
}(compiler_1.ResourceLoader);
exports.FileSystemResourceLoader = FileSystemResourceLoader;
}, function(module, exports, __webpack_require__) {
__webpack_require__(5);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
var common_1 = __webpack_require__(203);
var renderer_1 = __webpack_require__(206);
var detached_loader_1 = __webpack_require__(213);
var dialogs_1 = __webpack_require__(214);
var core_1 = __webpack_require__(156);
var platform_providers_1 = __webpack_require__(175);
var directives_1 = __webpack_require__(215);
function errorHandlerFactory() {
return new core_1.ErrorHandler(true);
}
exports.errorHandlerFactory = errorHandlerFactory;
var NativeScriptModule = function() {
function NativeScriptModule() {}
NativeScriptModule = __decorate([ core_1.NgModule({
declarations: [ detached_loader_1.DetachedLoader, dialogs_1.ModalDialogHost ].concat(directives_1.NS_DIRECTIVES),
providers: [ {
provide: core_1.ErrorHandler,
useFactory: errorHandlerFactory
}, platform_providers_1.defaultFrameProvider, platform_providers_1.defaultPageProvider, platform_providers_1.defaultDeviceProvider, renderer_1.NativeScriptRootRenderer, {
provide: core_1.RootRenderer,
useClass: renderer_1.NativeScriptRootRenderer
}, renderer_1.NativeScriptRenderer, {
provide: core_1.Renderer,
useClass: renderer_1.NativeScriptRenderer
}, dialogs_1.ModalDialogService ],
entryComponents: [ detached_loader_1.DetachedLoader ],
imports: [ common_1.CommonModule, core_1.ApplicationModule ],
exports: [ common_1.CommonModule, core_1.ApplicationModule, detached_loader_1.DetachedLoader, dialogs_1.ModalDialogHost ].concat(directives_1.NS_DIRECTIVES),
schemas: [ core_1.NO_ERRORS_SCHEMA ]
}), __metadata("design:paramtypes", []) ], NativeScriptModule);
return NativeScriptModule;
}();
exports.NativeScriptModule = NativeScriptModule;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var platform_providers_1 = __webpack_require__(175);
var lang_facade_1 = __webpack_require__(200);
var view_1 = __webpack_require__(12);
var application = __webpack_require__(16);
var frame_1 = __webpack_require__(10);
var view_util_1 = __webpack_require__(207);
var trace_1 = __webpack_require__(174);
var utils_1 = __webpack_require__(37);
var nsAnimationDriver = __webpack_require__(211);
var nsAnimationDriverModule;
function ensureAnimationDriverModule() {
if (!nsAnimationDriverModule) {
nsAnimationDriverModule = __webpack_require__(211);
}
}
exports.COMPONENT_VARIABLE = "%COMP%";
exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
var NativeScriptRootRenderer = function() {
function NativeScriptRootRenderer(_rootView, device, _zone) {
this._rootView = _rootView;
this._zone = _zone;
this._registeredComponents = new Map();
this._viewUtil = new view_util_1.ViewUtil(device);
}
Object.defineProperty(NativeScriptRootRenderer.prototype, "animationDriver", {
get: function() {
if (!this._animationDriver) {
ensureAnimationDriverModule();
this._animationDriver = new nsAnimationDriverModule.NativeScriptAnimationDriver();
}
return this._animationDriver;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativeScriptRootRenderer.prototype, "rootView", {
get: function() {
if (!this._rootView) {
this._rootView = frame_1.topmost().currentPage;
}
return this._rootView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativeScriptRootRenderer.prototype, "page", {
get: function() {
return this.rootView.page;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativeScriptRootRenderer.prototype, "viewUtil", {
get: function() {
return this._viewUtil;
},
enumerable: true,
configurable: true
});
NativeScriptRootRenderer.prototype.renderComponent = function(componentProto) {
var renderer = this._registeredComponents.get(componentProto.id);
if (lang_facade_1.isBlank(renderer)) {
renderer = new NativeScriptRenderer(this, componentProto, this.animationDriver, this._zone);
this._registeredComponents.set(componentProto.id, renderer);
}
return renderer;
};
NativeScriptRootRenderer = __decorate([ core_1.Injectable(), __param(0, core_1.Optional()), __param(0, core_1.Inject(platform_providers_1.APP_ROOT_VIEW)), __param(1, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ view_1.View, Object, core_1.NgZone ]) ], NativeScriptRootRenderer);
return NativeScriptRootRenderer;
}();
exports.NativeScriptRootRenderer = NativeScriptRootRenderer;
var NativeScriptRenderer = function(_super) {
__extends(NativeScriptRenderer, _super);
function NativeScriptRenderer(rootRenderer, componentProto, animationDriver, zone) {
_super.call(this);
this.rootRenderer = rootRenderer;
this.animationDriver = animationDriver;
this.zone = zone;
this.attrReplacer = new RegExp(utils_1.escapeRegexSymbols(exports.CONTENT_ATTR), "g");
this.attrSanitizer = /-/g;
var stylesLength = componentProto.styles.length;
this.componentProtoId = componentProto.id;
for (var i = 0; i < stylesLength; i++) {
this.hasComponentStyles = true;
var cssString = componentProto.styles[i] + "";
var realCSS = this.replaceNgAttribute(cssString, this.componentProtoId);
application.addCss(realCSS);
}
trace_1.rendererLog("NativeScriptRenderer created");
}
Object.defineProperty(NativeScriptRenderer.prototype, "viewUtil", {
get: function() {
return this.rootRenderer.viewUtil;
},
enumerable: true,
configurable: true
});
NativeScriptRenderer.prototype.replaceNgAttribute = function(input, componentId) {
return input.replace(this.attrReplacer, "_ng_content_" + componentId.replace(this.attrSanitizer, "_"));
};
NativeScriptRenderer.prototype.renderComponent = function(componentProto) {
return this.rootRenderer.renderComponent(componentProto);
};
NativeScriptRenderer.prototype.selectRootElement = function(selector) {
trace_1.rendererLog("selectRootElement: " + selector);
var rootView = this.rootRenderer.rootView;
rootView.nodeName = "ROOT";
return rootView;
};
NativeScriptRenderer.prototype.createViewRoot = function(hostElement) {
trace_1.rendererLog("CREATE VIEW ROOT: " + hostElement.nodeName);
return hostElement;
};
NativeScriptRenderer.prototype.projectNodes = function(parentElement, nodes) {
var _this = this;
trace_1.rendererLog("NativeScriptRenderer.projectNodes");
nodes.forEach(function(node) {
_this.viewUtil.insertChild(parentElement, node);
});
};
NativeScriptRenderer.prototype.attachViewAfter = function(anchorNode, viewRootNodes) {
var _this = this;
trace_1.rendererLog("NativeScriptRenderer.attachViewAfter: " + anchorNode.nodeName + " " + anchorNode);
var parent = anchorNode.parent || anchorNode.templateParent;
var insertPosition = this.viewUtil.getChildIndex(parent, anchorNode);
viewRootNodes.forEach(function(node, index) {
var childIndex = insertPosition + index + 1;
_this.viewUtil.insertChild(parent, node, childIndex);
});
};
NativeScriptRenderer.prototype.detachView = function(viewRootNodes) {
trace_1.rendererLog("NativeScriptRenderer.detachView");
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
this.viewUtil.removeChild(node.parent, node);
}
};
NativeScriptRenderer.prototype.destroyView = function(_hostElement, _viewAllNodes) {
trace_1.rendererLog("NativeScriptRenderer.destroyView");
};
NativeScriptRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
trace_1.rendererLog("NativeScriptRenderer.setElementProperty " + renderElement + ": " + propertyName + " = " + propertyValue);
this.viewUtil.setProperty(renderElement, propertyName, propertyValue);
};
NativeScriptRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
trace_1.rendererLog("NativeScriptRenderer.setElementAttribute " + renderElement + ": " + attributeName + " = " + attributeValue);
return this.setElementProperty(renderElement, attributeName, attributeValue);
};
NativeScriptRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
trace_1.rendererLog("NativeScriptRenderer.setElementClass " + className + " - " + isAdd);
if (isAdd) {
this.viewUtil.addClass(renderElement, className);
} else {
this.viewUtil.removeClass(renderElement, className);
}
};
NativeScriptRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
this.viewUtil.setStyleProperty(renderElement, styleName, styleValue);
};
NativeScriptRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
trace_1.rendererLog("NativeScriptRenderer.setBindingDebugInfo: " + renderElement + ", " + propertyName + " = " + propertyValue);
};
NativeScriptRenderer.prototype.setElementDebugInfo = function(renderElement, _info) {
trace_1.rendererLog("NativeScriptRenderer.setElementDebugInfo: " + renderElement);
};
NativeScriptRenderer.prototype.invokeElementMethod = function(_renderElement, methodName, args) {
trace_1.rendererLog("NativeScriptRenderer.invokeElementMethod " + methodName + " " + args);
};
NativeScriptRenderer.prototype.setText = function(_renderNode, _text) {
trace_1.rendererLog("NativeScriptRenderer.setText");
};
NativeScriptRenderer.prototype.createTemplateAnchor = function(parentElement) {
trace_1.rendererLog("NativeScriptRenderer.createTemplateAnchor");
return this.viewUtil.createTemplateAnchor(parentElement);
};
NativeScriptRenderer.prototype.createElement = function(parentElement, name) {
var _this = this;
trace_1.rendererLog("NativeScriptRenderer.createElement: " + name + " parent: " + parentElement + ", " + (parentElement ? parentElement.nodeName : "null"));
return this.viewUtil.createView(name, parentElement, function(view) {
if (_this.hasComponentStyles) {
var cssAttribute = _this.replaceNgAttribute(exports.CONTENT_ATTR, _this.componentProtoId);
view[cssAttribute] = true;
}
});
};
NativeScriptRenderer.prototype.createText = function(_parentElement, _value) {
trace_1.rendererLog("NativeScriptRenderer.createText");
return this.viewUtil.createText();
};
NativeScriptRenderer.prototype.listen = function(renderElement, eventName, callback) {
var _this = this;
trace_1.rendererLog("NativeScriptRenderer.listen: " + eventName);
var zonedCallback = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
_this.zone.run(function() {
callback.apply(undefined, args);
});
};
renderElement.on(eventName, zonedCallback);
if (eventName === view_1.View.loadedEvent && renderElement.isLoaded) {
var notifyData = {
eventName: view_1.View.loadedEvent,
object: renderElement
};
zonedCallback(notifyData);
}
return function() {
return renderElement.off(eventName, zonedCallback);
};
};
NativeScriptRenderer.prototype.listenGlobal = function(_target, _eventName, _callback) {
throw new Error("NativeScriptRenderer.listenGlobal() - Not implemented.");
};
NativeScriptRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
var player = this.animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
return player;
};
NativeScriptRenderer = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ NativeScriptRootRenderer, core_1.RenderComponentType, nsAnimationDriver.NativeScriptAnimationDriver, core_1.NgZone ]) ], NativeScriptRenderer);
return NativeScriptRenderer;
}(core_1.Renderer);
exports.NativeScriptRenderer = NativeScriptRenderer;
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(14);
var view_1 = __webpack_require__(12);
var placeholder_1 = __webpack_require__(99);
var content_view_1 = __webpack_require__(60);
var layout_base_1 = __webpack_require__(78);
var element_registry_1 = __webpack_require__(208);
var special_properties_1 = __webpack_require__(36);
var style_property_1 = __webpack_require__(98);
var dependency_observable_1 = __webpack_require__(29);
var platform_1 = __webpack_require__(49);
var trace_1 = __webpack_require__(174);
var IOS_PREFX = ":ios:";
var ANDROID_PREFX = ":android:";
var whiteSpaceSplitter = /\s+/;
function isView(view) {
return view instanceof view_1.View;
}
exports.isView = isView;
function isLayout(view) {
return view instanceof layout_base_1.LayoutBase;
}
exports.isLayout = isLayout;
function isContentView(view) {
return view instanceof content_view_1.ContentView;
}
exports.isContentView = isContentView;
var propertyMaps = new Map();
var ViewUtil = function() {
function ViewUtil(device) {
this.isIos = device.os === platform_1.platformNames.ios;
this.isAndroid = device.os === platform_1.platformNames.android;
}
ViewUtil.prototype.insertChild = function(parent, child, atIndex) {
if (atIndex === void 0) {
atIndex = -1;
}
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.insertChild) {
parent.meta.insertChild(parent, child, atIndex);
} else if (isLayout(parent)) {
if (child.parent === parent) {
var index = parent.getChildIndex(child);
if (index !== -1) {
parent.removeChild(child);
}
}
if (atIndex !== -1) {
parent.insertChild(child, atIndex);
} else {
parent.addChild(child);
}
} else if (isContentView(parent)) {
if (child.meta.isTemplateAnchor) {
parent._addView(child, atIndex);
} else {
parent.content = child;
}
} else if (parent && parent._addChildFromBuilder) {
parent._addChildFromBuilder(child.nodeName, child);
} else {}
};
ViewUtil.prototype.removeChild = function(parent, child) {
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.removeChild) {
parent.meta.removeChild(parent, child);
} else if (isLayout(parent)) {
parent.removeChild(child);
} else if (isContentView(parent)) {
if (parent.content === child) {
parent.content = null;
}
if (child.meta.isTemplateAnchor) {
parent._removeView(child);
}
} else if (isView(parent)) {
parent._removeView(child);
} else {}
};
ViewUtil.prototype.getChildIndex = function(parent, child) {
if (isLayout(parent)) {
return parent.getChildIndex(child);
} else if (isContentView(parent)) {
return child === parent.content ? 0 : -1;
} else {}
};
ViewUtil.prototype.createAndAttach = function(name, viewClass, parent, beforeAttach) {
var view = new viewClass();
view.nodeName = name;
view.meta = element_registry_1.getViewMeta(name);
if (beforeAttach) {
beforeAttach(view);
}
if (parent) {
this.insertChild(parent, view);
}
return view;
};
ViewUtil.prototype.createView = function(name, parent, beforeAttach) {
if (element_registry_1.isKnownView(name)) {
var viewClass = element_registry_1.getViewClass(name);
return this.createAndAttach(name, viewClass, parent, beforeAttach);
} else {
return this.createViewContainer(parent, beforeAttach);
}
};
ViewUtil.prototype.createText = function() {
var text = new placeholder_1.Placeholder();
text.nodeName = "#text";
text.visibility = "collapse";
text.meta = element_registry_1.getViewMeta("Placeholder");
return text;
};
ViewUtil.prototype.createViewContainer = function(parentElement, beforeAttach) {
trace_1.rendererLog("Creating view container in:" + parentElement);
var layout = this.createView("ProxyViewContainer", parentElement, beforeAttach);
layout.nodeName = "ProxyViewContainer";
return layout;
};
ViewUtil.prototype.createTemplateAnchor = function(parentElement) {
var viewClass = element_registry_1.getViewClass(element_registry_1.TEMPLATE);
var anchor = this.createAndAttach(element_registry_1.TEMPLATE, viewClass, parentElement);
anchor.templateParent = parentElement;
anchor.visibility = "collapse";
trace_1.rendererLog("Created templateAnchor: " + anchor);
return anchor;
};
ViewUtil.prototype.isXMLAttribute = function(name) {
switch (name) {
case "style":
return true;

case "rows":
return true;

case "columns":
return true;

case "fontAttributes":
return true;

default:
return false;
}
};
ViewUtil.prototype.platformFilter = function(attribute) {
var lowered = attribute.toLowerCase();
if (lowered.indexOf(IOS_PREFX) === 0) {
if (this.isIos) {
return attribute.substr(IOS_PREFX.length);
} else {
return null;
}
}
if (lowered.indexOf(ANDROID_PREFX) === 0) {
if (this.isAndroid) {
return attribute.substr(ANDROID_PREFX.length);
} else {
return null;
}
}
return attribute;
};
ViewUtil.prototype.setProperty = function(view, attributeName, value) {
attributeName = this.platformFilter(attributeName);
if (!attributeName) {
return;
}
if (attributeName.indexOf(".") !== -1) {
var properties = attributeName.split(".");
attributeName = properties[properties.length - 1];
var propMap = this.getProperties(view);
var i = 0;
while (i < properties.length - 1 && types_1.isDefined(view)) {
var prop = properties[i];
if (propMap.has(prop)) {
prop = propMap.get(prop);
}
view = view[prop];
propMap = this.getProperties(view);
i++;
}
}
if (types_1.isDefined(view)) {
this.setPropertyInternal(view, attributeName, value);
}
};
ViewUtil.prototype.setPropertyInternal = function(view, attributeName, value) {
trace_1.rendererLog("Setting attribute: " + attributeName);
var specialSetter = special_properties_1.getSpecialPropertySetter(attributeName);
var propMap = this.getProperties(view);
if (attributeName === "class") {
this.setClasses(view, value);
} else if (this.isXMLAttribute(attributeName)) {
view._applyXmlAttribute(attributeName, value);
} else if (specialSetter) {
specialSetter(view, value);
} else if (propMap.has(attributeName)) {
var propertyName = propMap.get(attributeName);
view[propertyName] = this.convertValue(value);
} else {
view[attributeName] = this.convertValue(value);
}
};
ViewUtil.prototype.convertValue = function(value) {
if (typeof value !== "string" || value === "") {
return value;
}
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
return valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
return value.toLowerCase() === "true" ? true : false;
} else {
return value;
}
};
ViewUtil.prototype.getProperties = function(instance) {
var type = instance && instance.constructor;
if (!type) {
return new Map();
}
if (!propertyMaps.has(type)) {
var propMap = new Map();
for (var propName in instance) {
propMap.set(propName.toLowerCase(), propName);
}
propertyMaps.set(type, propMap);
}
return propertyMaps.get(type);
};
ViewUtil.prototype.cssClasses = function(view) {
if (!view.ngCssClasses) {
view.ngCssClasses = new Map();
}
return view.ngCssClasses;
};
ViewUtil.prototype.addClass = function(view, className) {
this.cssClasses(view).set(className, true);
this.syncClasses(view);
};
ViewUtil.prototype.removeClass = function(view, className) {
this.cssClasses(view).delete(className);
this.syncClasses(view);
};
ViewUtil.prototype.setClasses = function(view, classesValue) {
var _this = this;
var classes = classesValue.split(whiteSpaceSplitter);
this.cssClasses(view).clear();
classes.forEach(function(className) {
return _this.cssClasses(view).set(className, true);
});
this.syncClasses(view);
};
ViewUtil.prototype.syncClasses = function(view) {
var classValue = Array.from(this.cssClasses(view).keys()).join(" ");
view.cssClass = classValue;
};
ViewUtil.prototype.resolveCssValue = function(styleValue) {
return styleValue;
};
ViewUtil.prototype.setStyleValue = function(view, property, value) {
try {
if (value === null) {
view.style._resetValue(property, dependency_observable_1.ValueSource.Local);
} else {
view.style._setValue(property, value, dependency_observable_1.ValueSource.Local);
}
} catch (ex) {
trace_1.styleError("Error setting property: " + property.name + " view: " + view + " value: " + value + " " + ex);
}
};
ViewUtil.prototype.setStyleProperty = function(view, styleName, styleValue) {
var _this = this;
trace_1.rendererLog("setStyleProperty: " + styleName + " = " + styleValue);
var name = styleName;
var resolvedValue = this.resolveCssValue(styleValue);
style_property_1.withStyleProperty(name, resolvedValue, function(property, value) {
if (types_1.isString(property)) {
var resolvedProperty = style_property_1.getPropertyByName(name);
if (resolvedProperty) {
_this.setStyleValue(view, resolvedProperty, resolvedValue);
} else {
trace_1.rendererLog("Unknown style property: " + styleName);
}
} else {
var resolvedProperty = property;
_this.setStyleValue(view, resolvedProperty, value);
}
});
};
return ViewUtil;
}();
exports.ViewUtil = ViewUtil;
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
exports.TEMPLATE = "template";
var defaultViewMeta = {
skipAddToDom: false
};
var elementMap = new Map();
var camelCaseSplit = /([a-z0-9])([A-Z])/g;
function registerElement(elementName, resolver, meta) {
if (elementMap.has(elementName)) {
throw new Error("Element for " + elementName + " already registered.");
} else {
var entry = {
resolver: resolver,
meta: meta
};
elementMap.set(elementName, entry);
elementMap.set(elementName.toLowerCase(), entry);
elementMap.set(elementName.replace(camelCaseSplit, "$1-$2").toLowerCase(), entry);
}
}
exports.registerElement = registerElement;
function getViewClass(elementName) {
var entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
if (!entry) {
throw new TypeError("No known component for element " + elementName + ".");
}
try {
return entry.resolver();
} catch (e) {
throw new TypeError("Could not load view for: " + elementName + "." + e);
}
}
exports.getViewClass = getViewClass;
function getViewMeta(nodeName) {
var meta = defaultViewMeta;
var entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
if (entry && entry.meta) {
meta = entry.meta;
}
return meta;
}
exports.getViewMeta = getViewMeta;
function isKnownView(elementName) {
return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
exports.isKnownView = isKnownView;
var TemplateView = function(_super) {
__extends(TemplateView, _super);
function TemplateView() {
_super.apply(this, arguments);
}
return TemplateView;
}(view_1.View);
exports.TemplateView = TemplateView;
registerElement(exports.TEMPLATE, function() {
return TemplateView;
}, {
isTemplateAnchor: true
});
registerElement("AbsoluteLayout", function() {
return __webpack_require__(76).AbsoluteLayout;
});
registerElement("ActivityIndicator", function() {
return __webpack_require__(57).ActivityIndicator;
});
registerElement("Border", function() {
return __webpack_require__(59).Border;
});
registerElement("Button", function() {
return __webpack_require__(61).Button;
});
registerElement("ContentView", function() {
return __webpack_require__(60).ContentView;
});
registerElement("DatePicker", function() {
return __webpack_require__(64).DatePicker;
});
registerElement("DockLayout", function() {
return __webpack_require__(80).DockLayout;
});
registerElement("GridLayout", function() {
return __webpack_require__(82).GridLayout;
});
registerElement("HtmlView", function() {
return __webpack_require__(66).HtmlView;
});
registerElement("Image", function() {
return __webpack_require__(68).Image;
});
registerElement("img", function() {
return __webpack_require__(68).Image;
});
registerElement("Label", function() {
return __webpack_require__(72).Label;
});
registerElement("ListPicker", function() {
return __webpack_require__(87).ListPicker;
});
registerElement("ListView", function() {
return __webpack_require__(134).ListView;
});
registerElement("Page", function() {
return __webpack_require__(89).Page;
});
registerElement("Placeholder", function() {
return __webpack_require__(99).Placeholder;
});
registerElement("Progress", function() {
return __webpack_require__(101).Progress;
});
registerElement("ProxyViewContainer", function() {
return __webpack_require__(103).ProxyViewContainer;
});
registerElement("Repeater", function() {
return __webpack_require__(104).Repeater;
});
registerElement("ScrollView", function() {
return __webpack_require__(112).ScrollView;
});
registerElement("SearchBar", function() {
return __webpack_require__(114).SearchBar;
});
registerElement("SegmentedBar", function() {
return __webpack_require__(116).SegmentedBar;
});
registerElement("SegmentedBarItem", function() {
return __webpack_require__(116).SegmentedBarItem;
});
registerElement("Slider", function() {
return __webpack_require__(118).Slider;
});
registerElement("StackLayout", function() {
return __webpack_require__(85).StackLayout;
});
registerElement("FlexboxLayout", function() {
return __webpack_require__(142).FlexboxLayout;
});
registerElement("Switch", function() {
return __webpack_require__(120).Switch;
});
registerElement("TabView", function() {
return __webpack_require__(122).TabView;
});
registerElement("TextField", function() {
return __webpack_require__(126).TextField;
});
registerElement("TextView", function() {
return __webpack_require__(130).TextView;
});
registerElement("TimePicker", function() {
return __webpack_require__(132).TimePicker;
});
registerElement("WebView", function() {
return __webpack_require__(124).WebView;
});
registerElement("WrapLayout", function() {
return __webpack_require__(209).WrapLayout;
});
registerElement("FormattedString", function() {
return __webpack_require__(20).FormattedString;
});
registerElement("Span", function() {
return __webpack_require__(26).Span;
});
registerElement("DetachedContainer", function() {
return __webpack_require__(103).ProxyViewContainer;
}, {
skipAddToDom: true
});
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(37);
var common = __webpack_require__(210);
var enums_1 = __webpack_require__(39);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
function setNativeItemWidthProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemWidth(data.newValue * utils.layout.getDisplayDensity());
}
function setNativeItemHeightProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemHeight(data.newValue * utils.layout.getDisplayDensity());
}
common.WrapLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
common.WrapLayout.itemWidthProperty.metadata.onSetNativeValue = setNativeItemWidthProperty;
common.WrapLayout.itemHeightProperty.metadata.onSetNativeValue = setNativeItemHeightProperty;
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
WrapLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.WrapLayout(this._context);
};
return WrapLayout;
}(common.WrapLayout);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(49);
var layout_base_1 = __webpack_require__(78);
var enums_1 = __webpack_require__(39);
var proxy_1 = __webpack_require__(52);
var dependency_observable_1 = __webpack_require__(29);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isWidthHeightValid(value) {
return value >= 0 && value !== Number.POSITIVE_INFINITY;
}
function isValidOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "orientation", {
get: function() {
return this._getValue(WrapLayout.orientationProperty);
},
set: function(value) {
this._setValue(WrapLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemWidth", {
get: function() {
return this._getValue(WrapLayout.itemWidthProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemHeight", {
get: function() {
return this._getValue(WrapLayout.itemHeightProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemHeightProperty, value);
},
enumerable: true,
configurable: true
});
WrapLayout.orientationProperty = new dependency_observable_1.Property("orientation", "WrapLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.horizontal, AffectsLayout, undefined, isValidOrientation));
WrapLayout.itemWidthProperty = new dependency_observable_1.Property("itemWidth", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
WrapLayout.itemHeightProperty = new dependency_observable_1.Property("itemHeight", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
return WrapLayout;
}(layout_base_1.LayoutBase);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
var animation_player_1 = __webpack_require__(212);
var style_property_1 = __webpack_require__(98);
var AnimationDriver = function() {
function AnimationDriver() {}
return AnimationDriver;
}();
exports.AnimationDriver = AnimationDriver;
var NativeScriptAnimationDriver = function() {
function NativeScriptAnimationDriver() {}
NativeScriptAnimationDriver.prototype.computeStyle = function(element, prop) {
return element.style._getValue(style_property_1.getPropertyByCssName(prop));
};
NativeScriptAnimationDriver.prototype.animate = function(element, _startingStyles, keyframes, duration, delay, easing) {
return new animation_player_1.NativeScriptAnimationPlayer(element, keyframes, duration, delay, easing);
};
return NativeScriptAnimationDriver;
}();
exports.NativeScriptAnimationDriver = NativeScriptAnimationDriver;
}, function(module, exports, __webpack_require__) {
var keyframe_animation_1 = __webpack_require__(96);
var view_1 = __webpack_require__(12);
var enums_1 = __webpack_require__(39);
var dependency_observable_1 = __webpack_require__(29);
var types_1 = __webpack_require__(14);
var styleProperty = __webpack_require__(98);
var NativeScriptAnimationPlayer = function() {
function NativeScriptAnimationPlayer(element, keyframes, duration, delay, easing) {
this._startSubscriptions = [];
this._doneSubscriptions = [];
this._finished = false;
this._started = false;
this.parentPlayer = null;
if (duration === 0) {
duration = .01;
}
if (!(element instanceof view_1.View)) {
throw new Error("NativeScript: Can animate only Views!");
}
this.target = element;
var keyframeAnimationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
keyframeAnimationInfo.duration = duration;
keyframeAnimationInfo.delay = delay;
keyframeAnimationInfo.iterations = 1;
keyframeAnimationInfo.curve = easing ? NativeScriptAnimationPlayer.animationTimingFunctionConverter(easing) : enums_1.AnimationCurve.ease;
keyframeAnimationInfo.keyframes = new Array();
keyframeAnimationInfo.isForwards = true;
for (var _i = 0, keyframes_1 = keyframes; _i < keyframes_1.length; _i++) {
var keyframe = keyframes_1[_i];
var keyframeInfo = {};
keyframeInfo.duration = keyframe.offset;
keyframeInfo.declarations = new Array();
for (var _a = 0, _b = keyframe.styles.styles; _a < _b.length; _a++) {
var style = _b[_a];
for (var substyle in style) {
var value = style[substyle];
var property = styleProperty.getPropertyByCssName(substyle);
if (property) {
if (typeof value === "string" && property.valueConverter) {
value = property.valueConverter(value);
}
keyframeInfo.declarations.push({
property: property.name,
value: value
});
} else if (typeof value === "string" && substyle === "transform") {
NativeScriptAnimationPlayer.parseTransform(value, keyframeInfo);
}
}
}
keyframeAnimationInfo.keyframes.push(keyframeInfo);
}
this.animation = keyframe_animation_1.KeyframeAnimation.keyframeAnimationFromInfo(keyframeAnimationInfo, dependency_observable_1.ValueSource.VisualState);
}
NativeScriptAnimationPlayer.prototype.init = function() {};
NativeScriptAnimationPlayer.prototype.hasStarted = function() {
return this._started;
};
NativeScriptAnimationPlayer.prototype.onStart = function(fn) {
this._startSubscriptions.push(fn);
};
NativeScriptAnimationPlayer.prototype.onDone = function(fn) {
this._doneSubscriptions.push(fn);
};
NativeScriptAnimationPlayer.prototype._onStart = function() {
if (!this._started) {
this._started = true;
this._startSubscriptions.forEach(function(fn) {
return fn();
});
this._startSubscriptions = [];
}
};
NativeScriptAnimationPlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._started = false;
this._doneSubscriptions.forEach(function(fn) {
return fn();
});
this._doneSubscriptions = [];
}
};
NativeScriptAnimationPlayer.prototype.play = function() {
var _this = this;
if (this.animation) {
this._onStart();
this.animation.play(this.target).then(function() {
_this._onFinish();
}).catch(function(_e) {});
}
};
NativeScriptAnimationPlayer.prototype.pause = function() {
throw new Error("AnimationPlayer.pause method is not supported!");
};
NativeScriptAnimationPlayer.prototype.finish = function() {
throw new Error("AnimationPlayer.finish method is not supported!");
};
NativeScriptAnimationPlayer.prototype.reset = function() {
if (this.animation && this.animation.isPlaying) {
this.animation.cancel();
}
};
NativeScriptAnimationPlayer.prototype.restart = function() {
this.reset();
this.play();
};
NativeScriptAnimationPlayer.prototype.destroy = function() {
this.reset();
this._onFinish();
};
NativeScriptAnimationPlayer.prototype.setPosition = function(_p) {
throw new Error("AnimationPlayer.setPosition method is not supported!");
};
NativeScriptAnimationPlayer.prototype.getPosition = function() {
return 0;
};
NativeScriptAnimationPlayer.animationTimingFunctionConverter = function(value) {
switch (value) {
case "ease":
return enums_1.AnimationCurve.ease;

case "linear":
return enums_1.AnimationCurve.linear;

case "ease-in":
return enums_1.AnimationCurve.easeIn;

case "ease-out":
return enums_1.AnimationCurve.easeOut;

case "ease-in-out":
return enums_1.AnimationCurve.easeInOut;

case "spring":
return enums_1.AnimationCurve.spring;

default:
if (value.indexOf("cubic-bezier(") === 0) {
var bezierArr = value.substring(13).split(/[,]+/);
if (bezierArr.length !== 4) {
throw new Error("Invalid value for animation: " + value);
}
return enums_1.AnimationCurve.cubicBezier(NativeScriptAnimationPlayer.bezieArgumentConverter(bezierArr[0]), NativeScriptAnimationPlayer.bezieArgumentConverter(bezierArr[1]), NativeScriptAnimationPlayer.bezieArgumentConverter(bezierArr[2]), NativeScriptAnimationPlayer.bezieArgumentConverter(bezierArr[3]));
} else {
throw new Error("Invalid value for animation: " + value);
}
}
};
NativeScriptAnimationPlayer.bezieArgumentConverter = function(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
};
NativeScriptAnimationPlayer.transformConverter = function(value) {
if (value === "none") {
var operations = {};
operations[value] = value;
return operations;
} else if (types_1.isString(value)) {
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
} else {
return undefined;
}
};
NativeScriptAnimationPlayer.parseTransform = function(value, animationInfo) {
var newTransform = NativeScriptAnimationPlayer.transformConverter(value);
var array = new Array();
var values = undefined;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
animationInfo.declarations.push({
property: "scale",
value: {
x: parseFloat(newTransform[transform]),
y: 1
}
});
break;

case "scaleY":
animationInfo.declarations.push({
property: "scale",
value: {
x: 1,
y: parseFloat(newTransform[transform])
}
});
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
animationInfo.declarations.push({
property: "scale",
value: {
x: parseFloat(values[0]),
y: parseFloat(values[1])
}
});
}
break;

case "translateX":
animationInfo.declarations.push({
property: "translate",
value: {
x: parseFloat(newTransform[transform]),
y: 0
}
});
break;

case "translateY":
animationInfo.declarations.push({
property: "translate",
value: {
x: 0,
y: parseFloat(newTransform[transform])
}
});
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
animationInfo.declarations.push({
property: "translate",
value: {
x: parseFloat(values[0]),
y: parseFloat(values[1])
}
});
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
animationInfo.declarations.push({
property: "rotate",
value: val
});
break;

case "none":
animationInfo.declarations.push({
property: "scale",
value: {
x: 1,
y: 1
}
});
animationInfo.declarations.push({
property: "translate",
value: {
x: 0,
y: 0
}
});
animationInfo.declarations.push({
property: "rotate",
value: 0
});
break;

default:
throw new Error("Unsupported transform: " + transform);
}
}
return array;
};
return NativeScriptAnimationPlayer;
}();
exports.NativeScriptAnimationPlayer = NativeScriptAnimationPlayer;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var trace = __webpack_require__(31);
exports.CATEGORY = "detached-loader";
function log(message) {
trace.write(message, exports.CATEGORY);
}
var DetachedLoader = function() {
function DetachedLoader(resolver, changeDetector, containerRef) {
this.resolver = resolver;
this.changeDetector = changeDetector;
this.containerRef = containerRef;
}
DetachedLoader.prototype.loadInLocation = function(componentType) {
var factory = this.resolver.resolveComponentFactory(componentType);
var componentRef = this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.parentInjector);
log("DetachedLoader.loadInLocation component loaded -> markForCheck");
this.changeDetector.markForCheck();
return Promise.resolve(componentRef);
};
DetachedLoader.prototype.detectChanges = function() {
this.changeDetector.markForCheck();
};
DetachedLoader.prototype.loadComponent = function(componentType) {
log("DetachedLoader.loadComponent");
return this.loadInLocation(componentType);
};
DetachedLoader.prototype.loadWithFactory = function(factory) {
return this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.parentInjector, null);
};
DetachedLoader = __decorate([ core_1.Component({
selector: "DetachedContainer",
template: "<Placeholder #loader></Placeholder>"
}), __metadata("design:paramtypes", [ core_1.ComponentFactoryResolver, core_1.ChangeDetectorRef, core_1.ViewContainerRef ]) ], DetachedLoader);
return DetachedLoader;
}();
exports.DetachedLoader = DetachedLoader;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var page_1 = __webpack_require__(89);
var detached_loader_1 = __webpack_require__(213);
var platform_providers_1 = __webpack_require__(175);
var ModalDialogParams = function() {
function ModalDialogParams(context, closeCallback) {
if (context === void 0) {
context = {};
}
this.context = context;
this.closeCallback = closeCallback;
}
return ModalDialogParams;
}();
exports.ModalDialogParams = ModalDialogParams;
var ModalDialogService = function() {
function ModalDialogService() {}
ModalDialogService.prototype.showModal = function(type, options) {
if (!options.viewContainerRef) {
throw new Error("No viewContainerRef: Make sure you pass viewContainerRef in ModalDialogOptions.");
}
var viewContainerRef = options.viewContainerRef;
var parentPage = viewContainerRef.injector.get(page_1.Page);
var resolver = viewContainerRef.injector.get(core_1.ComponentFactoryResolver);
var pageFactory = viewContainerRef.injector.get(platform_providers_1.PAGE_FACTORY);
return new Promise(function(resolve) {
setTimeout(function() {
return ModalDialogService.showDialog(type, options, resolve, viewContainerRef, resolver, parentPage, pageFactory);
}, 10);
});
};
ModalDialogService.showDialog = function(type, options, doneCallback, containerRef, resolver, parentPage, pageFactory) {
var page = pageFactory({
isModal: true,
componentType: type
});
var detachedLoaderRef;
var closeCallback = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
doneCallback.apply(undefined, args);
page.closeModal();
detachedLoaderRef.instance.detectChanges();
detachedLoaderRef.destroy();
};
var modalParams = new ModalDialogParams(options.context, closeCallback);
var providers = core_1.ReflectiveInjector.resolve([ {
provide: page_1.Page,
useValue: page
}, {
provide: ModalDialogParams,
useValue: modalParams
} ]);
var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers, containerRef.parentInjector);
var detachedFactory = resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);
detachedLoaderRef = containerRef.createComponent(detachedFactory, -1, childInjector, null);
detachedLoaderRef.instance.loadComponent(type).then(function(compRef) {
var componentView = compRef.location.nativeElement;
if (componentView.parent) {
componentView.parent.removeChild(componentView);
}
page.content = componentView;
parentPage.showModal(page, options.context, closeCallback, options.fullscreen);
});
};
ModalDialogService = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", []) ], ModalDialogService);
return ModalDialogService;
}();
exports.ModalDialogService = ModalDialogService;
var ModalDialogHost = function() {
function ModalDialogHost() {
throw new Error("ModalDialogHost is deprecated. Call ModalDialogService.showModal() " + "by passing ViewContainerRef in the options instead.");
}
ModalDialogHost = __decorate([ core_1.Directive({
selector: "[modal-dialog-host]"
}), __metadata("design:paramtypes", []) ], ModalDialogHost);
return ModalDialogHost;
}();
exports.ModalDialogHost = ModalDialogHost;
}, function(module, exports, __webpack_require__) {
var list_view_comp_1 = __webpack_require__(216);
var tab_view_1 = __webpack_require__(217);
var action_bar_1 = __webpack_require__(219);
var platform_filters_1 = __webpack_require__(220);
exports.NS_DIRECTIVES = [ list_view_comp_1.ListViewComponent, list_view_comp_1.TemplateKeyDirective, tab_view_1.TabViewDirective, tab_view_1.TabViewItemDirective, action_bar_1.ActionBarComponent, action_bar_1.ActionBarScope, action_bar_1.ActionItemDirective, action_bar_1.NavigationButtonDirective, platform_filters_1.AndroidFilterComponent, platform_filters_1.IosFilterComponent ];
var list_view_comp_2 = __webpack_require__(216);
exports.ListViewComponent = list_view_comp_2.ListViewComponent;
exports.TemplateKeyDirective = list_view_comp_2.TemplateKeyDirective;
var text_value_accessor_1 = __webpack_require__(221);
exports.TextValueAccessor = text_value_accessor_1.TextValueAccessor;
var checked_value_accessor_1 = __webpack_require__(227);
exports.CheckedValueAccessor = checked_value_accessor_1.CheckedValueAccessor;
var date_value_accessor_1 = __webpack_require__(228);
exports.DateValueAccessor = date_value_accessor_1.DateValueAccessor;
var time_value_accessor_1 = __webpack_require__(229);
exports.TimeValueAccessor = time_value_accessor_1.TimeValueAccessor;
var number_value_accessor_1 = __webpack_require__(230);
exports.NumberValueAccessor = number_value_accessor_1.NumberValueAccessor;
var selectedIndex_value_accessor_1 = __webpack_require__(231);
exports.SelectedIndexValueAccessor = selectedIndex_value_accessor_1.SelectedIndexValueAccessor;
var tab_view_2 = __webpack_require__(217);
exports.TabViewDirective = tab_view_2.TabViewDirective;
exports.TabViewItemDirective = tab_view_2.TabViewItemDirective;
var action_bar_2 = __webpack_require__(219);
exports.ActionBarComponent = action_bar_2.ActionBarComponent;
exports.ActionBarScope = action_bar_2.ActionBarScope;
exports.ActionItemDirective = action_bar_2.ActionItemDirective;
exports.NavigationButtonDirective = action_bar_2.NavigationButtonDirective;
var platform_filters_2 = __webpack_require__(220);
exports.AndroidFilterComponent = platform_filters_2.AndroidFilterComponent;
exports.IosFilterComponent = platform_filters_2.IosFilterComponent;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var lang_facade_1 = __webpack_require__(200);
var collection_facade_1 = __webpack_require__(199);
var observable_array_1 = __webpack_require__(22);
var layout_base_1 = __webpack_require__(78);
var trace_1 = __webpack_require__(174);
var NG_VIEW = "_ngViewRef";
var ListItemContext = function() {
function ListItemContext($implicit, item, index, even, odd) {
this.$implicit = $implicit;
this.item = item;
this.index = index;
this.even = even;
this.odd = odd;
}
return ListItemContext;
}();
exports.ListItemContext = ListItemContext;
var ListViewComponent = function() {
function ListViewComponent(_elementRef, _iterableDiffers, _cdr) {
this._iterableDiffers = _iterableDiffers;
this._cdr = _cdr;
this.setupItemView = new core_1.EventEmitter();
this.listView = _elementRef.nativeElement;
this.listView.on("itemLoading", this.onItemLoading, this);
}
Object.defineProperty(ListViewComponent.prototype, "nativeElement", {
get: function() {
return this.listView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListViewComponent.prototype, "items", {
get: function() {
return this._items;
},
set: function(value) {
this._items = value;
var needDiffer = true;
if (value instanceof observable_array_1.ObservableArray) {
needDiffer = false;
}
if (needDiffer && !this._differ && collection_facade_1.isListLikeIterable(value)) {
this._differ = this._iterableDiffers.find(this._items).create(this._cdr, function(_index, item) {
return item;
});
}
this.listView.items = this._items;
},
enumerable: true,
configurable: true
});
ListViewComponent.prototype.ngAfterContentInit = function() {
trace_1.listViewLog("ListView.ngAfterContentInit()");
this.setItemTemplates();
};
ListViewComponent.prototype.ngOnDestroy = function() {
this.listView.off("itemLoading", this.onItemLoading, this);
};
ListViewComponent.prototype.setItemTemplates = function() {
if (this._templateMap) {
trace_1.listViewLog("Setting templates");
var templates_1 = [];
this._templateMap.forEach(function(value) {
templates_1.push(value);
});
this.listView.itemTemplates = templates_1;
}
};
ListViewComponent.prototype.registerTemplate = function(key, template) {
var _this = this;
trace_1.listViewLog("registerTemplate for key: " + key);
if (!this._templateMap) {
this._templateMap = new Map();
}
var keyedTemplate = {
key: key,
createView: function() {
trace_1.listViewLog("registerTemplate for key: " + key);
var viewRef = _this.loader.createEmbeddedView(template, new ListItemContext(), 0);
var resultView = getSingleViewFromViewRef(viewRef);
resultView[NG_VIEW] = viewRef;
return resultView;
}
};
this._templateMap.set(key, keyedTemplate);
};
ListViewComponent.prototype.onItemLoading = function(args) {
if (!args.view && !this.itemTemplate) {
return;
}
var index = args.index;
var items = args.object.items;
var currentItem = typeof items.getItem === "function" ? items.getItem(index) : items[index];
var viewRef;
if (args.view) {
trace_1.listViewLog("onItemLoading: " + index + " - Reusing existing view");
viewRef = args.view[NG_VIEW];
if (!viewRef) {
viewRef = args.view._subViews && args.view._subViews.length > 0 ? args.view._subViews[0][NG_VIEW] : undefined;
}
} else {
trace_1.listViewLog("onItemLoading: " + index + " - Creating view from template");
viewRef = this.loader.createEmbeddedView(this.itemTemplate, new ListItemContext(), 0);
args.view = getSingleViewFromViewRef(viewRef);
args.view[NG_VIEW] = viewRef;
}
this.setupViewRef(viewRef, currentItem, index);
this.detectChangesOnChild(viewRef, index);
};
ListViewComponent.prototype.setupViewRef = function(viewRef, data, index) {
if (lang_facade_1.isBlank(viewRef)) {
return;
}
var context = viewRef.context;
context.$implicit = data;
context.item = data;
context.index = index;
context.even = index % 2 === 0;
context.odd = !context.even;
this.setupItemView.next({
view: viewRef,
data: data,
index: index,
context: context
});
};
ListViewComponent.prototype.detectChangesOnChild = function(viewRef, index) {
var childChangeDetector = viewRef;
trace_1.listViewLog("Manually detect changes in child: " + index);
childChangeDetector.markForCheck();
childChangeDetector.detectChanges();
};
ListViewComponent.prototype.ngDoCheck = function() {
if (this._differ) {
trace_1.listViewLog("ngDoCheck() - execute differ");
var changes = this._differ.diff(this._items);
if (changes) {
trace_1.listViewLog("ngDoCheck() - refresh");
this.listView.refresh();
}
}
};
__decorate([ core_1.ViewChild("loader", {
read: core_1.ViewContainerRef
}), __metadata("design:type", core_1.ViewContainerRef) ], ListViewComponent.prototype, "loader", void 0);
__decorate([ core_1.Output(), __metadata("design:type", Object) ], ListViewComponent.prototype, "setupItemView", void 0);
__decorate([ core_1.ContentChild(core_1.TemplateRef), __metadata("design:type", core_1.TemplateRef) ], ListViewComponent.prototype, "itemTemplate", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], ListViewComponent.prototype, "items", null);
ListViewComponent = __decorate([ core_1.Component({
selector: "ListView",
template: "\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>",
changeDetection: core_1.ChangeDetectionStrategy.OnPush
}), __metadata("design:paramtypes", [ core_1.ElementRef, core_1.IterableDiffers, core_1.ChangeDetectorRef ]) ], ListViewComponent);
return ListViewComponent;
}();
exports.ListViewComponent = ListViewComponent;
function getSingleViewRecursive(nodes, nestLevel) {
var actualNodes = nodes.filter(function(n) {
return !!n && n.nodeName !== "#text";
});
if (actualNodes.length === 0) {
throw new Error("No suitable views found in list template! Nesting level: " + nestLevel);
} else if (actualNodes.length > 1) {
throw new Error("More than one view found in list template! Nesting level: " + nestLevel);
} else {
if (actualNodes[0]) {
var parentLayout = actualNodes[0].parent;
if (parentLayout instanceof layout_base_1.LayoutBase) {
parentLayout.removeChild(actualNodes[0]);
}
return actualNodes[0];
} else {
return getSingleViewRecursive(actualNodes[0].children, nestLevel + 1);
}
}
}
function getSingleViewFromViewRef(viewRef) {
return getSingleViewRecursive(viewRef.rootNodes, 0);
}
var TemplateKeyDirective = function() {
function TemplateKeyDirective(templateRef, list) {
this.templateRef = templateRef;
this.list = list;
}
Object.defineProperty(TemplateKeyDirective.prototype, "nsTemplateKey", {
set: function(value) {
if (this.list && this.templateRef) {
this.list.registerTemplate(value, this.templateRef);
}
},
enumerable: true,
configurable: true
});
__decorate([ core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], TemplateKeyDirective.prototype, "nsTemplateKey", null);
TemplateKeyDirective = __decorate([ core_1.Directive({
selector: "[nsTemplateKey]"
}), __param(1, core_1.Host()), __metadata("design:paramtypes", [ core_1.TemplateRef, ListViewComponent ]) ], TemplateKeyDirective);
return TemplateKeyDirective;
}();
exports.TemplateKeyDirective = TemplateKeyDirective;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var tab_view_1 = __webpack_require__(122);
var utils = __webpack_require__(218);
var trace_1 = __webpack_require__(174);
var lang_facade_1 = __webpack_require__(200);
var TabViewDirective = function() {
function TabViewDirective(element) {
this.tabView = element.nativeElement;
}
Object.defineProperty(TabViewDirective.prototype, "selectedIndex", {
get: function() {
return this._selectedIndex;
},
set: function(value) {
this._selectedIndex = utils.convertToInt(value);
if (this.viewInitialized) {
this.tabView.selectedIndex = this._selectedIndex;
}
},
enumerable: true,
configurable: true
});
TabViewDirective.prototype.ngAfterViewInit = function() {
this.viewInitialized = true;
trace_1.rendererLog("this._selectedIndex: " + this._selectedIndex);
if (!lang_facade_1.isBlank(this._selectedIndex)) {
this.tabView.selectedIndex = this._selectedIndex;
}
};
__decorate([ core_1.Input(), __metadata("design:type", Number) ], TabViewDirective.prototype, "selectedIndex", null);
TabViewDirective = __decorate([ core_1.Directive({
selector: "TabView"
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TabViewDirective);
return TabViewDirective;
}();
exports.TabViewDirective = TabViewDirective;
var TabViewItemDirective = function() {
function TabViewItemDirective(owner, templateRef, viewContainer) {
this.owner = owner;
this.templateRef = templateRef;
this.viewContainer = viewContainer;
}
Object.defineProperty(TabViewItemDirective.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this.ensureItem();
this.item.title = this._title;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItemDirective.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this.ensureItem();
this.item.iconSource = this._iconSource;
}
},
enumerable: true,
configurable: true
});
TabViewItemDirective.prototype.ensureItem = function() {
if (!this.item) {
this.item = new tab_view_1.TabViewItem();
}
};
TabViewItemDirective.prototype.ngOnInit = function() {
this.ensureItem();
if (this.config) {
this.item.title = this._title || this.config.title;
this.item.iconSource = this._iconSource || this.config.iconSource;
}
var viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
var realViews = viewRef.rootNodes.filter(function(node) {
return node.nodeName && node.nodeName !== "#text";
});
if (realViews.length > 0) {
this.item.view = realViews[0];
var newItems = (this.owner.tabView.items || []).concat([ this.item ]);
this.owner.tabView.items = newItems;
}
};
__decorate([ core_1.Input("tabItem"), __metadata("design:type", Object) ], TabViewItemDirective.prototype, "config", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], TabViewItemDirective.prototype, "title", null);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], TabViewItemDirective.prototype, "iconSource", null);
TabViewItemDirective = __decorate([ core_1.Directive({
selector: "[tabItem]"
}), __metadata("design:paramtypes", [ TabViewDirective, core_1.TemplateRef, core_1.ViewContainerRef ]) ], TabViewItemDirective);
return TabViewItemDirective;
}();
exports.TabViewItemDirective = TabViewItemDirective;
}, function(module, exports, __webpack_require__) {
var lang_facade_1 = __webpack_require__(200);
function convertToInt(value) {
var normalizedValue;
if (lang_facade_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_facade_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = parseInt(value.toString(), 10);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
return Math.round(normalizedValue);
}
exports.convertToInt = convertToInt;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var action_bar_1 = __webpack_require__(50);
var lang_facade_1 = __webpack_require__(200);
var page_1 = __webpack_require__(89);
var view_1 = __webpack_require__(12);
var element_registry_1 = __webpack_require__(208);
var actionBarMeta = {
skipAddToDom: true,
insertChild: function(parent, child, _atIndex) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
bar.navigationButton = childView;
childView.parent = bar;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.addItem(childView);
childView.parent = bar;
} else if (child.nodeName === element_registry_1.TEMPLATE) {
child.templateParent = parent;
} else if (child.nodeName !== "#text" && child instanceof view_1.View) {
bar.titleView = childView;
}
},
removeChild: function(parent, child) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
if (bar.navigationButton === childView) {
bar.navigationButton = null;
}
childView.parent = null;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.removeItem(childView);
childView.parent = null;
} else if (child.nodeName !== element_registry_1.TEMPLATE && child instanceof view_1.View && bar.titleView && bar.titleView === childView) {
bar.titleView = null;
}
}
};
element_registry_1.registerElement("ActionBar", function() {
return __webpack_require__(50).ActionBar;
}, actionBarMeta);
element_registry_1.registerElement("ActionItem", function() {
return __webpack_require__(50).ActionItem;
});
element_registry_1.registerElement("NavigationButton", function() {
return __webpack_require__(50).NavigationButton;
});
var ActionBarComponent = function() {
function ActionBarComponent(element, page) {
this.element = element;
this.page = page;
if (lang_facade_1.isBlank(this.page.actionBarHidden)) {
this.page.actionBarHidden = false;
}
this.page.actionBar = this.element.nativeElement;
this.page.actionBar.update();
}
ActionBarComponent = __decorate([ core_1.Component({
selector: "ActionBar",
template: "<ng-content></ng-content>"
}), __metadata("design:paramtypes", [ core_1.ElementRef, page_1.Page ]) ], ActionBarComponent);
return ActionBarComponent;
}();
exports.ActionBarComponent = ActionBarComponent;
var ActionBarScope = function() {
function ActionBarScope(page) {
this.page = page;
}
ActionBarScope.prototype.onNavButtonInit = function(navBtn) {
this.page.actionBar.navigationButton = navBtn.element.nativeElement;
};
ActionBarScope.prototype.onNavButtonDestroy = function(navBtn) {
var nav = navBtn.element.nativeElement;
if (nav && this.page.actionBar.navigationButton === nav) {
this.page.actionBar.navigationButton = null;
}
};
ActionBarScope.prototype.onActionInit = function(item) {
this.page.actionBar.actionItems.addItem(item.element.nativeElement);
};
ActionBarScope.prototype.onActionDestroy = function(item) {
this.page.actionBar.actionItems.removeItem(item.element.nativeElement);
};
ActionBarScope = __decorate([ core_1.Component({
selector: "ActionBarExtension",
template: ""
}), __metadata("design:paramtypes", [ page_1.Page ]) ], ActionBarScope);
return ActionBarScope;
}();
exports.ActionBarScope = ActionBarScope;
var ActionItemDirective = function() {
function ActionItemDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
if (this.ownerScope) {
this.ownerScope.onActionInit(this);
}
}
ActionItemDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onActionDestroy(this);
}
};
ActionItemDirective = __decorate([ core_1.Directive({
selector: "ActionItem"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], ActionItemDirective);
return ActionItemDirective;
}();
exports.ActionItemDirective = ActionItemDirective;
var NavigationButtonDirective = function() {
function NavigationButtonDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
if (this.ownerScope) {
this.ownerScope.onNavButtonInit(this);
}
}
NavigationButtonDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onNavButtonDestroy(this);
}
};
NavigationButtonDirective = __decorate([ core_1.Directive({
selector: "NavigationButton"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], NavigationButtonDirective);
return NavigationButtonDirective;
}();
exports.NavigationButtonDirective = NavigationButtonDirective;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var platform_1 = __webpack_require__(49);
var platform_providers_1 = __webpack_require__(175);
var AndroidFilterComponent = function() {
function AndroidFilterComponent(device) {
this.show = device.os === platform_1.platformNames.android;
}
AndroidFilterComponent = __decorate([ core_1.Component({
selector: "android",
template: '<ng-content *ngIf="show"></ng-content>'
}), __param(0, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ Object ]) ], AndroidFilterComponent);
return AndroidFilterComponent;
}();
exports.AndroidFilterComponent = AndroidFilterComponent;
var IosFilterComponent = function() {
function IosFilterComponent(device) {
this.show = device.os === platform_1.platformNames.ios;
}
IosFilterComponent = __decorate([ core_1.Component({
selector: "ios",
template: '<ng-content *ngIf="show"></ng-content>'
}), __param(0, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ Object ]) ], IosFilterComponent);
return IosFilterComponent;
}();
exports.IosFilterComponent = IosFilterComponent;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var lang_facade_1 = __webpack_require__(200);
var base_value_accessor_1 = __webpack_require__(226);
var TEXT_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return TextValueAccessor;
}),
multi: true
};
var TextValueAccessor = function(_super) {
__extends(TextValueAccessor, _super);
function TextValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
TextValueAccessor.prototype.textChangeListener = function(event) {
this.onChange(event.value);
};
TextValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_facade_1.isBlank(value) ? "" : value.toString();
this.view.text = normalizedValue;
};
TextValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.HostListener("textChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], TextValueAccessor.prototype, "textChangeListener", null);
TextValueAccessor = __decorate([ core_1.Directive({
selector: "TextField[ngModel], textField[ngModel], text-field[ngModel], TextView[ngModel], textView[ngModel], text-view[ngModel], SearchBar[ngModel], search-bar[ngModel], searchBar[ngModel]",
providers: [ TEXT_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TextValueAccessor);
return TextValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.TextValueAccessor = TextValueAccessor;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(156), __webpack_require__(223), __webpack_require__(157), __webpack_require__(158), __webpack_require__(224)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core", "rxjs/operator/toPromise", "rxjs/Subject", "rxjs/Observable", "rxjs/observable/fromPromise" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable.prototype, global.Rx, global.Rx, global.Rx.Observable);
})(this, function(exports, _angular_core, rxjs_operator_toPromise, rxjs_Subject, rxjs_Observable, rxjs_observable_fromPromise) {
"use strict";
var AbstractControlDirective = function() {
function AbstractControlDirective() {}
Object.defineProperty(AbstractControlDirective.prototype, "control", {
get: function() {
throw new Error("unimplemented");
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "value", {
get: function() {
return this.control ? this.control.value : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "valid", {
get: function() {
return this.control ? this.control.valid : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
get: function() {
return this.control ? this.control.invalid : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "pending", {
get: function() {
return this.control ? this.control.pending : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "errors", {
get: function() {
return this.control ? this.control.errors : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
get: function() {
return this.control ? this.control.pristine : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
get: function() {
return this.control ? this.control.dirty : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "touched", {
get: function() {
return this.control ? this.control.touched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
get: function() {
return this.control ? this.control.untouched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
get: function() {
return this.control ? this.control.disabled : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
get: function() {
return this.control ? this.control.enabled : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
get: function() {
return this.control ? this.control.statusChanges : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
get: function() {
return this.control ? this.control.valueChanges : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
AbstractControlDirective.prototype.reset = function(value) {
if (value === void 0) {
value = undefined;
}
if (this.control) this.control.reset(value);
};
AbstractControlDirective.prototype.hasError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
return this.control ? this.control.hasError(errorCode, path) : false;
};
AbstractControlDirective.prototype.getError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
return this.control ? this.control.getError(errorCode, path) : null;
};
return AbstractControlDirective;
}();
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ControlContainer = function(_super) {
__extends$1(ControlContainer, _super);
function ControlContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ControlContainer.prototype, "formDirective", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ControlContainer.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return ControlContainer;
}(AbstractControlDirective);
function isPresent(obj) {
return obj != null;
}
function isBlank(obj) {
return obj == null;
}
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
function isPrimitive(obj) {
return !isJsObject(obj);
}
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
var k = _a[_i];
m[k] = m1[k];
}
for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
var k = _c[_b];
m[k] = m2[k];
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
for (var i = 0; i < k1.length; i++) {
var key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
if (index > -1) {
list.splice(index, 1);
}
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.flatten = function(list) {
return list.reduce(function(flat, item) {
var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
return flat.concat(flatItem);
}, []);
};
return ListWrapper;
}();
var isPromise = _angular_core.__core_private__.isPromise;
function isEmptyInputValue(value) {
return value == null || typeof value === "string" && value.length === 0;
}
var NG_VALIDATORS = new _angular_core.OpaqueToken("NgValidators");
var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken("NgAsyncValidators");
var Validators = function() {
function Validators() {}
Validators.required = function(control) {
return isEmptyInputValue(control.value) ? {
required: true
} : null;
};
Validators.minLength = function(minLength) {
return function(control) {
if (isEmptyInputValue(control.value)) {
return null;
}
var length = typeof control.value === "string" ? control.value.length : 0;
return length < minLength ? {
minlength: {
requiredLength: minLength,
actualLength: length
}
} : null;
};
};
Validators.maxLength = function(maxLength) {
return function(control) {
var length = typeof control.value === "string" ? control.value.length : 0;
return length > maxLength ? {
maxlength: {
requiredLength: maxLength,
actualLength: length
}
} : null;
};
};
Validators.pattern = function(pattern) {
if (!pattern) return Validators.nullValidator;
var regex;
var regexStr;
if (typeof pattern === "string") {
regexStr = "^" + pattern + "$";
regex = new RegExp(regexStr);
} else {
regexStr = pattern.toString();
regex = pattern;
}
return function(control) {
if (isEmptyInputValue(control.value)) {
return null;
}
var value = control.value;
return regex.test(value) ? null : {
pattern: {
requiredPattern: regexStr,
actualValue: value
}
};
};
};
Validators.nullValidator = function(c) {
return null;
};
Validators.compose = function(validators) {
if (!validators) return null;
var presentValidators = validators.filter(isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
return _mergeErrors(_executeValidators(control, presentValidators));
};
};
Validators.composeAsync = function(validators) {
if (!validators) return null;
var presentValidators = validators.filter(isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
return Promise.all(promises).then(_mergeErrors);
};
};
return Validators;
}();
function _convertToPromise(obj) {
return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
}
function _executeValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _executeAsyncValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _mergeErrors(arrayOfErrors) {
var res = arrayOfErrors.reduce(function(res, errors) {
return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
}, {});
return Object.keys(res).length === 0 ? null : res;
}
var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken("NgValueAccessor");
var CHECKBOX_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return CheckboxControlValueAccessor;
}),
multi: true
};
var CheckboxControlValueAccessor = function() {
function CheckboxControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
CheckboxControlValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
};
CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
CheckboxControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
CheckboxControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]",
host: {
"(change)": "onChange($event.target.checked)",
"(blur)": "onTouched()"
},
providers: [ CHECKBOX_VALUE_ACCESSOR ]
} ]
} ];
CheckboxControlValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
return CheckboxControlValueAccessor;
}();
var DEFAULT_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return DefaultValueAccessor;
}),
multi: true
};
var DefaultValueAccessor = function() {
function DefaultValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
DefaultValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = value == null ? "" : value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
};
DefaultValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
DefaultValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
DefaultValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
host: {
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ DEFAULT_VALUE_ACCESSOR ]
} ]
} ];
DefaultValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
return DefaultValueAccessor;
}();
function normalizeValidator(validator) {
if (validator.validate) {
return function(c) {
return validator.validate(c);
};
} else {
return validator;
}
}
function normalizeAsyncValidator(validator) {
if (validator.validate) {
return function(c) {
return validator.validate(c);
};
} else {
return validator;
}
}
var NUMBER_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
};
var NumberValueAccessor = function() {
function NumberValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
NumberValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = value == null ? "" : value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
};
NumberValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = function(value) {
fn(value == "" ? null : parseFloat(value));
};
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
NumberValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
NumberValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ NUMBER_VALUE_ACCESSOR ]
} ]
} ];
NumberValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
return NumberValueAccessor;
}();
var __extends$2 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function unimplemented() {
throw new Error("unimplemented");
}
var NgControl = function(_super) {
__extends$2(NgControl, _super);
function NgControl() {
_super.apply(this, arguments);
this._parent = null;
this.name = null;
this.valueAccessor = null;
this._rawValidators = [];
this._rawAsyncValidators = [];
}
Object.defineProperty(NgControl.prototype, "validator", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControl.prototype, "asyncValidator", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
return NgControl;
}(AbstractControlDirective);
var RADIO_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return RadioControlValueAccessor;
}),
multi: true
};
var RadioControlRegistry = function() {
function RadioControlRegistry() {
this._accessors = [];
}
RadioControlRegistry.prototype.add = function(control, accessor) {
this._accessors.push([ control, accessor ]);
};
RadioControlRegistry.prototype.remove = function(accessor) {
for (var i = this._accessors.length - 1; i >= 0; --i) {
if (this._accessors[i][1] === accessor) {
this._accessors.splice(i, 1);
return;
}
}
};
RadioControlRegistry.prototype.select = function(accessor) {
var _this = this;
this._accessors.forEach(function(c) {
if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
c[1].fireUncheck(accessor.value);
}
});
};
RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
if (!controlPair[0].control) return false;
return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
};
RadioControlRegistry.decorators = [ {
type: _angular_core.Injectable
} ];
RadioControlRegistry.ctorParameters = [];
return RadioControlRegistry;
}();
var RadioControlValueAccessor = function() {
function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._registry = _registry;
this._injector = _injector;
this.onChange = function() {};
this.onTouched = function() {};
}
RadioControlValueAccessor.prototype.ngOnInit = function() {
this._control = this._injector.get(NgControl);
this._checkName();
this._registry.add(this._control, this);
};
RadioControlValueAccessor.prototype.ngOnDestroy = function() {
this._registry.remove(this);
};
RadioControlValueAccessor.prototype.writeValue = function(value) {
this._state = value === this.value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", this._state);
};
RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this._fn = fn;
this.onChange = function() {
fn(_this.value);
_this._registry.select(_this);
};
};
RadioControlValueAccessor.prototype.fireUncheck = function(value) {
this.writeValue(value);
};
RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
RadioControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
RadioControlValueAccessor.prototype._checkName = function() {
if (this.name && this.formControlName && this.name !== this.formControlName) {
this._throwNameError();
}
if (!this.name && this.formControlName) this.name = this.formControlName;
};
RadioControlValueAccessor.prototype._throwNameError = function() {
throw new Error('\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type="radio" formControlName="food" name="food">\n    ');
};
RadioControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",
host: {
"(change)": "onChange()",
"(blur)": "onTouched()"
},
providers: [ RADIO_VALUE_ACCESSOR ]
} ]
} ];
RadioControlValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
}, {
type: RadioControlRegistry
}, {
type: _angular_core.Injector
} ];
RadioControlValueAccessor.propDecorators = {
name: [ {
type: _angular_core.Input
} ],
formControlName: [ {
type: _angular_core.Input
} ],
value: [ {
type: _angular_core.Input
} ]
};
return RadioControlValueAccessor;
}();
var RANGE_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return RangeValueAccessor;
}),
multi: true
};
var RangeValueAccessor = function() {
function RangeValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
RangeValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", parseFloat(value));
};
RangeValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = function(value) {
fn(value == "" ? null : parseFloat(value));
};
};
RangeValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
RangeValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
RangeValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ RANGE_VALUE_ACCESSOR ]
} ]
} ];
RangeValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
return RangeValueAccessor;
}();
var SELECT_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return SelectControlValueAccessor;
}),
multi: true
};
function _buildValueString(id, value) {
if (id == null) return "" + value;
if (!isPrimitive(value)) value = "Object";
return (id + ": " + value).slice(0, 50);
}
function _extractId(valueString) {
return valueString.split(":")[0];
}
var SelectControlValueAccessor = function() {
function SelectControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._optionMap = new Map();
this._idCounter = 0;
this.onChange = function(_) {};
this.onTouched = function() {};
}
SelectControlValueAccessor.prototype.writeValue = function(value) {
this.value = value;
var valueString = _buildValueString(this._getOptionId(value), value);
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString);
};
SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(valueString) {
_this.value = valueString;
fn(_this._getOptionValue(valueString));
};
};
SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
SelectControlValueAccessor.prototype._registerOption = function() {
return (this._idCounter++).toString();
};
SelectControlValueAccessor.prototype._getOptionId = function(value) {
for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
var id = _a[_i];
if (looseIdentical(this._optionMap.get(id), value)) return id;
}
return null;
};
SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
var id = _extractId(valueString);
return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
};
SelectControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ SELECT_VALUE_ACCESSOR ]
} ]
} ];
SelectControlValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
return SelectControlValueAccessor;
}();
var NgSelectOption = function() {
function NgSelectOption(_element, _renderer, _select) {
this._element = _element;
this._renderer = _renderer;
this._select = _select;
if (this._select) this.id = this._select._registerOption();
}
Object.defineProperty(NgSelectOption.prototype, "ngValue", {
set: function(value) {
if (this._select == null) return;
this._select._optionMap.set(this.id, value);
this._setElementValue(_buildValueString(this.id, value));
this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgSelectOption.prototype, "value", {
set: function(value) {
this._setElementValue(value);
if (this._select) this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
NgSelectOption.prototype._setElementValue = function(value) {
this._renderer.setElementProperty(this._element.nativeElement, "value", value);
};
NgSelectOption.prototype.ngOnDestroy = function() {
if (this._select) {
this._select._optionMap.delete(this.id);
this._select.writeValue(this._select.value);
}
};
NgSelectOption.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "option"
} ]
} ];
NgSelectOption.ctorParameters = [ {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
}, {
type: SelectControlValueAccessor,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
} ]
} ];
NgSelectOption.propDecorators = {
ngValue: [ {
type: _angular_core.Input,
args: [ "ngValue" ]
} ],
value: [ {
type: _angular_core.Input,
args: [ "value" ]
} ]
};
return NgSelectOption;
}();
var SELECT_MULTIPLE_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return SelectMultipleControlValueAccessor;
}),
multi: true
};
function _buildValueString$1(id, value) {
if (id == null) return "" + value;
if (typeof value === "string") value = "'" + value + "'";
if (!isPrimitive(value)) value = "Object";
return (id + ": " + value).slice(0, 50);
}
function _extractId$1(valueString) {
return valueString.split(":")[0];
}
var SelectMultipleControlValueAccessor = function() {
function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._optionMap = new Map();
this._idCounter = 0;
this.onChange = function(_) {};
this.onTouched = function() {};
}
SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
var _this = this;
this.value = value;
if (value == null) return;
var values = value;
var ids = values.map(function(v) {
return _this._getOptionId(v);
});
this._optionMap.forEach(function(opt, o) {
opt._setSelected(ids.indexOf(o.toString()) > -1);
});
};
SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(_) {
var selected = [];
if (_.hasOwnProperty("selectedOptions")) {
var options = _.selectedOptions;
for (var i = 0; i < options.length; i++) {
var opt = options.item(i);
var val = _this._getOptionValue(opt.value);
selected.push(val);
}
} else {
var options = _.options;
for (var i = 0; i < options.length; i++) {
var opt = options.item(i);
if (opt.selected) {
var val = _this._getOptionValue(opt.value);
selected.push(val);
}
}
}
fn(selected);
};
};
SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectMultipleControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
var id = (this._idCounter++).toString();
this._optionMap.set(id, value);
return id;
};
SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
var id = _a[_i];
if (looseIdentical(this._optionMap.get(id)._value, value)) return id;
}
return null;
};
SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
var id = _extractId$1(valueString);
return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
};
SelectMultipleControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]",
host: {
"(change)": "onChange($event.target)",
"(blur)": "onTouched()"
},
providers: [ SELECT_MULTIPLE_VALUE_ACCESSOR ]
} ]
} ];
SelectMultipleControlValueAccessor.ctorParameters = [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
return SelectMultipleControlValueAccessor;
}();
var NgSelectMultipleOption = function() {
function NgSelectMultipleOption(_element, _renderer, _select) {
this._element = _element;
this._renderer = _renderer;
this._select = _select;
if (this._select) {
this.id = this._select._registerOption(this);
}
}
Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
set: function(value) {
if (this._select == null) return;
this._value = value;
this._setElementValue(_buildValueString$1(this.id, value));
this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
set: function(value) {
if (this._select) {
this._value = value;
this._setElementValue(_buildValueString$1(this.id, value));
this._select.writeValue(this._select.value);
} else {
this._setElementValue(value);
}
},
enumerable: true,
configurable: true
});
NgSelectMultipleOption.prototype._setElementValue = function(value) {
this._renderer.setElementProperty(this._element.nativeElement, "value", value);
};
NgSelectMultipleOption.prototype._setSelected = function(selected) {
this._renderer.setElementProperty(this._element.nativeElement, "selected", selected);
};
NgSelectMultipleOption.prototype.ngOnDestroy = function() {
if (this._select) {
this._select._optionMap.delete(this.id);
this._select.writeValue(this._select.value);
}
};
NgSelectMultipleOption.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "option"
} ]
} ];
NgSelectMultipleOption.ctorParameters = [ {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
}, {
type: SelectMultipleControlValueAccessor,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
} ]
} ];
NgSelectMultipleOption.propDecorators = {
ngValue: [ {
type: _angular_core.Input,
args: [ "ngValue" ]
} ],
value: [ {
type: _angular_core.Input,
args: [ "value" ]
} ]
};
return NgSelectMultipleOption;
}();
function controlPath(name, parent) {
return parent.path.concat([ name ]);
}
function setUpControl(control, dir) {
if (!control) _throwError(dir, "Cannot find control with");
if (!dir.valueAccessor) _throwError(dir, "No value accessor for form control with");
control.validator = Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
dir.valueAccessor.writeValue(control.value);
dir.valueAccessor.registerOnChange(function(newValue) {
dir.viewToModelUpdate(newValue);
control.markAsDirty();
control.setValue(newValue, {
emitModelToViewChange: false
});
});
dir.valueAccessor.registerOnTouched(function() {
return control.markAsTouched();
});
control.registerOnChange(function(newValue, emitModelEvent) {
dir.valueAccessor.writeValue(newValue);
if (emitModelEvent) dir.viewToModelUpdate(newValue);
});
if (dir.valueAccessor.setDisabledState) {
control.registerOnDisabledChange(function(isDisabled) {
dir.valueAccessor.setDisabledState(isDisabled);
});
}
dir._rawValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function() {
return control.updateValueAndValidity();
});
});
dir._rawAsyncValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function() {
return control.updateValueAndValidity();
});
});
}
function cleanUpControl(control, dir) {
dir.valueAccessor.registerOnChange(function() {
return _noControlError(dir);
});
dir.valueAccessor.registerOnTouched(function() {
return _noControlError(dir);
});
dir._rawValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) {
validator.registerOnValidatorChange(null);
}
});
dir._rawAsyncValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) {
validator.registerOnValidatorChange(null);
}
});
if (control) control._clearChangeFns();
}
function setUpFormContainer(control, dir) {
if (isBlank(control)) _throwError(dir, "Cannot find control with");
control.validator = Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
}
function _noControlError(dir) {
return _throwError(dir, "There is no FormControl instance attached to form control element with");
}
function _throwError(dir, message) {
var messageEnd;
if (dir.path.length > 1) {
messageEnd = "path: '" + dir.path.join(" -> ") + "'";
} else if (dir.path[0]) {
messageEnd = "name: '" + dir.path + "'";
} else {
messageEnd = "unspecified name attribute";
}
throw new Error(message + " " + messageEnd);
}
function composeValidators(validators) {
return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
}
function composeAsyncValidators(validators) {
return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
}
function isPropertyUpdated(changes, viewModel) {
if (!changes.hasOwnProperty("model")) return false;
var change = changes["model"];
if (change.isFirstChange()) return true;
return !looseIdentical(viewModel, change.currentValue);
}
var BUILTIN_ACCESSORS = [ CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor ];
function isBuiltInAccessor(valueAccessor) {
return BUILTIN_ACCESSORS.some(function(a) {
return valueAccessor.constructor === a;
});
}
function selectValueAccessor(dir, valueAccessors) {
if (!valueAccessors) return null;
var defaultAccessor;
var builtinAccessor;
var customAccessor;
valueAccessors.forEach(function(v) {
if (v.constructor === DefaultValueAccessor) {
defaultAccessor = v;
} else if (isBuiltInAccessor(v)) {
if (builtinAccessor) _throwError(dir, "More than one built-in value accessor matches form control with");
builtinAccessor = v;
} else {
if (customAccessor) _throwError(dir, "More than one custom value accessor matches form control with");
customAccessor = v;
}
});
if (customAccessor) return customAccessor;
if (builtinAccessor) return builtinAccessor;
if (defaultAccessor) return defaultAccessor;
_throwError(dir, "No valid value accessor for form control with");
return null;
}
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractFormGroupDirective = function(_super) {
__extends(AbstractFormGroupDirective, _super);
function AbstractFormGroupDirective() {
_super.apply(this, arguments);
}
AbstractFormGroupDirective.prototype.ngOnInit = function() {
this._checkParentType();
this.formDirective.addFormGroup(this);
};
AbstractFormGroupDirective.prototype.ngOnDestroy = function() {
if (this.formDirective) {
this.formDirective.removeFormGroup(this);
}
};
Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
get: function() {
return this.formDirective.getFormGroup(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
get: function() {
return controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
get: function() {
return composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
AbstractFormGroupDirective.prototype._checkParentType = function() {};
return AbstractFormGroupDirective;
}(ControlContainer);
var __extends$3 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractControlStatus = function() {
function AbstractControlStatus(cd) {
this._cd = cd;
}
Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
get: function() {
return this._cd.control ? this._cd.control.untouched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
get: function() {
return this._cd.control ? this._cd.control.touched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
get: function() {
return this._cd.control ? this._cd.control.pristine : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
get: function() {
return this._cd.control ? this._cd.control.dirty : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
get: function() {
return this._cd.control ? this._cd.control.valid : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
get: function() {
return this._cd.control ? this._cd.control.invalid : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
get: function() {
return this._cd.control ? this._cd.control.pending : false;
},
enumerable: true,
configurable: true
});
return AbstractControlStatus;
}();
var ngControlStatusHost = {
"[class.ng-untouched]": "ngClassUntouched",
"[class.ng-touched]": "ngClassTouched",
"[class.ng-pristine]": "ngClassPristine",
"[class.ng-dirty]": "ngClassDirty",
"[class.ng-valid]": "ngClassValid",
"[class.ng-invalid]": "ngClassInvalid",
"[class.ng-pending]": "ngClassPending"
};
var NgControlStatus = function(_super) {
__extends$3(NgControlStatus, _super);
function NgControlStatus(cd) {
_super.call(this, cd);
}
NgControlStatus.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formControlName],[ngModel],[formControl]",
host: ngControlStatusHost
} ]
} ];
NgControlStatus.ctorParameters = [ {
type: NgControl,
decorators: [ {
type: _angular_core.Self
} ]
} ];
return NgControlStatus;
}(AbstractControlStatus);
var NgControlStatusGroup = function(_super) {
__extends$3(NgControlStatusGroup, _super);
function NgControlStatusGroup(cd) {
_super.call(this, cd);
}
NgControlStatusGroup.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]",
host: ngControlStatusHost
} ]
} ];
NgControlStatusGroup.ctorParameters = [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Self
} ]
} ];
return NgControlStatusGroup;
}(AbstractControlStatus);
var __extends$5 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventEmitter = function(_super) {
__extends$5(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = false;
}
_super.call(this);
this.__isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this.__isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this.__isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this.__isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this.__isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this.__isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this.__isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(rxjs_Subject.Subject);
var __extends$6 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var VALID = "VALID";
var INVALID = "INVALID";
var PENDING = "PENDING";
var DISABLED = "DISABLED";
function _find(control, path, delimiter) {
if (path == null) return null;
if (!(path instanceof Array)) {
path = path.split(delimiter);
}
if (path instanceof Array && path.length === 0) return null;
return path.reduce(function(v, name) {
if (v instanceof FormGroup) {
return v.controls[name] || null;
}
if (v instanceof FormArray) {
return v.at(name) || null;
}
return null;
}, control);
}
function toObservable(r) {
return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
}
function coerceToValidator(validator) {
return Array.isArray(validator) ? composeValidators(validator) : validator;
}
function coerceToAsyncValidator(asyncValidator) {
return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
}
var AbstractControl = function() {
function AbstractControl(validator, asyncValidator) {
this.validator = validator;
this.asyncValidator = asyncValidator;
this._onCollectionChange = function() {};
this._pristine = true;
this._touched = false;
this._onDisabledChange = [];
}
Object.defineProperty(AbstractControl.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valid", {
get: function() {
return this._status === VALID;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "invalid", {
get: function() {
return this._status === INVALID;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pending", {
get: function() {
return this._status == PENDING;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "disabled", {
get: function() {
return this._status === DISABLED;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "enabled", {
get: function() {
return this._status !== DISABLED;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "errors", {
get: function() {
return this._errors;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pristine", {
get: function() {
return this._pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "dirty", {
get: function() {
return !this.pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "touched", {
get: function() {
return this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "untouched", {
get: function() {
return !this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valueChanges", {
get: function() {
return this._valueChanges;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "statusChanges", {
get: function() {
return this._statusChanges;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype.setValidators = function(newValidator) {
this.validator = coerceToValidator(newValidator);
};
AbstractControl.prototype.setAsyncValidators = function(newValidator) {
this.asyncValidator = coerceToAsyncValidator(newValidator);
};
AbstractControl.prototype.clearValidators = function() {
this.validator = null;
};
AbstractControl.prototype.clearAsyncValidators = function() {
this.asyncValidator = null;
};
AbstractControl.prototype.markAsTouched = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._touched = true;
if (this._parent && !onlySelf) {
this._parent.markAsTouched({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsUntouched = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._touched = false;
this._forEachChild(function(control) {
control.markAsUntouched({
onlySelf: true
});
});
if (this._parent && !onlySelf) {
this._parent._updateTouched({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsDirty = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._pristine = false;
if (this._parent && !onlySelf) {
this._parent.markAsDirty({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsPristine = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._pristine = true;
this._forEachChild(function(control) {
control.markAsPristine({
onlySelf: true
});
});
if (this._parent && !onlySelf) {
this._parent._updatePristine({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsPending = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._status = PENDING;
if (this._parent && !onlySelf) {
this._parent.markAsPending({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.disable = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._status = DISABLED;
this._errors = null;
this._forEachChild(function(control) {
control.disable({
onlySelf: true
});
});
this._updateValue();
if (emitEvent !== false) {
this._valueChanges.emit(this._value);
this._statusChanges.emit(this._status);
}
this._updateAncestors(onlySelf);
this._onDisabledChange.forEach(function(changeFn) {
return changeFn(true);
});
};
AbstractControl.prototype.enable = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._status = VALID;
this._forEachChild(function(control) {
control.enable({
onlySelf: true
});
});
this.updateValueAndValidity({
onlySelf: true,
emitEvent: emitEvent
});
this._updateAncestors(onlySelf);
this._onDisabledChange.forEach(function(changeFn) {
return changeFn(false);
});
};
AbstractControl.prototype._updateAncestors = function(onlySelf) {
if (this._parent && !onlySelf) {
this._parent.updateValueAndValidity();
this._parent._updatePristine();
this._parent._updateTouched();
}
};
AbstractControl.prototype.setParent = function(parent) {
this._parent = parent;
};
AbstractControl.prototype.updateValueAndValidity = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._setInitialStatus();
this._updateValue();
if (this.enabled) {
this._errors = this._runValidator();
this._status = this._calculateStatus();
if (this._status === VALID || this._status === PENDING) {
this._runAsyncValidator(emitEvent);
}
}
if (emitEvent !== false) {
this._valueChanges.emit(this._value);
this._statusChanges.emit(this._status);
}
if (this._parent && !onlySelf) {
this._parent.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
}
};
AbstractControl.prototype._updateTreeValidity = function(_a) {
var emitEvent = (_a === void 0 ? {
emitEvent: true
} : _a).emitEvent;
this._forEachChild(function(ctrl) {
return ctrl._updateTreeValidity({
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: true,
emitEvent: emitEvent
});
};
AbstractControl.prototype._setInitialStatus = function() {
this._status = this._allControlsDisabled() ? DISABLED : VALID;
};
AbstractControl.prototype._runValidator = function() {
return this.validator ? this.validator(this) : null;
};
AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
var _this = this;
if (this.asyncValidator) {
this._status = PENDING;
this._cancelExistingSubscription();
var obs = toObservable(this.asyncValidator(this));
this._asyncValidationSubscription = obs.subscribe({
next: function(res) {
return _this.setErrors(res, {
emitEvent: emitEvent
});
}
});
}
};
AbstractControl.prototype._cancelExistingSubscription = function() {
if (this._asyncValidationSubscription) {
this._asyncValidationSubscription.unsubscribe();
}
};
AbstractControl.prototype.setErrors = function(errors, _a) {
var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
this._errors = errors;
this._updateControlsErrors(emitEvent !== false);
};
AbstractControl.prototype.get = function(path) {
return _find(this, path, ".");
};
AbstractControl.prototype.getError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
var control = path ? this.get(path) : this;
return control && control._errors ? control._errors[errorCode] : null;
};
AbstractControl.prototype.hasError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
return !!this.getError(errorCode, path);
};
Object.defineProperty(AbstractControl.prototype, "root", {
get: function() {
var x = this;
while (x._parent) {
x = x._parent;
}
return x;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype._updateControlsErrors = function(emitEvent) {
this._status = this._calculateStatus();
if (emitEvent) {
this._statusChanges.emit(this._status);
}
if (this._parent) {
this._parent._updateControlsErrors(emitEvent);
}
};
AbstractControl.prototype._initObservables = function() {
this._valueChanges = new EventEmitter();
this._statusChanges = new EventEmitter();
};
AbstractControl.prototype._calculateStatus = function() {
if (this._allControlsDisabled()) return DISABLED;
if (this._errors) return INVALID;
if (this._anyControlsHaveStatus(PENDING)) return PENDING;
if (this._anyControlsHaveStatus(INVALID)) return INVALID;
return VALID;
};
AbstractControl.prototype._anyControlsHaveStatus = function(status) {
return this._anyControls(function(control) {
return control.status === status;
});
};
AbstractControl.prototype._anyControlsDirty = function() {
return this._anyControls(function(control) {
return control.dirty;
});
};
AbstractControl.prototype._anyControlsTouched = function() {
return this._anyControls(function(control) {
return control.touched;
});
};
AbstractControl.prototype._updatePristine = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._pristine = !this._anyControlsDirty();
if (this._parent && !onlySelf) {
this._parent._updatePristine({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype._updateTouched = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._touched = this._anyControlsTouched();
if (this._parent && !onlySelf) {
this._parent._updateTouched({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype._isBoxedValue = function(formState) {
return typeof formState === "object" && formState !== null && Object.keys(formState).length === 2 && "value" in formState && "disabled" in formState;
};
AbstractControl.prototype._registerOnCollectionChange = function(fn) {
this._onCollectionChange = fn;
};
return AbstractControl;
}();
var FormControl = function(_super) {
__extends$6(FormControl, _super);
function FormControl(formState, validator, asyncValidator) {
if (formState === void 0) {
formState = null;
}
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
this._onChange = [];
this._applyFormState(formState);
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
this._initObservables();
}
FormControl.prototype.setValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
this._value = value;
if (this._onChange.length && emitModelToViewChange !== false) {
this._onChange.forEach(function(changeFn) {
return changeFn(_this._value, emitViewToModelChange !== false);
});
}
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormControl.prototype.patchValue = function(value, options) {
if (options === void 0) {
options = {};
}
this.setValue(value, options);
};
FormControl.prototype.reset = function(formState, _a) {
if (formState === void 0) {
formState = null;
}
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._applyFormState(formState);
this.markAsPristine({
onlySelf: onlySelf
});
this.markAsUntouched({
onlySelf: onlySelf
});
this.setValue(this._value, {
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormControl.prototype._updateValue = function() {};
FormControl.prototype._anyControls = function(condition) {
return false;
};
FormControl.prototype._allControlsDisabled = function() {
return this.disabled;
};
FormControl.prototype.registerOnChange = function(fn) {
this._onChange.push(fn);
};
FormControl.prototype._clearChangeFns = function() {
this._onChange = [];
this._onDisabledChange = [];
this._onCollectionChange = function() {};
};
FormControl.prototype.registerOnDisabledChange = function(fn) {
this._onDisabledChange.push(fn);
};
FormControl.prototype._forEachChild = function(cb) {};
FormControl.prototype._applyFormState = function(formState) {
if (this._isBoxedValue(formState)) {
this._value = formState.value;
formState.disabled ? this.disable({
onlySelf: true,
emitEvent: false
}) : this.enable({
onlySelf: true,
emitEvent: false
});
} else {
this._value = formState;
}
};
return FormControl;
}(AbstractControl);
var FormGroup = function(_super) {
__extends$6(FormGroup, _super);
function FormGroup(controls, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this.controls = controls;
this._initObservables();
this._setUpControls();
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
FormGroup.prototype.registerControl = function(name, control) {
if (this.controls[name]) return this.controls[name];
this.controls[name] = control;
control.setParent(this);
control._registerOnCollectionChange(this._onCollectionChange);
return control;
};
FormGroup.prototype.addControl = function(name, control) {
this.registerControl(name, control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormGroup.prototype.removeControl = function(name) {
if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function() {});
delete this.controls[name];
this.updateValueAndValidity();
this._onCollectionChange();
};
FormGroup.prototype.setControl = function(name, control) {
if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function() {});
delete this.controls[name];
if (control) this.registerControl(name, control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormGroup.prototype.contains = function(controlName) {
return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
};
FormGroup.prototype.setValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._checkAllValuesPresent(value);
Object.keys(value).forEach(function(name) {
_this._throwIfControlMissing(name);
_this.controls[name].setValue(value[name], {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormGroup.prototype.patchValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
Object.keys(value).forEach(function(name) {
if (_this.controls[name]) {
_this.controls[name].patchValue(value[name], {
onlySelf: true,
emitEvent: emitEvent
});
}
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormGroup.prototype.reset = function(value, _a) {
if (value === void 0) {
value = {};
}
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._forEachChild(function(control, name) {
control.reset(value[name], {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
this._updatePristine({
onlySelf: onlySelf
});
this._updateTouched({
onlySelf: onlySelf
});
};
FormGroup.prototype.getRawValue = function() {
return this._reduceChildren({}, function(acc, control, name) {
acc[name] = control.value;
return acc;
});
};
FormGroup.prototype._throwIfControlMissing = function(name) {
if (!Object.keys(this.controls).length) {
throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
}
if (!this.controls[name]) {
throw new Error("Cannot find form control with name: " + name + ".");
}
};
FormGroup.prototype._forEachChild = function(cb) {
var _this = this;
Object.keys(this.controls).forEach(function(k) {
return cb(_this.controls[k], k);
});
};
FormGroup.prototype._setUpControls = function() {
var _this = this;
this._forEachChild(function(control) {
control.setParent(_this);
control._registerOnCollectionChange(_this._onCollectionChange);
});
};
FormGroup.prototype._updateValue = function() {
this._value = this._reduceValue();
};
FormGroup.prototype._anyControls = function(condition) {
var _this = this;
var res = false;
this._forEachChild(function(control, name) {
res = res || _this.contains(name) && condition(control);
});
return res;
};
FormGroup.prototype._reduceValue = function() {
var _this = this;
return this._reduceChildren({}, function(acc, control, name) {
if (control.enabled || _this.disabled) {
acc[name] = control.value;
}
return acc;
});
};
FormGroup.prototype._reduceChildren = function(initValue, fn) {
var res = initValue;
this._forEachChild(function(control, name) {
res = fn(res, control, name);
});
return res;
};
FormGroup.prototype._allControlsDisabled = function() {
for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
var controlName = _a[_i];
if (this.controls[controlName].enabled) {
return false;
}
}
return Object.keys(this.controls).length > 0 || this.disabled;
};
FormGroup.prototype._checkAllValuesPresent = function(value) {
this._forEachChild(function(control, name) {
if (value[name] === undefined) {
throw new Error("Must supply a value for form control with name: '" + name + "'.");
}
});
};
return FormGroup;
}(AbstractControl);
var FormArray = function(_super) {
__extends$6(FormArray, _super);
function FormArray(controls, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this.controls = controls;
this._initObservables();
this._setUpControls();
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
FormArray.prototype.at = function(index) {
return this.controls[index];
};
FormArray.prototype.push = function(control) {
this.controls.push(control);
this._registerControl(control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormArray.prototype.insert = function(index, control) {
this.controls.splice(index, 0, control);
this._registerControl(control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormArray.prototype.removeAt = function(index) {
if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function() {});
this.controls.splice(index, 1);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormArray.prototype.setControl = function(index, control) {
if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function() {});
this.controls.splice(index, 1);
if (control) {
this.controls.splice(index, 0, control);
this._registerControl(control);
}
this.updateValueAndValidity();
this._onCollectionChange();
};
Object.defineProperty(FormArray.prototype, "length", {
get: function() {
return this.controls.length;
},
enumerable: true,
configurable: true
});
FormArray.prototype.setValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._checkAllValuesPresent(value);
value.forEach(function(newValue, index) {
_this._throwIfControlMissing(index);
_this.at(index).setValue(newValue, {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormArray.prototype.patchValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
value.forEach(function(newValue, index) {
if (_this.at(index)) {
_this.at(index).patchValue(newValue, {
onlySelf: true,
emitEvent: emitEvent
});
}
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormArray.prototype.reset = function(value, _a) {
if (value === void 0) {
value = [];
}
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._forEachChild(function(control, index) {
control.reset(value[index], {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
this._updatePristine({
onlySelf: onlySelf
});
this._updateTouched({
onlySelf: onlySelf
});
};
FormArray.prototype.getRawValue = function() {
return this.controls.map(function(control) {
return control.value;
});
};
FormArray.prototype._throwIfControlMissing = function(index) {
if (!this.controls.length) {
throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
}
if (!this.at(index)) {
throw new Error("Cannot find form control at index " + index);
}
};
FormArray.prototype._forEachChild = function(cb) {
this.controls.forEach(function(control, index) {
cb(control, index);
});
};
FormArray.prototype._updateValue = function() {
var _this = this;
this._value = this.controls.filter(function(control) {
return control.enabled || _this.disabled;
}).map(function(control) {
return control.value;
});
};
FormArray.prototype._anyControls = function(condition) {
return this.controls.some(function(control) {
return control.enabled && condition(control);
});
};
FormArray.prototype._setUpControls = function() {
var _this = this;
this._forEachChild(function(control) {
return _this._registerControl(control);
});
};
FormArray.prototype._checkAllValuesPresent = function(value) {
this._forEachChild(function(control, i) {
if (value[i] === undefined) {
throw new Error("Must supply a value for form control at index: " + i + ".");
}
});
};
FormArray.prototype._allControlsDisabled = function() {
for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
var control = _a[_i];
if (control.enabled) return false;
}
return this.controls.length > 0 || this.disabled;
};
FormArray.prototype._registerControl = function(control) {
control.setParent(this);
control._registerOnCollectionChange(this._onCollectionChange);
};
return FormArray;
}(AbstractControl);
var __extends$4 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formDirectiveProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return NgForm;
})
};
var resolvedPromise = Promise.resolve(null);
var NgForm = function(_super) {
__extends$4(NgForm, _super);
function NgForm(validators, asyncValidators) {
_super.call(this);
this._submitted = false;
this.ngSubmit = new EventEmitter();
this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
}
Object.defineProperty(NgForm.prototype, "submitted", {
get: function() {
return this._submitted;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "controls", {
get: function() {
return this.form.controls;
},
enumerable: true,
configurable: true
});
NgForm.prototype.addControl = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
dir._control = container.registerControl(dir.name, dir.control);
setUpControl(dir.control, dir);
dir.control.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.getControl = function(dir) {
return this.form.get(dir.path);
};
NgForm.prototype.removeControl = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
if (container) {
container.removeControl(dir.name);
}
});
};
NgForm.prototype.addFormGroup = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
var group = new FormGroup({});
setUpFormContainer(group, dir);
container.registerControl(dir.name, group);
group.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.removeFormGroup = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
if (container) {
container.removeControl(dir.name);
}
});
};
NgForm.prototype.getFormGroup = function(dir) {
return this.form.get(dir.path);
};
NgForm.prototype.updateModel = function(dir, value) {
var _this = this;
resolvedPromise.then(function() {
var ctrl = _this.form.get(dir.path);
ctrl.setValue(value);
});
};
NgForm.prototype.setValue = function(value) {
this.control.setValue(value);
};
NgForm.prototype.onSubmit = function($event) {
this._submitted = true;
this.ngSubmit.emit($event);
return false;
};
NgForm.prototype.onReset = function() {
this.resetForm();
};
NgForm.prototype.resetForm = function(value) {
if (value === void 0) {
value = undefined;
}
this.form.reset(value);
this._submitted = false;
};
NgForm.prototype._findContainer = function(path) {
path.pop();
return path.length ? this.form.get(path) : this.form;
};
NgForm.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]",
providers: [ formDirectiveProvider ],
host: {
"(submit)": "onSubmit($event)",
"(reset)": "onReset()"
},
outputs: [ "ngSubmit" ],
exportAs: "ngForm"
} ]
} ];
NgForm.ctorParameters = [ {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
return NgForm;
}(ControlContainer);
var Examples = {
formControlName: '\n    <div [formGroup]="myGroup">\n      <input formControlName="firstName">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });',
formGroupName: '\n    <div [formGroup]="myGroup">\n       <div formGroupName="person">\n          <input formControlName="firstName">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });',
formArrayName: '\n    <div [formGroup]="myGroup">\n      <div formArrayName="cities">\n        <div *ngFor="let city of cityArray.controls; let i=index">\n          <input [formControlName]="i">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl(\'SF\')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });',
ngModelGroup: '\n    <form>\n       <div ngModelGroup="person">\n          <input [(ngModel)]="person.name" name="firstName">\n       </div>\n    </form>',
ngModelWithFormGroup: '\n    <div [formGroup]="myGroup">\n       <input formControlName="firstName">\n       <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">\n    </div>\n  '
};
var TemplateDrivenErrors = function() {
function TemplateDrivenErrors() {}
TemplateDrivenErrors.modelParentException = function() {
throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup\'s partner directive "formControlName" instead.  Example:\n\n      ' + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
};
TemplateDrivenErrors.formGroupNameException = function() {
throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
};
TemplateDrivenErrors.missingNameException = function() {
throw new Error('If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as \'standalone\' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]="person.firstName" name="first">\n      Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">');
};
TemplateDrivenErrors.modelGroupParentException = function() {
throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
};
return TemplateDrivenErrors;
}();
var __extends$8 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var modelGroupProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return NgModelGroup;
})
};
var NgModelGroup = function(_super) {
__extends$8(NgModelGroup, _super);
function NgModelGroup(parent, validators, asyncValidators) {
_super.call(this);
this._parent = parent;
this._validators = validators;
this._asyncValidators = asyncValidators;
}
NgModelGroup.prototype._checkParentType = function() {
if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
TemplateDrivenErrors.modelGroupParentException();
}
};
NgModelGroup.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngModelGroup]",
providers: [ modelGroupProvider ],
exportAs: "ngModelGroup"
} ]
} ];
NgModelGroup.ctorParameters = [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
NgModelGroup.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "ngModelGroup" ]
} ]
};
return NgModelGroup;
}(AbstractFormGroupDirective);
var __extends$7 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formControlBinding = {
provide: NgControl,
useExisting: _angular_core.forwardRef(function() {
return NgModel;
})
};
var resolvedPromise$1 = Promise.resolve(null);
var NgModel = function(_super) {
__extends$7(NgModel, _super);
function NgModel(parent, validators, asyncValidators, valueAccessors) {
_super.call(this);
this._control = new FormControl();
this._registered = false;
this.update = new EventEmitter();
this._parent = parent;
this._rawValidators = validators || [];
this._rawAsyncValidators = asyncValidators || [];
this.valueAccessor = selectValueAccessor(this, valueAccessors);
}
NgModel.prototype.ngOnChanges = function(changes) {
this._checkForErrors();
if (!this._registered) this._setUpControl();
if ("isDisabled" in changes) {
this._updateDisabled(changes);
}
if (isPropertyUpdated(changes, this.viewModel)) {
this._updateValue(this.model);
this.viewModel = this.model;
}
};
NgModel.prototype.ngOnDestroy = function() {
this.formDirective && this.formDirective.removeControl(this);
};
Object.defineProperty(NgModel.prototype, "control", {
get: function() {
return this._control;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "path", {
get: function() {
return this._parent ? controlPath(this.name, this._parent) : [ this.name ];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "validator", {
get: function() {
return composeValidators(this._rawValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._rawAsyncValidators);
},
enumerable: true,
configurable: true
});
NgModel.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
this.update.emit(newValue);
};
NgModel.prototype._setUpControl = function() {
this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
this._registered = true;
};
NgModel.prototype._isStandalone = function() {
return !this._parent || this.options && this.options.standalone;
};
NgModel.prototype._setUpStandalone = function() {
setUpControl(this._control, this);
this._control.updateValueAndValidity({
emitEvent: false
});
};
NgModel.prototype._checkForErrors = function() {
if (!this._isStandalone()) {
this._checkParentType();
}
this._checkName();
};
NgModel.prototype._checkParentType = function() {
if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
TemplateDrivenErrors.formGroupNameException();
} else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
TemplateDrivenErrors.modelParentException();
}
};
NgModel.prototype._checkName = function() {
if (this.options && this.options.name) this.name = this.options.name;
if (!this._isStandalone() && !this.name) {
TemplateDrivenErrors.missingNameException();
}
};
NgModel.prototype._updateValue = function(value) {
var _this = this;
resolvedPromise$1.then(function() {
_this.control.setValue(value, {
emitViewToModelChange: false
});
});
};
NgModel.prototype._updateDisabled = function(changes) {
var _this = this;
var disabledValue = changes["isDisabled"].currentValue;
var isDisabled = disabledValue === "" || disabledValue && disabledValue !== "false";
resolvedPromise$1.then(function() {
if (isDisabled && !_this.control.disabled) {
_this.control.disable();
} else if (!isDisabled && _this.control.disabled) {
_this.control.enable();
}
});
};
NgModel.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngModel]:not([formControlName]):not([formControl])",
providers: [ formControlBinding ],
exportAs: "ngModel"
} ]
} ];
NgModel.ctorParameters = [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALUE_ACCESSOR ]
} ]
} ];
NgModel.propDecorators = {
name: [ {
type: _angular_core.Input
} ],
isDisabled: [ {
type: _angular_core.Input,
args: [ "disabled" ]
} ],
model: [ {
type: _angular_core.Input,
args: [ "ngModel" ]
} ],
options: [ {
type: _angular_core.Input,
args: [ "ngModelOptions" ]
} ],
update: [ {
type: _angular_core.Output,
args: [ "ngModelChange" ]
} ]
};
return NgModel;
}(NgControl);
var ReactiveErrors = function() {
function ReactiveErrors() {}
ReactiveErrors.controlParentException = function() {
throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
};
ReactiveErrors.ngModelGroupException = function() {
throw new Error('formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a "form" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ' + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
};
ReactiveErrors.missingFormException = function() {
throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
};
ReactiveErrors.groupParentException = function() {
throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
};
ReactiveErrors.arrayParentException = function() {
throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
};
ReactiveErrors.disabledAttrWarning = function() {
console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
};
return ReactiveErrors;
}();
var __extends$9 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formControlBinding$1 = {
provide: NgControl,
useExisting: _angular_core.forwardRef(function() {
return FormControlDirective;
})
};
var FormControlDirective = function(_super) {
__extends$9(FormControlDirective, _super);
function FormControlDirective(validators, asyncValidators, valueAccessors) {
_super.call(this);
this.update = new EventEmitter();
this._rawValidators = validators || [];
this._rawAsyncValidators = asyncValidators || [];
this.valueAccessor = selectValueAccessor(this, valueAccessors);
}
Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
set: function(isDisabled) {
ReactiveErrors.disabledAttrWarning();
},
enumerable: true,
configurable: true
});
FormControlDirective.prototype.ngOnChanges = function(changes) {
if (this._isControlChanged(changes)) {
setUpControl(this.form, this);
if (this.control.disabled && this.valueAccessor.setDisabledState) {
this.valueAccessor.setDisabledState(true);
}
this.form.updateValueAndValidity({
emitEvent: false
});
}
if (isPropertyUpdated(changes, this.viewModel)) {
this.form.setValue(this.model);
this.viewModel = this.model;
}
};
Object.defineProperty(FormControlDirective.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlDirective.prototype, "validator", {
get: function() {
return composeValidators(this._rawValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._rawAsyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlDirective.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
FormControlDirective.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
this.update.emit(newValue);
};
FormControlDirective.prototype._isControlChanged = function(changes) {
return changes.hasOwnProperty("form");
};
FormControlDirective.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formControl]",
providers: [ formControlBinding$1 ],
exportAs: "ngForm"
} ]
} ];
FormControlDirective.ctorParameters = [ {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALUE_ACCESSOR ]
} ]
} ];
FormControlDirective.propDecorators = {
form: [ {
type: _angular_core.Input,
args: [ "formControl" ]
} ],
model: [ {
type: _angular_core.Input,
args: [ "ngModel" ]
} ],
update: [ {
type: _angular_core.Output,
args: [ "ngModelChange" ]
} ],
isDisabled: [ {
type: _angular_core.Input,
args: [ "disabled" ]
} ]
};
return FormControlDirective;
}(NgControl);
var __extends$11 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formDirectiveProvider$1 = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return FormGroupDirective;
})
};
var FormGroupDirective = function(_super) {
__extends$11(FormGroupDirective, _super);
function FormGroupDirective(_validators, _asyncValidators) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this._submitted = false;
this.directives = [];
this.form = null;
this.ngSubmit = new EventEmitter();
}
FormGroupDirective.prototype.ngOnChanges = function(changes) {
this._checkFormPresent();
if (changes.hasOwnProperty("form")) {
this._updateValidators();
this._updateDomValue();
this._updateRegistrations();
}
};
Object.defineProperty(FormGroupDirective.prototype, "submitted", {
get: function() {
return this._submitted;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormGroupDirective.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormGroupDirective.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
FormGroupDirective.prototype.addControl = function(dir) {
var ctrl = this.form.get(dir.path);
setUpControl(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
this.directives.push(dir);
return ctrl;
};
FormGroupDirective.prototype.getControl = function(dir) {
return this.form.get(dir.path);
};
FormGroupDirective.prototype.removeControl = function(dir) {
ListWrapper.remove(this.directives, dir);
};
FormGroupDirective.prototype.addFormGroup = function(dir) {
var ctrl = this.form.get(dir.path);
setUpFormContainer(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
};
FormGroupDirective.prototype.removeFormGroup = function(dir) {};
FormGroupDirective.prototype.getFormGroup = function(dir) {
return this.form.get(dir.path);
};
FormGroupDirective.prototype.addFormArray = function(dir) {
var ctrl = this.form.get(dir.path);
setUpFormContainer(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
};
FormGroupDirective.prototype.removeFormArray = function(dir) {};
FormGroupDirective.prototype.getFormArray = function(dir) {
return this.form.get(dir.path);
};
FormGroupDirective.prototype.updateModel = function(dir, value) {
var ctrl = this.form.get(dir.path);
ctrl.setValue(value);
};
FormGroupDirective.prototype.onSubmit = function($event) {
this._submitted = true;
this.ngSubmit.emit($event);
return false;
};
FormGroupDirective.prototype.onReset = function() {
this.resetForm();
};
FormGroupDirective.prototype.resetForm = function(value) {
if (value === void 0) {
value = undefined;
}
this.form.reset(value);
this._submitted = false;
};
FormGroupDirective.prototype._updateDomValue = function() {
var _this = this;
this.directives.forEach(function(dir) {
var newCtrl = _this.form.get(dir.path);
if (dir._control !== newCtrl) {
cleanUpControl(dir._control, dir);
if (newCtrl) setUpControl(newCtrl, dir);
dir._control = newCtrl;
}
});
this.form._updateTreeValidity({
emitEvent: false
});
};
FormGroupDirective.prototype._updateRegistrations = function() {
var _this = this;
this.form._registerOnCollectionChange(function() {
return _this._updateDomValue();
});
if (this._oldForm) this._oldForm._registerOnCollectionChange(function() {});
this._oldForm = this.form;
};
FormGroupDirective.prototype._updateValidators = function() {
var sync = composeValidators(this._validators);
this.form.validator = Validators.compose([ this.form.validator, sync ]);
var async = composeAsyncValidators(this._asyncValidators);
this.form.asyncValidator = Validators.composeAsync([ this.form.asyncValidator, async ]);
};
FormGroupDirective.prototype._checkFormPresent = function() {
if (!this.form) {
ReactiveErrors.missingFormException();
}
};
FormGroupDirective.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formGroup]",
providers: [ formDirectiveProvider$1 ],
host: {
"(submit)": "onSubmit($event)",
"(reset)": "onReset()"
},
exportAs: "ngForm"
} ]
} ];
FormGroupDirective.ctorParameters = [ {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
FormGroupDirective.propDecorators = {
form: [ {
type: _angular_core.Input,
args: [ "formGroup" ]
} ],
ngSubmit: [ {
type: _angular_core.Output
} ]
};
return FormGroupDirective;
}(ControlContainer);
var __extends$12 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formGroupNameProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return FormGroupName;
})
};
var FormGroupName = function(_super) {
__extends$12(FormGroupName, _super);
function FormGroupName(parent, validators, asyncValidators) {
_super.call(this);
this._parent = parent;
this._validators = validators;
this._asyncValidators = asyncValidators;
}
FormGroupName.prototype._checkParentType = function() {
if (_hasInvalidParent(this._parent)) {
ReactiveErrors.groupParentException();
}
};
FormGroupName.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formGroupName]",
providers: [ formGroupNameProvider ]
} ]
} ];
FormGroupName.ctorParameters = [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
FormGroupName.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "formGroupName" ]
} ]
};
return FormGroupName;
}(AbstractFormGroupDirective);
var formArrayNameProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return FormArrayName;
})
};
var FormArrayName = function(_super) {
__extends$12(FormArrayName, _super);
function FormArrayName(parent, validators, asyncValidators) {
_super.call(this);
this._parent = parent;
this._validators = validators;
this._asyncValidators = asyncValidators;
}
FormArrayName.prototype.ngOnInit = function() {
this._checkParentType();
this.formDirective.addFormArray(this);
};
FormArrayName.prototype.ngOnDestroy = function() {
if (this.formDirective) {
this.formDirective.removeFormArray(this);
}
};
Object.defineProperty(FormArrayName.prototype, "control", {
get: function() {
return this.formDirective.getFormArray(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "path", {
get: function() {
return controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "validator", {
get: function() {
return composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
FormArrayName.prototype._checkParentType = function() {
if (_hasInvalidParent(this._parent)) {
ReactiveErrors.arrayParentException();
}
};
FormArrayName.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formArrayName]",
providers: [ formArrayNameProvider ]
} ]
} ];
FormArrayName.ctorParameters = [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
FormArrayName.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "formArrayName" ]
} ]
};
return FormArrayName;
}(ControlContainer);
function _hasInvalidParent(parent) {
return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
var __extends$10 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var controlNameBinding = {
provide: NgControl,
useExisting: _angular_core.forwardRef(function() {
return FormControlName;
})
};
var FormControlName = function(_super) {
__extends$10(FormControlName, _super);
function FormControlName(parent, validators, asyncValidators, valueAccessors) {
_super.call(this);
this._added = false;
this.update = new EventEmitter();
this._parent = parent;
this._rawValidators = validators || [];
this._rawAsyncValidators = asyncValidators || [];
this.valueAccessor = selectValueAccessor(this, valueAccessors);
}
Object.defineProperty(FormControlName.prototype, "isDisabled", {
set: function(isDisabled) {
ReactiveErrors.disabledAttrWarning();
},
enumerable: true,
configurable: true
});
FormControlName.prototype.ngOnChanges = function(changes) {
if (!this._added) this._setUpControl();
if (isPropertyUpdated(changes, this.viewModel)) {
this.viewModel = this.model;
this.formDirective.updateModel(this, this.model);
}
};
FormControlName.prototype.ngOnDestroy = function() {
if (this.formDirective) {
this.formDirective.removeControl(this);
}
};
FormControlName.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
this.update.emit(newValue);
};
Object.defineProperty(FormControlName.prototype, "path", {
get: function() {
return controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "validator", {
get: function() {
return composeValidators(this._rawValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._rawAsyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "control", {
get: function() {
return this._control;
},
enumerable: true,
configurable: true
});
FormControlName.prototype._checkParentType = function() {
if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
ReactiveErrors.ngModelGroupException();
} else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
ReactiveErrors.controlParentException();
}
};
FormControlName.prototype._setUpControl = function() {
this._checkParentType();
this._control = this.formDirective.addControl(this);
if (this.control.disabled && this.valueAccessor.setDisabledState) {
this.valueAccessor.setDisabledState(true);
}
this._added = true;
};
FormControlName.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formControlName]",
providers: [ controlNameBinding ]
} ]
} ];
FormControlName.ctorParameters = [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALUE_ACCESSOR ]
} ]
} ];
FormControlName.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "formControlName" ]
} ],
model: [ {
type: _angular_core.Input,
args: [ "ngModel" ]
} ],
update: [ {
type: _angular_core.Output,
args: [ "ngModelChange" ]
} ],
isDisabled: [ {
type: _angular_core.Input,
args: [ "disabled" ]
} ]
};
return FormControlName;
}(NgControl);
var REQUIRED_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return RequiredValidator;
}),
multi: true
};
var RequiredValidator = function() {
function RequiredValidator() {}
Object.defineProperty(RequiredValidator.prototype, "required", {
get: function() {
return this._required;
},
set: function(value) {
this._required = value != null && value !== false && "" + value !== "false";
if (this._onChange) this._onChange();
},
enumerable: true,
configurable: true
});
RequiredValidator.prototype.validate = function(c) {
return this.required ? Validators.required(c) : null;
};
RequiredValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
RequiredValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[required][formControlName],[required][formControl],[required][ngModel]",
providers: [ REQUIRED_VALIDATOR ],
host: {
"[attr.required]": 'required ? "" : null'
}
} ]
} ];
RequiredValidator.ctorParameters = [];
RequiredValidator.propDecorators = {
required: [ {
type: _angular_core.Input
} ]
};
return RequiredValidator;
}();
var MIN_LENGTH_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return MinLengthValidator;
}),
multi: true
};
var MinLengthValidator = function() {
function MinLengthValidator() {}
MinLengthValidator.prototype.ngOnChanges = function(changes) {
if ("minlength" in changes) {
this._createValidator();
if (this._onChange) this._onChange();
}
};
MinLengthValidator.prototype.validate = function(c) {
return this.minlength == null ? null : this._validator(c);
};
MinLengthValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
MinLengthValidator.prototype._createValidator = function() {
this._validator = Validators.minLength(parseInt(this.minlength, 10));
};
MinLengthValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]",
providers: [ MIN_LENGTH_VALIDATOR ],
host: {
"[attr.minlength]": "minlength ? minlength : null"
}
} ]
} ];
MinLengthValidator.ctorParameters = [];
MinLengthValidator.propDecorators = {
minlength: [ {
type: _angular_core.Input
} ]
};
return MinLengthValidator;
}();
var MAX_LENGTH_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return MaxLengthValidator;
}),
multi: true
};
var MaxLengthValidator = function() {
function MaxLengthValidator() {}
MaxLengthValidator.prototype.ngOnChanges = function(changes) {
if ("maxlength" in changes) {
this._createValidator();
if (this._onChange) this._onChange();
}
};
MaxLengthValidator.prototype.validate = function(c) {
return this.maxlength != null ? this._validator(c) : null;
};
MaxLengthValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
MaxLengthValidator.prototype._createValidator = function() {
this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
};
MaxLengthValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]",
providers: [ MAX_LENGTH_VALIDATOR ],
host: {
"[attr.maxlength]": "maxlength ? maxlength : null"
}
} ]
} ];
MaxLengthValidator.ctorParameters = [];
MaxLengthValidator.propDecorators = {
maxlength: [ {
type: _angular_core.Input
} ]
};
return MaxLengthValidator;
}();
var PATTERN_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return PatternValidator;
}),
multi: true
};
var PatternValidator = function() {
function PatternValidator() {}
PatternValidator.prototype.ngOnChanges = function(changes) {
if ("pattern" in changes) {
this._createValidator();
if (this._onChange) this._onChange();
}
};
PatternValidator.prototype.validate = function(c) {
return this._validator(c);
};
PatternValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
PatternValidator.prototype._createValidator = function() {
this._validator = Validators.pattern(this.pattern);
};
PatternValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]",
providers: [ PATTERN_VALIDATOR ],
host: {
"[attr.pattern]": "pattern ? pattern : null"
}
} ]
} ];
PatternValidator.ctorParameters = [];
PatternValidator.propDecorators = {
pattern: [ {
type: _angular_core.Input
} ]
};
return PatternValidator;
}();
var FormBuilder = function() {
function FormBuilder() {}
FormBuilder.prototype.group = function(controlsConfig, extra) {
if (extra === void 0) {
extra = null;
}
var controls = this._reduceControls(controlsConfig);
var validator = isPresent(extra) ? extra["validator"] : null;
var asyncValidator = isPresent(extra) ? extra["asyncValidator"] : null;
return new FormGroup(controls, validator, asyncValidator);
};
FormBuilder.prototype.control = function(formState, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
return new FormControl(formState, validator, asyncValidator);
};
FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
var _this = this;
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
var controls = controlsConfig.map(function(c) {
return _this._createControl(c);
});
return new FormArray(controls, validator, asyncValidator);
};
FormBuilder.prototype._reduceControls = function(controlsConfig) {
var _this = this;
var controls = {};
Object.keys(controlsConfig).forEach(function(controlName) {
controls[controlName] = _this._createControl(controlsConfig[controlName]);
});
return controls;
};
FormBuilder.prototype._createControl = function(controlConfig) {
if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
return controlConfig;
} else if (Array.isArray(controlConfig)) {
var value = controlConfig[0];
var validator = controlConfig.length > 1 ? controlConfig[1] : null;
var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
return this.control(value, validator, asyncValidator);
} else {
return this.control(controlConfig);
}
};
FormBuilder.decorators = [ {
type: _angular_core.Injectable
} ];
FormBuilder.ctorParameters = [];
return FormBuilder;
}();
var SHARED_FORM_DIRECTIVES = [ NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator ];
var TEMPLATE_DRIVEN_DIRECTIVES = [ NgModel, NgModelGroup, NgForm ];
var REACTIVE_DRIVEN_DIRECTIVES = [ FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName ];
var InternalFormsSharedModule = function() {
function InternalFormsSharedModule() {}
InternalFormsSharedModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: SHARED_FORM_DIRECTIVES,
exports: SHARED_FORM_DIRECTIVES
} ]
} ];
InternalFormsSharedModule.ctorParameters = [];
return InternalFormsSharedModule;
}();
var FormsModule = function() {
function FormsModule() {}
FormsModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: TEMPLATE_DRIVEN_DIRECTIVES,
providers: [ RadioControlRegistry ],
exports: [ InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES ]
} ]
} ];
FormsModule.ctorParameters = [];
return FormsModule;
}();
var ReactiveFormsModule = function() {
function ReactiveFormsModule() {}
ReactiveFormsModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: [ REACTIVE_DRIVEN_DIRECTIVES ],
providers: [ FormBuilder, RadioControlRegistry ],
exports: [ InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES ]
} ]
} ];
ReactiveFormsModule.ctorParameters = [];
return ReactiveFormsModule;
}();
exports.AbstractControlDirective = AbstractControlDirective;
exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
exports.ControlContainer = ControlContainer;
exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
exports.DefaultValueAccessor = DefaultValueAccessor;
exports.NgControl = NgControl;
exports.NgControlStatus = NgControlStatus;
exports.NgControlStatusGroup = NgControlStatusGroup;
exports.NgForm = NgForm;
exports.NgModel = NgModel;
exports.NgModelGroup = NgModelGroup;
exports.RadioControlValueAccessor = RadioControlValueAccessor;
exports.FormControlDirective = FormControlDirective;
exports.FormControlName = FormControlName;
exports.FormGroupDirective = FormGroupDirective;
exports.FormArrayName = FormArrayName;
exports.FormGroupName = FormGroupName;
exports.NgSelectOption = NgSelectOption;
exports.SelectControlValueAccessor = SelectControlValueAccessor;
exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
exports.MaxLengthValidator = MaxLengthValidator;
exports.MinLengthValidator = MinLengthValidator;
exports.PatternValidator = PatternValidator;
exports.RequiredValidator = RequiredValidator;
exports.FormBuilder = FormBuilder;
exports.AbstractControl = AbstractControl;
exports.FormArray = FormArray;
exports.FormControl = FormControl;
exports.FormGroup = FormGroup;
exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
exports.NG_VALIDATORS = NG_VALIDATORS;
exports.Validators = Validators;
exports.FormsModule = FormsModule;
exports.ReactiveFormsModule = ReactiveFormsModule;
});
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
function toPromise(PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var value;
_this.subscribe(function(x) {
return value = x;
}, function(err) {
return reject(err);
}, function() {
return resolve(value);
});
});
}
exports.toPromise = toPromise;
}, function(module, exports, __webpack_require__) {
"use strict";
var PromiseObservable_1 = __webpack_require__(225);
exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(159);
var Observable_1 = __webpack_require__(158);
var PromiseObservable = function(_super) {
__extends(PromiseObservable, _super);
function PromiseObservable(promise, scheduler) {
_super.call(this);
this.promise = promise;
this.scheduler = scheduler;
}
PromiseObservable.create = function(promise, scheduler) {
return new PromiseObservable(promise, scheduler);
};
PromiseObservable.prototype._subscribe = function(subscriber) {
var _this = this;
var promise = this.promise;
var scheduler = this.scheduler;
if (scheduler == null) {
if (this._isScalar) {
if (!subscriber.closed) {
subscriber.next(this.value);
subscriber.complete();
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.closed) {
subscriber.next(value);
subscriber.complete();
}
}, function(err) {
if (!subscriber.closed) {
subscriber.error(err);
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
} else {
if (this._isScalar) {
if (!subscriber.closed) {
return scheduler.schedule(dispatchNext, 0, {
value: this.value,
subscriber: subscriber
});
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.closed) {
subscriber.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subscriber: subscriber
}));
}
}, function(err) {
if (!subscriber.closed) {
subscriber.add(scheduler.schedule(dispatchError, 0, {
err: err,
subscriber: subscriber
}));
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
}
};
return PromiseObservable;
}(Observable_1.Observable);
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
var value = arg.value, subscriber = arg.subscriber;
if (!subscriber.closed) {
subscriber.next(value);
subscriber.complete();
}
}
function dispatchError(arg) {
var err = arg.err, subscriber = arg.subscriber;
if (!subscriber.closed) {
subscriber.error(err);
}
}
}, function(module, exports) {
var BaseValueAccessor = function() {
function BaseValueAccessor(view) {
this.view = view;
this.onChange = function(_) {};
this.pendingChangeNotification = 0;
}
BaseValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(arg) {
if (_this.pendingChangeNotification) {
clearTimeout(_this.pendingChangeNotification);
}
_this.pendingChangeNotification = setTimeout(function() {
_this.pendingChangeNotification = 0;
fn(arg);
}, 20);
};
};
BaseValueAccessor.prototype.writeValue = function(_) {};
BaseValueAccessor.prototype.registerOnTouched = function(_) {};
return BaseValueAccessor;
}();
exports.BaseValueAccessor = BaseValueAccessor;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var lang_facade_1 = __webpack_require__(200);
var base_value_accessor_1 = __webpack_require__(226);
var CHECKED_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return CheckedValueAccessor;
}),
multi: true
};
var CheckedValueAccessor = function(_super) {
__extends(CheckedValueAccessor, _super);
function CheckedValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
CheckedValueAccessor.prototype.checkedChangeListener = function(event) {
this.onChange(event.value);
};
CheckedValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = false;
if (!lang_facade_1.isBlank(value)) {
if (typeof value === "string") {
normalizedValue = value.toLowerCase() === "true" ? true : false;
} else {
normalizedValue = !!value;
}
}
this.view.checked = normalizedValue;
};
CheckedValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.HostListener("checkedChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], CheckedValueAccessor.prototype, "checkedChangeListener", null);
CheckedValueAccessor = __decorate([ core_1.Directive({
selector: "Switch[ngModel], switch[ngModel]",
providers: [ CHECKED_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], CheckedValueAccessor);
return CheckedValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.CheckedValueAccessor = CheckedValueAccessor;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var lang_facade_1 = __webpack_require__(200);
var base_value_accessor_1 = __webpack_require__(226);
var DATE_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return DateValueAccessor;
}),
multi: true
};
var DateValueAccessor = function(_super) {
__extends(DateValueAccessor, _super);
function DateValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
DateValueAccessor.prototype.dateChangeListener = function(event) {
this.onChange(event.value);
};
DateValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_facade_1.isBlank(value) ? new Date() : value;
if (!lang_facade_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string") {
normalizedValue = new Date(normalizedValue);
} else if (typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_facade_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.date = normalizedValue;
};
DateValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.HostListener("dateChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], DateValueAccessor.prototype, "dateChangeListener", null);
DateValueAccessor = __decorate([ core_1.Directive({
selector: "DatePicker[ngModel], datePicker[ngModel], date-picker[ngModel]",
providers: [ DATE_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], DateValueAccessor);
return DateValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.DateValueAccessor = DateValueAccessor;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var lang_facade_1 = __webpack_require__(200);
var base_value_accessor_1 = __webpack_require__(226);
var TIME_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return TimeValueAccessor;
}),
multi: true
};
var TimeValueAccessor = function(_super) {
__extends(TimeValueAccessor, _super);
function TimeValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
TimeValueAccessor.prototype.timeChangeListener = function(event) {
this.onChange(event.value);
};
TimeValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_facade_1.isBlank(value) ? new Date() : value;
if (!lang_facade_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string") {
normalizedValue = new Date(normalizedValue);
} else if (typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_facade_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.time = normalizedValue;
};
TimeValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.HostListener("timeChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], TimeValueAccessor.prototype, "timeChangeListener", null);
TimeValueAccessor = __decorate([ core_1.Directive({
selector: "TimePicker[ngModel], timePicker[ngModel], time-picker[ngModel]",
providers: [ TIME_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TimeValueAccessor);
return TimeValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.TimeValueAccessor = TimeValueAccessor;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var lang_facade_1 = __webpack_require__(200);
var base_value_accessor_1 = __webpack_require__(226);
var NUMBER_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
};
var NumberValueAccessor = function(_super) {
__extends(NumberValueAccessor, _super);
function NumberValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
NumberValueAccessor.prototype.valueChangeListener = function(event) {
this.onChange(event.value);
};
NumberValueAccessor.prototype.writeValue = function(value) {
var normalizedValue;
if (lang_facade_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_facade_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = Number(value);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
this.view.value = normalizedValue;
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.HostListener("valueChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], NumberValueAccessor.prototype, "valueChangeListener", null);
NumberValueAccessor = __decorate([ core_1.Directive({
selector: "Slider[ngModel], slider[ngModel]",
providers: [ NUMBER_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], NumberValueAccessor);
return NumberValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.NumberValueAccessor = NumberValueAccessor;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var base_value_accessor_1 = __webpack_require__(226);
var utils = __webpack_require__(218);
var SELECTED_INDEX_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return SelectedIndexValueAccessor;
}),
multi: true
};
var SelectedIndexValueAccessor = function(_super) {
__extends(SelectedIndexValueAccessor, _super);
function SelectedIndexValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
SelectedIndexValueAccessor.prototype.selectedIndexChangeListener = function(event) {
this.onChange(event.value);
};
SelectedIndexValueAccessor.prototype.writeValue = function(value) {
this._normalizedValue = utils.convertToInt(value);
if (this.viewInitialized) {
this.view.selectedIndex = this._normalizedValue;
}
};
SelectedIndexValueAccessor.prototype.ngAfterViewInit = function() {
this.viewInitialized = true;
this.view.selectedIndex = this._normalizedValue;
};
SelectedIndexValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.HostListener("selectedIndexChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], SelectedIndexValueAccessor.prototype, "selectedIndexChangeListener", null);
SelectedIndexValueAccessor = __decorate([ core_1.Directive({
selector: "SegmentedBar[ngModel], segmentedBar[ngModel], segmented-bar[ngModel], ListPicker[ngModel], listPicker[ngModel], list-picker[ngModel], TabView[ngModel], tabView[ngModel], tab-view[ngModel]",
providers: [ SELECTED_INDEX_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], SelectedIndexValueAccessor);
return SelectedIndexValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.SelectedIndexValueAccessor = SelectedIndexValueAccessor;
}, function(module, exports, __webpack_require__) {
global.__requireOverride = function() {
var map = {
"@angular/common": function() {
return __webpack_require__(203);
},
"@angular/common/": function() {
return __webpack_require__(203);
},
"@angular/compiler": function() {
return __webpack_require__(177);
},
"@angular/compiler/": function() {
return __webpack_require__(177);
},
"@angular/core": function() {
return __webpack_require__(156);
},
"@angular/core/": function() {
return __webpack_require__(156);
},
"@angular/forms": function() {
return __webpack_require__(222);
},
"@angular/forms/": function() {
return __webpack_require__(222);
},
"@angular/http": function() {
return __webpack_require__(233);
},
"@angular/http/": function() {
return __webpack_require__(233);
},
"@angular/platform-browser": function() {
return __webpack_require__(202);
},
"@angular/platform-browser-dynamic": function() {
return __webpack_require__(234);
},
"@angular/platform-browser-dynamic/": function() {
return __webpack_require__(234);
},
"@angular/platform-browser/": function() {
return __webpack_require__(202);
},
"@angular/router": function() {
return __webpack_require__(235);
},
"@angular/router/": function() {
return __webpack_require__(235);
},
application: function() {
return __webpack_require__(16);
},
"application-settings": function() {
return __webpack_require__(265);
},
"application-settings/": function() {
return __webpack_require__(265);
},
"application-settings/application-settings": function() {
return __webpack_require__(265);
},
"application-settings/application-settings-common": function() {
return __webpack_require__(266);
},
"application-settings/application-settings-common.js": function() {
return __webpack_require__(266);
},
"application-settings/application-settings.js": function() {
return __webpack_require__(265);
},
"application/": function() {
return __webpack_require__(16);
},
"application/application": function() {
return __webpack_require__(16);
},
"application/application-common": function() {
return __webpack_require__(17);
},
"application/application-common.js": function() {
return __webpack_require__(17);
},
"application/application.js": function() {
return __webpack_require__(16);
},
"bundle-entry-points": function() {
return __webpack_require__(19);
},
"bundle-entry-points.js": function() {
return __webpack_require__(19);
},
camera: function() {
return __webpack_require__(267);
},
"camera/": function() {
return __webpack_require__(267);
},
"camera/camera": function() {
return __webpack_require__(267);
},
"camera/camera-common": function() {
return __webpack_require__(268);
},
"camera/camera-common.js": function() {
return __webpack_require__(268);
},
"camera/camera.js": function() {
return __webpack_require__(267);
},
color: function() {
return __webpack_require__(23);
},
"color/": function() {
return __webpack_require__(23);
},
"color/color": function() {
return __webpack_require__(23);
},
"color/color-common": function() {
return __webpack_require__(24);
},
"color/color-common.js": function() {
return __webpack_require__(24);
},
"color/color.js": function() {
return __webpack_require__(23);
},
"color/known-colors": function() {
return __webpack_require__(25);
},
"color/known-colors.js": function() {
return __webpack_require__(25);
},
connectivity: function() {
return __webpack_require__(269);
},
"connectivity/": function() {
return __webpack_require__(269);
},
"connectivity/connectivity": function() {
return __webpack_require__(269);
},
"connectivity/connectivity-common": function() {
return __webpack_require__(270);
},
"connectivity/connectivity-common.js": function() {
return __webpack_require__(270);
},
"connectivity/connectivity.js": function() {
return __webpack_require__(269);
},
console: function() {
return __webpack_require__(151);
},
"console/": function() {
return __webpack_require__(151);
},
"console/console": function() {
return __webpack_require__(151);
},
"console/console.js": function() {
return __webpack_require__(151);
},
css: function() {
return __webpack_require__(94);
},
"css-value": function() {
return __webpack_require__(138);
},
"css-value/": function() {
return __webpack_require__(138);
},
"css-value/index": function() {
return __webpack_require__(138);
},
"css-value/index.js": function() {
return __webpack_require__(138);
},
"css/": function() {
return __webpack_require__(94);
},
"css/index": function() {
return __webpack_require__(94);
},
"css/index.js": function() {
return __webpack_require__(94);
},
"css/lib/parse/index": function() {
return __webpack_require__(95);
},
"css/lib/parse/index.js": function() {
return __webpack_require__(95);
},
"data/observable": function() {
return __webpack_require__(18);
},
"data/observable-array": function() {
return __webpack_require__(22);
},
"data/observable-array/": function() {
return __webpack_require__(22);
},
"data/observable-array/observable-array": function() {
return __webpack_require__(22);
},
"data/observable-array/observable-array.js": function() {
return __webpack_require__(22);
},
"data/observable/": function() {
return __webpack_require__(18);
},
"data/observable/observable": function() {
return __webpack_require__(18);
},
"data/observable/observable.js": function() {
return __webpack_require__(18);
},
"data/virtual-array": function() {
return __webpack_require__(271);
},
"data/virtual-array/": function() {
return __webpack_require__(271);
},
"data/virtual-array/virtual-array": function() {
return __webpack_require__(271);
},
"data/virtual-array/virtual-array.js": function() {
return __webpack_require__(271);
},
debugger: function() {
return __webpack_require__(272);
},
"debugger/": function() {
return __webpack_require__(272);
},
"debugger/debugger": function() {
return __webpack_require__(272);
},
"debugger/debugger.js": function() {
return __webpack_require__(272);
},
fetch: function() {
return __webpack_require__(150);
},
"fetch/": function() {
return __webpack_require__(150);
},
"fetch/fetch": function() {
return __webpack_require__(150);
},
"fetch/fetch.js": function() {
return __webpack_require__(150);
},
"file-system": function() {
return __webpack_require__(46);
},
"file-system/": function() {
return __webpack_require__(46);
},
"file-system/file-name-resolver": function() {
return __webpack_require__(111);
},
"file-system/file-name-resolver.js": function() {
return __webpack_require__(111);
},
"file-system/file-system": function() {
return __webpack_require__(46);
},
"file-system/file-system-access": function() {
return __webpack_require__(47);
},
"file-system/file-system-access.js": function() {
return __webpack_require__(47);
},
"file-system/file-system.js": function() {
return __webpack_require__(46);
},
"fps-meter": function() {
return __webpack_require__(273);
},
"fps-meter/": function() {
return __webpack_require__(273);
},
"fps-meter/fps-meter": function() {
return __webpack_require__(273);
},
"fps-meter/fps-meter.js": function() {
return __webpack_require__(273);
},
"fps-meter/fps-native": function() {
return __webpack_require__(274);
},
"fps-meter/fps-native.js": function() {
return __webpack_require__(274);
},
globals: function() {
return __webpack_require__(5);
},
"globals/": function() {
return __webpack_require__(5);
},
"globals/decorators": function() {
return __webpack_require__(6);
},
"globals/decorators.js": function() {
return __webpack_require__(6);
},
"globals/globals": function() {
return __webpack_require__(5);
},
"globals/globals.js": function() {
return __webpack_require__(5);
},
http: function() {
return __webpack_require__(55);
},
"http/": function() {
return __webpack_require__(55);
},
"http/http": function() {
return __webpack_require__(55);
},
"http/http-request": function() {
return __webpack_require__(56);
},
"http/http-request.js": function() {
return __webpack_require__(56);
},
"http/http.js": function() {
return __webpack_require__(55);
},
"image-asset": function() {
return __webpack_require__(70);
},
"image-asset/": function() {
return __webpack_require__(70);
},
"image-asset/image-asset": function() {
return __webpack_require__(70);
},
"image-asset/image-asset-common": function() {
return __webpack_require__(71);
},
"image-asset/image-asset-common.js": function() {
return __webpack_require__(71);
},
"image-asset/image-asset.js": function() {
return __webpack_require__(70);
},
"image-source": function() {
return __webpack_require__(53);
},
"image-source/": function() {
return __webpack_require__(53);
},
"image-source/image-source": function() {
return __webpack_require__(53);
},
"image-source/image-source-common": function() {
return __webpack_require__(54);
},
"image-source/image-source-common.js": function() {
return __webpack_require__(54);
},
"image-source/image-source.js": function() {
return __webpack_require__(53);
},
"js-libs/easysax": function() {
return __webpack_require__(109);
},
"js-libs/easysax/": function() {
return __webpack_require__(109);
},
"js-libs/easysax/easysax": function() {
return __webpack_require__(109);
},
"js-libs/easysax/easysax.js": function() {
return __webpack_require__(109);
},
"js-libs/esprima": function() {
return __webpack_require__(34);
},
"js-libs/esprima/": function() {
return __webpack_require__(34);
},
"js-libs/esprima/esprima": function() {
return __webpack_require__(34);
},
"js-libs/esprima/esprima.js": function() {
return __webpack_require__(34);
},
"js-libs/polymer-expressions": function() {
return __webpack_require__(33);
},
"js-libs/polymer-expressions/": function() {
return __webpack_require__(33);
},
"js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(35);
},
"js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(35);
},
"js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(33);
},
"js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(33);
},
location: function() {
return __webpack_require__(275);
},
"location/": function() {
return __webpack_require__(275);
},
"location/location": function() {
return __webpack_require__(275);
},
"location/location-common": function() {
return __webpack_require__(276);
},
"location/location-common.js": function() {
return __webpack_require__(276);
},
"location/location.js": function() {
return __webpack_require__(275);
},
"nativescript-angular/animation-driver": function() {
return __webpack_require__(211);
},
"nativescript-angular/animation-driver.js": function() {
return __webpack_require__(211);
},
"nativescript-angular/animation-player": function() {
return __webpack_require__(212);
},
"nativescript-angular/animation-player.js": function() {
return __webpack_require__(212);
},
"nativescript-angular/collection-facade": function() {
return __webpack_require__(199);
},
"nativescript-angular/collection-facade.js": function() {
return __webpack_require__(199);
},
"nativescript-angular/common/detached-loader": function() {
return __webpack_require__(213);
},
"nativescript-angular/common/detached-loader.js": function() {
return __webpack_require__(213);
},
"nativescript-angular/common/utils": function() {
return __webpack_require__(218);
},
"nativescript-angular/common/utils.js": function() {
return __webpack_require__(218);
},
"nativescript-angular/directives": function() {
return __webpack_require__(215);
},
"nativescript-angular/directives.js": function() {
return __webpack_require__(215);
},
"nativescript-angular/directives/action-bar": function() {
return __webpack_require__(219);
},
"nativescript-angular/directives/action-bar.js": function() {
return __webpack_require__(219);
},
"nativescript-angular/directives/dialogs": function() {
return __webpack_require__(214);
},
"nativescript-angular/directives/dialogs.js": function() {
return __webpack_require__(214);
},
"nativescript-angular/directives/list-view-comp": function() {
return __webpack_require__(216);
},
"nativescript-angular/directives/list-view-comp.js": function() {
return __webpack_require__(216);
},
"nativescript-angular/directives/platform-filters": function() {
return __webpack_require__(220);
},
"nativescript-angular/directives/platform-filters.js": function() {
return __webpack_require__(220);
},
"nativescript-angular/directives/tab-view": function() {
return __webpack_require__(217);
},
"nativescript-angular/directives/tab-view.js": function() {
return __webpack_require__(217);
},
"nativescript-angular/dom-adapter": function() {
return __webpack_require__(178);
},
"nativescript-angular/dom-adapter.js": function() {
return __webpack_require__(178);
},
"nativescript-angular/element-registry": function() {
return __webpack_require__(208);
},
"nativescript-angular/element-registry.js": function() {
return __webpack_require__(208);
},
"nativescript-angular/file-system/ns-file-system": function() {
return __webpack_require__(277);
},
"nativescript-angular/file-system/ns-file-system.js": function() {
return __webpack_require__(277);
},
"nativescript-angular/forms": function() {
return __webpack_require__(278);
},
"nativescript-angular/forms.js": function() {
return __webpack_require__(278);
},
"nativescript-angular/hooks/before-livesync": function() {
return __webpack_require__(279);
},
"nativescript-angular/hooks/before-livesync.js": function() {
return __webpack_require__(279);
},
"nativescript-angular/hooks/hook-helper": function() {
return __webpack_require__(280);
},
"nativescript-angular/hooks/hook-helper.js": function() {
return __webpack_require__(280);
},
"nativescript-angular/http": function() {
return __webpack_require__(282);
},
"nativescript-angular/http.js": function() {
return __webpack_require__(282);
},
"nativescript-angular/http/ns-http": function() {
return __webpack_require__(283);
},
"nativescript-angular/http/ns-http.js": function() {
return __webpack_require__(283);
},
"nativescript-angular/index": function() {
return __webpack_require__(285);
},
"nativescript-angular/index.js": function() {
return __webpack_require__(285);
},
"nativescript-angular/lang-facade": function() {
return __webpack_require__(200);
},
"nativescript-angular/lang-facade.js": function() {
return __webpack_require__(200);
},
"nativescript-angular/modal-dialog": function() {
return __webpack_require__(295);
},
"nativescript-angular/modal-dialog.js": function() {
return __webpack_require__(295);
},
"nativescript-angular/nativescript.module": function() {
return __webpack_require__(205);
},
"nativescript-angular/nativescript.module.js": function() {
return __webpack_require__(205);
},
"nativescript-angular/node_modules/nativescript-intl": function() {
return __webpack_require__(176);
},
"nativescript-angular/node_modules/nativescript-intl/": function() {
return __webpack_require__(176);
},
"nativescript-angular/node_modules/nativescript-intl/bundle": function() {
return __webpack_require__(176);
},
"nativescript-angular/node_modules/nativescript-intl/bundle.js": function() {
return __webpack_require__(176);
},
"nativescript-angular/node_modules/nativescript-intl/index": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "nativescript-angular/node_modules/nativescript-intl/index.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"nativescript-angular/node_modules/nativescript-intl/index.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "nativescript-angular/node_modules/nativescript-intl/index.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"nativescript-angular/node_modules/nativescript-intl/nativescript-intl": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "nativescript-angular/node_modules/nativescript-intl/nativescript-intl.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"nativescript-angular/node_modules/nativescript-intl/nativescript-intl-common": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "nativescript-angular/node_modules/nativescript-intl/nativescript-intl-common.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"nativescript-angular/node_modules/nativescript-intl/nativescript-intl-common.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "nativescript-angular/node_modules/nativescript-intl/nativescript-intl-common.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"nativescript-angular/node_modules/nativescript-intl/nativescript-intl.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "nativescript-angular/node_modules/nativescript-intl/nativescript-intl.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"nativescript-angular/node_modules/parse5": function() {
return __webpack_require__(180);
},
"nativescript-angular/node_modules/parse5/": function() {
return __webpack_require__(180);
},
"nativescript-angular/node_modules/parse5/index": function() {
return __webpack_require__(180);
},
"nativescript-angular/node_modules/parse5/index.js": function() {
return __webpack_require__(180);
},
"nativescript-angular/node_modules/parse5/lib/common/foreign_content": function() {
return __webpack_require__(191);
},
"nativescript-angular/node_modules/parse5/lib/common/foreign_content.js": function() {
return __webpack_require__(191);
},
"nativescript-angular/node_modules/parse5/lib/common/html": function() {
return __webpack_require__(187);
},
"nativescript-angular/node_modules/parse5/lib/common/html.js": function() {
return __webpack_require__(187);
},
"nativescript-angular/node_modules/parse5/lib/common/unicode": function() {
return __webpack_require__(184);
},
"nativescript-angular/node_modules/parse5/lib/common/unicode.js": function() {
return __webpack_require__(184);
},
"nativescript-angular/node_modules/parse5/lib/common/utils": function() {
return __webpack_require__(195);
},
"nativescript-angular/node_modules/parse5/lib/common/utils.js": function() {
return __webpack_require__(195);
},
"nativescript-angular/node_modules/parse5/lib/jsdom/jsdom_parser": function() {
return __webpack_require__(196);
},
"nativescript-angular/node_modules/parse5/lib/jsdom/jsdom_parser.js": function() {
return __webpack_require__(196);
},
"nativescript-angular/node_modules/parse5/lib/jsdom/parsing_unit": function() {
return __webpack_require__(197);
},
"nativescript-angular/node_modules/parse5/lib/jsdom/parsing_unit.js": function() {
return __webpack_require__(197);
},
"nativescript-angular/node_modules/parse5/lib/serialization/serializer": function() {
return __webpack_require__(194);
},
"nativescript-angular/node_modules/parse5/lib/serialization/serializer.js": function() {
return __webpack_require__(194);
},
"nativescript-angular/node_modules/parse5/lib/simple_api/simple_api_parser": function() {
return __webpack_require__(192);
},
"nativescript-angular/node_modules/parse5/lib/simple_api/simple_api_parser.js": function() {
return __webpack_require__(192);
},
"nativescript-angular/node_modules/parse5/lib/simple_api/tokenizer_proxy": function() {
return __webpack_require__(193);
},
"nativescript-angular/node_modules/parse5/lib/simple_api/tokenizer_proxy.js": function() {
return __webpack_require__(193);
},
"nativescript-angular/node_modules/parse5/lib/tokenization/named_entity_trie": function() {
return __webpack_require__(185);
},
"nativescript-angular/node_modules/parse5/lib/tokenization/named_entity_trie.js": function() {
return __webpack_require__(185);
},
"nativescript-angular/node_modules/parse5/lib/tokenization/preprocessor": function() {
return __webpack_require__(183);
},
"nativescript-angular/node_modules/parse5/lib/tokenization/preprocessor.js": function() {
return __webpack_require__(183);
},
"nativescript-angular/node_modules/parse5/lib/tokenization/tokenizer": function() {
return __webpack_require__(182);
},
"nativescript-angular/node_modules/parse5/lib/tokenization/tokenizer.js": function() {
return __webpack_require__(182);
},
"nativescript-angular/node_modules/parse5/lib/tree_adapters/default": function() {
return __webpack_require__(190);
},
"nativescript-angular/node_modules/parse5/lib/tree_adapters/default.js": function() {
return __webpack_require__(190);
},
"nativescript-angular/node_modules/parse5/lib/tree_adapters/htmlparser2": function() {
return __webpack_require__(198);
},
"nativescript-angular/node_modules/parse5/lib/tree_adapters/htmlparser2.js": function() {
return __webpack_require__(198);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/doctype": function() {
return __webpack_require__(189);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/doctype.js": function() {
return __webpack_require__(189);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/formatting_element_list": function() {
return __webpack_require__(188);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/formatting_element_list.js": function() {
return __webpack_require__(188);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/open_element_stack": function() {
return __webpack_require__(186);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/open_element_stack.js": function() {
return __webpack_require__(186);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/parser": function() {
return __webpack_require__(181);
},
"nativescript-angular/node_modules/parse5/lib/tree_construction/parser.js": function() {
return __webpack_require__(181);
},
"nativescript-angular/node_modules/punycode": function() {
return __webpack_require__(299);
},
"nativescript-angular/node_modules/punycode/": function() {
return __webpack_require__(299);
},
"nativescript-angular/node_modules/punycode/punycode": function() {
return __webpack_require__(299);
},
"nativescript-angular/node_modules/punycode/punycode.js": function() {
return __webpack_require__(299);
},
"nativescript-angular/node_modules/querystring/decode": function() {
return __webpack_require__(301);
},
"nativescript-angular/node_modules/querystring/decode.js": function() {
return __webpack_require__(301);
},
"nativescript-angular/node_modules/querystring/encode": function() {
return __webpack_require__(302);
},
"nativescript-angular/node_modules/querystring/encode.js": function() {
return __webpack_require__(302);
},
"nativescript-angular/node_modules/querystring/index": function() {
return __webpack_require__(303);
},
"nativescript-angular/node_modules/querystring/index.js": function() {
return __webpack_require__(303);
},
"nativescript-angular/node_modules/querystring/test/common-index": function() {
return __webpack_require__(304);
},
"nativescript-angular/node_modules/querystring/test/common-index.js": function() {
return __webpack_require__(304);
},
"nativescript-angular/node_modules/querystring/test/index": function() {
return __webpack_require__(305);
},
"nativescript-angular/node_modules/querystring/test/index.js": function() {
return __webpack_require__(305);
},
"nativescript-angular/node_modules/querystring/test/tap-index": function() {
return __webpack_require__(306);
},
"nativescript-angular/node_modules/querystring/test/tap-index.js": function() {
return __webpack_require__(306);
},
"nativescript-angular/node_modules/url": function() {
return __webpack_require__(307);
},
"nativescript-angular/node_modules/url/": function() {
return __webpack_require__(307);
},
"nativescript-angular/node_modules/url/test": function() {
return __webpack_require__(308);
},
"nativescript-angular/node_modules/url/test.js": function() {
return __webpack_require__(308);
},
"nativescript-angular/node_modules/url/url": function() {
return __webpack_require__(307);
},
"nativescript-angular/node_modules/url/url.js": function() {
return __webpack_require__(307);
},
"nativescript-angular/parse5_adapter": function() {
return __webpack_require__(179);
},
"nativescript-angular/parse5_adapter.js": function() {
return __webpack_require__(179);
},
"nativescript-angular/platform": function() {
return __webpack_require__(3);
},
"nativescript-angular/platform-common": function() {
return __webpack_require__(4);
},
"nativescript-angular/platform-common.js": function() {
return __webpack_require__(4);
},
"nativescript-angular/platform-providers": function() {
return __webpack_require__(175);
},
"nativescript-angular/platform-providers.js": function() {
return __webpack_require__(175);
},
"nativescript-angular/platform-static": function() {
return __webpack_require__(286);
},
"nativescript-angular/platform-static.js": function() {
return __webpack_require__(286);
},
"nativescript-angular/platform.js": function() {
return __webpack_require__(3);
},
"nativescript-angular/polyfills/array": function() {
return __webpack_require__(154);
},
"nativescript-angular/polyfills/array.js": function() {
return __webpack_require__(154);
},
"nativescript-angular/polyfills/console": function() {
return __webpack_require__(155);
},
"nativescript-angular/polyfills/console.js": function() {
return __webpack_require__(155);
},
"nativescript-angular/postinstall": function() {
return __webpack_require__(313);
},
"nativescript-angular/postinstall.js": function() {
return __webpack_require__(313);
},
"nativescript-angular/private_import_core": function() {
return __webpack_require__(315);
},
"nativescript-angular/private_import_core.js": function() {
return __webpack_require__(315);
},
"nativescript-angular/private_import_platform-browser": function() {
return __webpack_require__(201);
},
"nativescript-angular/private_import_platform-browser.js": function() {
return __webpack_require__(201);
},
"nativescript-angular/renderer": function() {
return __webpack_require__(206);
},
"nativescript-angular/renderer.js": function() {
return __webpack_require__(206);
},
"nativescript-angular/resource-loader": function() {
return __webpack_require__(204);
},
"nativescript-angular/resource-loader.js": function() {
return __webpack_require__(204);
},
"nativescript-angular/router": function() {
return __webpack_require__(287);
},
"nativescript-angular/router-url-tree": function() {
return __webpack_require__(293);
},
"nativescript-angular/router-url-tree.js": function() {
return __webpack_require__(293);
},
"nativescript-angular/router.js": function() {
return __webpack_require__(287);
},
"nativescript-angular/router/ns-location-strategy": function() {
return __webpack_require__(290);
},
"nativescript-angular/router/ns-location-strategy.js": function() {
return __webpack_require__(290);
},
"nativescript-angular/router/ns-platform-location": function() {
return __webpack_require__(294);
},
"nativescript-angular/router/ns-platform-location.js": function() {
return __webpack_require__(294);
},
"nativescript-angular/router/ns-router-link": function() {
return __webpack_require__(288);
},
"nativescript-angular/router/ns-router-link-active": function() {
return __webpack_require__(292);
},
"nativescript-angular/router/ns-router-link-active.js": function() {
return __webpack_require__(292);
},
"nativescript-angular/router/ns-router-link.js": function() {
return __webpack_require__(288);
},
"nativescript-angular/router/page-router-outlet": function() {
return __webpack_require__(289);
},
"nativescript-angular/router/page-router-outlet.js": function() {
return __webpack_require__(289);
},
"nativescript-angular/router/router-extensions": function() {
return __webpack_require__(291);
},
"nativescript-angular/router/router-extensions.js": function() {
return __webpack_require__(291);
},
"nativescript-angular/trace": function() {
return __webpack_require__(174);
},
"nativescript-angular/trace.js": function() {
return __webpack_require__(174);
},
"nativescript-angular/value-accessors/base-value-accessor": function() {
return __webpack_require__(226);
},
"nativescript-angular/value-accessors/base-value-accessor.js": function() {
return __webpack_require__(226);
},
"nativescript-angular/value-accessors/checked-value-accessor": function() {
return __webpack_require__(227);
},
"nativescript-angular/value-accessors/checked-value-accessor.js": function() {
return __webpack_require__(227);
},
"nativescript-angular/value-accessors/date-value-accessor": function() {
return __webpack_require__(228);
},
"nativescript-angular/value-accessors/date-value-accessor.js": function() {
return __webpack_require__(228);
},
"nativescript-angular/value-accessors/number-value-accessor": function() {
return __webpack_require__(230);
},
"nativescript-angular/value-accessors/number-value-accessor.js": function() {
return __webpack_require__(230);
},
"nativescript-angular/value-accessors/selectedIndex-value-accessor": function() {
return __webpack_require__(231);
},
"nativescript-angular/value-accessors/selectedIndex-value-accessor.js": function() {
return __webpack_require__(231);
},
"nativescript-angular/value-accessors/text-value-accessor": function() {
return __webpack_require__(221);
},
"nativescript-angular/value-accessors/text-value-accessor.js": function() {
return __webpack_require__(221);
},
"nativescript-angular/value-accessors/time-value-accessor": function() {
return __webpack_require__(229);
},
"nativescript-angular/value-accessors/time-value-accessor.js": function() {
return __webpack_require__(229);
},
"nativescript-angular/view-util": function() {
return __webpack_require__(207);
},
"nativescript-angular/view-util.js": function() {
return __webpack_require__(207);
},
"nativescript-angular/zone.js/dist/zone-nativescript": function() {
return __webpack_require__(152);
},
"nativescript-angular/zone.js/dist/zone-nativescript.js": function() {
return __webpack_require__(152);
},
platform: function() {
return __webpack_require__(49);
},
"platform/": function() {
return __webpack_require__(49);
},
"platform/platform": function() {
return __webpack_require__(49);
},
"platform/platform.js": function() {
return __webpack_require__(49);
},
"reflect-metadata": function() {
return __webpack_require__(153);
},
"reflect-metadata/": function() {
return __webpack_require__(153);
},
"reflect-metadata/Reflect": function() {
return __webpack_require__(153);
},
"reflect-metadata/Reflect.js": function() {
return __webpack_require__(153);
},
rxjs: function() {
return __webpack_require__(316);
},
"rxjs/": function() {
return __webpack_require__(316);
},
"rxjs/AsyncSubject": function() {
return __webpack_require__(320);
},
"rxjs/AsyncSubject.js": function() {
return __webpack_require__(320);
},
"rxjs/BehaviorSubject": function() {
return __webpack_require__(236);
},
"rxjs/BehaviorSubject.js": function() {
return __webpack_require__(236);
},
"rxjs/InnerSubscriber": function() {
return __webpack_require__(253);
},
"rxjs/InnerSubscriber.js": function() {
return __webpack_require__(253);
},
"rxjs/Notification": function() {
return __webpack_require__(248);
},
"rxjs/Notification.js": function() {
return __webpack_require__(248);
},
"rxjs/Observable": function() {
return __webpack_require__(158);
},
"rxjs/Observable.js": function() {
return __webpack_require__(158);
},
"rxjs/Observer": function() {
return __webpack_require__(169);
},
"rxjs/Observer.js": function() {
return __webpack_require__(169);
},
"rxjs/Operator": function() {
return __webpack_require__(609);
},
"rxjs/Operator.js": function() {
return __webpack_require__(609);
},
"rxjs/OuterSubscriber": function() {
return __webpack_require__(254);
},
"rxjs/OuterSubscriber.js": function() {
return __webpack_require__(254);
},
"rxjs/ReplaySubject": function() {
return __webpack_require__(396);
},
"rxjs/ReplaySubject.js": function() {
return __webpack_require__(396);
},
"rxjs/Rx": function() {
return __webpack_require__(316);
},
"rxjs/Rx.js": function() {
return __webpack_require__(316);
},
"rxjs/Scheduler": function() {
return __webpack_require__(358);
},
"rxjs/Scheduler.js": function() {
return __webpack_require__(358);
},
"rxjs/Subject": function() {
return __webpack_require__(157);
},
"rxjs/Subject.js": function() {
return __webpack_require__(157);
},
"rxjs/SubjectSubscription": function() {
return __webpack_require__(173);
},
"rxjs/SubjectSubscription.js": function() {
return __webpack_require__(173);
},
"rxjs/Subscriber": function() {
return __webpack_require__(161);
},
"rxjs/Subscriber.js": function() {
return __webpack_require__(161);
},
"rxjs/Subscription": function() {
return __webpack_require__(163);
},
"rxjs/Subscription.js": function() {
return __webpack_require__(163);
},
"rxjs/add/observable/bindCallback": function() {
return __webpack_require__(317);
},
"rxjs/add/observable/bindCallback.js": function() {
return __webpack_require__(317);
},
"rxjs/add/observable/bindNodeCallback": function() {
return __webpack_require__(321);
},
"rxjs/add/observable/bindNodeCallback.js": function() {
return __webpack_require__(321);
},
"rxjs/add/observable/combineLatest": function() {
return __webpack_require__(324);
},
"rxjs/add/observable/combineLatest.js": function() {
return __webpack_require__(324);
},
"rxjs/add/observable/concat": function() {
return __webpack_require__(327);
},
"rxjs/add/observable/concat.js": function() {
return __webpack_require__(327);
},
"rxjs/add/observable/defer": function() {
return __webpack_require__(330);
},
"rxjs/add/observable/defer.js": function() {
return __webpack_require__(330);
},
"rxjs/add/observable/dom/ajax": function() {
return __webpack_require__(390);
},
"rxjs/add/observable/dom/ajax.js": function() {
return __webpack_require__(390);
},
"rxjs/add/observable/dom/webSocket": function() {
return __webpack_require__(393);
},
"rxjs/add/observable/dom/webSocket.js": function() {
return __webpack_require__(393);
},
"rxjs/add/observable/empty": function() {
return __webpack_require__(333);
},
"rxjs/add/observable/empty.js": function() {
return __webpack_require__(333);
},
"rxjs/add/observable/forkJoin": function() {
return __webpack_require__(335);
},
"rxjs/add/observable/forkJoin.js": function() {
return __webpack_require__(335);
},
"rxjs/add/observable/from": function() {
return __webpack_require__(338);
},
"rxjs/add/observable/from.js": function() {
return __webpack_require__(338);
},
"rxjs/add/observable/fromEvent": function() {
return __webpack_require__(339);
},
"rxjs/add/observable/fromEvent.js": function() {
return __webpack_require__(339);
},
"rxjs/add/observable/fromEventPattern": function() {
return __webpack_require__(342);
},
"rxjs/add/observable/fromEventPattern.js": function() {
return __webpack_require__(342);
},
"rxjs/add/observable/fromPromise": function() {
return __webpack_require__(284);
},
"rxjs/add/observable/fromPromise.js": function() {
return __webpack_require__(284);
},
"rxjs/add/observable/generate": function() {
return __webpack_require__(345);
},
"rxjs/add/observable/generate.js": function() {
return __webpack_require__(345);
},
"rxjs/add/observable/if": function() {
return __webpack_require__(347);
},
"rxjs/add/observable/if.js": function() {
return __webpack_require__(347);
},
"rxjs/add/observable/interval": function() {
return __webpack_require__(350);
},
"rxjs/add/observable/interval.js": function() {
return __webpack_require__(350);
},
"rxjs/add/observable/merge": function() {
return __webpack_require__(359);
},
"rxjs/add/observable/merge.js": function() {
return __webpack_require__(359);
},
"rxjs/add/observable/never": function() {
return __webpack_require__(364);
},
"rxjs/add/observable/never.js": function() {
return __webpack_require__(364);
},
"rxjs/add/observable/of": function() {
return __webpack_require__(368);
},
"rxjs/add/observable/of.js": function() {
return __webpack_require__(368);
},
"rxjs/add/observable/onErrorResumeNext": function() {
return __webpack_require__(369);
},
"rxjs/add/observable/onErrorResumeNext.js": function() {
return __webpack_require__(369);
},
"rxjs/add/observable/pairs": function() {
return __webpack_require__(371);
},
"rxjs/add/observable/pairs.js": function() {
return __webpack_require__(371);
},
"rxjs/add/observable/race": function() {
return __webpack_require__(362);
},
"rxjs/add/observable/race.js": function() {
return __webpack_require__(362);
},
"rxjs/add/observable/range": function() {
return __webpack_require__(374);
},
"rxjs/add/observable/range.js": function() {
return __webpack_require__(374);
},
"rxjs/add/observable/throw": function() {
return __webpack_require__(380);
},
"rxjs/add/observable/throw.js": function() {
return __webpack_require__(380);
},
"rxjs/add/observable/timer": function() {
return __webpack_require__(383);
},
"rxjs/add/observable/timer.js": function() {
return __webpack_require__(383);
},
"rxjs/add/observable/using": function() {
return __webpack_require__(377);
},
"rxjs/add/observable/using.js": function() {
return __webpack_require__(377);
},
"rxjs/add/observable/zip": function() {
return __webpack_require__(387);
},
"rxjs/add/observable/zip.js": function() {
return __webpack_require__(387);
},
"rxjs/add/operator/audit": function() {
return __webpack_require__(473);
},
"rxjs/add/operator/audit.js": function() {
return __webpack_require__(473);
},
"rxjs/add/operator/auditTime": function() {
return __webpack_require__(475);
},
"rxjs/add/operator/auditTime.js": function() {
return __webpack_require__(475);
},
"rxjs/add/operator/buffer": function() {
return __webpack_require__(401);
},
"rxjs/add/operator/buffer.js": function() {
return __webpack_require__(401);
},
"rxjs/add/operator/bufferCount": function() {
return __webpack_require__(403);
},
"rxjs/add/operator/bufferCount.js": function() {
return __webpack_require__(403);
},
"rxjs/add/operator/bufferTime": function() {
return __webpack_require__(405);
},
"rxjs/add/operator/bufferTime.js": function() {
return __webpack_require__(405);
},
"rxjs/add/operator/bufferToggle": function() {
return __webpack_require__(407);
},
"rxjs/add/operator/bufferToggle.js": function() {
return __webpack_require__(407);
},
"rxjs/add/operator/bufferWhen": function() {
return __webpack_require__(409);
},
"rxjs/add/operator/bufferWhen.js": function() {
return __webpack_require__(409);
},
"rxjs/add/operator/cache": function() {
return __webpack_require__(411);
},
"rxjs/add/operator/cache.js": function() {
return __webpack_require__(411);
},
"rxjs/add/operator/catch": function() {
return __webpack_require__(413);
},
"rxjs/add/operator/catch.js": function() {
return __webpack_require__(413);
},
"rxjs/add/operator/combineAll": function() {
return __webpack_require__(414);
},
"rxjs/add/operator/combineAll.js": function() {
return __webpack_require__(414);
},
"rxjs/add/operator/combineLatest": function() {
return __webpack_require__(416);
},
"rxjs/add/operator/combineLatest.js": function() {
return __webpack_require__(416);
},
"rxjs/add/operator/concat": function() {
return __webpack_require__(417);
},
"rxjs/add/operator/concat.js": function() {
return __webpack_require__(417);
},
"rxjs/add/operator/concatAll": function() {
return __webpack_require__(418);
},
"rxjs/add/operator/concatAll.js": function() {
return __webpack_require__(418);
},
"rxjs/add/operator/concatMap": function() {
return __webpack_require__(419);
},
"rxjs/add/operator/concatMap.js": function() {
return __webpack_require__(419);
},
"rxjs/add/operator/concatMapTo": function() {
return __webpack_require__(420);
},
"rxjs/add/operator/concatMapTo.js": function() {
return __webpack_require__(420);
},
"rxjs/add/operator/count": function() {
return __webpack_require__(423);
},
"rxjs/add/operator/count.js": function() {
return __webpack_require__(423);
},
"rxjs/add/operator/debounce": function() {
return __webpack_require__(427);
},
"rxjs/add/operator/debounce.js": function() {
return __webpack_require__(427);
},
"rxjs/add/operator/debounceTime": function() {
return __webpack_require__(429);
},
"rxjs/add/operator/debounceTime.js": function() {
return __webpack_require__(429);
},
"rxjs/add/operator/defaultIfEmpty": function() {
return __webpack_require__(431);
},
"rxjs/add/operator/defaultIfEmpty.js": function() {
return __webpack_require__(431);
},
"rxjs/add/operator/delay": function() {
return __webpack_require__(433);
},
"rxjs/add/operator/delay.js": function() {
return __webpack_require__(433);
},
"rxjs/add/operator/delayWhen": function() {
return __webpack_require__(435);
},
"rxjs/add/operator/delayWhen.js": function() {
return __webpack_require__(435);
},
"rxjs/add/operator/dematerialize": function() {
return __webpack_require__(425);
},
"rxjs/add/operator/dematerialize.js": function() {
return __webpack_require__(425);
},
"rxjs/add/operator/distinct": function() {
return __webpack_require__(437);
},
"rxjs/add/operator/distinct.js": function() {
return __webpack_require__(437);
},
"rxjs/add/operator/distinctKey": function() {
return __webpack_require__(439);
},
"rxjs/add/operator/distinctKey.js": function() {
return __webpack_require__(439);
},
"rxjs/add/operator/distinctUntilChanged": function() {
return __webpack_require__(441);
},
"rxjs/add/operator/distinctUntilChanged.js": function() {
return __webpack_require__(441);
},
"rxjs/add/operator/distinctUntilKeyChanged": function() {
return __webpack_require__(443);
},
"rxjs/add/operator/distinctUntilKeyChanged.js": function() {
return __webpack_require__(443);
},
"rxjs/add/operator/do": function() {
return __webpack_require__(445);
},
"rxjs/add/operator/do.js": function() {
return __webpack_require__(445);
},
"rxjs/add/operator/elementAt": function() {
return __webpack_require__(453);
},
"rxjs/add/operator/elementAt.js": function() {
return __webpack_require__(453);
},
"rxjs/add/operator/every": function() {
return __webpack_require__(480);
},
"rxjs/add/operator/every.js": function() {
return __webpack_require__(480);
},
"rxjs/add/operator/exhaust": function() {
return __webpack_require__(447);
},
"rxjs/add/operator/exhaust.js": function() {
return __webpack_require__(447);
},
"rxjs/add/operator/exhaustMap": function() {
return __webpack_require__(449);
},
"rxjs/add/operator/exhaustMap.js": function() {
return __webpack_require__(449);
},
"rxjs/add/operator/expand": function() {
return __webpack_require__(451);
},
"rxjs/add/operator/expand.js": function() {
return __webpack_require__(451);
},
"rxjs/add/operator/filter": function() {
return __webpack_require__(456);
},
"rxjs/add/operator/filter.js": function() {
return __webpack_require__(456);
},
"rxjs/add/operator/finally": function() {
return __webpack_require__(457);
},
"rxjs/add/operator/finally.js": function() {
return __webpack_require__(457);
},
"rxjs/add/operator/find": function() {
return __webpack_require__(459);
},
"rxjs/add/operator/find.js": function() {
return __webpack_require__(459);
},
"rxjs/add/operator/findIndex": function() {
return __webpack_require__(461);
},
"rxjs/add/operator/findIndex.js": function() {
return __webpack_require__(461);
},
"rxjs/add/operator/first": function() {
return __webpack_require__(463);
},
"rxjs/add/operator/first.js": function() {
return __webpack_require__(463);
},
"rxjs/add/operator/groupBy": function() {
return __webpack_require__(464);
},
"rxjs/add/operator/groupBy.js": function() {
return __webpack_require__(464);
},
"rxjs/add/operator/ignoreElements": function() {
return __webpack_require__(469);
},
"rxjs/add/operator/ignoreElements.js": function() {
return __webpack_require__(469);
},
"rxjs/add/operator/isEmpty": function() {
return __webpack_require__(471);
},
"rxjs/add/operator/isEmpty.js": function() {
return __webpack_require__(471);
},
"rxjs/add/operator/last": function() {
return __webpack_require__(477);
},
"rxjs/add/operator/last.js": function() {
return __webpack_require__(477);
},
"rxjs/add/operator/let": function() {
return __webpack_require__(478);
},
"rxjs/add/operator/let.js": function() {
return __webpack_require__(478);
},
"rxjs/add/operator/map": function() {
return __webpack_require__(481);
},
"rxjs/add/operator/map.js": function() {
return __webpack_require__(481);
},
"rxjs/add/operator/mapTo": function() {
return __webpack_require__(482);
},
"rxjs/add/operator/mapTo.js": function() {
return __webpack_require__(482);
},
"rxjs/add/operator/materialize": function() {
return __webpack_require__(484);
},
"rxjs/add/operator/materialize.js": function() {
return __webpack_require__(484);
},
"rxjs/add/operator/max": function() {
return __webpack_require__(486);
},
"rxjs/add/operator/max.js": function() {
return __webpack_require__(486);
},
"rxjs/add/operator/merge": function() {
return __webpack_require__(488);
},
"rxjs/add/operator/merge.js": function() {
return __webpack_require__(488);
},
"rxjs/add/operator/mergeAll": function() {
return __webpack_require__(489);
},
"rxjs/add/operator/mergeAll.js": function() {
return __webpack_require__(489);
},
"rxjs/add/operator/mergeMap": function() {
return __webpack_require__(490);
},
"rxjs/add/operator/mergeMap.js": function() {
return __webpack_require__(490);
},
"rxjs/add/operator/mergeMapTo": function() {
return __webpack_require__(491);
},
"rxjs/add/operator/mergeMapTo.js": function() {
return __webpack_require__(491);
},
"rxjs/add/operator/mergeScan": function() {
return __webpack_require__(492);
},
"rxjs/add/operator/mergeScan.js": function() {
return __webpack_require__(492);
},
"rxjs/add/operator/min": function() {
return __webpack_require__(494);
},
"rxjs/add/operator/min.js": function() {
return __webpack_require__(494);
},
"rxjs/add/operator/multicast": function() {
return __webpack_require__(496);
},
"rxjs/add/operator/multicast.js": function() {
return __webpack_require__(496);
},
"rxjs/add/operator/observeOn": function() {
return __webpack_require__(500);
},
"rxjs/add/operator/observeOn.js": function() {
return __webpack_require__(500);
},
"rxjs/add/operator/onErrorResumeNext": function() {
return __webpack_require__(501);
},
"rxjs/add/operator/onErrorResumeNext.js": function() {
return __webpack_require__(501);
},
"rxjs/add/operator/pairwise": function() {
return __webpack_require__(502);
},
"rxjs/add/operator/pairwise.js": function() {
return __webpack_require__(502);
},
"rxjs/add/operator/partition": function() {
return __webpack_require__(504);
},
"rxjs/add/operator/partition.js": function() {
return __webpack_require__(504);
},
"rxjs/add/operator/pluck": function() {
return __webpack_require__(507);
},
"rxjs/add/operator/pluck.js": function() {
return __webpack_require__(507);
},
"rxjs/add/operator/publish": function() {
return __webpack_require__(509);
},
"rxjs/add/operator/publish.js": function() {
return __webpack_require__(509);
},
"rxjs/add/operator/publishBehavior": function() {
return __webpack_require__(511);
},
"rxjs/add/operator/publishBehavior.js": function() {
return __webpack_require__(511);
},
"rxjs/add/operator/publishLast": function() {
return __webpack_require__(515);
},
"rxjs/add/operator/publishLast.js": function() {
return __webpack_require__(515);
},
"rxjs/add/operator/publishReplay": function() {
return __webpack_require__(513);
},
"rxjs/add/operator/publishReplay.js": function() {
return __webpack_require__(513);
},
"rxjs/add/operator/race": function() {
return __webpack_require__(517);
},
"rxjs/add/operator/race.js": function() {
return __webpack_require__(517);
},
"rxjs/add/operator/reduce": function() {
return __webpack_require__(518);
},
"rxjs/add/operator/reduce.js": function() {
return __webpack_require__(518);
},
"rxjs/add/operator/repeat": function() {
return __webpack_require__(519);
},
"rxjs/add/operator/repeat.js": function() {
return __webpack_require__(519);
},
"rxjs/add/operator/repeatWhen": function() {
return __webpack_require__(521);
},
"rxjs/add/operator/repeatWhen.js": function() {
return __webpack_require__(521);
},
"rxjs/add/operator/retry": function() {
return __webpack_require__(523);
},
"rxjs/add/operator/retry.js": function() {
return __webpack_require__(523);
},
"rxjs/add/operator/retryWhen": function() {
return __webpack_require__(525);
},
"rxjs/add/operator/retryWhen.js": function() {
return __webpack_require__(525);
},
"rxjs/add/operator/sample": function() {
return __webpack_require__(527);
},
"rxjs/add/operator/sample.js": function() {
return __webpack_require__(527);
},
"rxjs/add/operator/sampleTime": function() {
return __webpack_require__(529);
},
"rxjs/add/operator/sampleTime.js": function() {
return __webpack_require__(529);
},
"rxjs/add/operator/scan": function() {
return __webpack_require__(531);
},
"rxjs/add/operator/scan.js": function() {
return __webpack_require__(531);
},
"rxjs/add/operator/sequenceEqual": function() {
return __webpack_require__(533);
},
"rxjs/add/operator/sequenceEqual.js": function() {
return __webpack_require__(533);
},
"rxjs/add/operator/share": function() {
return __webpack_require__(535);
},
"rxjs/add/operator/share.js": function() {
return __webpack_require__(535);
},
"rxjs/add/operator/single": function() {
return __webpack_require__(537);
},
"rxjs/add/operator/single.js": function() {
return __webpack_require__(537);
},
"rxjs/add/operator/skip": function() {
return __webpack_require__(539);
},
"rxjs/add/operator/skip.js": function() {
return __webpack_require__(539);
},
"rxjs/add/operator/skipUntil": function() {
return __webpack_require__(541);
},
"rxjs/add/operator/skipUntil.js": function() {
return __webpack_require__(541);
},
"rxjs/add/operator/skipWhile": function() {
return __webpack_require__(543);
},
"rxjs/add/operator/skipWhile.js": function() {
return __webpack_require__(543);
},
"rxjs/add/operator/startWith": function() {
return __webpack_require__(545);
},
"rxjs/add/operator/startWith.js": function() {
return __webpack_require__(545);
},
"rxjs/add/operator/subscribeOn": function() {
return __webpack_require__(547);
},
"rxjs/add/operator/subscribeOn.js": function() {
return __webpack_require__(547);
},
"rxjs/add/operator/switch": function() {
return __webpack_require__(554);
},
"rxjs/add/operator/switch.js": function() {
return __webpack_require__(554);
},
"rxjs/add/operator/switchMap": function() {
return __webpack_require__(556);
},
"rxjs/add/operator/switchMap.js": function() {
return __webpack_require__(556);
},
"rxjs/add/operator/switchMapTo": function() {
return __webpack_require__(558);
},
"rxjs/add/operator/switchMapTo.js": function() {
return __webpack_require__(558);
},
"rxjs/add/operator/take": function() {
return __webpack_require__(560);
},
"rxjs/add/operator/take.js": function() {
return __webpack_require__(560);
},
"rxjs/add/operator/takeLast": function() {
return __webpack_require__(562);
},
"rxjs/add/operator/takeLast.js": function() {
return __webpack_require__(562);
},
"rxjs/add/operator/takeUntil": function() {
return __webpack_require__(564);
},
"rxjs/add/operator/takeUntil.js": function() {
return __webpack_require__(564);
},
"rxjs/add/operator/takeWhile": function() {
return __webpack_require__(566);
},
"rxjs/add/operator/takeWhile.js": function() {
return __webpack_require__(566);
},
"rxjs/add/operator/throttle": function() {
return __webpack_require__(568);
},
"rxjs/add/operator/throttle.js": function() {
return __webpack_require__(568);
},
"rxjs/add/operator/throttleTime": function() {
return __webpack_require__(570);
},
"rxjs/add/operator/throttleTime.js": function() {
return __webpack_require__(570);
},
"rxjs/add/operator/timeInterval": function() {
return __webpack_require__(572);
},
"rxjs/add/operator/timeInterval.js": function() {
return __webpack_require__(572);
},
"rxjs/add/operator/timeout": function() {
return __webpack_require__(574);
},
"rxjs/add/operator/timeout.js": function() {
return __webpack_require__(574);
},
"rxjs/add/operator/timeoutWith": function() {
return __webpack_require__(576);
},
"rxjs/add/operator/timeoutWith.js": function() {
return __webpack_require__(576);
},
"rxjs/add/operator/timestamp": function() {
return __webpack_require__(578);
},
"rxjs/add/operator/timestamp.js": function() {
return __webpack_require__(578);
},
"rxjs/add/operator/toArray": function() {
return __webpack_require__(580);
},
"rxjs/add/operator/toArray.js": function() {
return __webpack_require__(580);
},
"rxjs/add/operator/toPromise": function() {
return __webpack_require__(582);
},
"rxjs/add/operator/toPromise.js": function() {
return __webpack_require__(582);
},
"rxjs/add/operator/window": function() {
return __webpack_require__(583);
},
"rxjs/add/operator/window.js": function() {
return __webpack_require__(583);
},
"rxjs/add/operator/windowCount": function() {
return __webpack_require__(585);
},
"rxjs/add/operator/windowCount.js": function() {
return __webpack_require__(585);
},
"rxjs/add/operator/windowTime": function() {
return __webpack_require__(587);
},
"rxjs/add/operator/windowTime.js": function() {
return __webpack_require__(587);
},
"rxjs/add/operator/windowToggle": function() {
return __webpack_require__(589);
},
"rxjs/add/operator/windowToggle.js": function() {
return __webpack_require__(589);
},
"rxjs/add/operator/windowWhen": function() {
return __webpack_require__(591);
},
"rxjs/add/operator/windowWhen.js": function() {
return __webpack_require__(591);
},
"rxjs/add/operator/withLatestFrom": function() {
return __webpack_require__(593);
},
"rxjs/add/operator/withLatestFrom.js": function() {
return __webpack_require__(593);
},
"rxjs/add/operator/zip": function() {
return __webpack_require__(595);
},
"rxjs/add/operator/zip.js": function() {
return __webpack_require__(595);
},
"rxjs/add/operator/zipAll": function() {
return __webpack_require__(596);
},
"rxjs/add/operator/zipAll.js": function() {
return __webpack_require__(596);
},
"rxjs/node_modules/symbol-observable/es/index": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "rxjs/node_modules/symbol-observable/es/index.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"rxjs/node_modules/symbol-observable/es/index.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "rxjs/node_modules/symbol-observable/es/index.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"rxjs/node_modules/symbol-observable/es/ponyfill": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "rxjs/node_modules/symbol-observable/es/ponyfill.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"rxjs/node_modules/symbol-observable/es/ponyfill.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "rxjs/node_modules/symbol-observable/es/ponyfill.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"rxjs/node_modules/symbol-observable/index": function() {
return __webpack_require__(612);
},
"rxjs/node_modules/symbol-observable/index.js": function() {
return __webpack_require__(612);
},
"rxjs/node_modules/symbol-observable/lib/index": function() {
return __webpack_require__(613);
},
"rxjs/node_modules/symbol-observable/lib/index.js": function() {
return __webpack_require__(613);
},
"rxjs/node_modules/symbol-observable/lib/ponyfill": function() {
return __webpack_require__(614);
},
"rxjs/node_modules/symbol-observable/lib/ponyfill.js": function() {
return __webpack_require__(614);
},
"rxjs/observable/ArrayLikeObservable": function() {
return __webpack_require__(246);
},
"rxjs/observable/ArrayLikeObservable.js": function() {
return __webpack_require__(246);
},
"rxjs/observable/ArrayObservable": function() {
return __webpack_require__(242);
},
"rxjs/observable/ArrayObservable.js": function() {
return __webpack_require__(242);
},
"rxjs/observable/BoundCallbackObservable": function() {
return __webpack_require__(319);
},
"rxjs/observable/BoundCallbackObservable.js": function() {
return __webpack_require__(319);
},
"rxjs/observable/BoundNodeCallbackObservable": function() {
return __webpack_require__(323);
},
"rxjs/observable/BoundNodeCallbackObservable.js": function() {
return __webpack_require__(323);
},
"rxjs/observable/ConnectableObservable": function() {
return __webpack_require__(499);
},
"rxjs/observable/ConnectableObservable.js": function() {
return __webpack_require__(499);
},
"rxjs/observable/DeferObservable": function() {
return __webpack_require__(332);
},
"rxjs/observable/DeferObservable.js": function() {
return __webpack_require__(332);
},
"rxjs/observable/EmptyObservable": function() {
return __webpack_require__(244);
},
"rxjs/observable/EmptyObservable.js": function() {
return __webpack_require__(244);
},
"rxjs/observable/ErrorObservable": function() {
return __webpack_require__(382);
},
"rxjs/observable/ErrorObservable.js": function() {
return __webpack_require__(382);
},
"rxjs/observable/ForkJoinObservable": function() {
return __webpack_require__(337);
},
"rxjs/observable/ForkJoinObservable.js": function() {
return __webpack_require__(337);
},
"rxjs/observable/FromEventObservable": function() {
return __webpack_require__(341);
},
"rxjs/observable/FromEventObservable.js": function() {
return __webpack_require__(341);
},
"rxjs/observable/FromEventPatternObservable": function() {
return __webpack_require__(344);
},
"rxjs/observable/FromEventPatternObservable.js": function() {
return __webpack_require__(344);
},
"rxjs/observable/FromObservable": function() {
return __webpack_require__(238);
},
"rxjs/observable/FromObservable.js": function() {
return __webpack_require__(238);
},
"rxjs/observable/GenerateObservable": function() {
return __webpack_require__(346);
},
"rxjs/observable/GenerateObservable.js": function() {
return __webpack_require__(346);
},
"rxjs/observable/IfObservable": function() {
return __webpack_require__(349);
},
"rxjs/observable/IfObservable.js": function() {
return __webpack_require__(349);
},
"rxjs/observable/IntervalObservable": function() {
return __webpack_require__(352);
},
"rxjs/observable/IntervalObservable.js": function() {
return __webpack_require__(352);
},
"rxjs/observable/IteratorObservable": function() {
return __webpack_require__(240);
},
"rxjs/observable/IteratorObservable.js": function() {
return __webpack_require__(240);
},
"rxjs/observable/MulticastObservable": function() {
return __webpack_require__(498);
},
"rxjs/observable/MulticastObservable.js": function() {
return __webpack_require__(498);
},
"rxjs/observable/NeverObservable": function() {
return __webpack_require__(366);
},
"rxjs/observable/NeverObservable.js": function() {
return __webpack_require__(366);
},
"rxjs/observable/PairsObservable": function() {
return __webpack_require__(373);
},
"rxjs/observable/PairsObservable.js": function() {
return __webpack_require__(373);
},
"rxjs/observable/PromiseObservable": function() {
return __webpack_require__(225);
},
"rxjs/observable/PromiseObservable.js": function() {
return __webpack_require__(225);
},
"rxjs/observable/RangeObservable": function() {
return __webpack_require__(376);
},
"rxjs/observable/RangeObservable.js": function() {
return __webpack_require__(376);
},
"rxjs/observable/ScalarObservable": function() {
return __webpack_require__(243);
},
"rxjs/observable/ScalarObservable.js": function() {
return __webpack_require__(243);
},
"rxjs/observable/SubscribeOnObservable": function() {
return __webpack_require__(549);
},
"rxjs/observable/SubscribeOnObservable.js": function() {
return __webpack_require__(549);
},
"rxjs/observable/TimerObservable": function() {
return __webpack_require__(385);
},
"rxjs/observable/TimerObservable.js": function() {
return __webpack_require__(385);
},
"rxjs/observable/UsingObservable": function() {
return __webpack_require__(379);
},
"rxjs/observable/UsingObservable.js": function() {
return __webpack_require__(379);
},
"rxjs/observable/bindCallback": function() {
return __webpack_require__(318);
},
"rxjs/observable/bindCallback.js": function() {
return __webpack_require__(318);
},
"rxjs/observable/bindNodeCallback": function() {
return __webpack_require__(322);
},
"rxjs/observable/bindNodeCallback.js": function() {
return __webpack_require__(322);
},
"rxjs/observable/combineLatest": function() {
return __webpack_require__(325);
},
"rxjs/observable/combineLatest.js": function() {
return __webpack_require__(325);
},
"rxjs/observable/concat": function() {
return __webpack_require__(328);
},
"rxjs/observable/concat.js": function() {
return __webpack_require__(328);
},
"rxjs/observable/defer": function() {
return __webpack_require__(331);
},
"rxjs/observable/defer.js": function() {
return __webpack_require__(331);
},
"rxjs/observable/dom/AjaxObservable": function() {
return __webpack_require__(392);
},
"rxjs/observable/dom/AjaxObservable.js": function() {
return __webpack_require__(392);
},
"rxjs/observable/dom/WebSocketSubject": function() {
return __webpack_require__(395);
},
"rxjs/observable/dom/WebSocketSubject.js": function() {
return __webpack_require__(395);
},
"rxjs/observable/dom/ajax": function() {
return __webpack_require__(391);
},
"rxjs/observable/dom/ajax.js": function() {
return __webpack_require__(391);
},
"rxjs/observable/dom/webSocket": function() {
return __webpack_require__(394);
},
"rxjs/observable/dom/webSocket.js": function() {
return __webpack_require__(394);
},
"rxjs/observable/empty": function() {
return __webpack_require__(334);
},
"rxjs/observable/empty.js": function() {
return __webpack_require__(334);
},
"rxjs/observable/forkJoin": function() {
return __webpack_require__(336);
},
"rxjs/observable/forkJoin.js": function() {
return __webpack_require__(336);
},
"rxjs/observable/from": function() {
return __webpack_require__(237);
},
"rxjs/observable/from.js": function() {
return __webpack_require__(237);
},
"rxjs/observable/fromEvent": function() {
return __webpack_require__(340);
},
"rxjs/observable/fromEvent.js": function() {
return __webpack_require__(340);
},
"rxjs/observable/fromEventPattern": function() {
return __webpack_require__(343);
},
"rxjs/observable/fromEventPattern.js": function() {
return __webpack_require__(343);
},
"rxjs/observable/fromPromise": function() {
return __webpack_require__(224);
},
"rxjs/observable/fromPromise.js": function() {
return __webpack_require__(224);
},
"rxjs/observable/if": function() {
return __webpack_require__(348);
},
"rxjs/observable/if.js": function() {
return __webpack_require__(348);
},
"rxjs/observable/interval": function() {
return __webpack_require__(351);
},
"rxjs/observable/interval.js": function() {
return __webpack_require__(351);
},
"rxjs/observable/merge": function() {
return __webpack_require__(360);
},
"rxjs/observable/merge.js": function() {
return __webpack_require__(360);
},
"rxjs/observable/never": function() {
return __webpack_require__(365);
},
"rxjs/observable/never.js": function() {
return __webpack_require__(365);
},
"rxjs/observable/of": function() {
return __webpack_require__(249);
},
"rxjs/observable/of.js": function() {
return __webpack_require__(249);
},
"rxjs/observable/pairs": function() {
return __webpack_require__(372);
},
"rxjs/observable/pairs.js": function() {
return __webpack_require__(372);
},
"rxjs/observable/range": function() {
return __webpack_require__(375);
},
"rxjs/observable/range.js": function() {
return __webpack_require__(375);
},
"rxjs/observable/throw": function() {
return __webpack_require__(381);
},
"rxjs/observable/throw.js": function() {
return __webpack_require__(381);
},
"rxjs/observable/timer": function() {
return __webpack_require__(384);
},
"rxjs/observable/timer.js": function() {
return __webpack_require__(384);
},
"rxjs/observable/using": function() {
return __webpack_require__(378);
},
"rxjs/observable/using.js": function() {
return __webpack_require__(378);
},
"rxjs/observable/zip": function() {
return __webpack_require__(388);
},
"rxjs/observable/zip.js": function() {
return __webpack_require__(388);
},
"rxjs/operator/audit": function() {
return __webpack_require__(474);
},
"rxjs/operator/audit.js": function() {
return __webpack_require__(474);
},
"rxjs/operator/auditTime": function() {
return __webpack_require__(476);
},
"rxjs/operator/auditTime.js": function() {
return __webpack_require__(476);
},
"rxjs/operator/buffer": function() {
return __webpack_require__(402);
},
"rxjs/operator/buffer.js": function() {
return __webpack_require__(402);
},
"rxjs/operator/bufferCount": function() {
return __webpack_require__(404);
},
"rxjs/operator/bufferCount.js": function() {
return __webpack_require__(404);
},
"rxjs/operator/bufferTime": function() {
return __webpack_require__(406);
},
"rxjs/operator/bufferTime.js": function() {
return __webpack_require__(406);
},
"rxjs/operator/bufferToggle": function() {
return __webpack_require__(408);
},
"rxjs/operator/bufferToggle.js": function() {
return __webpack_require__(408);
},
"rxjs/operator/bufferWhen": function() {
return __webpack_require__(410);
},
"rxjs/operator/bufferWhen.js": function() {
return __webpack_require__(410);
},
"rxjs/operator/cache": function() {
return __webpack_require__(412);
},
"rxjs/operator/cache.js": function() {
return __webpack_require__(412);
},
"rxjs/operator/catch": function() {
return __webpack_require__(260);
},
"rxjs/operator/catch.js": function() {
return __webpack_require__(260);
},
"rxjs/operator/combineAll": function() {
return __webpack_require__(415);
},
"rxjs/operator/combineAll.js": function() {
return __webpack_require__(415);
},
"rxjs/operator/combineLatest": function() {
return __webpack_require__(326);
},
"rxjs/operator/combineLatest.js": function() {
return __webpack_require__(326);
},
"rxjs/operator/concat": function() {
return __webpack_require__(329);
},
"rxjs/operator/concat.js": function() {
return __webpack_require__(329);
},
"rxjs/operator/concatAll": function() {
return __webpack_require__(261);
},
"rxjs/operator/concatAll.js": function() {
return __webpack_require__(261);
},
"rxjs/operator/concatMap": function() {
return __webpack_require__(250);
},
"rxjs/operator/concatMap.js": function() {
return __webpack_require__(250);
},
"rxjs/operator/concatMapTo": function() {
return __webpack_require__(421);
},
"rxjs/operator/concatMapTo.js": function() {
return __webpack_require__(421);
},
"rxjs/operator/count": function() {
return __webpack_require__(424);
},
"rxjs/operator/count.js": function() {
return __webpack_require__(424);
},
"rxjs/operator/debounce": function() {
return __webpack_require__(428);
},
"rxjs/operator/debounce.js": function() {
return __webpack_require__(428);
},
"rxjs/operator/debounceTime": function() {
return __webpack_require__(430);
},
"rxjs/operator/debounceTime.js": function() {
return __webpack_require__(430);
},
"rxjs/operator/defaultIfEmpty": function() {
return __webpack_require__(432);
},
"rxjs/operator/defaultIfEmpty.js": function() {
return __webpack_require__(432);
},
"rxjs/operator/delay": function() {
return __webpack_require__(434);
},
"rxjs/operator/delay.js": function() {
return __webpack_require__(434);
},
"rxjs/operator/delayWhen": function() {
return __webpack_require__(436);
},
"rxjs/operator/delayWhen.js": function() {
return __webpack_require__(436);
},
"rxjs/operator/dematerialize": function() {
return __webpack_require__(426);
},
"rxjs/operator/dematerialize.js": function() {
return __webpack_require__(426);
},
"rxjs/operator/distinct": function() {
return __webpack_require__(438);
},
"rxjs/operator/distinct.js": function() {
return __webpack_require__(438);
},
"rxjs/operator/distinctKey": function() {
return __webpack_require__(440);
},
"rxjs/operator/distinctKey.js": function() {
return __webpack_require__(440);
},
"rxjs/operator/distinctUntilChanged": function() {
return __webpack_require__(442);
},
"rxjs/operator/distinctUntilChanged.js": function() {
return __webpack_require__(442);
},
"rxjs/operator/distinctUntilKeyChanged": function() {
return __webpack_require__(444);
},
"rxjs/operator/distinctUntilKeyChanged.js": function() {
return __webpack_require__(444);
},
"rxjs/operator/do": function() {
return __webpack_require__(446);
},
"rxjs/operator/do.js": function() {
return __webpack_require__(446);
},
"rxjs/operator/elementAt": function() {
return __webpack_require__(454);
},
"rxjs/operator/elementAt.js": function() {
return __webpack_require__(454);
},
"rxjs/operator/every": function() {
return __webpack_require__(255);
},
"rxjs/operator/every.js": function() {
return __webpack_require__(255);
},
"rxjs/operator/exhaust": function() {
return __webpack_require__(448);
},
"rxjs/operator/exhaust.js": function() {
return __webpack_require__(448);
},
"rxjs/operator/exhaustMap": function() {
return __webpack_require__(450);
},
"rxjs/operator/exhaustMap.js": function() {
return __webpack_require__(450);
},
"rxjs/operator/expand": function() {
return __webpack_require__(452);
},
"rxjs/operator/expand.js": function() {
return __webpack_require__(452);
},
"rxjs/operator/filter": function() {
return __webpack_require__(264);
},
"rxjs/operator/filter.js": function() {
return __webpack_require__(264);
},
"rxjs/operator/finally": function() {
return __webpack_require__(458);
},
"rxjs/operator/finally.js": function() {
return __webpack_require__(458);
},
"rxjs/operator/find": function() {
return __webpack_require__(460);
},
"rxjs/operator/find.js": function() {
return __webpack_require__(460);
},
"rxjs/operator/findIndex": function() {
return __webpack_require__(462);
},
"rxjs/operator/findIndex.js": function() {
return __webpack_require__(462);
},
"rxjs/operator/first": function() {
return __webpack_require__(256);
},
"rxjs/operator/first.js": function() {
return __webpack_require__(256);
},
"rxjs/operator/groupBy": function() {
return __webpack_require__(465);
},
"rxjs/operator/groupBy.js": function() {
return __webpack_require__(465);
},
"rxjs/operator/ignoreElements": function() {
return __webpack_require__(470);
},
"rxjs/operator/ignoreElements.js": function() {
return __webpack_require__(470);
},
"rxjs/operator/isEmpty": function() {
return __webpack_require__(472);
},
"rxjs/operator/isEmpty.js": function() {
return __webpack_require__(472);
},
"rxjs/operator/last": function() {
return __webpack_require__(263);
},
"rxjs/operator/last.js": function() {
return __webpack_require__(263);
},
"rxjs/operator/let": function() {
return __webpack_require__(479);
},
"rxjs/operator/let.js": function() {
return __webpack_require__(479);
},
"rxjs/operator/map": function() {
return __webpack_require__(258);
},
"rxjs/operator/map.js": function() {
return __webpack_require__(258);
},
"rxjs/operator/mapTo": function() {
return __webpack_require__(483);
},
"rxjs/operator/mapTo.js": function() {
return __webpack_require__(483);
},
"rxjs/operator/materialize": function() {
return __webpack_require__(485);
},
"rxjs/operator/materialize.js": function() {
return __webpack_require__(485);
},
"rxjs/operator/max": function() {
return __webpack_require__(487);
},
"rxjs/operator/max.js": function() {
return __webpack_require__(487);
},
"rxjs/operator/merge": function() {
return __webpack_require__(361);
},
"rxjs/operator/merge.js": function() {
return __webpack_require__(361);
},
"rxjs/operator/mergeAll": function() {
return __webpack_require__(262);
},
"rxjs/operator/mergeAll.js": function() {
return __webpack_require__(262);
},
"rxjs/operator/mergeMap": function() {
return __webpack_require__(251);
},
"rxjs/operator/mergeMap.js": function() {
return __webpack_require__(251);
},
"rxjs/operator/mergeMapTo": function() {
return __webpack_require__(422);
},
"rxjs/operator/mergeMapTo.js": function() {
return __webpack_require__(422);
},
"rxjs/operator/mergeScan": function() {
return __webpack_require__(493);
},
"rxjs/operator/mergeScan.js": function() {
return __webpack_require__(493);
},
"rxjs/operator/min": function() {
return __webpack_require__(495);
},
"rxjs/operator/min.js": function() {
return __webpack_require__(495);
},
"rxjs/operator/multicast": function() {
return __webpack_require__(497);
},
"rxjs/operator/multicast.js": function() {
return __webpack_require__(497);
},
"rxjs/operator/observeOn": function() {
return __webpack_require__(247);
},
"rxjs/operator/observeOn.js": function() {
return __webpack_require__(247);
},
"rxjs/operator/onErrorResumeNext": function() {
return __webpack_require__(370);
},
"rxjs/operator/onErrorResumeNext.js": function() {
return __webpack_require__(370);
},
"rxjs/operator/pairwise": function() {
return __webpack_require__(503);
},
"rxjs/operator/pairwise.js": function() {
return __webpack_require__(503);
},
"rxjs/operator/partition": function() {
return __webpack_require__(505);
},
"rxjs/operator/partition.js": function() {
return __webpack_require__(505);
},
"rxjs/operator/pluck": function() {
return __webpack_require__(508);
},
"rxjs/operator/pluck.js": function() {
return __webpack_require__(508);
},
"rxjs/operator/publish": function() {
return __webpack_require__(510);
},
"rxjs/operator/publish.js": function() {
return __webpack_require__(510);
},
"rxjs/operator/publishBehavior": function() {
return __webpack_require__(512);
},
"rxjs/operator/publishBehavior.js": function() {
return __webpack_require__(512);
},
"rxjs/operator/publishLast": function() {
return __webpack_require__(516);
},
"rxjs/operator/publishLast.js": function() {
return __webpack_require__(516);
},
"rxjs/operator/publishReplay": function() {
return __webpack_require__(514);
},
"rxjs/operator/publishReplay.js": function() {
return __webpack_require__(514);
},
"rxjs/operator/race": function() {
return __webpack_require__(363);
},
"rxjs/operator/race.js": function() {
return __webpack_require__(363);
},
"rxjs/operator/reduce": function() {
return __webpack_require__(259);
},
"rxjs/operator/reduce.js": function() {
return __webpack_require__(259);
},
"rxjs/operator/repeat": function() {
return __webpack_require__(520);
},
"rxjs/operator/repeat.js": function() {
return __webpack_require__(520);
},
"rxjs/operator/repeatWhen": function() {
return __webpack_require__(522);
},
"rxjs/operator/repeatWhen.js": function() {
return __webpack_require__(522);
},
"rxjs/operator/retry": function() {
return __webpack_require__(524);
},
"rxjs/operator/retry.js": function() {
return __webpack_require__(524);
},
"rxjs/operator/retryWhen": function() {
return __webpack_require__(526);
},
"rxjs/operator/retryWhen.js": function() {
return __webpack_require__(526);
},
"rxjs/operator/sample": function() {
return __webpack_require__(528);
},
"rxjs/operator/sample.js": function() {
return __webpack_require__(528);
},
"rxjs/operator/sampleTime": function() {
return __webpack_require__(530);
},
"rxjs/operator/sampleTime.js": function() {
return __webpack_require__(530);
},
"rxjs/operator/scan": function() {
return __webpack_require__(532);
},
"rxjs/operator/scan.js": function() {
return __webpack_require__(532);
},
"rxjs/operator/sequenceEqual": function() {
return __webpack_require__(534);
},
"rxjs/operator/sequenceEqual.js": function() {
return __webpack_require__(534);
},
"rxjs/operator/share": function() {
return __webpack_require__(536);
},
"rxjs/operator/share.js": function() {
return __webpack_require__(536);
},
"rxjs/operator/single": function() {
return __webpack_require__(538);
},
"rxjs/operator/single.js": function() {
return __webpack_require__(538);
},
"rxjs/operator/skip": function() {
return __webpack_require__(540);
},
"rxjs/operator/skip.js": function() {
return __webpack_require__(540);
},
"rxjs/operator/skipUntil": function() {
return __webpack_require__(542);
},
"rxjs/operator/skipUntil.js": function() {
return __webpack_require__(542);
},
"rxjs/operator/skipWhile": function() {
return __webpack_require__(544);
},
"rxjs/operator/skipWhile.js": function() {
return __webpack_require__(544);
},
"rxjs/operator/startWith": function() {
return __webpack_require__(546);
},
"rxjs/operator/startWith.js": function() {
return __webpack_require__(546);
},
"rxjs/operator/subscribeOn": function() {
return __webpack_require__(548);
},
"rxjs/operator/subscribeOn.js": function() {
return __webpack_require__(548);
},
"rxjs/operator/switch": function() {
return __webpack_require__(555);
},
"rxjs/operator/switch.js": function() {
return __webpack_require__(555);
},
"rxjs/operator/switchMap": function() {
return __webpack_require__(557);
},
"rxjs/operator/switchMap.js": function() {
return __webpack_require__(557);
},
"rxjs/operator/switchMapTo": function() {
return __webpack_require__(559);
},
"rxjs/operator/switchMapTo.js": function() {
return __webpack_require__(559);
},
"rxjs/operator/take": function() {
return __webpack_require__(561);
},
"rxjs/operator/take.js": function() {
return __webpack_require__(561);
},
"rxjs/operator/takeLast": function() {
return __webpack_require__(563);
},
"rxjs/operator/takeLast.js": function() {
return __webpack_require__(563);
},
"rxjs/operator/takeUntil": function() {
return __webpack_require__(565);
},
"rxjs/operator/takeUntil.js": function() {
return __webpack_require__(565);
},
"rxjs/operator/takeWhile": function() {
return __webpack_require__(567);
},
"rxjs/operator/takeWhile.js": function() {
return __webpack_require__(567);
},
"rxjs/operator/throttle": function() {
return __webpack_require__(569);
},
"rxjs/operator/throttle.js": function() {
return __webpack_require__(569);
},
"rxjs/operator/throttleTime": function() {
return __webpack_require__(571);
},
"rxjs/operator/throttleTime.js": function() {
return __webpack_require__(571);
},
"rxjs/operator/timeInterval": function() {
return __webpack_require__(573);
},
"rxjs/operator/timeInterval.js": function() {
return __webpack_require__(573);
},
"rxjs/operator/timeout": function() {
return __webpack_require__(575);
},
"rxjs/operator/timeout.js": function() {
return __webpack_require__(575);
},
"rxjs/operator/timeoutWith": function() {
return __webpack_require__(577);
},
"rxjs/operator/timeoutWith.js": function() {
return __webpack_require__(577);
},
"rxjs/operator/timestamp": function() {
return __webpack_require__(579);
},
"rxjs/operator/timestamp.js": function() {
return __webpack_require__(579);
},
"rxjs/operator/toArray": function() {
return __webpack_require__(581);
},
"rxjs/operator/toArray.js": function() {
return __webpack_require__(581);
},
"rxjs/operator/toPromise": function() {
return __webpack_require__(223);
},
"rxjs/operator/toPromise.js": function() {
return __webpack_require__(223);
},
"rxjs/operator/window": function() {
return __webpack_require__(584);
},
"rxjs/operator/window.js": function() {
return __webpack_require__(584);
},
"rxjs/operator/windowCount": function() {
return __webpack_require__(586);
},
"rxjs/operator/windowCount.js": function() {
return __webpack_require__(586);
},
"rxjs/operator/windowTime": function() {
return __webpack_require__(588);
},
"rxjs/operator/windowTime.js": function() {
return __webpack_require__(588);
},
"rxjs/operator/windowToggle": function() {
return __webpack_require__(590);
},
"rxjs/operator/windowToggle.js": function() {
return __webpack_require__(590);
},
"rxjs/operator/windowWhen": function() {
return __webpack_require__(592);
},
"rxjs/operator/windowWhen.js": function() {
return __webpack_require__(592);
},
"rxjs/operator/withLatestFrom": function() {
return __webpack_require__(594);
},
"rxjs/operator/withLatestFrom.js": function() {
return __webpack_require__(594);
},
"rxjs/operator/zip": function() {
return __webpack_require__(389);
},
"rxjs/operator/zip.js": function() {
return __webpack_require__(389);
},
"rxjs/operator/zipAll": function() {
return __webpack_require__(597);
},
"rxjs/operator/zipAll.js": function() {
return __webpack_require__(597);
},
"rxjs/scheduler/Action": function() {
return __webpack_require__(356);
},
"rxjs/scheduler/Action.js": function() {
return __webpack_require__(356);
},
"rxjs/scheduler/AnimationFrameAction": function() {
return __webpack_require__(606);
},
"rxjs/scheduler/AnimationFrameAction.js": function() {
return __webpack_require__(606);
},
"rxjs/scheduler/AnimationFrameScheduler": function() {
return __webpack_require__(608);
},
"rxjs/scheduler/AnimationFrameScheduler.js": function() {
return __webpack_require__(608);
},
"rxjs/scheduler/AsapAction": function() {
return __webpack_require__(551);
},
"rxjs/scheduler/AsapAction.js": function() {
return __webpack_require__(551);
},
"rxjs/scheduler/AsapScheduler": function() {
return __webpack_require__(553);
},
"rxjs/scheduler/AsapScheduler.js": function() {
return __webpack_require__(553);
},
"rxjs/scheduler/AsyncAction": function() {
return __webpack_require__(355);
},
"rxjs/scheduler/AsyncAction.js": function() {
return __webpack_require__(355);
},
"rxjs/scheduler/AsyncScheduler": function() {
return __webpack_require__(357);
},
"rxjs/scheduler/AsyncScheduler.js": function() {
return __webpack_require__(357);
},
"rxjs/scheduler/QueueAction": function() {
return __webpack_require__(398);
},
"rxjs/scheduler/QueueAction.js": function() {
return __webpack_require__(398);
},
"rxjs/scheduler/QueueScheduler": function() {
return __webpack_require__(399);
},
"rxjs/scheduler/QueueScheduler.js": function() {
return __webpack_require__(399);
},
"rxjs/scheduler/VirtualTimeScheduler": function() {
return __webpack_require__(604);
},
"rxjs/scheduler/VirtualTimeScheduler.js": function() {
return __webpack_require__(604);
},
"rxjs/scheduler/animationFrame": function() {
return __webpack_require__(605);
},
"rxjs/scheduler/animationFrame.js": function() {
return __webpack_require__(605);
},
"rxjs/scheduler/asap": function() {
return __webpack_require__(550);
},
"rxjs/scheduler/asap.js": function() {
return __webpack_require__(550);
},
"rxjs/scheduler/async": function() {
return __webpack_require__(354);
},
"rxjs/scheduler/async.js": function() {
return __webpack_require__(354);
},
"rxjs/scheduler/queue": function() {
return __webpack_require__(397);
},
"rxjs/scheduler/queue.js": function() {
return __webpack_require__(397);
},
"rxjs/src/Rx.global": function() {
return __webpack_require__(615);
},
"rxjs/src/Rx.global.js": function() {
return __webpack_require__(615);
},
"rxjs/symbol/iterator": function() {
return __webpack_require__(241);
},
"rxjs/symbol/iterator.js": function() {
return __webpack_require__(241);
},
"rxjs/symbol/observable": function() {
return __webpack_require__(171);
},
"rxjs/symbol/observable.js": function() {
return __webpack_require__(171);
},
"rxjs/symbol/rxSubscriber": function() {
return __webpack_require__(170);
},
"rxjs/symbol/rxSubscriber.js": function() {
return __webpack_require__(170);
},
"rxjs/util/AnimationFrame": function() {
return __webpack_require__(607);
},
"rxjs/util/AnimationFrame.js": function() {
return __webpack_require__(607);
},
"rxjs/util/ArgumentOutOfRangeError": function() {
return __webpack_require__(455);
},
"rxjs/util/ArgumentOutOfRangeError.js": function() {
return __webpack_require__(455);
},
"rxjs/util/EmptyError": function() {
return __webpack_require__(257);
},
"rxjs/util/EmptyError.js": function() {
return __webpack_require__(257);
},
"rxjs/util/FastMap": function() {
return __webpack_require__(468);
},
"rxjs/util/FastMap.js": function() {
return __webpack_require__(468);
},
"rxjs/util/Immediate": function() {
return __webpack_require__(552);
},
"rxjs/util/Immediate.js": function() {
return __webpack_require__(552);
},
"rxjs/util/Map": function() {
return __webpack_require__(466);
},
"rxjs/util/Map.js": function() {
return __webpack_require__(466);
},
"rxjs/util/MapPolyfill": function() {
return __webpack_require__(467);
},
"rxjs/util/MapPolyfill.js": function() {
return __webpack_require__(467);
},
"rxjs/util/ObjectUnsubscribedError": function() {
return __webpack_require__(172);
},
"rxjs/util/ObjectUnsubscribedError.js": function() {
return __webpack_require__(172);
},
"rxjs/util/UnsubscriptionError": function() {
return __webpack_require__(168);
},
"rxjs/util/UnsubscriptionError.js": function() {
return __webpack_require__(168);
},
"rxjs/util/applyMixins": function() {
return __webpack_require__(602);
},
"rxjs/util/applyMixins.js": function() {
return __webpack_require__(602);
},
"rxjs/util/assign": function() {
return __webpack_require__(400);
},
"rxjs/util/assign.js": function() {
return __webpack_require__(400);
},
"rxjs/util/errorObject": function() {
return __webpack_require__(167);
},
"rxjs/util/errorObject.js": function() {
return __webpack_require__(167);
},
"rxjs/util/isArray": function() {
return __webpack_require__(164);
},
"rxjs/util/isArray.js": function() {
return __webpack_require__(164);
},
"rxjs/util/isDate": function() {
return __webpack_require__(386);
},
"rxjs/util/isDate.js": function() {
return __webpack_require__(386);
},
"rxjs/util/isFunction": function() {
return __webpack_require__(162);
},
"rxjs/util/isFunction.js": function() {
return __webpack_require__(162);
},
"rxjs/util/isNumeric": function() {
return __webpack_require__(353);
},
"rxjs/util/isNumeric.js": function() {
return __webpack_require__(353);
},
"rxjs/util/isObject": function() {
return __webpack_require__(165);
},
"rxjs/util/isObject.js": function() {
return __webpack_require__(165);
},
"rxjs/util/isPromise": function() {
return __webpack_require__(239);
},
"rxjs/util/isPromise.js": function() {
return __webpack_require__(239);
},
"rxjs/util/isScheduler": function() {
return __webpack_require__(245);
},
"rxjs/util/isScheduler.js": function() {
return __webpack_require__(245);
},
"rxjs/util/noop": function() {
return __webpack_require__(367);
},
"rxjs/util/noop.js": function() {
return __webpack_require__(367);
},
"rxjs/util/not": function() {
return __webpack_require__(506);
},
"rxjs/util/not.js": function() {
return __webpack_require__(506);
},
"rxjs/util/root": function() {
return __webpack_require__(159);
},
"rxjs/util/root.js": function() {
return __webpack_require__(159);
},
"rxjs/util/subscribeToResult": function() {
return __webpack_require__(252);
},
"rxjs/util/subscribeToResult.js": function() {
return __webpack_require__(252);
},
"rxjs/util/toSubscriber": function() {
return __webpack_require__(160);
},
"rxjs/util/toSubscriber.js": function() {
return __webpack_require__(160);
},
"rxjs/util/tryCatch": function() {
return __webpack_require__(166);
},
"rxjs/util/tryCatch.js": function() {
return __webpack_require__(166);
},
text: function() {
return __webpack_require__(48);
},
"text/": function() {
return __webpack_require__(48);
},
"text/formatted-string": function() {
return __webpack_require__(20);
},
"text/formatted-string-common": function() {
return __webpack_require__(21);
},
"text/formatted-string-common.js": function() {
return __webpack_require__(21);
},
"text/formatted-string.js": function() {
return __webpack_require__(20);
},
"text/span": function() {
return __webpack_require__(26);
},
"text/span-common": function() {
return __webpack_require__(27);
},
"text/span-common.js": function() {
return __webpack_require__(27);
},
"text/span.js": function() {
return __webpack_require__(26);
},
"text/text": function() {
return __webpack_require__(48);
},
"text/text.js": function() {
return __webpack_require__(48);
},
timer: function() {
return __webpack_require__(7);
},
"timer/": function() {
return __webpack_require__(7);
},
"timer/timer": function() {
return __webpack_require__(7);
},
"timer/timer.js": function() {
return __webpack_require__(7);
},
trace: function() {
return __webpack_require__(31);
},
"trace/": function() {
return __webpack_require__(31);
},
"trace/trace": function() {
return __webpack_require__(31);
},
"trace/trace.js": function() {
return __webpack_require__(31);
},
"ui/action-bar": function() {
return __webpack_require__(50);
},
"ui/action-bar/": function() {
return __webpack_require__(50);
},
"ui/action-bar/action-bar": function() {
return __webpack_require__(50);
},
"ui/action-bar/action-bar-common": function() {
return __webpack_require__(51);
},
"ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(51);
},
"ui/action-bar/action-bar.js": function() {
return __webpack_require__(50);
},
"ui/activity-indicator": function() {
return __webpack_require__(57);
},
"ui/activity-indicator/": function() {
return __webpack_require__(57);
},
"ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(57);
},
"ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(58);
},
"ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(58);
},
"ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(57);
},
"ui/animation": function() {
return __webpack_require__(40);
},
"ui/animation/": function() {
return __webpack_require__(40);
},
"ui/animation/animation": function() {
return __webpack_require__(40);
},
"ui/animation/animation-common": function() {
return __webpack_require__(41);
},
"ui/animation/animation-common.js": function() {
return __webpack_require__(41);
},
"ui/animation/animation.js": function() {
return __webpack_require__(40);
},
"ui/animation/keyframe-animation": function() {
return __webpack_require__(96);
},
"ui/animation/keyframe-animation.js": function() {
return __webpack_require__(96);
},
"ui/border": function() {
return __webpack_require__(59);
},
"ui/border/": function() {
return __webpack_require__(59);
},
"ui/border/border": function() {
return __webpack_require__(59);
},
"ui/border/border.js": function() {
return __webpack_require__(59);
},
"ui/builder": function() {
return __webpack_require__(105);
},
"ui/builder/": function() {
return __webpack_require__(105);
},
"ui/builder/binding-builder": function() {
return __webpack_require__(32);
},
"ui/builder/binding-builder.js": function() {
return __webpack_require__(32);
},
"ui/builder/builder": function() {
return __webpack_require__(105);
},
"ui/builder/builder.js": function() {
return __webpack_require__(105);
},
"ui/builder/component-builder": function() {
return __webpack_require__(110);
},
"ui/builder/component-builder.js": function() {
return __webpack_require__(110);
},
"ui/builder/special-properties": function() {
return __webpack_require__(36);
},
"ui/builder/special-properties.js": function() {
return __webpack_require__(36);
},
"ui/button": function() {
return __webpack_require__(61);
},
"ui/button/": function() {
return __webpack_require__(61);
},
"ui/button/button": function() {
return __webpack_require__(61);
},
"ui/button/button-common": function() {
return __webpack_require__(62);
},
"ui/button/button-common.js": function() {
return __webpack_require__(62);
},
"ui/button/button.js": function() {
return __webpack_require__(61);
},
"ui/content-view": function() {
return __webpack_require__(60);
},
"ui/content-view/": function() {
return __webpack_require__(60);
},
"ui/content-view/content-view": function() {
return __webpack_require__(60);
},
"ui/content-view/content-view.js": function() {
return __webpack_require__(60);
},
"ui/core/bindable": function() {
return __webpack_require__(28);
},
"ui/core/bindable.js": function() {
return __webpack_require__(28);
},
"ui/core/dependency-observable": function() {
return __webpack_require__(29);
},
"ui/core/dependency-observable.js": function() {
return __webpack_require__(29);
},
"ui/core/proxy": function() {
return __webpack_require__(52);
},
"ui/core/proxy.js": function() {
return __webpack_require__(52);
},
"ui/core/view": function() {
return __webpack_require__(12);
},
"ui/core/view-common": function() {
return __webpack_require__(13);
},
"ui/core/view-common.js": function() {
return __webpack_require__(13);
},
"ui/core/view.js": function() {
return __webpack_require__(12);
},
"ui/core/weak-event-listener": function() {
return __webpack_require__(30);
},
"ui/core/weak-event-listener.js": function() {
return __webpack_require__(30);
},
"ui/date-picker": function() {
return __webpack_require__(64);
},
"ui/date-picker/": function() {
return __webpack_require__(64);
},
"ui/date-picker/date-picker": function() {
return __webpack_require__(64);
},
"ui/date-picker/date-picker-common": function() {
return __webpack_require__(65);
},
"ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(65);
},
"ui/date-picker/date-picker.js": function() {
return __webpack_require__(64);
},
"ui/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"ui/editable-text-base": function() {
return __webpack_require__(128);
},
"ui/editable-text-base/": function() {
return __webpack_require__(128);
},
"ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(128);
},
"ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(129);
},
"ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(129);
},
"ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(128);
},
"ui/enums": function() {
return __webpack_require__(39);
},
"ui/enums/": function() {
return __webpack_require__(39);
},
"ui/enums/enums": function() {
return __webpack_require__(39);
},
"ui/enums/enums.js": function() {
return __webpack_require__(39);
},
"ui/frame": function() {
return __webpack_require__(10);
},
"ui/frame/": function() {
return __webpack_require__(10);
},
"ui/frame/activity": function() {
return __webpack_require__(616);
},
"ui/frame/activity.js": function() {
return __webpack_require__(616);
},
"ui/frame/fragment": function() {
return __webpack_require__(148);
},
"ui/frame/fragment.js": function() {
return __webpack_require__(148);
},
"ui/frame/frame": function() {
return __webpack_require__(10);
},
"ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"ui/gestures": function() {
return __webpack_require__(140);
},
"ui/gestures/": function() {
return __webpack_require__(140);
},
"ui/gestures/gestures": function() {
return __webpack_require__(140);
},
"ui/gestures/gestures-common": function() {
return __webpack_require__(141);
},
"ui/gestures/gestures-common.js": function() {
return __webpack_require__(141);
},
"ui/gestures/gestures.js": function() {
return __webpack_require__(140);
},
"ui/html-view": function() {
return __webpack_require__(66);
},
"ui/html-view/": function() {
return __webpack_require__(66);
},
"ui/html-view/html-view": function() {
return __webpack_require__(66);
},
"ui/html-view/html-view-common": function() {
return __webpack_require__(67);
},
"ui/html-view/html-view-common.js": function() {
return __webpack_require__(67);
},
"ui/html-view/html-view.js": function() {
return __webpack_require__(66);
},
"ui/image": function() {
return __webpack_require__(68);
},
"ui/image-cache": function() {
return __webpack_require__(617);
},
"ui/image-cache/": function() {
return __webpack_require__(617);
},
"ui/image-cache/image-cache": function() {
return __webpack_require__(617);
},
"ui/image-cache/image-cache-common": function() {
return __webpack_require__(618);
},
"ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(618);
},
"ui/image-cache/image-cache.js": function() {
return __webpack_require__(617);
},
"ui/image/": function() {
return __webpack_require__(68);
},
"ui/image/image": function() {
return __webpack_require__(68);
},
"ui/image/image-common": function() {
return __webpack_require__(69);
},
"ui/image/image-common.js": function() {
return __webpack_require__(69);
},
"ui/image/image.js": function() {
return __webpack_require__(68);
},
"ui/label": function() {
return __webpack_require__(72);
},
"ui/label/": function() {
return __webpack_require__(72);
},
"ui/label/label": function() {
return __webpack_require__(72);
},
"ui/label/label-common": function() {
return __webpack_require__(73);
},
"ui/label/label-common.js": function() {
return __webpack_require__(73);
},
"ui/label/label.js": function() {
return __webpack_require__(72);
},
"ui/layouts/absolute-layout": function() {
return __webpack_require__(76);
},
"ui/layouts/absolute-layout/": function() {
return __webpack_require__(76);
},
"ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(76);
},
"ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(77);
},
"ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(77);
},
"ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(76);
},
"ui/layouts/dock-layout": function() {
return __webpack_require__(80);
},
"ui/layouts/dock-layout/": function() {
return __webpack_require__(80);
},
"ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(80);
},
"ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(81);
},
"ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(81);
},
"ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(80);
},
"ui/layouts/flexbox-layout": function() {
return __webpack_require__(142);
},
"ui/layouts/flexbox-layout/": function() {
return __webpack_require__(142);
},
"ui/layouts/flexbox-layout/flexbox-layout": function() {
return __webpack_require__(142);
},
"ui/layouts/flexbox-layout/flexbox-layout-common": function() {
return __webpack_require__(143);
},
"ui/layouts/flexbox-layout/flexbox-layout-common.js": function() {
return __webpack_require__(143);
},
"ui/layouts/flexbox-layout/flexbox-layout.js": function() {
return __webpack_require__(142);
},
"ui/layouts/grid-layout": function() {
return __webpack_require__(82);
},
"ui/layouts/grid-layout/": function() {
return __webpack_require__(82);
},
"ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(82);
},
"ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(83);
},
"ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(83);
},
"ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(82);
},
"ui/layouts/layout": function() {
return __webpack_require__(619);
},
"ui/layouts/layout-base": function() {
return __webpack_require__(78);
},
"ui/layouts/layout-base-common": function() {
return __webpack_require__(79);
},
"ui/layouts/layout-base-common.js": function() {
return __webpack_require__(79);
},
"ui/layouts/layout-base.js": function() {
return __webpack_require__(78);
},
"ui/layouts/layout.js": function() {
return __webpack_require__(619);
},
"ui/layouts/stack-layout": function() {
return __webpack_require__(85);
},
"ui/layouts/stack-layout/": function() {
return __webpack_require__(85);
},
"ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(85);
},
"ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(86);
},
"ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(86);
},
"ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(85);
},
"ui/layouts/wrap-layout": function() {
return __webpack_require__(209);
},
"ui/layouts/wrap-layout/": function() {
return __webpack_require__(209);
},
"ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(209);
},
"ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(210);
},
"ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(210);
},
"ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(209);
},
"ui/list-picker": function() {
return __webpack_require__(87);
},
"ui/list-picker/": function() {
return __webpack_require__(87);
},
"ui/list-picker/list-picker": function() {
return __webpack_require__(87);
},
"ui/list-picker/list-picker-common": function() {
return __webpack_require__(88);
},
"ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(88);
},
"ui/list-picker/list-picker.js": function() {
return __webpack_require__(87);
},
"ui/list-view": function() {
return __webpack_require__(134);
},
"ui/list-view/": function() {
return __webpack_require__(134);
},
"ui/list-view/list-view": function() {
return __webpack_require__(134);
},
"ui/list-view/list-view-common": function() {
return __webpack_require__(135);
},
"ui/list-view/list-view-common.js": function() {
return __webpack_require__(135);
},
"ui/list-view/list-view.js": function() {
return __webpack_require__(134);
},
"ui/page": function() {
return __webpack_require__(89);
},
"ui/page/": function() {
return __webpack_require__(89);
},
"ui/page/page": function() {
return __webpack_require__(89);
},
"ui/page/page-common": function() {
return __webpack_require__(90);
},
"ui/page/page-common.js": function() {
return __webpack_require__(90);
},
"ui/page/page.js": function() {
return __webpack_require__(89);
},
"ui/placeholder": function() {
return __webpack_require__(99);
},
"ui/placeholder/": function() {
return __webpack_require__(99);
},
"ui/placeholder/placeholder": function() {
return __webpack_require__(99);
},
"ui/placeholder/placeholder-common": function() {
return __webpack_require__(100);
},
"ui/placeholder/placeholder-common.js": function() {
return __webpack_require__(100);
},
"ui/placeholder/placeholder.js": function() {
return __webpack_require__(99);
},
"ui/progress": function() {
return __webpack_require__(101);
},
"ui/progress/": function() {
return __webpack_require__(101);
},
"ui/progress/progress": function() {
return __webpack_require__(101);
},
"ui/progress/progress-common": function() {
return __webpack_require__(102);
},
"ui/progress/progress-common.js": function() {
return __webpack_require__(102);
},
"ui/progress/progress.js": function() {
return __webpack_require__(101);
},
"ui/proxy-view-container": function() {
return __webpack_require__(103);
},
"ui/proxy-view-container/": function() {
return __webpack_require__(103);
},
"ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(103);
},
"ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(103);
},
"ui/repeater": function() {
return __webpack_require__(104);
},
"ui/repeater/": function() {
return __webpack_require__(104);
},
"ui/repeater/repeater": function() {
return __webpack_require__(104);
},
"ui/repeater/repeater.js": function() {
return __webpack_require__(104);
},
"ui/scroll-view": function() {
return __webpack_require__(112);
},
"ui/scroll-view/": function() {
return __webpack_require__(112);
},
"ui/scroll-view/scroll-view": function() {
return __webpack_require__(112);
},
"ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(113);
},
"ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(113);
},
"ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(112);
},
"ui/search-bar": function() {
return __webpack_require__(114);
},
"ui/search-bar/": function() {
return __webpack_require__(114);
},
"ui/search-bar/search-bar": function() {
return __webpack_require__(114);
},
"ui/search-bar/search-bar-common": function() {
return __webpack_require__(115);
},
"ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(115);
},
"ui/search-bar/search-bar.js": function() {
return __webpack_require__(114);
},
"ui/segmented-bar": function() {
return __webpack_require__(116);
},
"ui/segmented-bar/": function() {
return __webpack_require__(116);
},
"ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(116);
},
"ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(117);
},
"ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(117);
},
"ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(116);
},
"ui/slider": function() {
return __webpack_require__(118);
},
"ui/slider/": function() {
return __webpack_require__(118);
},
"ui/slider/slider": function() {
return __webpack_require__(118);
},
"ui/slider/slider-common": function() {
return __webpack_require__(119);
},
"ui/slider/slider-common.js": function() {
return __webpack_require__(119);
},
"ui/slider/slider.js": function() {
return __webpack_require__(118);
},
"ui/styling": function() {
return __webpack_require__(139);
},
"ui/styling/": function() {
return __webpack_require__(139);
},
"ui/styling/background": function() {
return __webpack_require__(136);
},
"ui/styling/background-common": function() {
return __webpack_require__(137);
},
"ui/styling/background-common.js": function() {
return __webpack_require__(137);
},
"ui/styling/background.js": function() {
return __webpack_require__(136);
},
"ui/styling/converters": function() {
return __webpack_require__(45);
},
"ui/styling/converters.js": function() {
return __webpack_require__(45);
},
"ui/styling/css-animation-parser": function() {
return __webpack_require__(97);
},
"ui/styling/css-animation-parser.js": function() {
return __webpack_require__(97);
},
"ui/styling/css-selector": function() {
return __webpack_require__(92);
},
"ui/styling/css-selector-parser": function() {
return __webpack_require__(93);
},
"ui/styling/css-selector-parser.js": function() {
return __webpack_require__(93);
},
"ui/styling/css-selector.js": function() {
return __webpack_require__(92);
},
"ui/styling/font": function() {
return __webpack_require__(43);
},
"ui/styling/font-common": function() {
return __webpack_require__(44);
},
"ui/styling/font-common.js": function() {
return __webpack_require__(44);
},
"ui/styling/font.js": function() {
return __webpack_require__(43);
},
"ui/styling/style": function() {
return __webpack_require__(15);
},
"ui/styling/style-property": function() {
return __webpack_require__(98);
},
"ui/styling/style-property.js": function() {
return __webpack_require__(98);
},
"ui/styling/style-scope": function() {
return __webpack_require__(91);
},
"ui/styling/style-scope.js": function() {
return __webpack_require__(91);
},
"ui/styling/style.js": function() {
return __webpack_require__(15);
},
"ui/styling/styling": function() {
return __webpack_require__(139);
},
"ui/styling/styling.js": function() {
return __webpack_require__(139);
},
"ui/switch": function() {
return __webpack_require__(120);
},
"ui/switch/": function() {
return __webpack_require__(120);
},
"ui/switch/switch": function() {
return __webpack_require__(120);
},
"ui/switch/switch-common": function() {
return __webpack_require__(121);
},
"ui/switch/switch-common.js": function() {
return __webpack_require__(121);
},
"ui/switch/switch.js": function() {
return __webpack_require__(120);
},
"ui/tab-view": function() {
return __webpack_require__(122);
},
"ui/tab-view/": function() {
return __webpack_require__(122);
},
"ui/tab-view/tab-view": function() {
return __webpack_require__(122);
},
"ui/tab-view/tab-view-common": function() {
return __webpack_require__(123);
},
"ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(123);
},
"ui/tab-view/tab-view.js": function() {
return __webpack_require__(122);
},
"ui/text-base": function() {
return __webpack_require__(74);
},
"ui/text-base/": function() {
return __webpack_require__(74);
},
"ui/text-base/text-base": function() {
return __webpack_require__(74);
},
"ui/text-base/text-base-common": function() {
return __webpack_require__(75);
},
"ui/text-base/text-base-common.js": function() {
return __webpack_require__(75);
},
"ui/text-base/text-base-styler": function() {
return __webpack_require__(63);
},
"ui/text-base/text-base-styler.js": function() {
return __webpack_require__(63);
},
"ui/text-base/text-base.js": function() {
return __webpack_require__(74);
},
"ui/text-field": function() {
return __webpack_require__(126);
},
"ui/text-field/": function() {
return __webpack_require__(126);
},
"ui/text-field/text-field": function() {
return __webpack_require__(126);
},
"ui/text-field/text-field-common": function() {
return __webpack_require__(127);
},
"ui/text-field/text-field-common.js": function() {
return __webpack_require__(127);
},
"ui/text-field/text-field.js": function() {
return __webpack_require__(126);
},
"ui/text-view": function() {
return __webpack_require__(130);
},
"ui/text-view/": function() {
return __webpack_require__(130);
},
"ui/text-view/text-view": function() {
return __webpack_require__(130);
},
"ui/text-view/text-view-common": function() {
return __webpack_require__(131);
},
"ui/text-view/text-view-common.js": function() {
return __webpack_require__(131);
},
"ui/text-view/text-view.js": function() {
return __webpack_require__(130);
},
"ui/time-picker": function() {
return __webpack_require__(132);
},
"ui/time-picker/": function() {
return __webpack_require__(132);
},
"ui/time-picker/time-picker": function() {
return __webpack_require__(132);
},
"ui/time-picker/time-picker-common": function() {
return __webpack_require__(133);
},
"ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(133);
},
"ui/time-picker/time-picker.js": function() {
return __webpack_require__(132);
},
"ui/transition": function() {
return __webpack_require__(144);
},
"ui/transition/": function() {
return __webpack_require__(144);
},
"ui/transition/fade-transition": function() {
return __webpack_require__(146);
},
"ui/transition/fade-transition.js": function() {
return __webpack_require__(146);
},
"ui/transition/flip-transition": function() {
return __webpack_require__(147);
},
"ui/transition/flip-transition.js": function() {
return __webpack_require__(147);
},
"ui/transition/slide-transition": function() {
return __webpack_require__(145);
},
"ui/transition/slide-transition.js": function() {
return __webpack_require__(145);
},
"ui/transition/transition": function() {
return __webpack_require__(144);
},
"ui/transition/transition.js": function() {
return __webpack_require__(144);
},
"ui/web-view": function() {
return __webpack_require__(124);
},
"ui/web-view/": function() {
return __webpack_require__(124);
},
"ui/web-view/web-view": function() {
return __webpack_require__(124);
},
"ui/web-view/web-view-common": function() {
return __webpack_require__(125);
},
"ui/web-view/web-view-common.js": function() {
return __webpack_require__(125);
},
"ui/web-view/web-view.js": function() {
return __webpack_require__(124);
},
"utils/debug": function() {
return __webpack_require__(106);
},
"utils/debug-common": function() {
return __webpack_require__(107);
},
"utils/debug-common.js": function() {
return __webpack_require__(107);
},
"utils/debug.js": function() {
return __webpack_require__(106);
},
"utils/lazy": function() {
return __webpack_require__(42);
},
"utils/lazy.js": function() {
return __webpack_require__(42);
},
"utils/module-merge": function() {
return __webpack_require__(620);
},
"utils/module-merge.js": function() {
return __webpack_require__(620);
},
"utils/number-utils": function() {
return __webpack_require__(84);
},
"utils/number-utils.js": function() {
return __webpack_require__(84);
},
"utils/types": function() {
return __webpack_require__(14);
},
"utils/types.js": function() {
return __webpack_require__(14);
},
"utils/utils": function() {
return __webpack_require__(37);
},
"utils/utils-common": function() {
return __webpack_require__(38);
},
"utils/utils-common.js": function() {
return __webpack_require__(38);
},
"utils/utils.js": function() {
return __webpack_require__(37);
},
xhr: function() {
return __webpack_require__(149);
},
"xhr/": function() {
return __webpack_require__(149);
},
"xhr/xhr": function() {
return __webpack_require__(149);
},
"xhr/xhr.js": function() {
return __webpack_require__(149);
},
xml: function() {
return __webpack_require__(108);
},
"xml/": function() {
return __webpack_require__(108);
},
"xml/xml": function() {
return __webpack_require__(108);
},
"xml/xml.js": function() {
return __webpack_require__(108);
}
};
function __join() {
var parts = [];
for (var i = 0, l = arguments.length; i < l; i++) {
parts = parts.concat(arguments[i].split("/"));
}
var newParts = [];
for (i = 0, l = parts.length; i < l; i++) {
var part = parts[i];
if (!part || part === ".") continue;
if (part === "..") newParts.pop(); else newParts.push(part);
}
if (parts[0] === "") newParts.unshift("");
return newParts.join("/") || (newParts.length ? "/" : ".");
}
function __require(moduleId) {
var moduleEntry = map[moduleId];
if (!moduleEntry) {
return;
}
return moduleEntry();
}
function __trace(message) {
android.util.Log.v("TNS.Native", "" + message);
}
return function(moduleId, dirname) {
while (global.__pendingSnapshotCalls && __pendingSnapshotCalls.length) {
var call = __pendingSnapshotCalls.shift();
call();
}
var resolvedModuleId = moduleId.replace(/^\.\/tns_modules\//, "");
if (resolvedModuleId[0] === ".") {
if (resolvedModuleId === "./_embedded_script_.js") {
return {};
}
resolvedModuleId = __join(dirname, resolvedModuleId);
}
if (resolvedModuleId[0] === "/") {
resolvedModuleId = resolvedModuleId.replace(/^\/.*\/files\/app\/tns_modules\//, "");
}
var module = __require(resolvedModuleId);
if (module) {
return module;
}
};
}();
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(156), __webpack_require__(158), __webpack_require__(202)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core", "rxjs/Observable", "@angular/platform-browser" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser);
})(this, function(exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
"use strict";
var BrowserXhr = function() {
function BrowserXhr() {}
BrowserXhr.prototype.build = function() {
return new XMLHttpRequest();
};
BrowserXhr.decorators = [ {
type: _angular_core.Injectable
} ];
BrowserXhr.ctorParameters = [];
return BrowserXhr;
}();
exports.RequestMethod;
(function(RequestMethod) {
RequestMethod[RequestMethod["Get"] = 0] = "Get";
RequestMethod[RequestMethod["Post"] = 1] = "Post";
RequestMethod[RequestMethod["Put"] = 2] = "Put";
RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
RequestMethod[RequestMethod["Options"] = 4] = "Options";
RequestMethod[RequestMethod["Head"] = 5] = "Head";
RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
})(exports.RequestMethod || (exports.RequestMethod = {}));
exports.ReadyState;
(function(ReadyState) {
ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
ReadyState[ReadyState["Open"] = 1] = "Open";
ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
ReadyState[ReadyState["Loading"] = 3] = "Loading";
ReadyState[ReadyState["Done"] = 4] = "Done";
ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
})(exports.ReadyState || (exports.ReadyState = {}));
exports.ResponseType;
(function(ResponseType) {
ResponseType[ResponseType["Basic"] = 0] = "Basic";
ResponseType[ResponseType["Cors"] = 1] = "Cors";
ResponseType[ResponseType["Default"] = 2] = "Default";
ResponseType[ResponseType["Error"] = 3] = "Error";
ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
})(exports.ResponseType || (exports.ResponseType = {}));
var ContentType;
(function(ContentType) {
ContentType[ContentType["NONE"] = 0] = "NONE";
ContentType[ContentType["JSON"] = 1] = "JSON";
ContentType[ContentType["FORM"] = 2] = "FORM";
ContentType[ContentType["FORM_DATA"] = 3] = "FORM_DATA";
ContentType[ContentType["TEXT"] = 4] = "TEXT";
ContentType[ContentType["BLOB"] = 5] = "BLOB";
ContentType[ContentType["ARRAY_BUFFER"] = 6] = "ARRAY_BUFFER";
})(ContentType || (ContentType = {}));
exports.ResponseContentType;
(function(ResponseContentType) {
ResponseContentType[ResponseContentType["Text"] = 0] = "Text";
ResponseContentType[ResponseContentType["Json"] = 1] = "Json";
ResponseContentType[ResponseContentType["ArrayBuffer"] = 2] = "ArrayBuffer";
ResponseContentType[ResponseContentType["Blob"] = 3] = "Blob";
})(exports.ResponseContentType || (exports.ResponseContentType = {}));
var Headers = function() {
function Headers(headers) {
var _this = this;
this._headers = new Map();
this._normalizedNames = new Map();
if (!headers) {
return;
}
if (headers instanceof Headers) {
headers.forEach(function(values, name) {
values.forEach(function(value) {
return _this.append(name, value);
});
});
return;
}
Object.keys(headers).forEach(function(name) {
var values = Array.isArray(headers[name]) ? headers[name] : [ headers[name] ];
_this.delete(name);
values.forEach(function(value) {
return _this.append(name, value);
});
});
}
Headers.fromResponseHeaderString = function(headersString) {
var headers = new Headers();
headersString.split("\n").forEach(function(line) {
var index = line.indexOf(":");
if (index > 0) {
var name_1 = line.slice(0, index);
var value = line.slice(index + 1).trim();
headers.set(name_1, value);
}
});
return headers;
};
Headers.prototype.append = function(name, value) {
var values = this.getAll(name);
if (values === null) {
this.set(name, value);
} else {
values.push(value);
}
};
Headers.prototype.delete = function(name) {
var lcName = name.toLowerCase();
this._normalizedNames.delete(lcName);
this._headers.delete(lcName);
};
Headers.prototype.forEach = function(fn) {
var _this = this;
this._headers.forEach(function(values, lcName) {
return fn(values, _this._normalizedNames.get(lcName), _this._headers);
});
};
Headers.prototype.get = function(name) {
var values = this.getAll(name);
if (values === null) {
return null;
}
return values.length > 0 ? values[0] : null;
};
Headers.prototype.has = function(name) {
return this._headers.has(name.toLowerCase());
};
Headers.prototype.keys = function() {
return Array.from(this._normalizedNames.values());
};
Headers.prototype.set = function(name, value) {
if (Array.isArray(value)) {
if (value.length) {
this._headers.set(name.toLowerCase(), [ value.join(",") ]);
}
} else {
this._headers.set(name.toLowerCase(), [ value ]);
}
this.mayBeSetNormalizedName(name);
};
Headers.prototype.values = function() {
return Array.from(this._headers.values());
};
Headers.prototype.toJSON = function() {
var _this = this;
var serialized = {};
this._headers.forEach(function(values, name) {
var split = [];
values.forEach(function(v) {
return split.push.apply(split, v.split(","));
});
serialized[_this._normalizedNames.get(name)] = split;
});
return serialized;
};
Headers.prototype.getAll = function(name) {
return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
};
Headers.prototype.entries = function() {
throw new Error('"entries" method is not implemented on Headers class');
};
Headers.prototype.mayBeSetNormalizedName = function(name) {
var lcName = name.toLowerCase();
if (!this._normalizedNames.has(lcName)) {
this._normalizedNames.set(lcName, name);
}
};
return Headers;
}();
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ResponseOptions = function() {
function ResponseOptions(_a) {
var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
this.body = body != null ? body : null;
this.status = status != null ? status : null;
this.headers = headers != null ? headers : null;
this.statusText = statusText != null ? statusText : null;
this.type = type != null ? type : null;
this.url = url != null ? url : null;
}
ResponseOptions.prototype.merge = function(options) {
return new ResponseOptions({
body: options && options.body != null ? options.body : this.body,
status: options && options.status != null ? options.status : this.status,
headers: options && options.headers != null ? options.headers : this.headers,
statusText: options && options.statusText != null ? options.statusText : this.statusText,
type: options && options.type != null ? options.type : this.type,
url: options && options.url != null ? options.url : this.url
});
};
return ResponseOptions;
}();
var BaseResponseOptions = function(_super) {
__extends$1(BaseResponseOptions, _super);
function BaseResponseOptions() {
_super.call(this, {
status: 200,
statusText: "Ok",
type: exports.ResponseType.Default,
headers: new Headers()
});
}
BaseResponseOptions.decorators = [ {
type: _angular_core.Injectable
} ];
BaseResponseOptions.ctorParameters = [];
return BaseResponseOptions;
}(ResponseOptions);
var ConnectionBackend = function() {
function ConnectionBackend() {}
return ConnectionBackend;
}();
var Connection = function() {
function Connection() {}
return Connection;
}();
var XSRFStrategy = function() {
function XSRFStrategy() {}
return XSRFStrategy;
}();
function normalizeMethodName(method) {
if (typeof method !== "string") return method;
switch (method.toUpperCase()) {
case "GET":
return exports.RequestMethod.Get;

case "POST":
return exports.RequestMethod.Post;

case "PUT":
return exports.RequestMethod.Put;

case "DELETE":
return exports.RequestMethod.Delete;

case "OPTIONS":
return exports.RequestMethod.Options;

case "HEAD":
return exports.RequestMethod.Head;

case "PATCH":
return exports.RequestMethod.Patch;
}
throw new Error('Invalid request method. The method "' + method + '" is not supported.');
}
var isSuccess = function(status) {
return status >= 200 && status < 300;
};
function getResponseURL(xhr) {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
function stringToArrayBuffer(input) {
var view = new Uint16Array(input.length);
for (var i = 0, strLen = input.length; i < strLen; i++) {
view[i] = input.charCodeAt(i);
}
return view.buffer;
}
function paramParser(rawParams) {
if (rawParams === void 0) {
rawParams = "";
}
var map = new Map();
if (rawParams.length > 0) {
var params = rawParams.split("&");
params.forEach(function(param) {
var eqIdx = param.indexOf("=");
var _a = eqIdx == -1 ? [ param, "" ] : [ param.slice(0, eqIdx), param.slice(eqIdx + 1) ], key = _a[0], val = _a[1];
var list = map.get(key) || [];
list.push(val);
map.set(key, list);
});
}
return map;
}
var QueryEncoder = function() {
function QueryEncoder() {}
QueryEncoder.prototype.encodeKey = function(k) {
return standardEncoding(k);
};
QueryEncoder.prototype.encodeValue = function(v) {
return standardEncoding(v);
};
return QueryEncoder;
}();
function standardEncoding(v) {
return encodeURIComponent(v).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/gi, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%2B/gi, "+").replace(/%3D/gi, "=").replace(/%3F/gi, "?").replace(/%2F/gi, "/");
}
var URLSearchParams = function() {
function URLSearchParams(rawParams, queryEncoder) {
if (rawParams === void 0) {
rawParams = "";
}
if (queryEncoder === void 0) {
queryEncoder = new QueryEncoder();
}
this.rawParams = rawParams;
this.queryEncoder = queryEncoder;
this.paramsMap = paramParser(rawParams);
}
URLSearchParams.prototype.clone = function() {
var clone = new URLSearchParams("", this.queryEncoder);
clone.appendAll(this);
return clone;
};
URLSearchParams.prototype.has = function(param) {
return this.paramsMap.has(param);
};
URLSearchParams.prototype.get = function(param) {
var storedParam = this.paramsMap.get(param);
return Array.isArray(storedParam) ? storedParam[0] : null;
};
URLSearchParams.prototype.getAll = function(param) {
return this.paramsMap.get(param) || [];
};
URLSearchParams.prototype.set = function(param, val) {
if (val === void 0 || val === null) {
this.delete(param);
return;
}
var list = this.paramsMap.get(param) || [];
list.length = 0;
list.push(val);
this.paramsMap.set(param, list);
};
URLSearchParams.prototype.setAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var list = _this.paramsMap.get(param) || [];
list.length = 0;
list.push(value[0]);
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.append = function(param, val) {
if (val === void 0 || val === null) return;
var list = this.paramsMap.get(param) || [];
list.push(val);
this.paramsMap.set(param, list);
};
URLSearchParams.prototype.appendAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var list = _this.paramsMap.get(param) || [];
for (var i = 0; i < value.length; ++i) {
list.push(value[i]);
}
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.replaceAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var list = _this.paramsMap.get(param) || [];
list.length = 0;
for (var i = 0; i < value.length; ++i) {
list.push(value[i]);
}
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.toString = function() {
var _this = this;
var paramsList = [];
this.paramsMap.forEach(function(values, k) {
values.forEach(function(v) {
return paramsList.push(_this.queryEncoder.encodeKey(k) + "=" + _this.queryEncoder.encodeValue(v));
});
});
return paramsList.join("&");
};
URLSearchParams.prototype.delete = function(param) {
this.paramsMap.delete(param);
};
return URLSearchParams;
}();
var Body = function() {
function Body() {}
Body.prototype.json = function() {
if (typeof this._body === "string") {
return JSON.parse(this._body);
}
if (this._body instanceof ArrayBuffer) {
return JSON.parse(this.text());
}
return this._body;
};
Body.prototype.text = function() {
if (this._body instanceof URLSearchParams) {
return this._body.toString();
}
if (this._body instanceof ArrayBuffer) {
return String.fromCharCode.apply(null, new Uint16Array(this._body));
}
if (this._body === null) {
return "";
}
if (typeof this._body === "object") {
return JSON.stringify(this._body, null, 2);
}
return this._body.toString();
};
Body.prototype.arrayBuffer = function() {
if (this._body instanceof ArrayBuffer) {
return this._body;
}
return stringToArrayBuffer(this.text());
};
Body.prototype.blob = function() {
if (this._body instanceof Blob) {
return this._body;
}
if (this._body instanceof ArrayBuffer) {
return new Blob([ this._body ]);
}
throw new Error("The request body isn't either a blob or an array buffer");
};
return Body;
}();
var __extends$2 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Response = function(_super) {
__extends$2(Response, _super);
function Response(responseOptions) {
_super.call(this);
this._body = responseOptions.body;
this.status = responseOptions.status;
this.ok = this.status >= 200 && this.status <= 299;
this.statusText = responseOptions.statusText;
this.headers = responseOptions.headers;
this.type = responseOptions.type;
this.url = responseOptions.url;
}
Response.prototype.toString = function() {
return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
};
return Response;
}(Body);
var _nextRequestId = 0;
var JSONP_HOME = "__ng_jsonp__";
var _jsonpConnections = null;
function _getJsonpConnections() {
var w = typeof window == "object" ? window : {};
if (_jsonpConnections === null) {
_jsonpConnections = w[JSONP_HOME] = {};
}
return _jsonpConnections;
}
var BrowserJsonp = function() {
function BrowserJsonp() {}
BrowserJsonp.prototype.build = function(url) {
var node = document.createElement("script");
node.src = url;
return node;
};
BrowserJsonp.prototype.nextRequestID = function() {
return "__req" + _nextRequestId++;
};
BrowserJsonp.prototype.requestCallback = function(id) {
return JSONP_HOME + "." + id + ".finished";
};
BrowserJsonp.prototype.exposeConnection = function(id, connection) {
var connections = _getJsonpConnections();
connections[id] = connection;
};
BrowserJsonp.prototype.removeConnection = function(id) {
var connections = _getJsonpConnections();
connections[id] = null;
};
BrowserJsonp.prototype.send = function(node) {
document.body.appendChild(node);
};
BrowserJsonp.prototype.cleanup = function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
};
BrowserJsonp.decorators = [ {
type: _angular_core.Injectable
} ];
BrowserJsonp.ctorParameters = [];
return BrowserJsonp;
}();
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.";
var JSONP_ERR_WRONG_METHOD = "JSONP requests must use GET request method.";
var JSONPConnection = function() {
function JSONPConnection() {}
return JSONPConnection;
}();
var JSONPConnection_ = function(_super) {
__extends(JSONPConnection_, _super);
function JSONPConnection_(req, _dom, baseResponseOptions) {
var _this = this;
_super.call(this);
this._dom = _dom;
this.baseResponseOptions = baseResponseOptions;
this._finished = false;
if (req.method !== exports.RequestMethod.Get) {
throw new TypeError(JSONP_ERR_WRONG_METHOD);
}
this.request = req;
this.response = new rxjs_Observable.Observable(function(responseObserver) {
_this.readyState = exports.ReadyState.Loading;
var id = _this._id = _dom.nextRequestID();
_dom.exposeConnection(id, _this);
var callback = _dom.requestCallback(_this._id);
var url = req.url;
if (url.indexOf("=JSONP_CALLBACK&") > -1) {
url = url.replace("=JSONP_CALLBACK&", "=" + callback + "&");
} else if (url.lastIndexOf("=JSONP_CALLBACK") === url.length - "=JSONP_CALLBACK".length) {
url = url.substring(0, url.length - "=JSONP_CALLBACK".length) + ("=" + callback);
}
var script = _this._script = _dom.build(url);
var onLoad = function(event) {
if (_this.readyState === exports.ReadyState.Cancelled) return;
_this.readyState = exports.ReadyState.Done;
_dom.cleanup(script);
if (!_this._finished) {
var responseOptions_1 = new ResponseOptions({
body: JSONP_ERR_NO_CALLBACK,
type: exports.ResponseType.Error,
url: url
});
if (baseResponseOptions) {
responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
}
responseObserver.error(new Response(responseOptions_1));
return;
}
var responseOptions = new ResponseOptions({
body: _this._responseData,
url: url
});
if (_this.baseResponseOptions) {
responseOptions = _this.baseResponseOptions.merge(responseOptions);
}
responseObserver.next(new Response(responseOptions));
responseObserver.complete();
};
var onError = function(error) {
if (_this.readyState === exports.ReadyState.Cancelled) return;
_this.readyState = exports.ReadyState.Done;
_dom.cleanup(script);
var responseOptions = new ResponseOptions({
body: error.message,
type: exports.ResponseType.Error
});
if (baseResponseOptions) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
responseObserver.error(new Response(responseOptions));
};
script.addEventListener("load", onLoad);
script.addEventListener("error", onError);
_dom.send(script);
return function() {
_this.readyState = exports.ReadyState.Cancelled;
script.removeEventListener("load", onLoad);
script.removeEventListener("error", onError);
_this._dom.cleanup(script);
};
});
}
JSONPConnection_.prototype.finished = function(data) {
this._finished = true;
this._dom.removeConnection(this._id);
if (this.readyState === exports.ReadyState.Cancelled) return;
this._responseData = data;
};
return JSONPConnection_;
}(JSONPConnection);
var JSONPBackend = function(_super) {
__extends(JSONPBackend, _super);
function JSONPBackend() {
_super.apply(this, arguments);
}
return JSONPBackend;
}(ConnectionBackend);
var JSONPBackend_ = function(_super) {
__extends(JSONPBackend_, _super);
function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
_super.call(this);
this._browserJSONP = _browserJSONP;
this._baseResponseOptions = _baseResponseOptions;
}
JSONPBackend_.prototype.createConnection = function(request) {
return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
};
JSONPBackend_.decorators = [ {
type: _angular_core.Injectable
} ];
JSONPBackend_.ctorParameters = [ {
type: BrowserJsonp
}, {
type: ResponseOptions
} ];
return JSONPBackend_;
}(JSONPBackend);
var XSSI_PREFIX = /^\)\]\}',?\n/;
var XHRConnection = function() {
function XHRConnection(req, browserXHR, baseResponseOptions) {
var _this = this;
this.request = req;
this.response = new rxjs_Observable.Observable(function(responseObserver) {
var _xhr = browserXHR.build();
_xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);
if (req.withCredentials != null) {
_xhr.withCredentials = req.withCredentials;
}
var onLoad = function() {
var status = _xhr.status === 1223 ? 204 : _xhr.status;
var body = null;
if (status !== 204) {
body = _xhr.response == null ? _xhr.responseText : _xhr.response;
if (typeof body === "string") {
body = body.replace(XSSI_PREFIX, "");
}
}
if (status === 0) {
status = body ? 200 : 0;
}
var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
var url = getResponseURL(_xhr) || req.url;
var statusText = _xhr.statusText || "OK";
var responseOptions = new ResponseOptions({
body: body,
status: status,
headers: headers,
statusText: statusText,
url: url
});
if (baseResponseOptions != null) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
var response = new Response(responseOptions);
response.ok = isSuccess(status);
if (response.ok) {
responseObserver.next(response);
responseObserver.complete();
return;
}
responseObserver.error(response);
};
var onError = function(err) {
var responseOptions = new ResponseOptions({
body: err,
type: exports.ResponseType.Error,
status: _xhr.status,
statusText: _xhr.statusText
});
if (baseResponseOptions != null) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
responseObserver.error(new Response(responseOptions));
};
_this.setDetectedContentType(req, _xhr);
if (req.headers != null) {
req.headers.forEach(function(values, name) {
return _xhr.setRequestHeader(name, values.join(","));
});
}
if (req.responseType != null && _xhr.responseType != null) {
switch (req.responseType) {
case exports.ResponseContentType.ArrayBuffer:
_xhr.responseType = "arraybuffer";
break;

case exports.ResponseContentType.Json:
_xhr.responseType = "json";
break;

case exports.ResponseContentType.Text:
_xhr.responseType = "text";
break;

case exports.ResponseContentType.Blob:
_xhr.responseType = "blob";
break;

default:
throw new Error("The selected responseType is not supported");
}
}
_xhr.addEventListener("load", onLoad);
_xhr.addEventListener("error", onError);
_xhr.send(_this.request.getBody());
return function() {
_xhr.removeEventListener("load", onLoad);
_xhr.removeEventListener("error", onError);
_xhr.abort();
};
});
}
XHRConnection.prototype.setDetectedContentType = function(req, _xhr) {
if (req.headers != null && req.headers.get("Content-Type") != null) {
return;
}
switch (req.contentType) {
case ContentType.NONE:
break;

case ContentType.JSON:
_xhr.setRequestHeader("content-type", "application/json");
break;

case ContentType.FORM:
_xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
break;

case ContentType.TEXT:
_xhr.setRequestHeader("content-type", "text/plain");
break;

case ContentType.BLOB:
var blob = req.blob();
if (blob.type) {
_xhr.setRequestHeader("content-type", blob.type);
}
break;
}
};
return XHRConnection;
}();
var CookieXSRFStrategy = function() {
function CookieXSRFStrategy(_cookieName, _headerName) {
if (_cookieName === void 0) {
_cookieName = "XSRF-TOKEN";
}
if (_headerName === void 0) {
_headerName = "X-XSRF-TOKEN";
}
this._cookieName = _cookieName;
this._headerName = _headerName;
}
CookieXSRFStrategy.prototype.configureRequest = function(req) {
var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
if (xsrfToken) {
req.headers.set(this._headerName, xsrfToken);
}
};
return CookieXSRFStrategy;
}();
var XHRBackend = function() {
function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
this._browserXHR = _browserXHR;
this._baseResponseOptions = _baseResponseOptions;
this._xsrfStrategy = _xsrfStrategy;
}
XHRBackend.prototype.createConnection = function(request) {
this._xsrfStrategy.configureRequest(request);
return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
};
XHRBackend.decorators = [ {
type: _angular_core.Injectable
} ];
XHRBackend.ctorParameters = [ {
type: BrowserXhr
}, {
type: ResponseOptions
}, {
type: XSRFStrategy
} ];
return XHRBackend;
}();
var __extends$3 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var RequestOptions = function() {
function RequestOptions(_a) {
var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;
this.method = method != null ? normalizeMethodName(method) : null;
this.headers = headers != null ? headers : null;
this.body = body != null ? body : null;
this.url = url != null ? url : null;
this.search = search != null ? typeof search === "string" ? new URLSearchParams(search) : search : null;
this.withCredentials = withCredentials != null ? withCredentials : null;
this.responseType = responseType != null ? responseType : null;
}
RequestOptions.prototype.merge = function(options) {
return new RequestOptions({
method: options && options.method != null ? options.method : this.method,
headers: options && options.headers != null ? options.headers : this.headers,
body: options && options.body != null ? options.body : this.body,
url: options && options.url != null ? options.url : this.url,
search: options && options.search != null ? typeof options.search === "string" ? new URLSearchParams(options.search) : options.search.clone() : this.search,
withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,
responseType: options && options.responseType != null ? options.responseType : this.responseType
});
};
return RequestOptions;
}();
var BaseRequestOptions = function(_super) {
__extends$3(BaseRequestOptions, _super);
function BaseRequestOptions() {
_super.call(this, {
method: exports.RequestMethod.Get,
headers: new Headers()
});
}
BaseRequestOptions.decorators = [ {
type: _angular_core.Injectable
} ];
BaseRequestOptions.ctorParameters = [];
return BaseRequestOptions;
}(RequestOptions);
var __extends$5 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Request = function(_super) {
__extends$5(Request, _super);
function Request(requestOptions) {
_super.call(this);
var url = requestOptions.url;
this.url = requestOptions.url;
if (requestOptions.search) {
var search = requestOptions.search.toString();
if (search.length > 0) {
var prefix = "?";
if (this.url.indexOf("?") != -1) {
prefix = this.url[this.url.length - 1] == "&" ? "" : "&";
}
this.url = url + prefix + search;
}
}
this._body = requestOptions.body;
this.method = normalizeMethodName(requestOptions.method);
this.headers = new Headers(requestOptions.headers);
this.contentType = this.detectContentType();
this.withCredentials = requestOptions.withCredentials;
this.responseType = requestOptions.responseType;
}
Request.prototype.detectContentType = function() {
switch (this.headers.get("content-type")) {
case "application/json":
return ContentType.JSON;

case "application/x-www-form-urlencoded":
return ContentType.FORM;

case "multipart/form-data":
return ContentType.FORM_DATA;

case "text/plain":
case "text/html":
return ContentType.TEXT;

case "application/octet-stream":
return ContentType.BLOB;

default:
return this.detectContentTypeFromBody();
}
};
Request.prototype.detectContentTypeFromBody = function() {
if (this._body == null) {
return ContentType.NONE;
} else if (this._body instanceof URLSearchParams) {
return ContentType.FORM;
} else if (this._body instanceof FormData) {
return ContentType.FORM_DATA;
} else if (this._body instanceof Blob$1) {
return ContentType.BLOB;
} else if (this._body instanceof ArrayBuffer$1) {
return ContentType.ARRAY_BUFFER;
} else if (this._body && typeof this._body == "object") {
return ContentType.JSON;
} else {
return ContentType.TEXT;
}
};
Request.prototype.getBody = function() {
switch (this.contentType) {
case ContentType.JSON:
return this.text();

case ContentType.FORM:
return this.text();

case ContentType.FORM_DATA:
return this._body;

case ContentType.TEXT:
return this.text();

case ContentType.BLOB:
return this.blob();

case ContentType.ARRAY_BUFFER:
return this.arrayBuffer();

default:
return null;
}
};
return Request;
}(Body);
var noop = function() {};
var w = typeof window == "object" ? window : noop;
var FormData = w["FormData"] || noop;
var Blob$1 = w["Blob"] || noop;
var ArrayBuffer$1 = w["ArrayBuffer"] || noop;
var __extends$4 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function httpRequest(backend, request) {
return backend.createConnection(request).response;
}
function mergeOptions(defaultOpts, providedOpts, method, url) {
var newOptions = defaultOpts;
if (providedOpts) {
return newOptions.merge(new RequestOptions({
method: providedOpts.method || method,
url: providedOpts.url || url,
search: providedOpts.search,
headers: providedOpts.headers,
body: providedOpts.body,
withCredentials: providedOpts.withCredentials,
responseType: providedOpts.responseType
}));
}
return newOptions.merge(new RequestOptions({
method: method,
url: url
}));
}
var Http = function() {
function Http(_backend, _defaultOptions) {
this._backend = _backend;
this._defaultOptions = _defaultOptions;
}
Http.prototype.request = function(url, options) {
var responseObservable;
if (typeof url === "string") {
responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
} else if (url instanceof Request) {
responseObservable = httpRequest(this._backend, url);
} else {
throw new Error("First argument must be a url string or Request instance.");
}
return responseObservable;
};
Http.prototype.get = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
};
Http.prototype.post = function(url, body, options) {
return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({
body: body
})), options, exports.RequestMethod.Post, url)));
};
Http.prototype.put = function(url, body, options) {
return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({
body: body
})), options, exports.RequestMethod.Put, url)));
};
Http.prototype.delete = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));
};
Http.prototype.patch = function(url, body, options) {
return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({
body: body
})), options, exports.RequestMethod.Patch, url)));
};
Http.prototype.head = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));
};
Http.prototype.options = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));
};
Http.decorators = [ {
type: _angular_core.Injectable
} ];
Http.ctorParameters = [ {
type: ConnectionBackend
}, {
type: RequestOptions
} ];
return Http;
}();
var Jsonp = function(_super) {
__extends$4(Jsonp, _super);
function Jsonp(backend, defaultOptions) {
_super.call(this, backend, defaultOptions);
}
Jsonp.prototype.request = function(url, options) {
var responseObservable;
if (typeof url === "string") {
url = new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));
}
if (url instanceof Request) {
if (url.method !== exports.RequestMethod.Get) {
throw new Error("JSONP requests must use GET request method.");
}
responseObservable = httpRequest(this._backend, url);
} else {
throw new Error("First argument must be a url string or Request instance.");
}
return responseObservable;
};
Jsonp.decorators = [ {
type: _angular_core.Injectable
} ];
Jsonp.ctorParameters = [ {
type: ConnectionBackend
}, {
type: RequestOptions
} ];
return Jsonp;
}(Http);
function _createDefaultCookieXSRFStrategy() {
return new CookieXSRFStrategy();
}
function httpFactory(xhrBackend, requestOptions) {
return new Http(xhrBackend, requestOptions);
}
function jsonpFactory(jsonpBackend, requestOptions) {
return new Jsonp(jsonpBackend, requestOptions);
}
var HttpModule = function() {
function HttpModule() {}
HttpModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
providers: [ {
provide: Http,
useFactory: httpFactory,
deps: [ XHRBackend, RequestOptions ]
}, BrowserXhr, {
provide: RequestOptions,
useClass: BaseRequestOptions
}, {
provide: ResponseOptions,
useClass: BaseResponseOptions
}, XHRBackend, {
provide: XSRFStrategy,
useFactory: _createDefaultCookieXSRFStrategy
} ]
} ]
} ];
HttpModule.ctorParameters = [];
return HttpModule;
}();
var JsonpModule = function() {
function JsonpModule() {}
JsonpModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
providers: [ {
provide: Jsonp,
useFactory: jsonpFactory,
deps: [ JSONPBackend, RequestOptions ]
}, BrowserJsonp, {
provide: RequestOptions,
useClass: BaseRequestOptions
}, {
provide: ResponseOptions,
useClass: BaseResponseOptions
}, {
provide: JSONPBackend,
useClass: JSONPBackend_
} ]
} ]
} ];
JsonpModule.ctorParameters = [];
return JsonpModule;
}();
exports.BrowserXhr = BrowserXhr;
exports.JSONPBackend = JSONPBackend;
exports.JSONPConnection = JSONPConnection;
exports.CookieXSRFStrategy = CookieXSRFStrategy;
exports.XHRBackend = XHRBackend;
exports.XHRConnection = XHRConnection;
exports.BaseRequestOptions = BaseRequestOptions;
exports.RequestOptions = RequestOptions;
exports.BaseResponseOptions = BaseResponseOptions;
exports.ResponseOptions = ResponseOptions;
exports.Headers = Headers;
exports.Http = Http;
exports.Jsonp = Jsonp;
exports.HttpModule = HttpModule;
exports.JsonpModule = JsonpModule;
exports.Connection = Connection;
exports.ConnectionBackend = ConnectionBackend;
exports.XSRFStrategy = XSRFStrategy;
exports.Request = Request;
exports.Response = Response;
exports.QueryEncoder = QueryEncoder;
exports.URLSearchParams = URLSearchParams;
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(177), __webpack_require__(156), __webpack_require__(202)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/compiler", "@angular/core", "@angular/platform-browser" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser);
})(this, function(exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
"use strict";
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ResourceLoaderImpl = function(_super) {
__extends(ResourceLoaderImpl, _super);
function ResourceLoaderImpl() {
_super.apply(this, arguments);
}
ResourceLoaderImpl.prototype.get = function(url) {
var resolve;
var reject;
var promise = new Promise(function(res, rej) {
resolve = res;
reject = rej;
});
var xhr = new XMLHttpRequest();
xhr.open("GET", url, true);
xhr.responseType = "text";
xhr.onload = function() {
var response = xhr.response || xhr.responseText;
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status === 0) {
status = response ? 200 : 0;
}
if (200 <= status && status <= 300) {
resolve(response);
} else {
reject("Failed to load " + url);
}
};
xhr.onerror = function() {
reject("Failed to load " + url);
};
xhr.send();
return promise;
};
ResourceLoaderImpl.decorators = [ {
type: _angular_core.Injectable
} ];
ResourceLoaderImpl.ctorParameters = [];
return ResourceLoaderImpl;
}(_angular_compiler.ResourceLoader);
var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [ INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
provide: _angular_core.COMPILER_OPTIONS,
useValue: {
providers: [ {
provide: _angular_compiler.ResourceLoader,
useClass: ResourceLoaderImpl
} ]
},
multi: true
} ];
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
var _global = globalScope;
_global.assert = function assert(condition) {};
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var CachedResourceLoader = function(_super) {
__extends$1(CachedResourceLoader, _super);
function CachedResourceLoader() {
_super.call(this);
this._cache = _global.$templateCache;
if (this._cache == null) {
throw new Error("CachedResourceLoader: Template cache was not found in $templateCache.");
}
}
CachedResourceLoader.prototype.get = function(url) {
if (this._cache.hasOwnProperty(url)) {
return Promise.resolve(this._cache[url]);
} else {
return Promise.reject("CachedResourceLoader: Did not find cached template for " + url);
}
};
return CachedResourceLoader;
}(_angular_compiler.ResourceLoader);
var __platform_browser_dynamic_private__ = {
INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
ResourceLoaderImpl: ResourceLoaderImpl
};
var RESOURCE_CACHE_PROVIDER = [ {
provide: _angular_compiler.ResourceLoader,
useClass: CachedResourceLoader
} ];
var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
exports.platformBrowserDynamic = platformBrowserDynamic;
exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(203), __webpack_require__(156), __webpack_require__(236), __webpack_require__(157), __webpack_require__(237), __webpack_require__(249), __webpack_require__(250), __webpack_require__(255), __webpack_require__(256), __webpack_require__(258), __webpack_require__(251), __webpack_require__(259), __webpack_require__(158), __webpack_require__(260), __webpack_require__(261), __webpack_require__(257), __webpack_require__(224), __webpack_require__(263), __webpack_require__(262), __webpack_require__(202), __webpack_require__(264)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/common", "@angular/core", "rxjs/BehaviorSubject", "rxjs/Subject", "rxjs/observable/from", "rxjs/observable/of", "rxjs/operator/concatMap", "rxjs/operator/every", "rxjs/operator/first", "rxjs/operator/map", "rxjs/operator/mergeMap", "rxjs/operator/reduce", "rxjs/Observable", "rxjs/operator/catch", "rxjs/operator/concatAll", "rxjs/util/EmptyError", "rxjs/observable/fromPromise", "rxjs/operator/last", "rxjs/operator/mergeAll", "@angular/platform-browser", "rxjs/operator/filter" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.router = global.ng.router || {}), global.ng.common, global.ng.core, global.Rx, global.Rx, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.ng.platformBrowser, global.Rx.Observable.prototype);
})(this, function(exports, _angular_common, _angular_core, rxjs_BehaviorSubject, rxjs_Subject, rxjs_observable_from, rxjs_observable_of, rxjs_operator_concatMap, rxjs_operator_every, rxjs_operator_first, rxjs_operator_map, rxjs_operator_mergeMap, rxjs_operator_reduce, rxjs_Observable, rxjs_operator_catch, rxjs_operator_concatAll, rxjs_util_EmptyError, rxjs_observable_fromPromise, l, rxjs_operator_mergeAll, _angular_platformBrowser, rxjs_operator_filter) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PRIMARY_OUTLET = "primary";
var NavigationCancelingError = function(_super) {
__extends(NavigationCancelingError, _super);
function NavigationCancelingError(message) {
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
NavigationCancelingError.prototype.toString = function() {
return this.message;
};
return NavigationCancelingError;
}(Error);
function defaultUrlMatcher(segments, segmentGroup, route) {
var path = route.path;
var parts = path.split("/");
var posParams = {};
var consumed = [];
var currentIndex = 0;
for (var i = 0; i < parts.length; ++i) {
if (currentIndex >= segments.length) return null;
var current = segments[currentIndex];
var p = parts[i];
var isPosParam = p.startsWith(":");
if (!isPosParam && p !== current.path) return null;
if (isPosParam) {
posParams[p.substring(1)] = current;
}
consumed.push(current);
currentIndex++;
}
if (route.pathMatch === "full" && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
return null;
} else {
return {
consumed: consumed,
posParams: posParams
};
}
}
function shallowEqualArrays(a, b) {
if (a.length !== b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (!shallowEqual(a[i], b[i])) return false;
}
return true;
}
function shallowEqual(a, b) {
var k1 = Object.keys(a);
var k2 = Object.keys(b);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (a[key] !== b[key]) {
return false;
}
}
return true;
}
function flatten(a) {
var target = [];
for (var i = 0; i < a.length; ++i) {
for (var j = 0; j < a[i].length; ++j) {
target.push(a[i][j]);
}
}
return target;
}
function last(a) {
return a.length > 0 ? a[a.length - 1] : null;
}
function merge(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
}
function forEach(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
}
function waitForMap(obj, fn) {
var waitFor = [];
var res = {};
forEach(obj, function(a, k) {
if (k === PRIMARY_OUTLET) {
waitFor.push(rxjs_operator_map.map.call(fn(k, a), function(_) {
res[k] = _;
return _;
}));
}
});
forEach(obj, function(a, k) {
if (k !== PRIMARY_OUTLET) {
waitFor.push(rxjs_operator_map.map.call(fn(k, a), function(_) {
res[k] = _;
return _;
}));
}
});
if (waitFor.length > 0) {
var concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));
var last$ = l.last.call(concatted$);
return rxjs_operator_map.map.call(last$, function() {
return res;
});
} else {
return rxjs_observable_of.of(res);
}
}
function andObservables(observables) {
var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);
return rxjs_operator_every.every.call(merged$, function(result) {
return result === true;
});
}
function wrapIntoObservable(value) {
if (value instanceof rxjs_Observable.Observable) {
return value;
} else if (value instanceof Promise) {
return rxjs_observable_fromPromise.fromPromise(value);
} else {
return rxjs_observable_of.of(value);
}
}
var ROUTES = new _angular_core.OpaqueToken("ROUTES");
var LoadedRouterConfig = function() {
function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {
this.routes = routes;
this.injector = injector;
this.factoryResolver = factoryResolver;
this.injectorFactory = injectorFactory;
}
return LoadedRouterConfig;
}();
var RouterConfigLoader = function() {
function RouterConfigLoader(loader, compiler) {
this.loader = loader;
this.compiler = compiler;
}
RouterConfigLoader.prototype.load = function(parentInjector, loadChildren) {
return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function(r) {
var ref = r.create(parentInjector);
var injectorFactory = function(parent) {
return r.create(parent).injector;
};
return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);
});
};
RouterConfigLoader.prototype.loadModuleFactory = function(loadChildren) {
var _this = this;
if (typeof loadChildren === "string") {
return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));
} else {
var offlineMode_1 = this.compiler instanceof _angular_core.Compiler;
return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function(t) {
return offlineMode_1 ? rxjs_observable_of.of(t) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t));
});
}
};
return RouterConfigLoader;
}();
function createEmptyUrlTree() {
return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}
function containsTree(container, containee, exact) {
if (exact) {
return equalQueryParams(container.queryParams, containee.queryParams) && equalSegmentGroups(container.root, containee.root);
} else {
return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root);
}
}
function equalQueryParams(container, containee) {
return shallowEqual(container, containee);
}
function equalSegmentGroups(container, containee) {
if (!equalPath(container.segments, containee.segments)) return false;
if (container.numberOfChildren !== containee.numberOfChildren) return false;
for (var c in containee.children) {
if (!container.children[c]) return false;
if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;
}
return true;
}
function containsQueryParams(container, containee) {
return Object.keys(containee) <= Object.keys(container) && Object.keys(containee).every(function(key) {
return containee[key] === container[key];
});
}
function containsSegmentGroup(container, containee) {
return containsSegmentGroupHelper(container, containee, containee.segments);
}
function containsSegmentGroupHelper(container, containee, containeePaths) {
if (container.segments.length > containeePaths.length) {
var current = container.segments.slice(0, containeePaths.length);
if (!equalPath(current, containeePaths)) return false;
if (containee.hasChildren()) return false;
return true;
} else if (container.segments.length === containeePaths.length) {
if (!equalPath(container.segments, containeePaths)) return false;
for (var c in containee.children) {
if (!container.children[c]) return false;
if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;
}
return true;
} else {
var current = containeePaths.slice(0, container.segments.length);
var next = containeePaths.slice(container.segments.length);
if (!equalPath(container.segments, current)) return false;
if (!container.children[PRIMARY_OUTLET]) return false;
return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
}
}
var UrlTree = function() {
function UrlTree(root, queryParams, fragment) {
this.root = root;
this.queryParams = queryParams;
this.fragment = fragment;
}
UrlTree.prototype.toString = function() {
return new DefaultUrlSerializer().serialize(this);
};
return UrlTree;
}();
var UrlSegmentGroup = function() {
function UrlSegmentGroup(segments, children) {
var _this = this;
this.segments = segments;
this.children = children;
this.parent = null;
forEach(children, function(v, k) {
return v.parent = _this;
});
}
UrlSegmentGroup.prototype.hasChildren = function() {
return this.numberOfChildren > 0;
};
Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
get: function() {
return Object.keys(this.children).length;
},
enumerable: true,
configurable: true
});
UrlSegmentGroup.prototype.toString = function() {
return serializePaths(this);
};
return UrlSegmentGroup;
}();
var UrlSegment = function() {
function UrlSegment(path, parameters) {
this.path = path;
this.parameters = parameters;
}
UrlSegment.prototype.toString = function() {
return serializePath(this);
};
return UrlSegment;
}();
function equalSegments(a, b) {
if (a.length !== b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i].path !== b[i].path) return false;
if (!shallowEqual(a[i].parameters, b[i].parameters)) return false;
}
return true;
}
function equalPath(a, b) {
if (a.length !== b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i].path !== b[i].path) return false;
}
return true;
}
function mapChildrenIntoArray(segment, fn) {
var res = [];
forEach(segment.children, function(child, childOutlet) {
if (childOutlet === PRIMARY_OUTLET) {
res = res.concat(fn(child, childOutlet));
}
});
forEach(segment.children, function(child, childOutlet) {
if (childOutlet !== PRIMARY_OUTLET) {
res = res.concat(fn(child, childOutlet));
}
});
return res;
}
var UrlSerializer = function() {
function UrlSerializer() {}
return UrlSerializer;
}();
var DefaultUrlSerializer = function() {
function DefaultUrlSerializer() {}
DefaultUrlSerializer.prototype.parse = function(url) {
var p = new UrlParser(url);
return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
};
DefaultUrlSerializer.prototype.serialize = function(tree) {
var segment = "/" + serializeSegment(tree.root, true);
var query = serializeQueryParams(tree.queryParams);
var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : "";
return "" + segment + query + fragment;
};
return DefaultUrlSerializer;
}();
function serializePaths(segment) {
return segment.segments.map(function(p) {
return serializePath(p);
}).join("/");
}
function serializeSegment(segment, root) {
if (segment.hasChildren() && root) {
var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
var children_1 = [];
forEach(segment.children, function(v, k) {
if (k !== PRIMARY_OUTLET) {
children_1.push(k + ":" + serializeSegment(v, false));
}
});
if (children_1.length > 0) {
return primary + "(" + children_1.join("//") + ")";
} else {
return "" + primary;
}
} else if (segment.hasChildren() && !root) {
var children = mapChildrenIntoArray(segment, function(v, k) {
if (k === PRIMARY_OUTLET) {
return [ serializeSegment(segment.children[PRIMARY_OUTLET], false) ];
} else {
return [ k + ":" + serializeSegment(v, false) ];
}
});
return serializePaths(segment) + "/(" + children.join("//") + ")";
} else {
return serializePaths(segment);
}
}
function encode(s) {
return encodeURIComponent(s);
}
function decode(s) {
return decodeURIComponent(s);
}
function serializePath(path) {
return "" + encode(path.path) + serializeParams(path.parameters);
}
function serializeParams(params) {
return pairs(params).map(function(p) {
return ";" + encode(p.first) + "=" + encode(p.second);
}).join("");
}
function serializeQueryParams(params) {
var strs = pairs(params).map(function(p) {
return encode(p.first) + "=" + encode(p.second);
});
return strs.length > 0 ? "?" + strs.join("&") : "";
}
var Pair = function() {
function Pair(first, second) {
this.first = first;
this.second = second;
}
return Pair;
}();
function pairs(obj) {
var res = [];
for (var prop in obj) {
if (obj.hasOwnProperty(prop)) {
res.push(new Pair(prop, obj[prop]));
}
}
return res;
}
var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
function matchSegments(str) {
SEGMENT_RE.lastIndex = 0;
var match = str.match(SEGMENT_RE);
return match ? match[0] : "";
}
var QUERY_PARAM_RE = /^[^=\?&#]+/;
function matchQueryParams(str) {
QUERY_PARAM_RE.lastIndex = 0;
var match = str.match(SEGMENT_RE);
return match ? match[0] : "";
}
var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
function matchUrlQueryParamValue(str) {
QUERY_PARAM_VALUE_RE.lastIndex = 0;
var match = str.match(QUERY_PARAM_VALUE_RE);
return match ? match[0] : "";
}
var UrlParser = function() {
function UrlParser(url) {
this.url = url;
this.remaining = url;
}
UrlParser.prototype.peekStartsWith = function(str) {
return this.remaining.startsWith(str);
};
UrlParser.prototype.capture = function(str) {
if (!this.remaining.startsWith(str)) {
throw new Error('Expected "' + str + '".');
}
this.remaining = this.remaining.substring(str.length);
};
UrlParser.prototype.parseRootSegment = function() {
if (this.remaining.startsWith("/")) {
this.capture("/");
}
if (this.remaining === "" || this.remaining.startsWith("?") || this.remaining.startsWith("#")) {
return new UrlSegmentGroup([], {});
} else {
return new UrlSegmentGroup([], this.parseChildren());
}
};
UrlParser.prototype.parseChildren = function() {
if (this.remaining.length == 0) {
return {};
}
if (this.peekStartsWith("/")) {
this.capture("/");
}
var paths = [];
if (!this.peekStartsWith("(")) {
paths.push(this.parseSegments());
}
while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
this.capture("/");
paths.push(this.parseSegments());
}
var children = {};
if (this.peekStartsWith("/(")) {
this.capture("/");
children = this.parseParens(true);
}
var res = {};
if (this.peekStartsWith("(")) {
res = this.parseParens(false);
}
if (paths.length > 0 || Object.keys(children).length > 0) {
res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
}
return res;
};
UrlParser.prototype.parseSegments = function() {
var path = matchSegments(this.remaining);
if (path === "" && this.peekStartsWith(";")) {
throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
}
this.capture(path);
var matrixParams = {};
if (this.peekStartsWith(";")) {
matrixParams = this.parseMatrixParams();
}
return new UrlSegment(decode(path), matrixParams);
};
UrlParser.prototype.parseQueryParams = function() {
var params = {};
if (this.peekStartsWith("?")) {
this.capture("?");
this.parseQueryParam(params);
while (this.remaining.length > 0 && this.peekStartsWith("&")) {
this.capture("&");
this.parseQueryParam(params);
}
}
return params;
};
UrlParser.prototype.parseFragment = function() {
if (this.peekStartsWith("#")) {
return decodeURI(this.remaining.substring(1));
} else {
return null;
}
};
UrlParser.prototype.parseMatrixParams = function() {
var params = {};
while (this.remaining.length > 0 && this.peekStartsWith(";")) {
this.capture(";");
this.parseParam(params);
}
return params;
};
UrlParser.prototype.parseParam = function(params) {
var key = matchSegments(this.remaining);
if (!key) {
return;
}
this.capture(key);
var value = "";
if (this.peekStartsWith("=")) {
this.capture("=");
var valueMatch = matchSegments(this.remaining);
if (valueMatch) {
value = valueMatch;
this.capture(value);
}
}
params[decode(key)] = decode(value);
};
UrlParser.prototype.parseQueryParam = function(params) {
var key = matchQueryParams(this.remaining);
if (!key) {
return;
}
this.capture(key);
var value = "";
if (this.peekStartsWith("=")) {
this.capture("=");
var valueMatch = matchUrlQueryParamValue(this.remaining);
if (valueMatch) {
value = valueMatch;
this.capture(value);
}
}
params[decode(key)] = decode(value);
};
UrlParser.prototype.parseParens = function(allowPrimary) {
var segments = {};
this.capture("(");
while (!this.peekStartsWith(")") && this.remaining.length > 0) {
var path = matchSegments(this.remaining);
var next = this.remaining[path.length];
if (next !== "/" && next !== ")" && next !== ";") {
throw new Error("Cannot parse url '" + this.url + "'");
}
var outletName = void 0;
if (path.indexOf(":") > -1) {
outletName = path.substr(0, path.indexOf(":"));
this.capture(outletName);
this.capture(":");
} else if (allowPrimary) {
outletName = PRIMARY_OUTLET;
}
var children = this.parseChildren();
segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
if (this.peekStartsWith("//")) {
this.capture("//");
}
}
this.capture(")");
return segments;
};
return UrlParser;
}();
var NoMatch = function() {
function NoMatch(segmentGroup) {
if (segmentGroup === void 0) {
segmentGroup = null;
}
this.segmentGroup = segmentGroup;
}
return NoMatch;
}();
var AbsoluteRedirect = function() {
function AbsoluteRedirect(segments) {
this.segments = segments;
}
return AbsoluteRedirect;
}();
function noMatch(segmentGroup) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(new NoMatch(segmentGroup));
});
}
function absoluteRedirect(segments) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(new AbsoluteRedirect(segments));
});
}
function canLoadFails(route) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
});
}
function applyRedirects(injector, configLoader, urlTree, config) {
return new ApplyRedirects(injector, configLoader, urlTree, config).apply();
}
var ApplyRedirects = function() {
function ApplyRedirects(injector, configLoader, urlTree, config) {
this.injector = injector;
this.configLoader = configLoader;
this.urlTree = urlTree;
this.config = config;
this.allowRedirects = true;
}
ApplyRedirects.prototype.apply = function() {
var _this = this;
var expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
var urlTrees$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
return _this.createUrlTree(rootSegmentGroup);
});
return rxjs_operator_catch._catch.call(urlTrees$, function(e) {
if (e instanceof AbsoluteRedirect) {
_this.allowRedirects = false;
var group = new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = new UrlSegmentGroup(e.segments, {}), 
_a));
return _this.match(group);
} else if (e instanceof NoMatch) {
throw _this.noMatchError(e);
} else {
throw e;
}
var _a;
});
};
ApplyRedirects.prototype.match = function(segmentGroup) {
var _this = this;
var expanded$ = this.expandSegmentGroup(this.injector, this.config, segmentGroup, PRIMARY_OUTLET);
var mapped$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
return _this.createUrlTree(rootSegmentGroup);
});
return rxjs_operator_catch._catch.call(mapped$, function(e) {
if (e instanceof NoMatch) {
throw _this.noMatchError(e);
} else {
throw e;
}
});
};
ApplyRedirects.prototype.noMatchError = function(e) {
return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
};
ApplyRedirects.prototype.createUrlTree = function(rootCandidate) {
var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, 
_a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
return new UrlTree(root, this.urlTree.queryParams, this.urlTree.fragment);
var _a;
};
ApplyRedirects.prototype.expandSegmentGroup = function(injector, routes, segmentGroup, outlet) {
if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function(children) {
return new UrlSegmentGroup([], children);
});
} else {
return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
}
};
ApplyRedirects.prototype.expandChildren = function(injector, routes, segmentGroup) {
var _this = this;
return waitForMap(segmentGroup.children, function(childOutlet, child) {
return _this.expandSegmentGroup(injector, routes, child, childOutlet);
});
};
ApplyRedirects.prototype.expandSegment = function(injector, segmentGroup, routes, segments, outlet, allowRedirects) {
var _this = this;
var routes$ = rxjs_observable_of.of.apply(void 0, routes);
var processedRoutes$ = rxjs_operator_map.map.call(routes$, function(r) {
var expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
return rxjs_operator_catch._catch.call(expanded$, function(e) {
if (e instanceof NoMatch) return rxjs_observable_of.of(null); else throw e;
});
});
var concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);
var first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function(s) {
return !!s;
});
return rxjs_operator_catch._catch.call(first$, function(e, _) {
if (e instanceof rxjs_util_EmptyError.EmptyError) {
if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
return rxjs_observable_of.of(new UrlSegmentGroup([], {}));
} else {
throw new NoMatch(segmentGroup);
}
} else {
throw e;
}
});
};
ApplyRedirects.prototype.noLeftoversInUrl = function(segmentGroup, segments, outlet) {
return segments.length === 0 && !segmentGroup.children[outlet];
};
ApplyRedirects.prototype.expandSegmentAgainstRoute = function(injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
if (getOutlet$1(route) !== outlet) return noMatch(segmentGroup);
if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects)) return noMatch(segmentGroup);
if (route.redirectTo === undefined) {
return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
} else {
return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
}
};
ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
if (route.path === "**") {
return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);
} else {
return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
}
};
ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function(injector, routes, route, outlet) {
var newSegments = applyRedirectCommands([], route.redirectTo, {});
if (route.redirectTo.startsWith("/")) {
return absoluteRedirect(newSegments);
} else {
var group = new UrlSegmentGroup(newSegments, {});
return this.expandSegment(injector, group, routes, newSegments, outlet, false);
}
};
ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
if (!matched) return noMatch(segmentGroup);
var newSegments = applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
if (route.redirectTo.startsWith("/")) {
return absoluteRedirect(newSegments);
} else {
return this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
}
};
ApplyRedirects.prototype.matchSegmentAgainstRoute = function(injector, rawSegmentGroup, route, segments) {
var _this = this;
if (route.path === "**") {
if (route.loadChildren) {
return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function(r) {
route._loadedConfig = r;
return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
});
} else {
return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
}
} else {
var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments_1 = _a.consumedSegments, lastChild = _a.lastChild;
if (!matched) return noMatch(rawSegmentGroup);
var rawSlicedSegments_1 = segments.slice(lastChild);
var childConfig$ = this.getChildConfig(injector, route);
return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function(routerConfig) {
var childInjector = routerConfig.injector;
var childConfig = routerConfig.routes;
var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
var expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
return rxjs_operator_map.map.call(expanded$, function(children) {
return new UrlSegmentGroup(consumedSegments_1, children);
});
} else if (childConfig.length === 0 && slicedSegments.length === 0) {
return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));
} else {
var expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
return rxjs_operator_map.map.call(expanded$, function(cs) {
return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children);
});
}
});
}
};
ApplyRedirects.prototype.getChildConfig = function(injector, route) {
var _this = this;
if (route.children) {
return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));
} else if (route.loadChildren) {
return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function(shouldLoad) {
if (shouldLoad) {
if (route._loadedConfig) {
return rxjs_observable_of.of(route._loadedConfig);
} else {
return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function(r) {
route._loadedConfig = r;
return r;
});
}
} else {
return canLoadFails(route);
}
});
} else {
return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));
}
};
return ApplyRedirects;
}();
function runGuards(injector, route) {
var canLoad = route.canLoad;
if (!canLoad || canLoad.length === 0) return rxjs_observable_of.of(true);
var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function(c) {
var guard = injector.get(c);
if (guard.canLoad) {
return wrapIntoObservable(guard.canLoad(route));
} else {
return wrapIntoObservable(guard(route));
}
});
return andObservables(obs);
}
function match(segmentGroup, route, segments) {
var noMatch = {
matched: false,
consumedSegments: [],
lastChild: 0,
positionalParamSegments: {}
};
if (route.path === "") {
if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
return {
matched: false,
consumedSegments: [],
lastChild: 0,
positionalParamSegments: {}
};
} else {
return {
matched: true,
consumedSegments: [],
lastChild: 0,
positionalParamSegments: {}
};
}
}
var matcher = route.matcher || defaultUrlMatcher;
var res = matcher(segments, segmentGroup, route);
if (!res) return noMatch;
return {
matched: true,
consumedSegments: res.consumed,
lastChild: res.consumed.length,
positionalParamSegments: res.posParams
};
}
function applyRedirectCommands(segments, redirectTo, posParams) {
var r = redirectTo.startsWith("/") ? redirectTo.substring(1) : redirectTo;
if (r === "") {
return [];
} else {
return createSegments(redirectTo, r.split("/"), segments, posParams);
}
}
function createSegments(redirectTo, parts, segments, posParams) {
return parts.map(function(p) {
return p.startsWith(":") ? findPosParam(p, posParams, redirectTo) : findOrCreateSegment(p, segments);
});
}
function findPosParam(part, posParams, redirectTo) {
var paramName = part.substring(1);
var pos = posParams[paramName];
if (!pos) throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
return pos;
}
function findOrCreateSegment(part, segments) {
var idx = 0;
for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
var s = segments_1[_i];
if (s.path === part) {
segments.splice(idx);
return s;
}
idx++;
}
return new UrlSegment(part, {});
}
function split(segmentGroup, consumedSegments, slicedSegments, config) {
if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
return {
segmentGroup: mergeTrivialChildren(s),
slicedSegments: []
};
} else if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
return {
segmentGroup: mergeTrivialChildren(s),
slicedSegments: slicedSegments
};
} else {
return {
segmentGroup: segmentGroup,
slicedSegments: slicedSegments
};
}
}
function mergeTrivialChildren(s) {
if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
var c = s.children[PRIMARY_OUTLET];
return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
} else {
return s;
}
}
function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
var res = {};
for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
var r = routes_1[_i];
if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
}
}
return merge(children, res);
}
function createChildrenForEmptySegments(routes, primarySegmentGroup) {
var res = {};
res[PRIMARY_OUTLET] = primarySegmentGroup;
for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
var r = routes_2[_i];
if (r.path === "" && getOutlet$1(r) !== PRIMARY_OUTLET) {
res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
}
}
return res;
}
function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
return routes.filter(function(r) {
return emptyPathRedirect(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET;
}).length > 0;
}
function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
return routes.filter(function(r) {
return emptyPathRedirect(segmentGroup, slicedSegments, r);
}).length > 0;
}
function emptyPathRedirect(segmentGroup, slicedSegments, r) {
if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") return false;
return r.path === "" && r.redirectTo !== undefined;
}
function getOutlet$1(route) {
return route.outlet ? route.outlet : PRIMARY_OUTLET;
}
function validateConfig(config) {
for (var i = 0; i < config.length; i++) {
validateNode(config[i]);
}
}
function validateNode(route) {
if (!route) {
throw new Error("\n      Invalid route configuration: Encountered undefined route.\n      The reason might be an extra comma.\n       \n      Example: \n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
}
if (Array.isArray(route)) {
throw new Error("Invalid route configuration: Array cannot be specified");
}
if (route.component === undefined && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
throw new Error("Invalid route configuration of route '" + route.path + "': a componentless route cannot have a named outlet set");
}
if (!!route.redirectTo && !!route.children) {
throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
}
if (!!route.redirectTo && !!route.loadChildren) {
throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and loadChildren cannot be used together");
}
if (!!route.children && !!route.loadChildren) {
throw new Error("Invalid configuration of route '" + route.path + "': children and loadChildren cannot be used together");
}
if (!!route.redirectTo && !!route.component) {
throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
}
if (!!route.path && !!route.matcher) {
throw new Error("Invalid configuration of route '" + route.path + "': path and matcher cannot be used together");
}
if (route.redirectTo === undefined && !route.component && !route.children && !route.loadChildren) {
throw new Error("Invalid configuration of route '" + route.path + "': one of the following must be provided (component or redirectTo or children or loadChildren)");
}
if (route.path === undefined) {
throw new Error("Invalid route configuration: routes must have path specified");
}
if (route.path.startsWith("/")) {
throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
}
if (route.path === "" && route.redirectTo !== undefined && route.pathMatch === undefined) {
var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
throw new Error("Invalid route configuration of route '{path: \"" + route.path + '", redirectTo: "' + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
}
if (route.pathMatch !== undefined && route.pathMatch !== "full" && route.pathMatch !== "prefix") {
throw new Error("Invalid configuration of route '" + route.path + "': pathMatch can only be set to 'prefix' or 'full'");
}
}
var Tree = function() {
function Tree(root) {
this._root = root;
}
Object.defineProperty(Tree.prototype, "root", {
get: function() {
return this._root.value;
},
enumerable: true,
configurable: true
});
Tree.prototype.parent = function(t) {
var p = this.pathFromRoot(t);
return p.length > 1 ? p[p.length - 2] : null;
};
Tree.prototype.children = function(t) {
var n = findNode(t, this._root);
return n ? n.children.map(function(t) {
return t.value;
}) : [];
};
Tree.prototype.firstChild = function(t) {
var n = findNode(t, this._root);
return n && n.children.length > 0 ? n.children[0].value : null;
};
Tree.prototype.siblings = function(t) {
var p = findPath(t, this._root, []);
if (p.length < 2) return [];
var c = p[p.length - 2].children.map(function(c) {
return c.value;
});
return c.filter(function(cc) {
return cc !== t;
});
};
Tree.prototype.pathFromRoot = function(t) {
return findPath(t, this._root, []).map(function(s) {
return s.value;
});
};
return Tree;
}();
function findNode(expected, c) {
if (expected === c.value) return c;
for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
var cc = _a[_i];
var r = findNode(expected, cc);
if (r) return r;
}
return null;
}
function findPath(expected, c, collected) {
collected.push(c);
if (expected === c.value) return collected;
for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
var cc = _a[_i];
var cloned = collected.slice(0);
var r = findPath(expected, cc, cloned);
if (r.length > 0) return r;
}
return [];
}
var TreeNode = function() {
function TreeNode(value, children) {
this.value = value;
this.children = children;
}
TreeNode.prototype.toString = function() {
return "TreeNode(" + this.value + ")";
};
return TreeNode;
}();
var __extends$1 = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var RouterState = function(_super) {
__extends$1(RouterState, _super);
function RouterState(root, snapshot) {
_super.call(this, root);
this.snapshot = snapshot;
setRouterStateSnapshot(this, root);
}
RouterState.prototype.toString = function() {
return this.snapshot.toString();
};
return RouterState;
}(Tree);
function createEmptyState(urlTree, rootComponent) {
var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
var emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([ new UrlSegment("", {}) ]);
var emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});
var emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});
var emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});
var fragment = new rxjs_BehaviorSubject.BehaviorSubject("");
var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
activated.snapshot = snapshot.root;
return new RouterState(new TreeNode(activated, []), snapshot);
}
function createEmptyStateSnapshot(urlTree, rootComponent) {
var emptyParams = {};
var emptyData = {};
var emptyQueryParams = {};
var fragment = "";
var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
return new RouterStateSnapshot("", new TreeNode(activated, []));
}
var ActivatedRoute = function() {
function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
this.url = url;
this.params = params;
this.queryParams = queryParams;
this.fragment = fragment;
this.data = data;
this.outlet = outlet;
this.component = component;
this._futureSnapshot = futureSnapshot;
}
Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
get: function() {
return this._futureSnapshot.routeConfig;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "root", {
get: function() {
return this._routerState.root;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "parent", {
get: function() {
return this._routerState.parent(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
get: function() {
return this._routerState.firstChild(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "children", {
get: function() {
return this._routerState.children(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
get: function() {
return this._routerState.pathFromRoot(this);
},
enumerable: true,
configurable: true
});
ActivatedRoute.prototype.toString = function() {
return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
};
return ActivatedRoute;
}();
function inheritedParamsDataResolve(route) {
var pathToRoot = route.pathFromRoot;
var inhertingStartingFrom = pathToRoot.length - 1;
while (inhertingStartingFrom >= 1) {
var current = pathToRoot[inhertingStartingFrom];
var parent_1 = pathToRoot[inhertingStartingFrom - 1];
if (current.routeConfig && current.routeConfig.path === "") {
inhertingStartingFrom--;
} else if (!parent_1.component) {
inhertingStartingFrom--;
} else {
break;
}
}
return pathToRoot.slice(inhertingStartingFrom).reduce(function(res, curr) {
var params = merge(res.params, curr.params);
var data = merge(res.data, curr.data);
var resolve = merge(res.resolve, curr._resolvedData);
return {
params: params,
data: data,
resolve: resolve
};
}, {
params: {},
data: {},
resolve: {}
});
}
var ActivatedRouteSnapshot = function() {
function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
this.url = url;
this.params = params;
this.queryParams = queryParams;
this.fragment = fragment;
this.data = data;
this.outlet = outlet;
this.component = component;
this._routeConfig = routeConfig;
this._urlSegment = urlSegment;
this._lastPathIndex = lastPathIndex;
this._resolve = resolve;
}
Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
get: function() {
return this._routeConfig;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
get: function() {
return this._routerState.root;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
get: function() {
return this._routerState.parent(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
get: function() {
return this._routerState.firstChild(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
get: function() {
return this._routerState.children(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
get: function() {
return this._routerState.pathFromRoot(this);
},
enumerable: true,
configurable: true
});
ActivatedRouteSnapshot.prototype.toString = function() {
var url = this.url.map(function(s) {
return s.toString();
}).join("/");
var matched = this._routeConfig ? this._routeConfig.path : "";
return "Route(url:'" + url + "', path:'" + matched + "')";
};
return ActivatedRouteSnapshot;
}();
var RouterStateSnapshot = function(_super) {
__extends$1(RouterStateSnapshot, _super);
function RouterStateSnapshot(url, root) {
_super.call(this, root);
this.url = url;
setRouterStateSnapshot(this, root);
}
RouterStateSnapshot.prototype.toString = function() {
return serializeNode(this._root);
};
return RouterStateSnapshot;
}(Tree);
function setRouterStateSnapshot(state, node) {
node.value._routerState = state;
node.children.forEach(function(c) {
return setRouterStateSnapshot(state, c);
});
}
function serializeNode(node) {
var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : "";
return "" + node.value + c;
}
function advanceActivatedRoute(route) {
if (route.snapshot) {
if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {
route.queryParams.next(route._futureSnapshot.queryParams);
}
if (route.snapshot.fragment !== route._futureSnapshot.fragment) {
route.fragment.next(route._futureSnapshot.fragment);
}
if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
route.params.next(route._futureSnapshot.params);
}
if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {
route.url.next(route._futureSnapshot.url);
}
if (!equalParamsAndUrlSegments(route.snapshot, route._futureSnapshot)) {
route.data.next(route._futureSnapshot.data);
}
route.snapshot = route._futureSnapshot;
} else {
route.snapshot = route._futureSnapshot;
route.data.next(route._futureSnapshot.data);
}
}
function equalParamsAndUrlSegments(a, b) {
return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
}
function createRouterState(curr, prevState) {
var root = createNode(curr._root, prevState ? prevState._root : undefined);
return new RouterState(root, curr);
}
function createNode(curr, prevState) {
if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
var value = prevState.value;
value._futureSnapshot = curr.value;
var children = createOrReuseChildren(curr, prevState);
return new TreeNode(value, children);
} else {
var value = createActivatedRoute(curr.value);
var children = curr.children.map(function(c) {
return createNode(c);
});
return new TreeNode(value, children);
}
}
function createOrReuseChildren(curr, prevState) {
return curr.children.map(function(child) {
for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
var p = _a[_i];
if (equalRouteSnapshots(p.value.snapshot, child.value)) {
return createNode(child, p);
}
}
return createNode(child);
});
}
function createActivatedRoute(c) {
return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
}
function equalRouteSnapshots(a, b) {
return a._routeConfig === b._routeConfig;
}
function createUrlTree(route, urlTree, commands, queryParams, fragment) {
if (commands.length === 0) {
return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
}
var normalizedCommands = normalizeCommands(commands);
validateCommands(normalizedCommands);
if (navigateToRoot(normalizedCommands)) {
return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
}
var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands);
return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
}
function validateCommands(n) {
if (n.isAbsolute && n.commands.length > 0 && isMatrixParams(n.commands[0])) {
throw new Error("Root segment cannot have matrix parameters");
}
var c = n.commands.filter(function(c) {
return typeof c === "object" && c.outlets !== undefined;
});
if (c.length > 0 && c[0] !== n.commands[n.commands.length - 1]) {
throw new Error("{outlets:{}} has to be the last command");
}
}
function isMatrixParams(command) {
return typeof command === "object" && command.outlets === undefined && command.segmentPath === undefined;
}
function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
if (urlTree.root === oldSegmentGroup) {
return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);
} else {
return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
}
}
function replaceSegment(current, oldSegment, newSegment) {
var children = {};
forEach(current.children, function(c, outletName) {
if (c === oldSegment) {
children[outletName] = newSegment;
} else {
children[outletName] = replaceSegment(c, oldSegment, newSegment);
}
});
return new UrlSegmentGroup(current.segments, children);
}
function navigateToRoot(normalizedChange) {
return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == "/";
}
var NormalizedNavigationCommands = function() {
function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
this.isAbsolute = isAbsolute;
this.numberOfDoubleDots = numberOfDoubleDots;
this.commands = commands;
}
return NormalizedNavigationCommands;
}();
function normalizeCommands(commands) {
if (typeof commands[0] === "string" && commands.length === 1 && commands[0] == "/") {
return new NormalizedNavigationCommands(true, 0, commands);
}
var numberOfDoubleDots = 0;
var isAbsolute = false;
var res = [];
var _loop_1 = function(i) {
var c = commands[i];
if (typeof c === "object" && c.outlets !== undefined) {
var r_1 = {};
forEach(c.outlets, function(commands, name) {
if (typeof commands === "string") {
r_1[name] = commands.split("/");
} else {
r_1[name] = commands;
}
});
res.push({
outlets: r_1
});
return "continue";
}
if (typeof c === "object" && c.segmentPath !== undefined) {
res.push(c.segmentPath);
return "continue";
}
if (!(typeof c === "string")) {
res.push(c);
return "continue";
}
if (i === 0) {
var parts = c.split("/");
for (var j = 0; j < parts.length; ++j) {
var cc = parts[j];
if (j == 0 && cc == ".") {} else if (j == 0 && cc == "") {
isAbsolute = true;
} else if (cc == "..") {
numberOfDoubleDots++;
} else if (cc != "") {
res.push(cc);
}
}
} else {
res.push(c);
}
};
for (var i = 0; i < commands.length; ++i) {
_loop_1(i);
}
return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
}
var Position = function() {
function Position(segmentGroup, processChildren, index) {
this.segmentGroup = segmentGroup;
this.processChildren = processChildren;
this.index = index;
}
return Position;
}();
function findStartingPosition(normalizedChange, urlTree, route) {
if (normalizedChange.isAbsolute) {
return new Position(urlTree.root, true, 0);
} else if (route.snapshot._lastPathIndex === -1) {
return new Position(route.snapshot._urlSegment, true, 0);
} else {
var modifier = isMatrixParams(normalizedChange.commands[0]) ? 0 : 1;
var index = route.snapshot._lastPathIndex + modifier;
return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, normalizedChange.numberOfDoubleDots);
}
}
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
var g = group;
var ci = index;
var dd = numberOfDoubleDots;
while (dd > ci) {
dd -= ci;
g = g.parent;
if (!g) {
throw new Error("Invalid number of '../'");
}
ci = g.segments.length;
}
return new Position(g, false, ci - dd);
}
function getPath(command) {
if (typeof command === "object" && command.outlets) return command.outlets[PRIMARY_OUTLET];
return "" + command;
}
function getOutlets(commands) {
if (!(typeof commands[0] === "object")) return _a = {}, _a[PRIMARY_OUTLET] = commands, 
_a;
if (commands[0].outlets === undefined) return _b = {}, _b[PRIMARY_OUTLET] = commands, 
_b;
return commands[0].outlets;
var _a, _b;
}
function updateSegmentGroup(segmentGroup, startIndex, commands) {
if (!segmentGroup) {
segmentGroup = new UrlSegmentGroup([], {});
}
if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
}
var m = prefixedWith(segmentGroup, startIndex, commands);
var slicedCommands = commands.slice(m.commandIndex);
if (m.match && m.pathIndex < segmentGroup.segments.length) {
var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
return updateSegmentGroupChildren(g, 0, slicedCommands);
} else if (m.match && slicedCommands.length === 0) {
return new UrlSegmentGroup(segmentGroup.segments, {});
} else if (m.match && !segmentGroup.hasChildren()) {
return createNewSegmentGroup(segmentGroup, startIndex, commands);
} else if (m.match) {
return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
} else {
return createNewSegmentGroup(segmentGroup, startIndex, commands);
}
}
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
if (commands.length === 0) {
return new UrlSegmentGroup(segmentGroup.segments, {});
} else {
var outlets_1 = getOutlets(commands);
var children_1 = {};
forEach(outlets_1, function(commands, outlet) {
if (commands !== null) {
children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
}
});
forEach(segmentGroup.children, function(child, childOutlet) {
if (outlets_1[childOutlet] === undefined) {
children_1[childOutlet] = child;
}
});
return new UrlSegmentGroup(segmentGroup.segments, children_1);
}
}
function prefixedWith(segmentGroup, startIndex, commands) {
var currentCommandIndex = 0;
var currentPathIndex = startIndex;
var noMatch = {
match: false,
pathIndex: 0,
commandIndex: 0
};
while (currentPathIndex < segmentGroup.segments.length) {
if (currentCommandIndex >= commands.length) return noMatch;
var path = segmentGroup.segments[currentPathIndex];
var curr = getPath(commands[currentCommandIndex]);
var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
if (currentPathIndex > 0 && curr === undefined) break;
if (curr && next && typeof next === "object" && next.outlets === undefined) {
if (!compare(curr, next, path)) return noMatch;
currentCommandIndex += 2;
} else {
if (!compare(curr, {}, path)) return noMatch;
currentCommandIndex++;
}
currentPathIndex++;
}
return {
match: true,
pathIndex: currentPathIndex,
commandIndex: currentCommandIndex
};
}
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
var paths = segmentGroup.segments.slice(0, startIndex);
var i = 0;
while (i < commands.length) {
if (typeof commands[i] === "object" && commands[i].outlets !== undefined) {
var children = createNewSegmentChldren(commands[i].outlets);
return new UrlSegmentGroup(paths, children);
}
if (i === 0 && isMatrixParams(commands[0])) {
var p = segmentGroup.segments[startIndex];
paths.push(new UrlSegment(p.path, commands[0]));
i++;
continue;
}
var curr = getPath(commands[i]);
var next = i < commands.length - 1 ? commands[i + 1] : null;
if (curr && next && isMatrixParams(next)) {
paths.push(new UrlSegment(curr, stringify(next)));
i += 2;
} else {
paths.push(new UrlSegment(curr, {}));
i++;
}
}
return new UrlSegmentGroup(paths, {});
}
function createNewSegmentChldren(outlets) {
var children = {};
forEach(outlets, function(commands, outlet) {
if (commands !== null) {
children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
}
});
return children;
}
function stringify(params) {
var res = {};
forEach(params, function(v, k) {
return res[k] = "" + v;
});
return res;
}
function compare(path, params, segment) {
return path == segment.path && shallowEqual(params, segment.parameters);
}
var NoMatch$1 = function() {
function NoMatch() {}
return NoMatch;
}();
function recognize(rootComponentType, config, urlTree, url) {
return new Recognizer(rootComponentType, config, urlTree, url).recognize();
}
var Recognizer = function() {
function Recognizer(rootComponentType, config, urlTree, url) {
this.rootComponentType = rootComponentType;
this.config = config;
this.urlTree = urlTree;
this.url = url;
}
Recognizer.prototype.recognize = function() {
try {
var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
var rootNode = new TreeNode(root, children);
var routeState = new RouterStateSnapshot(this.url, rootNode);
this.inheriteParamsAndData(routeState._root);
return rxjs_observable_of.of(routeState);
} catch (e) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(e);
});
}
};
Recognizer.prototype.inheriteParamsAndData = function(routeNode) {
var _this = this;
var route = routeNode.value;
var i = inheritedParamsDataResolve(route);
route.params = Object.freeze(i.params);
route.data = Object.freeze(i.data);
routeNode.children.forEach(function(n) {
return _this.inheriteParamsAndData(n);
});
};
Recognizer.prototype.processSegmentGroup = function(config, segmentGroup, outlet) {
if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
return this.processChildren(config, segmentGroup);
} else {
return this.processSegment(config, segmentGroup, 0, segmentGroup.segments, outlet);
}
};
Recognizer.prototype.processChildren = function(config, segmentGroup) {
var _this = this;
var children = mapChildrenIntoArray(segmentGroup, function(child, childOutlet) {
return _this.processSegmentGroup(config, child, childOutlet);
});
checkOutletNameUniqueness(children);
sortActivatedRouteSnapshots(children);
return children;
};
Recognizer.prototype.processSegment = function(config, segmentGroup, pathIndex, segments, outlet) {
for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
var r = config_1[_i];
try {
return this.processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, outlet);
} catch (e) {
if (!(e instanceof NoMatch$1)) throw e;
}
}
if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
return [];
} else {
throw new NoMatch$1();
}
};
Recognizer.prototype.noLeftoversInUrl = function(segmentGroup, segments, outlet) {
return segments.length === 0 && !segmentGroup.children[outlet];
};
Recognizer.prototype.processSegmentAgainstRoute = function(route, rawSegment, pathIndex, segments, outlet) {
if (route.redirectTo) throw new NoMatch$1();
if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch$1();
if (route.path === "**") {
var params = segments.length > 0 ? last(segments).parameters : {};
var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
return [ new TreeNode(snapshot_1, []) ];
}
var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
var rawSlicedSegments = segments.slice(lastChild);
var childConfig = getChildConfig(route);
var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
var children = this.processChildren(childConfig, segmentGroup);
return [ new TreeNode(snapshot, children) ];
} else if (childConfig.length === 0 && slicedSegments.length === 0) {
return [ new TreeNode(snapshot, []) ];
} else {
var children = this.processSegment(childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, PRIMARY_OUTLET);
return [ new TreeNode(snapshot, children) ];
}
};
return Recognizer;
}();
function sortActivatedRouteSnapshots(nodes) {
nodes.sort(function(a, b) {
if (a.value.outlet === PRIMARY_OUTLET) return -1;
if (b.value.outlet === PRIMARY_OUTLET) return 1;
return a.value.outlet.localeCompare(b.value.outlet);
});
}
function getChildConfig(route) {
if (route.children) {
return route.children;
} else if (route.loadChildren) {
return route._loadedConfig.routes;
} else {
return [];
}
}
function match$1(segmentGroup, route, segments) {
if (route.path === "") {
if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
throw new NoMatch$1();
} else {
return {
consumedSegments: [],
lastChild: 0,
parameters: {}
};
}
}
var matcher = route.matcher || defaultUrlMatcher;
var res = matcher(segments, segmentGroup, route);
if (!res) throw new NoMatch$1();
var posParams = {};
forEach(res.posParams, function(v, k) {
posParams[k] = v.path;
});
var parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);
return {
consumedSegments: res.consumed,
lastChild: res.consumed.length,
parameters: parameters
};
}
function checkOutletNameUniqueness(nodes) {
var names = {};
nodes.forEach(function(n) {
var routeWithSameOutletName = names[n.value.outlet];
if (routeWithSameOutletName) {
var p = routeWithSameOutletName.url.map(function(s) {
return s.toString();
}).join("/");
var c = n.value.url.map(function(s) {
return s.toString();
}).join("/");
throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
}
names[n.value.outlet] = n.value;
});
}
function getSourceSegmentGroup(segmentGroup) {
var s = segmentGroup;
while (s._sourceSegment) {
s = s._sourceSegment;
}
return s;
}
function getPathIndexShift(segmentGroup) {
var s = segmentGroup;
var res = s._segmentIndexShift ? s._segmentIndexShift : 0;
while (s._sourceSegment) {
s = s._sourceSegment;
res += s._segmentIndexShift ? s._segmentIndexShift : 0;
}
return res - 1;
}
function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
s._sourceSegment = segmentGroup;
s._segmentIndexShift = consumedSegments.length;
return {
segmentGroup: s,
slicedSegments: []
};
} else if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
var s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
s._sourceSegment = segmentGroup;
s._segmentIndexShift = consumedSegments.length;
return {
segmentGroup: s,
slicedSegments: slicedSegments
};
} else {
var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
s._sourceSegment = segmentGroup;
s._segmentIndexShift = consumedSegments.length;
return {
segmentGroup: s,
slicedSegments: slicedSegments
};
}
}
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
var res = {};
for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
var r = routes_1[_i];
if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
var s = new UrlSegmentGroup([], {});
s._sourceSegment = segmentGroup;
s._segmentIndexShift = segmentGroup.segments.length;
res[getOutlet$2(r)] = s;
}
}
return merge(children, res);
}
function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
var res = {};
res[PRIMARY_OUTLET] = primarySegment;
primarySegment._sourceSegment = segmentGroup;
primarySegment._segmentIndexShift = consumedSegments.length;
for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
var r = routes_2[_i];
if (r.path === "" && getOutlet$2(r) !== PRIMARY_OUTLET) {
var s = new UrlSegmentGroup([], {});
s._sourceSegment = segmentGroup;
s._segmentIndexShift = consumedSegments.length;
res[getOutlet$2(r)] = s;
}
}
return res;
}
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
return routes.filter(function(r) {
return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET;
}).length > 0;
}
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
return routes.filter(function(r) {
return emptyPathMatch(segmentGroup, slicedSegments, r);
}).length > 0;
}
function emptyPathMatch(segmentGroup, slicedSegments, r) {
if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") return false;
return r.path === "" && r.redirectTo === undefined;
}
function getOutlet$2(route) {
return route.outlet ? route.outlet : PRIMARY_OUTLET;
}
function getData(route) {
return route.data ? route.data : {};
}
function getResolve(route) {
return route.resolve ? route.resolve : {};
}
var RouterOutletMap = function() {
function RouterOutletMap() {
this._outlets = {};
}
RouterOutletMap.prototype.registerOutlet = function(name, outlet) {
this._outlets[name] = outlet;
};
RouterOutletMap.prototype.removeOutlet = function(name) {
this._outlets[name] = undefined;
};
return RouterOutletMap;
}();
var UrlHandlingStrategy = function() {
function UrlHandlingStrategy() {}
return UrlHandlingStrategy;
}();
var DefaultUrlHandlingStrategy = function() {
function DefaultUrlHandlingStrategy() {}
DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {
return true;
};
DefaultUrlHandlingStrategy.prototype.extract = function(url) {
return url;
};
DefaultUrlHandlingStrategy.prototype.merge = function(newUrlPart, wholeUrl) {
return newUrlPart;
};
return DefaultUrlHandlingStrategy;
}();
var NavigationStart = function() {
function NavigationStart(id, url) {
this.id = id;
this.url = url;
}
NavigationStart.prototype.toString = function() {
return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
};
return NavigationStart;
}();
var NavigationEnd = function() {
function NavigationEnd(id, url, urlAfterRedirects) {
this.id = id;
this.url = url;
this.urlAfterRedirects = urlAfterRedirects;
}
NavigationEnd.prototype.toString = function() {
return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
};
return NavigationEnd;
}();
var NavigationCancel = function() {
function NavigationCancel(id, url, reason) {
this.id = id;
this.url = url;
this.reason = reason;
}
NavigationCancel.prototype.toString = function() {
return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
};
return NavigationCancel;
}();
var NavigationError = function() {
function NavigationError(id, url, error) {
this.id = id;
this.url = url;
this.error = error;
}
NavigationError.prototype.toString = function() {
return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
};
return NavigationError;
}();
var RoutesRecognized = function() {
function RoutesRecognized(id, url, urlAfterRedirects, state) {
this.id = id;
this.url = url;
this.urlAfterRedirects = urlAfterRedirects;
this.state = state;
}
RoutesRecognized.prototype.toString = function() {
return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
};
return RoutesRecognized;
}();
function defaultErrorHandler(error) {
throw error;
}
var Router = function() {
function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
this.rootComponentType = rootComponentType;
this.urlSerializer = urlSerializer;
this.outletMap = outletMap;
this.location = location;
this.injector = injector;
this.config = config;
this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);
this.routerEvents = new rxjs_Subject.Subject();
this.navigationId = 0;
this.errorHandler = defaultErrorHandler;
this.navigated = false;
this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
this.resetConfig(config);
this.currentUrlTree = createEmptyUrlTree();
this.rawUrlTree = this.currentUrlTree;
this.configLoader = new RouterConfigLoader(loader, compiler);
this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
this.processNavigations();
}
Router.prototype.resetRootComponentType = function(rootComponentType) {
this.rootComponentType = rootComponentType;
this.currentRouterState.root.component = this.rootComponentType;
};
Router.prototype.initialNavigation = function() {
this.setUpLocationChangeListener();
this.navigateByUrl(this.location.path(true), {
replaceUrl: true
});
};
Router.prototype.setUpLocationChangeListener = function() {
var _this = this;
this.locationSubscription = this.location.subscribe(Zone.current.wrap(function(change) {
var rawUrlTree = _this.urlSerializer.parse(change["url"]);
setTimeout(function() {
_this.scheduleNavigation(rawUrlTree, {
skipLocationChange: change["pop"],
replaceUrl: true
});
}, 0);
}));
};
Object.defineProperty(Router.prototype, "routerState", {
get: function() {
return this.currentRouterState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Router.prototype, "url", {
get: function() {
return this.serializeUrl(this.currentUrlTree);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Router.prototype, "events", {
get: function() {
return this.routerEvents;
},
enumerable: true,
configurable: true
});
Router.prototype.resetConfig = function(config) {
validateConfig(config);
this.config = config;
};
Router.prototype.ngOnDestroy = function() {
this.dispose();
};
Router.prototype.dispose = function() {
this.locationSubscription.unsubscribe();
};
Router.prototype.createUrlTree = function(commands, _a) {
var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, preserveFragment = _b.preserveFragment;
var a = relativeTo ? relativeTo : this.routerState.root;
var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
return createUrlTree(a, this.currentUrlTree, commands, q, f);
};
Router.prototype.navigateByUrl = function(url, extras) {
if (extras === void 0) {
extras = {
skipLocationChange: false
};
}
if (url instanceof UrlTree) {
return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), extras);
} else {
var urlTree = this.urlSerializer.parse(url);
return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), extras);
}
};
Router.prototype.navigate = function(commands, extras) {
if (extras === void 0) {
extras = {
skipLocationChange: false
};
}
if (typeof extras.queryParams === "object" && extras.queryParams !== null) {
extras.queryParams = this.removeEmptyProps(extras.queryParams);
}
return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
};
Router.prototype.serializeUrl = function(url) {
return this.urlSerializer.serialize(url);
};
Router.prototype.parseUrl = function(url) {
return this.urlSerializer.parse(url);
};
Router.prototype.isActive = function(url, exact) {
if (url instanceof UrlTree) {
return containsTree(this.currentUrlTree, url, exact);
} else {
var urlTree = this.urlSerializer.parse(url);
return containsTree(this.currentUrlTree, urlTree, exact);
}
};
Router.prototype.removeEmptyProps = function(params) {
return Object.keys(params).reduce(function(result, key) {
var value = params[key];
if (value !== null && value !== undefined) {
result[key] = value;
}
return result;
}, {});
};
Router.prototype.processNavigations = function() {
var _this = this;
rxjs_operator_concatMap.concatMap.call(this.navigations, function(nav) {
if (nav) {
_this.executeScheduledNavigation(nav);
return nav.promise.catch(function() {});
} else {
return rxjs_observable_of.of(null);
}
}).subscribe(function() {});
};
Router.prototype.scheduleNavigation = function(rawUrl, extras) {
var prevRawUrl = this.navigations.value ? this.navigations.value.rawUrl : null;
if (prevRawUrl && prevRawUrl.toString() === rawUrl.toString()) {
return this.navigations.value.promise;
}
var resolve = null;
var reject = null;
var promise = new Promise(function(res, rej) {
resolve = res;
reject = rej;
});
var id = ++this.navigationId;
this.navigations.next({
id: id,
rawUrl: rawUrl,
prevRawUrl: prevRawUrl,
extras: extras,
resolve: resolve,
reject: reject,
promise: promise
});
return promise.catch(function(e) {
return Promise.reject(e);
});
};
Router.prototype.executeScheduledNavigation = function(_a) {
var _this = this;
var id = _a.id, rawUrl = _a.rawUrl, prevRawUrl = _a.prevRawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
var url = this.urlHandlingStrategy.extract(rawUrl);
var prevUrl = prevRawUrl ? this.urlHandlingStrategy.extract(prevRawUrl) : null;
var urlTransition = !prevUrl || url.toString() !== prevUrl.toString();
if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
Promise.resolve().then(function(_) {
return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null);
}).then(resolve, reject);
} else if (urlTransition && prevRawUrl && this.urlHandlingStrategy.shouldProcessUrl(prevRawUrl)) {
this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
Promise.resolve().then(function(_) {
return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot);
}).then(resolve, reject);
} else {
this.rawUrlTree = rawUrl;
resolve(null);
}
};
Router.prototype.runNavigate = function(url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
var _this = this;
if (id !== this.navigationId) {
this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
return Promise.resolve(false);
}
return new Promise(function(resolvePromise, rejectPromise) {
var urlAndSnapshot$;
if (!precreatedState) {
var redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, url, _this.config);
urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function(appliedUrl) {
return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function(snapshot) {
_this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
return {
appliedUrl: appliedUrl,
snapshot: snapshot
};
});
});
} else {
urlAndSnapshot$ = rxjs_observable_of.of({
appliedUrl: url,
snapshot: precreatedState
});
}
var preActivation;
var preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function(_a) {
var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
preActivation = new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);
preActivation.traverse(_this.outletMap);
return {
appliedUrl: appliedUrl,
snapshot: snapshot
};
});
var preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function(_a) {
var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
if (_this.navigationId !== id) return rxjs_observable_of.of(false);
return rxjs_operator_map.map.call(preActivation.checkGuards(), function(shouldActivate) {
return {
appliedUrl: appliedUrl,
snapshot: snapshot,
shouldActivate: shouldActivate
};
});
});
var preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function(p) {
if (_this.navigationId !== id) return rxjs_observable_of.of(false);
if (p.shouldActivate) {
return rxjs_operator_map.map.call(preActivation.resolveData(), function() {
return p;
});
} else {
return rxjs_observable_of.of(p);
}
});
var routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function(_a) {
var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
if (shouldActivate) {
var state = createRouterState(snapshot, _this.currentRouterState);
return {
appliedUrl: appliedUrl,
state: state,
shouldActivate: shouldActivate
};
} else {
return {
appliedUrl: appliedUrl,
state: null,
shouldActivate: shouldActivate
};
}
});
var navigationIsSuccessful;
var storedState = _this.currentRouterState;
var storedUrl = _this.currentUrlTree;
routerState$.forEach(function(_a) {
var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;
if (!shouldActivate || id !== _this.navigationId) {
navigationIsSuccessful = false;
return;
}
_this.currentUrlTree = appliedUrl;
_this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
_this.currentRouterState = state;
if (!shouldPreventPushState) {
var path = _this.urlSerializer.serialize(_this.rawUrlTree);
if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
_this.location.replaceState(path);
} else {
_this.location.go(path);
}
}
new ActivateRoutes(state, storedState).activate(_this.outletMap);
navigationIsSuccessful = true;
}).then(function() {
_this.navigated = true;
if (navigationIsSuccessful) {
_this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
resolvePromise(true);
} else {
_this.resetUrlToCurrentUrlTree();
_this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ""));
resolvePromise(false);
}
}, function(e) {
if (e instanceof NavigationCancelingError) {
_this.resetUrlToCurrentUrlTree();
_this.navigated = true;
_this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
resolvePromise(false);
} else {
_this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
try {
resolvePromise(_this.errorHandler(e));
} catch (ee) {
rejectPromise(ee);
}
}
_this.currentRouterState = storedState;
_this.currentUrlTree = storedUrl;
_this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
_this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
});
});
};
Router.prototype.resetUrlToCurrentUrlTree = function() {
var path = this.urlSerializer.serialize(this.rawUrlTree);
this.location.replaceState(path);
};
return Router;
}();
var CanActivate = function() {
function CanActivate(path) {
this.path = path;
}
Object.defineProperty(CanActivate.prototype, "route", {
get: function() {
return this.path[this.path.length - 1];
},
enumerable: true,
configurable: true
});
return CanActivate;
}();
var CanDeactivate = function() {
function CanDeactivate(component, route) {
this.component = component;
this.route = route;
}
return CanDeactivate;
}();
var PreActivation = function() {
function PreActivation(future, curr, injector) {
this.future = future;
this.curr = curr;
this.injector = injector;
this.checks = [];
}
PreActivation.prototype.traverse = function(parentOutletMap) {
var futureRoot = this.future._root;
var currRoot = this.curr ? this.curr._root : null;
this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [ futureRoot.value ]);
};
PreActivation.prototype.checkGuards = function() {
var _this = this;
if (this.checks.length === 0) return rxjs_observable_of.of(true);
var checks$ = rxjs_observable_from.from(this.checks);
var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function(s) {
if (s instanceof CanActivate) {
return andObservables(rxjs_observable_from.from([ _this.runCanActivateChild(s.path), _this.runCanActivate(s.route) ]));
} else if (s instanceof CanDeactivate) {
var s2 = s;
return _this.runCanDeactivate(s2.component, s2.route);
} else {
throw new Error("Cannot be reached");
}
});
return rxjs_operator_every.every.call(runningChecks$, function(result) {
return result === true;
});
};
PreActivation.prototype.resolveData = function() {
var _this = this;
if (this.checks.length === 0) return rxjs_observable_of.of(null);
var checks$ = rxjs_observable_from.from(this.checks);
var runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function(s) {
if (s instanceof CanActivate) {
return _this.runResolve(s.route);
} else {
return rxjs_observable_of.of(null);
}
});
return rxjs_operator_reduce.reduce.call(runningChecks$, function(_, __) {
return _;
});
};
PreActivation.prototype.traverseChildRoutes = function(futureNode, currNode, outletMap, futurePath) {
var _this = this;
var prevChildren = nodeChildrenAsMap(currNode);
futureNode.children.forEach(function(c) {
_this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([ c.value ]));
delete prevChildren[c.value.outlet];
});
forEach(prevChildren, function(v, k) {
return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]);
});
};
PreActivation.prototype.traverseRoutes = function(futureNode, currNode, parentOutletMap, futurePath) {
var future = futureNode.value;
var curr = currNode ? currNode.value : null;
var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
if (curr && future._routeConfig === curr._routeConfig) {
if (!equalParamsAndUrlSegments(future, curr)) {
this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
} else {
future.data = curr.data;
future._resolvedData = curr._resolvedData;
}
if (future.component) {
this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
} else {
this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
}
} else {
if (curr) {
this.deactiveRouteAndItsChildren(currNode, outlet);
}
this.checks.push(new CanActivate(futurePath));
if (future.component) {
this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
} else {
this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
}
}
};
PreActivation.prototype.deactiveRouteAndItsChildren = function(route, outlet) {
var _this = this;
var prevChildren = nodeChildrenAsMap(route);
var r = route.value;
forEach(prevChildren, function(v, k) {
if (!r.component) {
_this.deactiveRouteAndItsChildren(v, outlet);
} else if (!!outlet) {
_this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
} else {
_this.deactiveRouteAndItsChildren(v, null);
}
});
if (!r.component) {
this.checks.push(new CanDeactivate(null, r));
} else if (outlet && outlet.isActivated) {
this.checks.push(new CanDeactivate(outlet.component, r));
} else {
this.checks.push(new CanDeactivate(null, r));
}
};
PreActivation.prototype.runCanActivate = function(future) {
var _this = this;
var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
if (!canActivate || canActivate.length === 0) return rxjs_observable_of.of(true);
var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function(c) {
var guard = _this.getToken(c, future);
var observable;
if (guard.canActivate) {
observable = wrapIntoObservable(guard.canActivate(future, _this.future));
} else {
observable = wrapIntoObservable(guard(future, _this.future));
}
return rxjs_operator_first.first.call(observable);
});
return andObservables(obs);
};
PreActivation.prototype.runCanActivateChild = function(path) {
var _this = this;
var future = path[path.length - 1];
var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function(p) {
return _this.extractCanActivateChild(p);
}).filter(function(_) {
return _ !== null;
});
return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function(d) {
var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function(c) {
var guard = _this.getToken(c, c.node);
var observable;
if (guard.canActivateChild) {
observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
} else {
observable = wrapIntoObservable(guard(future, _this.future));
}
return rxjs_operator_first.first.call(observable);
});
return andObservables(obs);
}));
};
PreActivation.prototype.extractCanActivateChild = function(p) {
var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
if (!canActivateChild || canActivateChild.length === 0) return null;
return {
node: p,
guards: canActivateChild
};
};
PreActivation.prototype.runCanDeactivate = function(component, curr) {
var _this = this;
var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
if (!canDeactivate || canDeactivate.length === 0) return rxjs_observable_of.of(true);
var canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function(c) {
var guard = _this.getToken(c, curr);
var observable;
if (guard.canDeactivate) {
observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
} else {
observable = wrapIntoObservable(guard(component, curr, _this.curr));
}
return rxjs_operator_first.first.call(observable);
});
return rxjs_operator_every.every.call(canDeactivate$, function(result) {
return result === true;
});
};
PreActivation.prototype.runResolve = function(future) {
var resolve = future._resolve;
return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function(resolvedData) {
future._resolvedData = resolvedData;
future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);
return null;
});
};
PreActivation.prototype.resolveNode = function(resolve, future) {
var _this = this;
return waitForMap(resolve, function(k, v) {
var resolver = _this.getToken(v, future);
return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) : wrapIntoObservable(resolver(future, _this.future));
});
};
PreActivation.prototype.getToken = function(token, snapshot) {
var config = closestLoadedConfig(snapshot);
var injector = config ? config.injector : this.injector;
return injector.get(token);
};
return PreActivation;
}();
var ActivateRoutes = function() {
function ActivateRoutes(futureState, currState) {
this.futureState = futureState;
this.currState = currState;
}
ActivateRoutes.prototype.activate = function(parentOutletMap) {
var futureRoot = this.futureState._root;
var currRoot = this.currState ? this.currState._root : null;
this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
advanceActivatedRoute(this.futureState.root);
this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
};
ActivateRoutes.prototype.deactivateChildRoutes = function(futureNode, currNode, outletMap) {
var _this = this;
var prevChildren = nodeChildrenAsMap(currNode);
futureNode.children.forEach(function(c) {
_this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
delete prevChildren[c.value.outlet];
});
forEach(prevChildren, function(v, k) {
return _this.deactiveRouteAndItsChildren(v, outletMap);
});
};
ActivateRoutes.prototype.activateChildRoutes = function(futureNode, currNode, outletMap) {
var _this = this;
var prevChildren = nodeChildrenAsMap(currNode);
futureNode.children.forEach(function(c) {
_this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
});
};
ActivateRoutes.prototype.deactivateRoutes = function(futureNode, currNode, parentOutletMap) {
var future = futureNode.value;
var curr = currNode ? currNode.value : null;
if (future === curr) {
if (future.component) {
var outlet = getOutlet(parentOutletMap, future);
this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
} else {
this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
}
} else {
if (curr) {
this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
}
}
};
ActivateRoutes.prototype.activateRoutes = function(futureNode, currNode, parentOutletMap) {
var future = futureNode.value;
var curr = currNode ? currNode.value : null;
if (future === curr) {
advanceActivatedRoute(future);
if (future.component) {
var outlet = getOutlet(parentOutletMap, future);
this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
} else {
this.activateChildRoutes(futureNode, currNode, parentOutletMap);
}
} else {
if (future.component) {
advanceActivatedRoute(future);
var outlet = getOutlet(parentOutletMap, futureNode.value);
var outletMap = new RouterOutletMap();
this.placeComponentIntoOutlet(outletMap, future, outlet);
this.activateChildRoutes(futureNode, null, outletMap);
} else {
advanceActivatedRoute(future);
this.activateChildRoutes(futureNode, null, parentOutletMap);
}
}
};
ActivateRoutes.prototype.placeComponentIntoOutlet = function(outletMap, future, outlet) {
var resolved = [ {
provide: ActivatedRoute,
useValue: future
}, {
provide: RouterOutletMap,
useValue: outletMap
} ];
var config = parentLoadedConfig(future.snapshot);
var resolver = null;
var injector = null;
if (config) {
injector = config.injectorFactory(outlet.locationInjector);
resolver = config.factoryResolver;
resolved.push({
provide: _angular_core.ComponentFactoryResolver,
useValue: resolver
});
} else {
injector = outlet.locationInjector;
resolver = outlet.locationFactoryResolver;
}
outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);
};
ActivateRoutes.prototype.deactiveRouteAndItsChildren = function(route, parentOutletMap) {
var _this = this;
var prevChildren = nodeChildrenAsMap(route);
var outlet = null;
try {
outlet = getOutlet(parentOutletMap, route.value);
} catch (e) {
return;
}
var childOutletMap = outlet.outletMap;
forEach(prevChildren, function(v, k) {
if (route.value.component) {
_this.deactiveRouteAndItsChildren(v, childOutletMap);
} else {
_this.deactiveRouteAndItsChildren(v, parentOutletMap);
}
});
if (outlet && outlet.isActivated) {
outlet.deactivate();
}
};
return ActivateRoutes;
}();
function parentLoadedConfig(snapshot) {
var s = snapshot.parent;
while (s) {
var c = s._routeConfig;
if (c && c._loadedConfig) return c._loadedConfig;
if (c && c.component) return null;
s = s.parent;
}
return null;
}
function closestLoadedConfig(snapshot) {
if (!snapshot) return null;
var s = snapshot.parent;
while (s) {
var c = s._routeConfig;
if (c && c._loadedConfig) return c._loadedConfig;
s = s.parent;
}
return null;
}
function nodeChildrenAsMap(node) {
return node ? node.children.reduce(function(m, c) {
m[c.value.outlet] = c;
return m;
}, {}) : {};
}
function getOutlet(outletMap, route) {
var outlet = outletMap._outlets[route.outlet];
if (!outlet) {
var componentName = route.component.name;
if (route.outlet === PRIMARY_OUTLET) {
throw new Error("Cannot find primary outlet to load '" + componentName + "'");
} else {
throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
}
}
return outlet;
}
var RouterLink = function() {
function RouterLink(router, route, locationStrategy) {
this.router = router;
this.route = route;
this.locationStrategy = locationStrategy;
this.commands = [];
}
Object.defineProperty(RouterLink.prototype, "routerLink", {
set: function(data) {
if (Array.isArray(data)) {
this.commands = data;
} else {
this.commands = [ data ];
}
},
enumerable: true,
configurable: true
});
RouterLink.prototype.onClick = function() {
this.router.navigateByUrl(this.urlTree);
return true;
};
Object.defineProperty(RouterLink.prototype, "urlTree", {
get: function() {
return this.router.createUrlTree(this.commands, {
relativeTo: this.route,
queryParams: this.queryParams,
fragment: this.fragment,
preserveQueryParams: toBool(this.preserveQueryParams),
preserveFragment: toBool(this.preserveFragment)
});
},
enumerable: true,
configurable: true
});
RouterLink.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: ":not(a)[routerLink]"
} ]
} ];
RouterLink.ctorParameters = [ {
type: Router
}, {
type: ActivatedRoute
}, {
type: _angular_common.LocationStrategy
} ];
RouterLink.propDecorators = {
queryParams: [ {
type: _angular_core.Input
} ],
fragment: [ {
type: _angular_core.Input
} ],
preserveQueryParams: [ {
type: _angular_core.Input
} ],
preserveFragment: [ {
type: _angular_core.Input
} ],
routerLink: [ {
type: _angular_core.Input
} ],
onClick: [ {
type: _angular_core.HostListener,
args: [ "click", [] ]
} ]
};
return RouterLink;
}();
var RouterLinkWithHref = function() {
function RouterLinkWithHref(router, route, locationStrategy) {
var _this = this;
this.router = router;
this.route = route;
this.locationStrategy = locationStrategy;
this.commands = [];
this.subscription = router.events.subscribe(function(s) {
if (s instanceof NavigationEnd) {
_this.updateTargetUrlAndHref();
}
});
}
Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
set: function(data) {
if (Array.isArray(data)) {
this.commands = data;
} else {
this.commands = [ data ];
}
},
enumerable: true,
configurable: true
});
RouterLinkWithHref.prototype.ngOnChanges = function(changes) {
this.updateTargetUrlAndHref();
};
RouterLinkWithHref.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
RouterLinkWithHref.prototype.onClick = function(button, ctrlKey, metaKey) {
if (button !== 0 || ctrlKey || metaKey) {
return true;
}
if (typeof this.target === "string" && this.target != "_self") {
return true;
}
this.router.navigateByUrl(this.urlTree);
return false;
};
RouterLinkWithHref.prototype.updateTargetUrlAndHref = function() {
this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
};
Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
get: function() {
return this.router.createUrlTree(this.commands, {
relativeTo: this.route,
queryParams: this.queryParams,
fragment: this.fragment,
preserveQueryParams: toBool(this.preserveQueryParams),
preserveFragment: toBool(this.preserveFragment)
});
},
enumerable: true,
configurable: true
});
RouterLinkWithHref.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "a[routerLink]"
} ]
} ];
RouterLinkWithHref.ctorParameters = [ {
type: Router
}, {
type: ActivatedRoute
}, {
type: _angular_common.LocationStrategy
} ];
RouterLinkWithHref.propDecorators = {
target: [ {
type: _angular_core.Input
} ],
queryParams: [ {
type: _angular_core.Input
} ],
fragment: [ {
type: _angular_core.Input
} ],
routerLinkOptions: [ {
type: _angular_core.Input
} ],
preserveQueryParams: [ {
type: _angular_core.Input
} ],
preserveFragment: [ {
type: _angular_core.Input
} ],
href: [ {
type: _angular_core.HostBinding
} ],
routerLink: [ {
type: _angular_core.Input
} ],
onClick: [ {
type: _angular_core.HostListener,
args: [ "click", [ "$event.button", "$event.ctrlKey", "$event.metaKey" ] ]
} ]
};
return RouterLinkWithHref;
}();
function toBool(s) {
if (s === "") return true;
return !!s;
}
var RouterLinkActive = function() {
function RouterLinkActive(router, element, renderer) {
var _this = this;
this.router = router;
this.element = element;
this.renderer = renderer;
this.classes = [];
this.routerLinkActiveOptions = {
exact: false
};
this.subscription = router.events.subscribe(function(s) {
if (s instanceof NavigationEnd) {
_this.update();
}
});
}
Object.defineProperty(RouterLinkActive.prototype, "isActive", {
get: function() {
return this.hasActiveLink();
},
enumerable: true,
configurable: true
});
RouterLinkActive.prototype.ngAfterContentInit = function() {
var _this = this;
this.links.changes.subscribe(function(s) {
return _this.update();
});
this.linksWithHrefs.changes.subscribe(function(s) {
return _this.update();
});
this.update();
};
Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
set: function(data) {
if (Array.isArray(data)) {
this.classes = data;
} else {
this.classes = data.split(" ");
}
},
enumerable: true,
configurable: true
});
RouterLinkActive.prototype.ngOnChanges = function(changes) {
this.update();
};
RouterLinkActive.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
RouterLinkActive.prototype.update = function() {
var _this = this;
if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
var isActive = this.hasActiveLink();
this.classes.forEach(function(c) {
if (c) {
_this.renderer.setElementClass(_this.element.nativeElement, c, isActive);
}
});
};
RouterLinkActive.prototype.isLinkActive = function(router) {
var _this = this;
return function(link) {
return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
};
};
RouterLinkActive.prototype.hasActiveLink = function() {
return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
};
RouterLinkActive.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[routerLinkActive]",
exportAs: "routerLinkActive"
} ]
} ];
RouterLinkActive.ctorParameters = [ {
type: Router
}, {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
} ];
RouterLinkActive.propDecorators = {
links: [ {
type: _angular_core.ContentChildren,
args: [ RouterLink, {
descendants: true
} ]
} ],
linksWithHrefs: [ {
type: _angular_core.ContentChildren,
args: [ RouterLinkWithHref, {
descendants: true
} ]
} ],
routerLinkActiveOptions: [ {
type: _angular_core.Input
} ],
routerLinkActive: [ {
type: _angular_core.Input
} ]
};
return RouterLinkActive;
}();
var RouterOutlet = function() {
function RouterOutlet(parentOutletMap, location, resolver, name) {
this.parentOutletMap = parentOutletMap;
this.location = location;
this.resolver = resolver;
this.name = name;
this.activateEvents = new _angular_core.EventEmitter();
this.deactivateEvents = new _angular_core.EventEmitter();
parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
}
RouterOutlet.prototype.ngOnDestroy = function() {
this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
};
Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
get: function() {
return this.location.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
get: function() {
return this.resolver;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "isActivated", {
get: function() {
return !!this.activated;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "component", {
get: function() {
if (!this.activated) throw new Error("Outlet is not activated");
return this.activated.instance;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
get: function() {
if (!this.activated) throw new Error("Outlet is not activated");
return this._activatedRoute;
},
enumerable: true,
configurable: true
});
RouterOutlet.prototype.deactivate = function() {
if (this.activated) {
var c = this.component;
this.activated.destroy();
this.activated = null;
this.deactivateEvents.emit(c);
}
};
RouterOutlet.prototype.activate = function(activatedRoute, resolver, injector, providers, outletMap) {
if (this.isActivated) {
throw new Error("Cannot activate an already activated outlet");
}
this.outletMap = outletMap;
this._activatedRoute = activatedRoute;
var snapshot = activatedRoute._futureSnapshot;
var component = snapshot._routeConfig.component;
var factory = resolver.resolveComponentFactory(component);
var inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);
this.activated = this.location.createComponent(factory, this.location.length, inj, []);
this.activated.changeDetectorRef.detectChanges();
this.activateEvents.emit(this.activated.instance);
};
RouterOutlet.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "router-outlet"
} ]
} ];
RouterOutlet.ctorParameters = [ {
type: RouterOutletMap
}, {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.ComponentFactoryResolver
}, {
type: undefined,
decorators: [ {
type: _angular_core.Attribute,
args: [ "name" ]
} ]
} ];
RouterOutlet.propDecorators = {
activateEvents: [ {
type: _angular_core.Output,
args: [ "activate" ]
} ],
deactivateEvents: [ {
type: _angular_core.Output,
args: [ "deactivate" ]
} ]
};
return RouterOutlet;
}();
var getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;
var PreloadingStrategy = function() {
function PreloadingStrategy() {}
return PreloadingStrategy;
}();
var PreloadAllModules = function() {
function PreloadAllModules() {}
PreloadAllModules.prototype.preload = function(route, fn) {
return rxjs_operator_catch._catch.call(fn(), function() {
return rxjs_observable_of.of(null);
});
};
return PreloadAllModules;
}();
var NoPreloading = function() {
function NoPreloading() {}
NoPreloading.prototype.preload = function(route, fn) {
return rxjs_observable_of.of(null);
};
return NoPreloading;
}();
var RouterPreloader = function() {
function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
this.router = router;
this.injector = injector;
this.preloadingStrategy = preloadingStrategy;
this.loader = new RouterConfigLoader(moduleLoader, compiler);
}
RouterPreloader.prototype.setUpPreloading = function() {
var _this = this;
var navigations = rxjs_operator_filter.filter.call(this.router.events, function(e) {
return e instanceof NavigationEnd;
});
this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function() {
return _this.preload();
}).subscribe(function(v) {});
};
RouterPreloader.prototype.preload = function() {
return this.processRoutes(this.injector, this.router.config);
};
RouterPreloader.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
RouterPreloader.prototype.processRoutes = function(injector, routes) {
var res = [];
for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
var c = routes_1[_i];
if (c.loadChildren && !c.canLoad && c._loadedConfig) {
var childConfig = c._loadedConfig;
res.push(this.processRoutes(childConfig.injector, childConfig.routes));
} else if (c.loadChildren && !c.canLoad) {
res.push(this.preloadConfig(injector, c));
} else if (c.children) {
res.push(this.processRoutes(injector, c.children));
}
}
return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));
};
RouterPreloader.prototype.preloadConfig = function(injector, route) {
var _this = this;
return this.preloadingStrategy.preload(route, function() {
var loaded = _this.loader.load(injector, route.loadChildren);
return rxjs_operator_mergeMap.mergeMap.call(loaded, function(config) {
var c = route;
c._loadedConfig = config;
return _this.processRoutes(config.injector, config.routes);
});
});
};
RouterPreloader.decorators = [ {
type: _angular_core.Injectable
} ];
RouterPreloader.ctorParameters = [ {
type: Router
}, {
type: _angular_core.NgModuleFactoryLoader
}, {
type: _angular_core.Compiler
}, {
type: _angular_core.Injector
}, {
type: PreloadingStrategy
} ];
return RouterPreloader;
}();
var ROUTER_DIRECTIVES = [ RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive ];
var ROUTER_CONFIGURATION = new _angular_core.OpaqueToken("ROUTER_CONFIGURATION");
var ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken("ROUTER_FORROOT_GUARD");
var ROUTER_PROVIDERS = [ _angular_common.Location, {
provide: UrlSerializer,
useClass: DefaultUrlSerializer
}, {
provide: Router,
useFactory: setupRouter,
deps: [ _angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader, _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [ UrlHandlingStrategy, new _angular_core.Optional() ] ]
}, RouterOutletMap, {
provide: ActivatedRoute,
useFactory: rootRoute,
deps: [ Router ]
}, {
provide: _angular_core.NgModuleFactoryLoader,
useClass: _angular_core.SystemJsNgModuleLoader
}, RouterPreloader, NoPreloading, PreloadAllModules, {
provide: ROUTER_CONFIGURATION,
useValue: {
enableTracing: false
}
} ];
var RouterModule = function() {
function RouterModule(guard) {}
RouterModule.forRoot = function(routes, config) {
return {
ngModule: RouterModule,
providers: [ ROUTER_PROVIDERS, provideRoutes(routes), {
provide: ROUTER_FORROOT_GUARD,
useFactory: provideForRootGuard,
deps: [ [ Router, new _angular_core.Optional(), new _angular_core.SkipSelf() ] ]
}, {
provide: ROUTER_CONFIGURATION,
useValue: config ? config : {}
}, {
provide: _angular_common.LocationStrategy,
useFactory: provideLocationStrategy,
deps: [ _angular_common.PlatformLocation, [ new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional() ], ROUTER_CONFIGURATION ]
}, {
provide: PreloadingStrategy,
useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
}, provideRouterInitializer() ]
};
};
RouterModule.forChild = function(routes) {
return {
ngModule: RouterModule,
providers: [ provideRoutes(routes) ]
};
};
RouterModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: ROUTER_DIRECTIVES,
exports: ROUTER_DIRECTIVES
} ]
} ];
RouterModule.ctorParameters = [ {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ ROUTER_FORROOT_GUARD ]
} ]
} ];
return RouterModule;
}();
function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
if (options === void 0) {
options = {};
}
return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
}
function provideForRootGuard(router) {
if (router) {
throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
}
return "guarded";
}
function provideRoutes(routes) {
return [ {
provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS,
multi: true,
useValue: routes
}, {
provide: ROUTES,
multi: true,
useValue: routes
} ];
}
function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy) {
if (opts === void 0) {
opts = {};
}
var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
if (urlHandlingStrategy) {
router.urlHandlingStrategy = urlHandlingStrategy;
}
if (opts.errorHandler) {
router.errorHandler = opts.errorHandler;
}
if (opts.enableTracing) {
var dom_1 = getDOM();
router.events.subscribe(function(e) {
dom_1.logGroup("Router Event: " + e.constructor.name);
dom_1.log(e.toString());
dom_1.log(e);
dom_1.logGroupEnd();
});
}
return router;
}
function rootRoute(router) {
return router.routerState.root;
}
function initialRouterNavigation(router, ref, preloader, opts) {
return function(bootstrappedComponentRef) {
if (bootstrappedComponentRef !== ref.components[0]) {
return;
}
router.resetRootComponentType(ref.componentTypes[0]);
preloader.setUpPreloading();
if (opts.initialNavigation === false) {
router.setUpLocationChangeListener();
} else {
router.initialNavigation();
}
};
}
var ROUTER_INITIALIZER = new _angular_core.OpaqueToken("Router Initializer");
function provideRouterInitializer() {
return [ {
provide: ROUTER_INITIALIZER,
useFactory: initialRouterNavigation,
deps: [ Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION ]
}, {
provide: _angular_core.APP_BOOTSTRAP_LISTENER,
multi: true,
useExisting: ROUTER_INITIALIZER
} ];
}
var __router_private__ = {
ROUTER_PROVIDERS: ROUTER_PROVIDERS,
ROUTES: ROUTES,
flatten: flatten
};
exports.RouterLink = RouterLink;
exports.RouterLinkWithHref = RouterLinkWithHref;
exports.RouterLinkActive = RouterLinkActive;
exports.RouterOutlet = RouterOutlet;
exports.NavigationCancel = NavigationCancel;
exports.NavigationEnd = NavigationEnd;
exports.NavigationError = NavigationError;
exports.NavigationStart = NavigationStart;
exports.Router = Router;
exports.RoutesRecognized = RoutesRecognized;
exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;
exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;
exports.RouterModule = RouterModule;
exports.provideRoutes = provideRoutes;
exports.RouterOutletMap = RouterOutletMap;
exports.NoPreloading = NoPreloading;
exports.PreloadAllModules = PreloadAllModules;
exports.PreloadingStrategy = PreloadingStrategy;
exports.RouterPreloader = RouterPreloader;
exports.ActivatedRoute = ActivatedRoute;
exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
exports.RouterState = RouterState;
exports.RouterStateSnapshot = RouterStateSnapshot;
exports.PRIMARY_OUTLET = PRIMARY_OUTLET;
exports.UrlHandlingStrategy = UrlHandlingStrategy;
exports.DefaultUrlSerializer = DefaultUrlSerializer;
exports.UrlSegment = UrlSegment;
exports.UrlSegmentGroup = UrlSegmentGroup;
exports.UrlSerializer = UrlSerializer;
exports.UrlTree = UrlTree;
exports.__router_private__ = __router_private__;
});
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var ObjectUnsubscribedError_1 = __webpack_require__(172);
var BehaviorSubject = function(_super) {
__extends(BehaviorSubject, _super);
function BehaviorSubject(_value) {
_super.call(this);
this._value = _value;
}
Object.defineProperty(BehaviorSubject.prototype, "value", {
get: function() {
return this.getValue();
},
enumerable: true,
configurable: true
});
BehaviorSubject.prototype._subscribe = function(subscriber) {
var subscription = _super.prototype._subscribe.call(this, subscriber);
if (subscription && !subscription.closed) {
subscriber.next(this._value);
}
return subscription;
};
BehaviorSubject.prototype.getValue = function() {
if (this.hasError) {
throw this.thrownError;
} else if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
} else {
return this._value;
}
};
BehaviorSubject.prototype.next = function(value) {
_super.prototype.next.call(this, this._value = value);
};
return BehaviorSubject;
}(Subject_1.Subject);
exports.BehaviorSubject = BehaviorSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var FromObservable_1 = __webpack_require__(238);
exports.from = FromObservable_1.FromObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(164);
var isPromise_1 = __webpack_require__(239);
var PromiseObservable_1 = __webpack_require__(225);
var IteratorObservable_1 = __webpack_require__(240);
var ArrayObservable_1 = __webpack_require__(242);
var ArrayLikeObservable_1 = __webpack_require__(246);
var iterator_1 = __webpack_require__(241);
var Observable_1 = __webpack_require__(158);
var observeOn_1 = __webpack_require__(247);
var observable_1 = __webpack_require__(171);
var isArrayLike = function(x) {
return x && typeof x.length === "number";
};
var FromObservable = function(_super) {
__extends(FromObservable, _super);
function FromObservable(ish, scheduler) {
_super.call(this, null);
this.ish = ish;
this.scheduler = scheduler;
}
FromObservable.create = function(ish, scheduler) {
if (ish != null) {
if (typeof ish[observable_1.$$observable] === "function") {
if (ish instanceof Observable_1.Observable && !scheduler) {
return ish;
}
return new FromObservable(ish, scheduler);
} else if (isArray_1.isArray(ish)) {
return new ArrayObservable_1.ArrayObservable(ish, scheduler);
} else if (isPromise_1.isPromise(ish)) {
return new PromiseObservable_1.PromiseObservable(ish, scheduler);
} else if (typeof ish[iterator_1.$$iterator] === "function" || typeof ish === "string") {
return new IteratorObservable_1.IteratorObservable(ish, scheduler);
} else if (isArrayLike(ish)) {
return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
}
}
throw new TypeError((ish !== null && typeof ish || ish) + " is not observable");
};
FromObservable.prototype._subscribe = function(subscriber) {
var ish = this.ish;
var scheduler = this.scheduler;
if (scheduler == null) {
return ish[observable_1.$$observable]().subscribe(subscriber);
} else {
return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
}
};
return FromObservable;
}(Observable_1.Observable);
exports.FromObservable = FromObservable;
}, function(module, exports) {
"use strict";
function isPromise(value) {
return value && typeof value.subscribe !== "function" && typeof value.then === "function";
}
exports.isPromise = isPromise;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(159);
var Observable_1 = __webpack_require__(158);
var iterator_1 = __webpack_require__(241);
var IteratorObservable = function(_super) {
__extends(IteratorObservable, _super);
function IteratorObservable(iterator, scheduler) {
_super.call(this);
this.scheduler = scheduler;
if (iterator == null) {
throw new Error("iterator cannot be null.");
}
this.iterator = getIterator(iterator);
}
IteratorObservable.create = function(iterator, scheduler) {
return new IteratorObservable(iterator, scheduler);
};
IteratorObservable.dispatch = function(state) {
var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
if (hasError) {
subscriber.error(state.error);
return;
}
var result = iterator.next();
if (result.done) {
subscriber.complete();
return;
}
subscriber.next(result.value);
state.index = index + 1;
if (subscriber.closed) {
return;
}
this.schedule(state);
};
IteratorObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
if (scheduler) {
return scheduler.schedule(IteratorObservable.dispatch, 0, {
index: index,
iterator: iterator,
subscriber: subscriber
});
} else {
do {
var result = iterator.next();
if (result.done) {
subscriber.complete();
break;
} else {
subscriber.next(result.value);
}
if (subscriber.closed) {
break;
}
} while (true);
}
};
return IteratorObservable;
}(Observable_1.Observable);
exports.IteratorObservable = IteratorObservable;
var StringIterator = function() {
function StringIterator(str, idx, len) {
if (idx === void 0) {
idx = 0;
}
if (len === void 0) {
len = str.length;
}
this.str = str;
this.idx = idx;
this.len = len;
}
StringIterator.prototype[iterator_1.$$iterator] = function() {
return this;
};
StringIterator.prototype.next = function() {
return this.idx < this.len ? {
done: false,
value: this.str.charAt(this.idx++)
} : {
done: true,
value: undefined
};
};
return StringIterator;
}();
var ArrayIterator = function() {
function ArrayIterator(arr, idx, len) {
if (idx === void 0) {
idx = 0;
}
if (len === void 0) {
len = toLength(arr);
}
this.arr = arr;
this.idx = idx;
this.len = len;
}
ArrayIterator.prototype[iterator_1.$$iterator] = function() {
return this;
};
ArrayIterator.prototype.next = function() {
return this.idx < this.len ? {
done: false,
value: this.arr[this.idx++]
} : {
done: true,
value: undefined
};
};
return ArrayIterator;
}();
function getIterator(obj) {
var i = obj[iterator_1.$$iterator];
if (!i && typeof obj === "string") {
return new StringIterator(obj);
}
if (!i && obj.length !== undefined) {
return new ArrayIterator(obj);
}
if (!i) {
throw new TypeError("object is not iterable");
}
return obj[iterator_1.$$iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
var len = +o.length;
if (isNaN(len)) {
return 0;
}
if (len === 0 || !numberIsFinite(len)) {
return len;
}
len = sign(len) * Math.floor(Math.abs(len));
if (len <= 0) {
return 0;
}
if (len > maxSafeInteger) {
return maxSafeInteger;
}
return len;
}
function numberIsFinite(value) {
return typeof value === "number" && root_1.root.isFinite(value);
}
function sign(value) {
var valueAsNumber = +value;
if (valueAsNumber === 0) {
return valueAsNumber;
}
if (isNaN(valueAsNumber)) {
return valueAsNumber;
}
return valueAsNumber < 0 ? -1 : 1;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var Symbol = root_1.root.Symbol;
if (typeof Symbol === "function") {
if (Symbol.iterator) {
exports.$$iterator = Symbol.iterator;
} else if (typeof Symbol.for === "function") {
exports.$$iterator = Symbol.for("iterator");
}
} else {
if (root_1.root.Set && typeof new root_1.root.Set()["@@iterator"] === "function") {
exports.$$iterator = "@@iterator";
} else if (root_1.root.Map) {
var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && root_1.root.Map.prototype[key] === root_1.root.Map.prototype["entries"]) {
exports.$$iterator = key;
break;
}
}
} else {
exports.$$iterator = "@@iterator";
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var ScalarObservable_1 = __webpack_require__(243);
var EmptyObservable_1 = __webpack_require__(244);
var isScheduler_1 = __webpack_require__(245);
var ArrayObservable = function(_super) {
__extends(ArrayObservable, _super);
function ArrayObservable(array, scheduler) {
_super.call(this);
this.array = array;
this.scheduler = scheduler;
if (!scheduler && array.length === 1) {
this._isScalar = true;
this.value = array[0];
}
}
ArrayObservable.create = function(array, scheduler) {
return new ArrayObservable(array, scheduler);
};
ArrayObservable.of = function() {
var array = [];
for (var _i = 0; _i < arguments.length; _i++) {
array[_i - 0] = arguments[_i];
}
var scheduler = array[array.length - 1];
if (isScheduler_1.isScheduler(scheduler)) {
array.pop();
} else {
scheduler = null;
}
var len = array.length;
if (len > 1) {
return new ArrayObservable(array, scheduler);
} else if (len === 1) {
return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
} else {
return new EmptyObservable_1.EmptyObservable(scheduler);
}
};
ArrayObservable.dispatch = function(state) {
var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
if (index >= count) {
subscriber.complete();
return;
}
subscriber.next(array[index]);
if (subscriber.closed) {
return;
}
state.index = index + 1;
this.schedule(state);
};
ArrayObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var array = this.array;
var count = array.length;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(ArrayObservable.dispatch, 0, {
array: array,
index: index,
count: count,
subscriber: subscriber
});
} else {
for (var i = 0; i < count && !subscriber.closed; i++) {
subscriber.next(array[i]);
}
subscriber.complete();
}
};
return ArrayObservable;
}(Observable_1.Observable);
exports.ArrayObservable = ArrayObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var ScalarObservable = function(_super) {
__extends(ScalarObservable, _super);
function ScalarObservable(value, scheduler) {
_super.call(this);
this.value = value;
this.scheduler = scheduler;
this._isScalar = true;
if (scheduler) {
this._isScalar = false;
}
}
ScalarObservable.create = function(value, scheduler) {
return new ScalarObservable(value, scheduler);
};
ScalarObservable.dispatch = function(state) {
var done = state.done, value = state.value, subscriber = state.subscriber;
if (done) {
subscriber.complete();
return;
}
subscriber.next(value);
if (subscriber.closed) {
return;
}
state.done = true;
this.schedule(state);
};
ScalarObservable.prototype._subscribe = function(subscriber) {
var value = this.value;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(ScalarObservable.dispatch, 0, {
done: false,
value: value,
subscriber: subscriber
});
} else {
subscriber.next(value);
if (!subscriber.closed) {
subscriber.complete();
}
}
};
return ScalarObservable;
}(Observable_1.Observable);
exports.ScalarObservable = ScalarObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var EmptyObservable = function(_super) {
__extends(EmptyObservable, _super);
function EmptyObservable(scheduler) {
_super.call(this);
this.scheduler = scheduler;
}
EmptyObservable.create = function(scheduler) {
return new EmptyObservable(scheduler);
};
EmptyObservable.dispatch = function(arg) {
var subscriber = arg.subscriber;
subscriber.complete();
};
EmptyObservable.prototype._subscribe = function(subscriber) {
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(EmptyObservable.dispatch, 0, {
subscriber: subscriber
});
} else {
subscriber.complete();
}
};
return EmptyObservable;
}(Observable_1.Observable);
exports.EmptyObservable = EmptyObservable;
}, function(module, exports) {
"use strict";
function isScheduler(value) {
return value && typeof value.schedule === "function";
}
exports.isScheduler = isScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var ScalarObservable_1 = __webpack_require__(243);
var EmptyObservable_1 = __webpack_require__(244);
var ArrayLikeObservable = function(_super) {
__extends(ArrayLikeObservable, _super);
function ArrayLikeObservable(arrayLike, scheduler) {
_super.call(this);
this.arrayLike = arrayLike;
this.scheduler = scheduler;
if (!scheduler && arrayLike.length === 1) {
this._isScalar = true;
this.value = arrayLike[0];
}
}
ArrayLikeObservable.create = function(arrayLike, scheduler) {
var length = arrayLike.length;
if (length === 0) {
return new EmptyObservable_1.EmptyObservable();
} else if (length === 1) {
return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
} else {
return new ArrayLikeObservable(arrayLike, scheduler);
}
};
ArrayLikeObservable.dispatch = function(state) {
var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
if (subscriber.closed) {
return;
}
if (index >= length) {
subscriber.complete();
return;
}
subscriber.next(arrayLike[index]);
state.index = index + 1;
this.schedule(state);
};
ArrayLikeObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
var length = arrayLike.length;
if (scheduler) {
return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
arrayLike: arrayLike,
index: index,
length: length,
subscriber: subscriber
});
} else {
for (var i = 0; i < length && !subscriber.closed; i++) {
subscriber.next(arrayLike[i]);
}
subscriber.complete();
}
};
return ArrayLikeObservable;
}(Observable_1.Observable);
exports.ArrayLikeObservable = ArrayLikeObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var Notification_1 = __webpack_require__(248);
function observeOn(scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
return this.lift(new ObserveOnOperator(scheduler, delay));
}
exports.observeOn = observeOn;
var ObserveOnOperator = function() {
function ObserveOnOperator(scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
this.scheduler = scheduler;
this.delay = delay;
}
ObserveOnOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
};
return ObserveOnOperator;
}();
exports.ObserveOnOperator = ObserveOnOperator;
var ObserveOnSubscriber = function(_super) {
__extends(ObserveOnSubscriber, _super);
function ObserveOnSubscriber(destination, scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
_super.call(this, destination);
this.scheduler = scheduler;
this.delay = delay;
}
ObserveOnSubscriber.dispatch = function(arg) {
var notification = arg.notification, destination = arg.destination;
notification.observe(destination);
};
ObserveOnSubscriber.prototype.scheduleMessage = function(notification) {
this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
};
ObserveOnSubscriber.prototype._next = function(value) {
this.scheduleMessage(Notification_1.Notification.createNext(value));
};
ObserveOnSubscriber.prototype._error = function(err) {
this.scheduleMessage(Notification_1.Notification.createError(err));
};
ObserveOnSubscriber.prototype._complete = function() {
this.scheduleMessage(Notification_1.Notification.createComplete());
};
return ObserveOnSubscriber;
}(Subscriber_1.Subscriber);
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = function() {
function ObserveOnMessage(notification, destination) {
this.notification = notification;
this.destination = destination;
}
return ObserveOnMessage;
}();
exports.ObserveOnMessage = ObserveOnMessage;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var Notification = function() {
function Notification(kind, value, exception) {
this.kind = kind;
this.value = value;
this.exception = exception;
this.hasValue = kind === "N";
}
Notification.prototype.observe = function(observer) {
switch (this.kind) {
case "N":
return observer.next && observer.next(this.value);

case "E":
return observer.error && observer.error(this.exception);

case "C":
return observer.complete && observer.complete();
}
};
Notification.prototype.do = function(next, error, complete) {
var kind = this.kind;
switch (kind) {
case "N":
return next && next(this.value);

case "E":
return error && error(this.exception);

case "C":
return complete && complete();
}
};
Notification.prototype.accept = function(nextOrObserver, error, complete) {
if (nextOrObserver && typeof nextOrObserver.next === "function") {
return this.observe(nextOrObserver);
} else {
return this.do(nextOrObserver, error, complete);
}
};
Notification.prototype.toObservable = function() {
var kind = this.kind;
switch (kind) {
case "N":
return Observable_1.Observable.of(this.value);

case "E":
return Observable_1.Observable.throw(this.exception);

case "C":
return Observable_1.Observable.empty();
}
throw new Error("unexpected notification kind value");
};
Notification.createNext = function(value) {
if (typeof value !== "undefined") {
return new Notification("N", value);
}
return this.undefinedValueNotification;
};
Notification.createError = function(err) {
return new Notification("E", undefined, err);
};
Notification.createComplete = function() {
return this.completeNotification;
};
Notification.completeNotification = new Notification("C");
Notification.undefinedValueNotification = new Notification("N", undefined);
return Notification;
}();
exports.Notification = Notification;
}, function(module, exports, __webpack_require__) {
"use strict";
var ArrayObservable_1 = __webpack_require__(242);
exports.of = ArrayObservable_1.ArrayObservable.of;
}, function(module, exports, __webpack_require__) {
"use strict";
var mergeMap_1 = __webpack_require__(251);
function concatMap(project, resultSelector) {
return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
}
exports.concatMap = concatMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
function mergeMap(project, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
if (typeof resultSelector === "number") {
concurrent = resultSelector;
resultSelector = null;
}
return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
}
exports.mergeMap = mergeMap;
var MergeMapOperator = function() {
function MergeMapOperator(project, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
this.project = project;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
}
MergeMapOperator.prototype.call = function(observer, source) {
return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
};
return MergeMapOperator;
}();
exports.MergeMapOperator = MergeMapOperator;
var MergeMapSubscriber = function(_super) {
__extends(MergeMapSubscriber, _super);
function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
_super.call(this, destination);
this.project = project;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
this.index = 0;
}
MergeMapSubscriber.prototype._next = function(value) {
if (this.active < this.concurrent) {
this._tryNext(value);
} else {
this.buffer.push(value);
}
};
MergeMapSubscriber.prototype._tryNext = function(value) {
var result;
var index = this.index++;
try {
result = this.project(value, index);
} catch (err) {
this.destination.error(err);
return;
}
this.active++;
this._innerSub(result, value, index);
};
MergeMapSubscriber.prototype._innerSub = function(ish, value, index) {
this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
};
MergeMapSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
this.destination.complete();
}
};
MergeMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (this.resultSelector) {
this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
} else {
this.destination.next(innerValue);
}
};
MergeMapSubscriber.prototype._notifyResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
var result;
try {
result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
MergeMapSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
this.destination.complete();
}
};
return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapSubscriber = MergeMapSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var isArray_1 = __webpack_require__(164);
var isPromise_1 = __webpack_require__(239);
var Observable_1 = __webpack_require__(158);
var iterator_1 = __webpack_require__(241);
var InnerSubscriber_1 = __webpack_require__(253);
var observable_1 = __webpack_require__(171);
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
if (destination.closed) {
return null;
}
if (result instanceof Observable_1.Observable) {
if (result._isScalar) {
destination.next(result.value);
destination.complete();
return null;
} else {
return result.subscribe(destination);
}
}
if (isArray_1.isArray(result)) {
for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
destination.next(result[i]);
}
if (!destination.closed) {
destination.complete();
}
} else if (isPromise_1.isPromise(result)) {
result.then(function(value) {
if (!destination.closed) {
destination.next(value);
destination.complete();
}
}, function(err) {
return destination.error(err);
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
return destination;
} else if (typeof result[iterator_1.$$iterator] === "function") {
var iterator = result[iterator_1.$$iterator]();
do {
var item = iterator.next();
if (item.done) {
destination.complete();
break;
}
destination.next(item.value);
if (destination.closed) {
break;
}
} while (true);
} else if (typeof result[observable_1.$$observable] === "function") {
var obs = result[observable_1.$$observable]();
if (typeof obs.subscribe !== "function") {
destination.error(new Error("invalid observable"));
} else {
return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
}
} else {
destination.error(new TypeError("unknown type returned"));
}
return null;
}
exports.subscribeToResult = subscribeToResult;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var InnerSubscriber = function(_super) {
__extends(InnerSubscriber, _super);
function InnerSubscriber(parent, outerValue, outerIndex) {
_super.call(this);
this.parent = parent;
this.outerValue = outerValue;
this.outerIndex = outerIndex;
this.index = 0;
}
InnerSubscriber.prototype._next = function(value) {
this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
};
InnerSubscriber.prototype._error = function(error) {
this.parent.notifyError(error, this);
this.unsubscribe();
};
InnerSubscriber.prototype._complete = function() {
this.parent.notifyComplete(this);
this.unsubscribe();
};
return InnerSubscriber;
}(Subscriber_1.Subscriber);
exports.InnerSubscriber = InnerSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var OuterSubscriber = function(_super) {
__extends(OuterSubscriber, _super);
function OuterSubscriber() {
_super.apply(this, arguments);
}
OuterSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.destination.next(innerValue);
};
OuterSubscriber.prototype.notifyError = function(error, innerSub) {
this.destination.error(error);
};
OuterSubscriber.prototype.notifyComplete = function(innerSub) {
this.destination.complete();
};
return OuterSubscriber;
}(Subscriber_1.Subscriber);
exports.OuterSubscriber = OuterSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function every(predicate, thisArg) {
return this.lift(new EveryOperator(predicate, thisArg, this));
}
exports.every = every;
var EveryOperator = function() {
function EveryOperator(predicate, thisArg, source) {
this.predicate = predicate;
this.thisArg = thisArg;
this.source = source;
}
EveryOperator.prototype.call = function(observer, source) {
return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
};
return EveryOperator;
}();
var EverySubscriber = function(_super) {
__extends(EverySubscriber, _super);
function EverySubscriber(destination, predicate, thisArg, source) {
_super.call(this, destination);
this.predicate = predicate;
this.thisArg = thisArg;
this.source = source;
this.index = 0;
this.thisArg = thisArg || this;
}
EverySubscriber.prototype.notifyComplete = function(everyValueMatch) {
this.destination.next(everyValueMatch);
this.destination.complete();
};
EverySubscriber.prototype._next = function(value) {
var result = false;
try {
result = this.predicate.call(this.thisArg, value, this.index++, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (!result) {
this.notifyComplete(false);
}
};
EverySubscriber.prototype._complete = function() {
this.notifyComplete(true);
};
return EverySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var EmptyError_1 = __webpack_require__(257);
function first(predicate, resultSelector, defaultValue) {
return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
exports.first = first;
var FirstOperator = function() {
function FirstOperator(predicate, resultSelector, defaultValue, source) {
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
}
FirstOperator.prototype.call = function(observer, source) {
return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
};
return FirstOperator;
}();
var FirstSubscriber = function(_super) {
__extends(FirstSubscriber, _super);
function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
_super.call(this, destination);
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
this.index = 0;
this.hasCompleted = false;
}
FirstSubscriber.prototype._next = function(value) {
var index = this.index++;
if (this.predicate) {
this._tryPredicate(value, index);
} else {
this._emit(value, index);
}
};
FirstSubscriber.prototype._tryPredicate = function(value, index) {
var result;
try {
result = this.predicate(value, index, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
this._emit(value, index);
}
};
FirstSubscriber.prototype._emit = function(value, index) {
if (this.resultSelector) {
this._tryResultSelector(value, index);
return;
}
this._emitFinal(value);
};
FirstSubscriber.prototype._tryResultSelector = function(value, index) {
var result;
try {
result = this.resultSelector(value, index);
} catch (err) {
this.destination.error(err);
return;
}
this._emitFinal(result);
};
FirstSubscriber.prototype._emitFinal = function(value) {
var destination = this.destination;
destination.next(value);
destination.complete();
this.hasCompleted = true;
};
FirstSubscriber.prototype._complete = function() {
var destination = this.destination;
if (!this.hasCompleted && typeof this.defaultValue !== "undefined") {
destination.next(this.defaultValue);
destination.complete();
} else if (!this.hasCompleted) {
destination.error(new EmptyError_1.EmptyError());
}
};
return FirstSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EmptyError = function(_super) {
__extends(EmptyError, _super);
function EmptyError() {
var err = _super.call(this, "no elements in sequence");
this.name = err.name = "EmptyError";
this.stack = err.stack;
this.message = err.message;
}
return EmptyError;
}(Error);
exports.EmptyError = EmptyError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function map(project, thisArg) {
if (typeof project !== "function") {
throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");
}
return this.lift(new MapOperator(project, thisArg));
}
exports.map = map;
var MapOperator = function() {
function MapOperator(project, thisArg) {
this.project = project;
this.thisArg = thisArg;
}
MapOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
};
return MapOperator;
}();
exports.MapOperator = MapOperator;
var MapSubscriber = function(_super) {
__extends(MapSubscriber, _super);
function MapSubscriber(destination, project, thisArg) {
_super.call(this, destination);
this.project = project;
this.count = 0;
this.thisArg = thisArg || this;
}
MapSubscriber.prototype._next = function(value) {
var result;
try {
result = this.project.call(this.thisArg, value, this.count++);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return MapSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function reduce(accumulator, seed) {
return this.lift(new ReduceOperator(accumulator, seed));
}
exports.reduce = reduce;
var ReduceOperator = function() {
function ReduceOperator(accumulator, seed) {
this.accumulator = accumulator;
this.seed = seed;
}
ReduceOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
};
return ReduceOperator;
}();
exports.ReduceOperator = ReduceOperator;
var ReduceSubscriber = function(_super) {
__extends(ReduceSubscriber, _super);
function ReduceSubscriber(destination, accumulator, seed) {
_super.call(this, destination);
this.accumulator = accumulator;
this.hasValue = false;
this.acc = seed;
this.accumulator = accumulator;
this.hasSeed = typeof seed !== "undefined";
}
ReduceSubscriber.prototype._next = function(value) {
if (this.hasValue || (this.hasValue = this.hasSeed)) {
this._tryReduce(value);
} else {
this.acc = value;
this.hasValue = true;
}
};
ReduceSubscriber.prototype._tryReduce = function(value) {
var result;
try {
result = this.accumulator(this.acc, value);
} catch (err) {
this.destination.error(err);
return;
}
this.acc = result;
};
ReduceSubscriber.prototype._complete = function() {
if (this.hasValue || this.hasSeed) {
this.destination.next(this.acc);
}
this.destination.complete();
};
return ReduceSubscriber;
}(Subscriber_1.Subscriber);
exports.ReduceSubscriber = ReduceSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function _catch(selector) {
var operator = new CatchOperator(selector);
var caught = this.lift(operator);
return operator.caught = caught;
}
exports._catch = _catch;
var CatchOperator = function() {
function CatchOperator(selector) {
this.selector = selector;
}
CatchOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
};
return CatchOperator;
}();
var CatchSubscriber = function(_super) {
__extends(CatchSubscriber, _super);
function CatchSubscriber(destination, selector, caught) {
_super.call(this, destination);
this.selector = selector;
this.caught = caught;
}
CatchSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var result = void 0;
try {
result = this.selector(err, this.caught);
} catch (err) {
this.destination.error(err);
return;
}
this.unsubscribe();
this.destination.remove(this);
subscribeToResult_1.subscribeToResult(this, result);
}
};
return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var mergeAll_1 = __webpack_require__(262);
function concatAll() {
return this.lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatAll = concatAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function mergeAll(concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
return this.lift(new MergeAllOperator(concurrent));
}
exports.mergeAll = mergeAll;
var MergeAllOperator = function() {
function MergeAllOperator(concurrent) {
this.concurrent = concurrent;
}
MergeAllOperator.prototype.call = function(observer, source) {
return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
};
return MergeAllOperator;
}();
exports.MergeAllOperator = MergeAllOperator;
var MergeAllSubscriber = function(_super) {
__extends(MergeAllSubscriber, _super);
function MergeAllSubscriber(destination, concurrent) {
_super.call(this, destination);
this.concurrent = concurrent;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
}
MergeAllSubscriber.prototype._next = function(observable) {
if (this.active < this.concurrent) {
this.active++;
this.add(subscribeToResult_1.subscribeToResult(this, observable));
} else {
this.buffer.push(observable);
}
};
MergeAllSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
this.destination.complete();
}
};
MergeAllSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
this.destination.complete();
}
};
return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeAllSubscriber = MergeAllSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var EmptyError_1 = __webpack_require__(257);
function last(predicate, resultSelector, defaultValue) {
return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
}
exports.last = last;
var LastOperator = function() {
function LastOperator(predicate, resultSelector, defaultValue, source) {
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
}
LastOperator.prototype.call = function(observer, source) {
return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
};
return LastOperator;
}();
var LastSubscriber = function(_super) {
__extends(LastSubscriber, _super);
function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
_super.call(this, destination);
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
this.hasValue = false;
this.index = 0;
if (typeof defaultValue !== "undefined") {
this.lastValue = defaultValue;
this.hasValue = true;
}
}
LastSubscriber.prototype._next = function(value) {
var index = this.index++;
if (this.predicate) {
this._tryPredicate(value, index);
} else {
if (this.resultSelector) {
this._tryResultSelector(value, index);
return;
}
this.lastValue = value;
this.hasValue = true;
}
};
LastSubscriber.prototype._tryPredicate = function(value, index) {
var result;
try {
result = this.predicate(value, index, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
if (this.resultSelector) {
this._tryResultSelector(value, index);
return;
}
this.lastValue = value;
this.hasValue = true;
}
};
LastSubscriber.prototype._tryResultSelector = function(value, index) {
var result;
try {
result = this.resultSelector(value, index);
} catch (err) {
this.destination.error(err);
return;
}
this.lastValue = result;
this.hasValue = true;
};
LastSubscriber.prototype._complete = function() {
var destination = this.destination;
if (this.hasValue) {
destination.next(this.lastValue);
destination.complete();
} else {
destination.error(new EmptyError_1.EmptyError());
}
};
return LastSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function filter(predicate, thisArg) {
return this.lift(new FilterOperator(predicate, thisArg));
}
exports.filter = filter;
var FilterOperator = function() {
function FilterOperator(predicate, thisArg) {
this.predicate = predicate;
this.thisArg = thisArg;
}
FilterOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
};
return FilterOperator;
}();
var FilterSubscriber = function(_super) {
__extends(FilterSubscriber, _super);
function FilterSubscriber(destination, predicate, thisArg) {
_super.call(this, destination);
this.predicate = predicate;
this.thisArg = thisArg;
this.count = 0;
this.predicate = predicate;
}
FilterSubscriber.prototype._next = function(value) {
var result;
try {
result = this.predicate.call(this.thisArg, value, this.count++);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
this.destination.next(value);
}
};
return FilterSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(266);
var utils = __webpack_require__(37);
var sharedPreferences;
function ensureSharedPreferences() {
if (!sharedPreferences) {
sharedPreferences = utils.ad.getApplicationContext().getSharedPreferences("prefs.db", 0);
}
}
function verify(key) {
common.checkKey(key);
ensureSharedPreferences();
}
exports.hasKey = function(key) {
verify(key);
return sharedPreferences.contains(key);
};
exports.getBoolean = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getBoolean(key, false);
}
return defaultValue;
};
exports.getString = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getString(key, "");
}
return defaultValue;
};
exports.getNumber = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getFloat(key, float(0));
}
return defaultValue;
};
exports.setBoolean = function(key, value) {
verify(key);
common.ensureValidValue(value, "boolean");
var editor = sharedPreferences.edit();
editor.putBoolean(key, value);
editor.commit();
};
exports.setString = function(key, value) {
verify(key);
common.ensureValidValue(value, "string");
var editor = sharedPreferences.edit();
editor.putString(key, value);
editor.commit();
};
exports.setNumber = function(key, value) {
verify(key);
common.ensureValidValue(value, "number");
var editor = sharedPreferences.edit();
editor.putFloat(key, float(value));
editor.commit();
};
exports.remove = function(key) {
verify(key);
var editor = sharedPreferences.edit();
editor.remove(key);
editor.commit();
};
exports.clear = function() {
ensureSharedPreferences();
sharedPreferences.edit().clear().commit();
};
}, function(module, exports) {
exports.checkKey = function(key) {
if ("string" !== typeof key) {
throw new Error("key: '" + key + "' must be a string");
}
};
exports.ensureValidValue = function(value, valueType) {
if (valueType !== typeof value) {
throw new Error("value: '" + value + "' must be a " + valueType);
}
};
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(49);
var REQUEST_IMAGE_CAPTURE = 3453;
exports.takePicture = function(options) {
return new Promise(function(resolve, reject) {
try {
var types = __webpack_require__(14);
var utils = __webpack_require__(37);
var saveToGallery = void 0;
var reqWidth_1;
var reqHeight_1;
var shouldKeepAspectRatio_1;
var density = utils.layout.getDisplayDensity();
if (options) {
saveToGallery = options.saveToGallery ? true : false;
reqWidth_1 = options.width ? options.width * density : 0;
reqHeight_1 = options.height ? options.height * density : reqWidth_1;
shouldKeepAspectRatio_1 = types.isNullOrUndefined(options.keepAspectRatio) ? true : options.keepAspectRatio;
}
var takePictureIntent = new android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
var dateStamp = createDateTimeStamp();
var picturePath_1;
var nativeFile = void 0;
var tempPictureUri = void 0;
if (saveToGallery) {
picturePath_1 = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES).getAbsolutePath() + "/" + "cameraPicture_" + dateStamp + ".jpg";
nativeFile = new java.io.File(picturePath_1);
tempPictureUri = android.net.Uri.fromFile(nativeFile);
takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, tempPictureUri);
} else {
picturePath_1 = utils.ad.getApplicationContext().getExternalFilesDir(null).getAbsolutePath() + "/" + "cameraPicture_" + dateStamp + ".jpg";
nativeFile = new java.io.File(picturePath_1);
tempPictureUri = android.net.Uri.fromFile(nativeFile);
takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, tempPictureUri);
}
if (takePictureIntent.resolveActivity(utils.ad.getApplicationContext().getPackageManager()) != null) {
var appModule_1 = __webpack_require__(16);
var previousResult_1 = appModule_1.android.onActivityResult;
appModule_1.android.onActivityResult = function(requestCode, resultCode, data) {
appModule_1.android.onActivityResult = previousResult_1;
if (requestCode === REQUEST_IMAGE_CAPTURE && resultCode === android.app.Activity.RESULT_OK) {
var imageSource = __webpack_require__(53);
var options_1 = new android.graphics.BitmapFactory.Options();
options_1.inJustDecodeBounds = true;
var bitmap = android.graphics.BitmapFactory.decodeFile(picturePath_1, options_1);
var sampleSize = calculateInSampleSize(options_1.outWidth, options_1.outHeight, reqWidth_1, reqHeight_1);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
bitmap = android.graphics.BitmapFactory.decodeFile(picturePath_1, finalBitmapOptions);
var scaledSizeImage = null;
if (reqHeight_1 > 0 && reqWidth_1 > 0) {
if (shouldKeepAspectRatio_1) {
var common = __webpack_require__(268);
var aspectSafeSize = common.getAspectSafeDimensions(bitmap.getWidth(), bitmap.getHeight(), reqWidth_1, reqHeight_1);
scaledSizeImage = android.graphics.Bitmap.createScaledBitmap(bitmap, aspectSafeSize.width, aspectSafeSize.height, true);
} else {
scaledSizeImage = android.graphics.Bitmap.createScaledBitmap(bitmap, reqWidth_1, reqHeight_1, true);
}
} else {
scaledSizeImage = bitmap;
}
resolve(imageSource.fromNativeSource(scaledSizeImage));
}
};
appModule_1.android.foregroundActivity.startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
}
} catch (e) {
if (reject) {
reject(e);
}
}
});
};
exports.isAvailable = function() {
var utils = __webpack_require__(37);
return utils.ad.getApplicationContext().getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_CAMERA);
};
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
var displayWidth = platform.screen.mainScreen.widthDIPs;
var displayHeigth = platform.screen.mainScreen.heightDIPs;
reqWidth = reqWidth > 0 && reqWidth < displayWidth ? reqWidth : displayWidth;
reqHeight = reqHeight > 0 && reqHeight < displayHeigth ? reqHeight : displayHeigth;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
var createDateTimeStamp = function() {
var result = "";
var date = new Date();
result = (date.getDate() < 10 ? "0" + date.getDate().toString() : date.getDate().toString()) + (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1).toString() : (date.getMonth() + 1).toString()) + date.getFullYear().toString() + date.getHours().toString() + date.getMinutes().toString() + date.getSeconds().toString();
return result;
};
}, function(module, exports) {
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(16);
var common = __webpack_require__(270);
var utils = __webpack_require__(37);
global.moduleMerge(common, exports);
var WIFI = "WIFI";
var MOBILE = "MOBILE";
function getConnectivityManager() {
return utils.ad.getApplicationContext().getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
}
function getActiveNetworkInfo() {
var connectivityManager = getConnectivityManager();
if (!connectivityManager) {
return null;
}
return connectivityManager.getActiveNetworkInfo();
}
function getConnectionType() {
var activeNetworkInfo = getActiveNetworkInfo();
if (!activeNetworkInfo || !activeNetworkInfo.isConnected()) {
return common.connectionType.none;
}
var connectionType = activeNetworkInfo.getTypeName();
switch (connectionType) {
case WIFI:
return common.connectionType.wifi;

case MOBILE:
return common.connectionType.mobile;
}
}
exports.getConnectionType = getConnectionType;
function startMonitoring(connectionTypeChangedCallback) {
var onReceiveCallback = function onReceiveCallback(context, intent) {
var newConnectionType = getConnectionType();
connectionTypeChangedCallback(newConnectionType);
};
appModule.android.registerBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION, onReceiveCallback);
}
exports.startMonitoring = startMonitoring;
function stopMonitoring() {
appModule.android.unregisterBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION);
}
exports.stopMonitoring = stopMonitoring;
}, function(module, exports) {
var connectionType;
(function(connectionType) {
connectionType.none = 0;
connectionType.wifi = 1;
connectionType.mobile = 2;
})(connectionType = exports.connectionType || (exports.connectionType = {}));
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var types = __webpack_require__(14);
var CHANGE = "change", UPDATE = "update", DELETE = "delete", ADD = "add";
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var VirtualArray = function(_super) {
__extends(VirtualArray, _super);
function VirtualArray(length) {
if (length === void 0) {
length = 0;
}
_super.call(this);
this._length = length;
this._cache = {};
this._requestedIndexes = [];
this._loadedIndexes = [];
}
Object.defineProperty(VirtualArray.prototype, "length", {
get: function() {
return this._length;
},
set: function(value) {
if (this._length !== value) {
var index = this._length;
var count = value - this._length;
this._length = value;
this.notify({
eventName: CHANGE,
object: this,
action: count > 0 ? ADD : DELETE,
index: index,
removed: new Array(count < 0 ? Math.abs(count) : 0),
addedCount: count > 0 ? count : 0
});
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(VirtualArray.prototype, "loadSize", {
get: function() {
return this._loadSize;
},
set: function(value) {
this._loadSize = value;
},
enumerable: true,
configurable: true
});
VirtualArray.prototype.getItem = function(index) {
var item = this._cache[index];
if (types.isUndefined(item)) {
if (index >= 0 && index < this.length && this._requestedIndexes.indexOf(index) < 0 && this._loadedIndexes.indexOf(index) < 0) {
this.requestItems(index);
}
}
return item;
};
VirtualArray.prototype.setItem = function(index, value) {
if (this._cache[index] !== value) {
this.load(index, [ value ]);
}
};
VirtualArray.prototype.load = function(index, items) {
var i;
for (i = 0; i < items.length; i++) {
var itemIndex = index + i;
this._cache[itemIndex] = items[i];
this._requestedIndexes.splice(this._requestedIndexes.indexOf(itemIndex), 1);
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
this._loadedIndexes.push(itemIndex);
}
}
if (this._requestedIndexes.length > 0) {
for (i = 0; i < this.loadSize - items.length; i++) {
this._requestedIndexes.splice(this._requestedIndexes.indexOf(index + i), 1);
}
}
this.notify({
eventName: CHANGE,
object: this,
action: UPDATE,
index: index,
removed: new Array(items.length),
addedCount: items.length
});
};
VirtualArray.prototype.requestItems = function(index) {
var indexesToLoad = [];
var pageIndex = this._loadSize > 0 ? this._loadSize * Math.floor(index / this._loadSize) : index;
var count = 0;
var start = -1;
for (var i = 0; i < this.loadSize; i++) {
var itemIndex = pageIndex + i;
if (itemIndex >= this._length) {
break;
}
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
if (start < 0) {
start = itemIndex;
}
indexesToLoad.push(itemIndex);
if (this._requestedIndexes.indexOf(itemIndex) < 0) {
this._requestedIndexes.push(itemIndex);
}
count++;
} else {
if (count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
start = -1;
count = 0;
}
}
if (start >= 0 && count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
};
VirtualArray.changeEvent = CHANGE;
VirtualArray.itemsLoadingEvent = "itemsLoading";
return VirtualArray;
}(observable.Observable);
exports.VirtualArray = VirtualArray;
}, function(module, exports) {
var network;
function getNetwork() {
return network;
}
exports.getNetwork = getNetwork;
function setNetwork(newNetwork) {
network = newNetwork;
}
exports.setNetwork = setNetwork;
}, function(module, exports, __webpack_require__) {
var fpsNative = __webpack_require__(274);
var callbacks = {};
var idCounter = 0;
var _minFps = 1e3;
var framesRendered = 0;
var frameStartTime = 0;
function doFrame(currentTimeMillis) {
var fps = 0;
if (frameStartTime > 0) {
var timeSpan = currentTimeMillis - frameStartTime;
framesRendered++;
if (timeSpan > 1e3) {
fps = framesRendered * 1e3 / timeSpan;
if (fps < _minFps) {
_minFps = fps;
}
notify(fps);
frameStartTime = currentTimeMillis;
framesRendered = 0;
}
} else {
frameStartTime = currentTimeMillis;
}
}
var native;
function ensureNative() {
if (!native) {
native = new fpsNative.FPSCallback(doFrame);
}
}
function reset() {
_minFps = 1e3;
frameStartTime = 0;
framesRendered = 0;
}
exports.reset = reset;
function running() {
if (!native) {
return false;
}
return native.running;
}
exports.running = running;
function minFps() {
return _minFps;
}
exports.minFps = minFps;
function start() {
ensureNative();
native.start();
}
exports.start = start;
function stop() {
if (!native) {
return;
}
native.stop();
reset();
}
exports.stop = stop;
function addCallback(callback) {
var id = idCounter;
callbacks[id] = zonedCallback(callback);
idCounter++;
return id;
}
exports.addCallback = addCallback;
function removeCallback(id) {
if (id in callbacks) {
delete callbacks[id];
}
}
exports.removeCallback = removeCallback;
function notify(fps) {
var callback;
for (var id in callbacks) {
callback = callbacks[id];
callback(fps, _minFps);
}
}
}, function(module, exports) {
var FPSCallback = function() {
function FPSCallback(onFrame) {
var _this = this;
this.running = false;
this.onFrame = onFrame;
this.impl = new android.view.Choreographer.FrameCallback({
doFrame: function(nanos) {
_this.handleFrame(nanos);
}
});
}
FPSCallback.prototype.start = function() {
if (this.running) {
return;
}
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
this.running = true;
};
FPSCallback.prototype.stop = function() {
if (!this.running) {
return;
}
android.view.Choreographer.getInstance().removeFrameCallback(this.impl);
this.running = false;
};
FPSCallback.prototype.handleFrame = function(nanos) {
if (!this.running) {
return;
}
this.onFrame(nanos / 1e6);
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
};
return FPSCallback;
}();
exports.FPSCallback = FPSCallback;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(39);
var common = __webpack_require__(276);
var utils = __webpack_require__(37);
global.moduleMerge(common, exports);
var LocationManager = function() {
function LocationManager() {
this.desiredAccuracy = enums.Accuracy.any;
this.updateDistance = 0;
var alm = utils.ad.getApplicationContext().getSystemService(android.content.Context.LOCATION_SERVICE);
this.androidLocationManager = new AndroidLocationManager(alm);
this.androidLocationManager.minimumUpdateTime = 200;
}
Object.defineProperty(LocationManager.prototype, "android", {
get: function() {
return this.androidLocationManager;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LocationManager.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LocationManager.prototype, "locationListener", {
get: function() {
if (!this._locationListener) {
this._locationListener = new android.location.LocationListener({
onLocationChanged: function(location1) {
if (this._onLocation) {
var location = LocationManager.locationFromAndroidLocation(location1);
if (this.maximumAge) {
if (location.timestamp.valueOf() + this.maximumAge > new Date().valueOf()) {
this._onLocation(location);
}
} else {
this._onLocation(location);
}
}
},
onProviderDisabled: function(provider) {},
onProviderEnabled: function(provider) {},
onStatusChanged: function(arg1, arg2, arg3) {}
});
}
return this._locationListener;
},
enumerable: true,
configurable: true
});
LocationManager.locationFromAndroidLocation = function(androidLocation) {
var location = new common.Location();
location.latitude = androidLocation.getLatitude();
location.longitude = androidLocation.getLongitude();
location.altitude = androidLocation.getAltitude();
location.horizontalAccuracy = androidLocation.getAccuracy();
location.verticalAccuracy = androidLocation.getAccuracy();
location.speed = androidLocation.getSpeed();
location.direction = androidLocation.getBearing();
location.timestamp = new Date(androidLocation.getTime());
location.android = androidLocation;
return location;
};
LocationManager.androidLocationFromLocation = function(location) {
var androidLocation = new android.location.Location("custom");
androidLocation.setLatitude(location.latitude);
androidLocation.setLongitude(location.longitude);
if (location.altitude) {
androidLocation.setAltitude(location.altitude);
}
if (location.speed) {
androidLocation.setSpeed(float(location.speed));
}
if (location.direction) {
androidLocation.setBearing(float(location.direction));
}
if (location.timestamp) {
try {
androidLocation.setTime(long(location.timestamp.getTime()));
} catch (e) {
console.error("invalid location timestamp");
}
}
return androidLocation;
};
LocationManager.isEnabled = function() {
var criteria = new android.location.Criteria();
criteria.setAccuracy(android.location.Criteria.ACCURACY_COARSE);
var lm = utils.ad.getApplicationContext().getSystemService(android.content.Context.LOCATION_SERVICE);
var enabledProviders = lm.getProviders(criteria, true);
return enabledProviders.size() > 0 ? true : false;
};
LocationManager.distance = function(loc1, loc2) {
if (!loc1.android) {
loc1.android = LocationManager.androidLocationFromLocation(loc1);
}
if (!loc2.android) {
loc2.android = LocationManager.androidLocationFromLocation(loc2);
}
return loc1.android.distanceTo(loc2.android);
};
LocationManager.prototype.startLocationMonitoring = function(onLocation, onError, options) {
var criteria = new android.location.Criteria();
if (options) {
if (options.desiredAccuracy) {
this.desiredAccuracy = options.desiredAccuracy;
}
if (options.updateDistance) {
this.updateDistance = options.updateDistance;
}
if (options.minimumUpdateTime) {
this.androidLocationManager.minimumUpdateTime = options.minimumUpdateTime;
}
}
criteria.setAccuracy(this.desiredAccuracy === enums.Accuracy.high ? android.location.Criteria.ACCURACY_FINE : android.location.Criteria.ACCURACY_COARSE);
this.locationListener._onLocation = onLocation;
this.locationListener._onError = onError;
this.locationListener.maximumAge = options && "number" === typeof options.maximumAge ? options.maximumAge : undefined;
try {
this.androidLocationManager.manager.requestLocationUpdates(this.androidLocationManager.minimumUpdateTime, this.updateDistance, criteria, this.locationListener, null);
this.isStarted = true;
} catch (e) {
if (onError) {
onError(e);
}
}
};
LocationManager.prototype.stopLocationMonitoring = function() {
this.androidLocationManager.manager.removeUpdates(this.locationListener);
this.isStarted = false;
};
Object.defineProperty(LocationManager.prototype, "lastKnownLocation", {
get: function() {
var criteria = new android.location.Criteria();
criteria.setAccuracy(this.desiredAccuracy === enums.Accuracy.high ? android.location.Criteria.ACCURACY_FINE : android.location.Criteria.ACCURACY_COARSE);
try {
var providers = this.androidLocationManager.manager.getProviders(criteria, false);
var it = providers.iterator();
var location;
var tempLocation;
while (it.hasNext()) {
var element = it.next();
tempLocation = this.androidLocationManager.manager.getLastKnownLocation(element);
if (!location) {
location = tempLocation;
} else {
if (tempLocation.getTime() < location.getTime()) {
location = tempLocation;
}
}
}
if (location) {
return LocationManager.locationFromAndroidLocation(location);
}
} catch (e) {
console.error(e.message);
}
return null;
},
enumerable: true,
configurable: true
});
LocationManager = __decorate([ Deprecated ], LocationManager);
return LocationManager;
}();
exports.LocationManager = LocationManager;
var AndroidLocationManager = function() {
function AndroidLocationManager(manager) {
this._manager = manager;
}
Object.defineProperty(AndroidLocationManager.prototype, "minimumUpdateTime", {
get: function() {
return this._minimumUpdateTime;
},
set: function(value) {
this._minimumUpdateTime = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidLocationManager.prototype, "manager", {
get: function() {
return this._manager;
},
enumerable: true,
configurable: true
});
AndroidLocationManager = __decorate([ Deprecated ], AndroidLocationManager);
return AndroidLocationManager;
}();
exports.AndroidLocationManager = AndroidLocationManager;
}, function(module, exports, __webpack_require__) {
var defModule = __webpack_require__(275);
var defaultGetLocationTimeout = 2e4;
var Location = function() {
function Location() {}
Location = __decorate([ Deprecated ], Location);
return Location;
}();
exports.Location = Location;
exports.getLocation = function(options) {
var timerId;
var locationManager = new defModule.LocationManager();
if (options && 0 === options.timeout) {
return new Promise(function(resolve, reject) {
var location = locationManager.lastKnownLocation;
if (location) {
if (options && "number" === typeof options.maximumAge) {
if (location.timestamp.valueOf() + options.maximumAge > new Date().valueOf()) {
resolve(location);
} else {
reject(new Error("timeout is 0 and last known location is older than maximumAge"));
}
} else {
resolve(location);
}
} else {
reject(new Error("timeout is 0 and no known location found"));
}
});
}
return new Promise(function(resolve, reject) {
if (!defModule.LocationManager.isEnabled()) {
return reject(new Error("Location service is disabled"));
}
var timer = __webpack_require__(7);
locationManager.startLocationMonitoring(function(location) {
if (options && "number" === typeof options.maximumAge) {
if (location.timestamp.valueOf() + options.maximumAge > new Date().valueOf()) {
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
resolve(location);
}
} else {
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
resolve(location);
}
}, function(error) {
console.error("Location error received: " + error);
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
reject(error);
}, options);
if (options && "number" === typeof options.timeout) {
timerId = timer.setTimeout(function() {
locationManager.stopLocationMonitoring();
reject(new Error("timeout searching for location"));
}, options.timeout || defaultGetLocationTimeout);
}
});
};
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var file_system_1 = __webpack_require__(46);
var NSFileSystem = function() {
function NSFileSystem() {}
NSFileSystem.prototype.currentApp = function() {
return file_system_1.knownFolders.currentApp();
};
NSFileSystem = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", []) ], NSFileSystem);
return NSFileSystem;
}();
exports.NSFileSystem = NSFileSystem;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var forms_1 = __webpack_require__(222);
var text_value_accessor_1 = __webpack_require__(221);
var checked_value_accessor_1 = __webpack_require__(227);
var date_value_accessor_1 = __webpack_require__(228);
var time_value_accessor_1 = __webpack_require__(229);
var number_value_accessor_1 = __webpack_require__(230);
var selectedIndex_value_accessor_1 = __webpack_require__(231);
exports.FORMS_DIRECTIVES = [ text_value_accessor_1.TextValueAccessor, checked_value_accessor_1.CheckedValueAccessor, date_value_accessor_1.DateValueAccessor, time_value_accessor_1.TimeValueAccessor, selectedIndex_value_accessor_1.SelectedIndexValueAccessor, number_value_accessor_1.NumberValueAccessor ];
var NativeScriptFormsModule = function() {
function NativeScriptFormsModule() {}
NativeScriptFormsModule = __decorate([ core_1.NgModule({
declarations: exports.FORMS_DIRECTIVES,
providers: [],
imports: [ forms_1.FormsModule ],
exports: [ forms_1.FormsModule, exports.FORMS_DIRECTIVES ]
}), __metadata("design:paramtypes", []) ], NativeScriptFormsModule);
return NativeScriptFormsModule;
}();
exports.NativeScriptFormsModule = NativeScriptFormsModule;
}, function(module, exports) {
module.exports = function($usbLiveSyncService) {
$usbLiveSyncService.forceExecuteFullSync = false;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var path = __webpack_require__(281);
exports.findProjectDir = function findProjectDir() {
var candidateDir = path.join(__dirname, "..");
while (true) {
var oldCandidateDir = candidateDir;
candidateDir = path.dirname(candidateDir);
if (path.basename(candidateDir) === "node_modules") {
continue;
}
var packageJsonFile = path.join(candidateDir, "package.json");
if (fs.existsSync(packageJsonFile)) {
return candidateDir;
}
if (oldCandidateDir === candidateDir) {
return;
}
}
};
exports.getHooksDir = function getHooksDir() {
return path.join(exports.findProjectDir(), "hooks");
};
exports.getBeforeLivesyncHookDir = function getBeforeLivesyncHookDir() {
return path.join(exports.getHooksDir(), "before-livesync");
};
exports.getHookFilePath = function getHookFilePath() {
return path.join(exports.getBeforeLivesyncHookDir(), "nativescript-angular-sync.js");
};
}, function(module, exports) {
function normalizeArray(parts, allowAboveRoot) {
var up = 0;
for (var i = parts.length - 1; i >= 0; i--) {
var last = parts[i];
if (last === ".") {
parts.splice(i, 1);
} else if (last === "..") {
parts.splice(i, 1);
up++;
} else if (up) {
parts.splice(i, 1);
up--;
}
}
if (allowAboveRoot) {
for (;up--; up) {
parts.unshift("..");
}
}
return parts;
}
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
return splitPathRe.exec(filename).slice(1);
};
exports.resolve = function() {
var resolvedPath = "", resolvedAbsolute = false;
for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
var path = i >= 0 ? arguments[i] : process.cwd();
if (typeof path !== "string") {
throw new TypeError("Arguments to path.resolve must be strings");
} else if (!path) {
continue;
}
resolvedPath = path + "/" + resolvedPath;
resolvedAbsolute = path.charAt(0) === "/";
}
resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
return !!p;
}), !resolvedAbsolute).join("/");
return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
};
exports.normalize = function(path) {
var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
path = normalizeArray(filter(path.split("/"), function(p) {
return !!p;
}), !isAbsolute).join("/");
if (!path && !isAbsolute) {
path = ".";
}
if (path && trailingSlash) {
path += "/";
}
return (isAbsolute ? "/" : "") + path;
};
exports.isAbsolute = function(path) {
return path.charAt(0) === "/";
};
exports.join = function() {
var paths = Array.prototype.slice.call(arguments, 0);
return exports.normalize(filter(paths, function(p, index) {
if (typeof p !== "string") {
throw new TypeError("Arguments to path.join must be strings");
}
return p;
}).join("/"));
};
exports.relative = function(from, to) {
from = exports.resolve(from).substr(1);
to = exports.resolve(to).substr(1);
function trim(arr) {
var start = 0;
for (;start < arr.length; start++) {
if (arr[start] !== "") break;
}
var end = arr.length - 1;
for (;end >= 0; end--) {
if (arr[end] !== "") break;
}
if (start > end) return [];
return arr.slice(start, end - start + 1);
}
var fromParts = trim(from.split("/"));
var toParts = trim(to.split("/"));
var length = Math.min(fromParts.length, toParts.length);
var samePartsLength = length;
for (var i = 0; i < length; i++) {
if (fromParts[i] !== toParts[i]) {
samePartsLength = i;
break;
}
}
var outputParts = [];
for (var i = samePartsLength; i < fromParts.length; i++) {
outputParts.push("..");
}
outputParts = outputParts.concat(toParts.slice(samePartsLength));
return outputParts.join("/");
};
exports.sep = "/";
exports.delimiter = ":";
exports.dirname = function(path) {
var result = splitPath(path), root = result[0], dir = result[1];
if (!root && !dir) {
return ".";
}
if (dir) {
dir = dir.substr(0, dir.length - 1);
}
return root + dir;
};
exports.basename = function(path, ext) {
var f = splitPath(path)[2];
if (ext && f.substr(-1 * ext.length) === ext) {
f = f.substr(0, f.length - ext.length);
}
return f;
};
exports.extname = function(path) {
return splitPath(path)[3];
};
function filter(xs, f) {
if (xs.filter) return xs.filter(f);
var res = [];
for (var i = 0; i < xs.length; i++) {
if (f(xs[i], i, xs)) res.push(xs[i]);
}
return res;
}
var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
return str.substr(start, len);
} : function(str, start, len) {
if (start < 0) start = str.length + start;
return str.substr(start, len);
};
}, function(module, exports, __webpack_require__) {
var http_1 = __webpack_require__(233);
var ns_http_1 = __webpack_require__(283);
var ns_file_system_1 = __webpack_require__(277);
var core_1 = __webpack_require__(156);
var http_2 = __webpack_require__(233);
function nsHttpFactory(backend, options, nsFileSystem) {
return new ns_http_1.NSHttp(backend, options, nsFileSystem);
}
exports.nsHttpFactory = nsHttpFactory;
function nsXSRFStrategyFactory() {
return new ns_http_1.NSXSRFStrategy();
}
exports.nsXSRFStrategyFactory = nsXSRFStrategyFactory;
var NativeScriptHttpModule = function() {
function NativeScriptHttpModule() {}
NativeScriptHttpModule = __decorate([ core_1.NgModule({
providers: [ {
provide: http_2.XSRFStrategy,
useFactory: nsXSRFStrategyFactory
}, ns_file_system_1.NSFileSystem, {
provide: http_1.Http,
useFactory: nsHttpFactory,
deps: [ http_1.XHRBackend, http_1.RequestOptions, ns_file_system_1.NSFileSystem ]
} ],
imports: [ http_2.HttpModule ],
exports: [ http_2.HttpModule ]
}), __metadata("design:paramtypes", []) ], NativeScriptHttpModule);
return NativeScriptHttpModule;
}();
exports.NativeScriptHttpModule = NativeScriptHttpModule;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var http_1 = __webpack_require__(233);
var Observable_1 = __webpack_require__(158);
__webpack_require__(284);
var ns_file_system_1 = __webpack_require__(277);
var NSXSRFStrategy = function() {
function NSXSRFStrategy() {}
NSXSRFStrategy.prototype.configureRequest = function(_req) {};
return NSXSRFStrategy;
}();
exports.NSXSRFStrategy = NSXSRFStrategy;
var NSHttp = function(_super) {
__extends(NSHttp, _super);
function NSHttp(backend, defaultOptions, nsFileSystem) {
_super.call(this, backend, defaultOptions);
this.nsFileSystem = nsFileSystem;
}
NSHttp.prototype.get = function(url, options) {
var _this = this;
if (url.indexOf("~") === 0 || url.indexOf("/") === 0) {
url = url.replace("~", "").replace("/", "");
return Observable_1.Observable.fromPromise(new Promise(function(resolve, reject) {
var app = _this.nsFileSystem.currentApp();
var localFile = app.getFile(url);
if (localFile) {
localFile.readText().then(function(data) {
resolve(responseOptions(data, 200, url));
}, function(err) {
reject(responseOptions(err, 400, url));
});
} else {
reject(responseOptions("Not Found", 404, url));
}
}));
} else {
return _super.prototype.get.call(this, url, options);
}
};
NSHttp = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ http_1.ConnectionBackend, Object, ns_file_system_1.NSFileSystem ]) ], NSHttp);
return NSHttp;
}(http_1.Http);
exports.NSHttp = NSHttp;
function responseOptions(body, status, url) {
return new http_1.Response(new http_1.ResponseOptions({
body: body,
status: status,
statusText: "OK",
type: status === 200 ? http_1.ResponseType.Default : http_1.ResponseType.Error,
url: url
}));
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var fromPromise_1 = __webpack_require__(224);
Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(3));
__export(__webpack_require__(286));
__export(__webpack_require__(287));
__export(__webpack_require__(278));
__export(__webpack_require__(282));
__export(__webpack_require__(215));
__export(__webpack_require__(213));
}, function(module, exports, __webpack_require__) {
var platform_common_1 = __webpack_require__(4);
var core_1 = __webpack_require__(156);
var _platformNativeScript = core_1.createPlatformFactory(core_1.platformCore, "nativeScript", platform_common_1.COMMON_PROVIDERS.slice());
function platformNativeScript(options, extraProviders) {
if (options && options.bootInExistingPage === true) {
return _platformNativeScript(extraProviders);
} else {
return new platform_common_1.NativeScriptPlatformRef(_platformNativeScript(extraProviders), options);
}
}
exports.platformNativeScript = platformNativeScript;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var router_1 = __webpack_require__(235);
var common_1 = __webpack_require__(203);
var ns_router_link_1 = __webpack_require__(288);
var ns_router_link_active_1 = __webpack_require__(292);
var page_router_outlet_1 = __webpack_require__(289);
var ns_location_strategy_1 = __webpack_require__(290);
var ns_platform_location_1 = __webpack_require__(294);
var router_extensions_1 = __webpack_require__(291);
var trace_1 = __webpack_require__(174);
exports.routerTraceCategory = trace_1.routerTraceCategory;
var page_router_outlet_2 = __webpack_require__(289);
exports.PageRoute = page_router_outlet_2.PageRoute;
var router_extensions_2 = __webpack_require__(291);
exports.RouterExtensions = router_extensions_2.RouterExtensions;
var nativescript_module_1 = __webpack_require__(205);
var NativeScriptRouterModule = function() {
function NativeScriptRouterModule() {}
NativeScriptRouterModule.forRoot = function(routes, config) {
return router_1.RouterModule.forRoot(routes, config);
};
NativeScriptRouterModule.forChild = function(routes) {
return router_1.RouterModule.forChild(routes);
};
NativeScriptRouterModule = __decorate([ core_1.NgModule({
declarations: [ ns_router_link_1.NSRouterLink, ns_router_link_active_1.NSRouterLinkActive, page_router_outlet_1.PageRouterOutlet ],
providers: [ ns_location_strategy_1.NSLocationStrategy, {
provide: common_1.LocationStrategy,
useExisting: ns_location_strategy_1.NSLocationStrategy
}, ns_platform_location_1.NativescriptPlatformLocation, {
provide: common_1.PlatformLocation,
useClass: ns_platform_location_1.NativescriptPlatformLocation
}, router_extensions_1.RouterExtensions ],
imports: [ router_1.RouterModule, nativescript_module_1.NativeScriptModule ],
exports: [ router_1.RouterModule, ns_router_link_1.NSRouterLink, ns_router_link_active_1.NSRouterLinkActive, page_router_outlet_1.PageRouterOutlet ],
schemas: [ core_1.NO_ERRORS_SCHEMA ]
}), __metadata("design:paramtypes", []) ], NativeScriptRouterModule);
return NativeScriptRouterModule;
}();
exports.NativeScriptRouterModule = NativeScriptRouterModule;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var router_1 = __webpack_require__(235);
var trace_1 = __webpack_require__(174);
var page_router_outlet_1 = __webpack_require__(289);
var router_extensions_1 = __webpack_require__(291);
var types_1 = __webpack_require__(14);
var NSRouterLink = function() {
function NSRouterLink(router, navigator, route, pageRoute) {
this.router = router;
this.navigator = navigator;
this.route = route;
this.pageRoute = pageRoute;
this.commands = [];
this.pageTransition = true;
this.usePageRoute = this.pageRoute && this.route === this.pageRoute.activatedRoute.getValue();
}
Object.defineProperty(NSRouterLink.prototype, "currentRoute", {
get: function() {
return this.usePageRoute ? this.pageRoute.activatedRoute.getValue() : this.route;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NSRouterLink.prototype, "params", {
set: function(data) {
if (Array.isArray(data)) {
this.commands = data;
} else {
this.commands = [ data ];
}
},
enumerable: true,
configurable: true
});
NSRouterLink.prototype.onTap = function() {
trace_1.routerLog("nsRouterLink.tapped: " + this.commands + " usePageRoute: " + this.usePageRoute + " clearHistory: " + this.clearHistory + " transition: " + JSON.stringify(this.pageTransition));
var transition = this.getTransition();
var extras = {
relativeTo: this.currentRoute,
queryParams: this.queryParams,
fragment: this.fragment,
clearHistory: this.clearHistory,
animated: transition.animated,
transition: transition.transition
};
this.navigator.navigate(this.commands, extras);
};
NSRouterLink.prototype.getTransition = function() {
if (typeof this.pageTransition === "boolean") {
return {
animated: this.pageTransition
};
} else if (types_1.isString(this.pageTransition)) {
if (this.pageTransition === "none" || this.pageTransition === "false") {
return {
animated: false
};
} else {
return {
animated: true,
transition: {
name: this.pageTransition
}
};
}
} else {
return {
animated: true,
transition: this.pageTransition
};
}
};
NSRouterLink.prototype.ngOnChanges = function(_) {
this.updateUrlTree();
};
NSRouterLink.prototype.updateUrlTree = function() {
this.urlTree = this.router.createUrlTree(this.commands, {
relativeTo: this.currentRoute,
queryParams: this.queryParams,
fragment: this.fragment
});
};
__decorate([ core_1.Input(), __metadata("design:type", String) ], NSRouterLink.prototype, "target", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], NSRouterLink.prototype, "queryParams", void 0);
__decorate([ core_1.Input(), __metadata("design:type", String) ], NSRouterLink.prototype, "fragment", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Boolean) ], NSRouterLink.prototype, "clearHistory", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], NSRouterLink.prototype, "pageTransition", void 0);
__decorate([ core_1.Input("nsRouterLink"), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], NSRouterLink.prototype, "params", null);
__decorate([ core_1.HostListener("tap"), __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0) ], NSRouterLink.prototype, "onTap", null);
NSRouterLink = __decorate([ core_1.Directive({
selector: "[nsRouterLink]"
}), __param(3, core_1.Optional()), __metadata("design:paramtypes", [ router_1.Router, router_extensions_1.RouterExtensions, router_1.ActivatedRoute, page_router_outlet_1.PageRoute ]) ], NSRouterLink);
return NSRouterLink;
}();
exports.NSRouterLink = NSRouterLink;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var lang_facade_1 = __webpack_require__(200);
var router_1 = __webpack_require__(235);
var ns_location_strategy_1 = __webpack_require__(290);
var platform_providers_1 = __webpack_require__(175);
var trace_1 = __webpack_require__(174);
var detached_loader_1 = __webpack_require__(213);
var view_util_1 = __webpack_require__(207);
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(89);
var BehaviorSubject_1 = __webpack_require__(236);
var PageRoute = function() {
function PageRoute(startRoute) {
this.activatedRoute = new BehaviorSubject_1.BehaviorSubject(startRoute);
}
return PageRoute;
}();
exports.PageRoute = PageRoute;
var RefCache = function() {
function RefCache() {
this.cache = new Array();
}
RefCache.prototype.push = function(componentRef, reusedRoute, outletMap, loaderRef) {
this.cache.push({
componentRef: componentRef,
reusedRoute: reusedRoute,
outletMap: outletMap,
loaderRef: loaderRef
});
};
RefCache.prototype.pop = function() {
return this.cache.pop();
};
RefCache.prototype.peek = function() {
return this.cache[this.cache.length - 1];
};
Object.defineProperty(RefCache.prototype, "length", {
get: function() {
return this.cache.length;
},
enumerable: true,
configurable: true
});
return RefCache;
}();
var PageRouterOutlet = function() {
function PageRouterOutlet(parentOutletMap, containerRef, name, locationStrategy, componentFactoryResolver, resolver, frame, device, pageFactory) {
this.containerRef = containerRef;
this.locationStrategy = locationStrategy;
this.componentFactoryResolver = componentFactoryResolver;
this.resolver = resolver;
this.frame = frame;
this.pageFactory = pageFactory;
this.refCache = new RefCache();
this.isInitialPage = true;
parentOutletMap.registerOutlet(name ? name : router_1.PRIMARY_OUTLET, this);
this.viewUtil = new view_util_1.ViewUtil(device);
this.detachedLoaderFactory = resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);
log("DetachedLoaderFactory loaded");
}
Object.defineProperty(PageRouterOutlet.prototype, "locationInjector", {
get: function() {
return this.containerRef.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "locationFactoryResolver", {
get: function() {
return this.resolver;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "isActivated", {
get: function() {
return !!this.currentActivatedComp;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "component", {
get: function() {
if (!this.currentActivatedComp) {
throw new Error("Outlet is not activated");
}
return this.currentActivatedComp.instance;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "activatedRoute", {
get: function() {
if (!this.currentActivatedComp) {
throw new Error("Outlet is not activated");
}
return this.currentActivatedRoute;
},
enumerable: true,
configurable: true
});
PageRouterOutlet.prototype.deactivate = function() {
if (this.locationStrategy._isPageNavigatingBack()) {
log("PageRouterOutlet.deactivate() while going back - should destroy");
var poppedItem = this.refCache.pop();
var poppedRef = poppedItem.componentRef;
if (this.currentActivatedComp !== poppedRef) {
throw new Error("Current componentRef is different for cached componentRef");
}
this.destroyCacheItem(poppedItem);
this.currentActivatedComp = null;
} else {
log("PageRouterOutlet.deactivate() while going forward - do nothing");
}
};
PageRouterOutlet.prototype.clearRefCache = function() {
while (this.refCache.length > 0) {
this.destroyCacheItem(this.refCache.pop());
}
};
PageRouterOutlet.prototype.destroyCacheItem = function(poppedItem) {
if (lang_facade_1.isPresent(poppedItem.componentRef)) {
poppedItem.componentRef.destroy();
}
if (lang_facade_1.isPresent(poppedItem.loaderRef)) {
poppedItem.loaderRef.destroy();
}
};
PageRouterOutlet.prototype.activate = function(activatedRoute, resolver, injector, providers, outletMap) {
this.outletMap = outletMap;
this.currentActivatedRoute = activatedRoute;
if (this.locationStrategy._isPageNavigatingBack()) {
this.activateOnGoBack(activatedRoute, outletMap);
} else {
this.activateOnGoForward(activatedRoute, providers, outletMap, resolver, injector);
}
};
PageRouterOutlet.prototype.activateOnGoForward = function(activatedRoute, providers, outletMap, loadedResolver, injector) {
var factory = this.getComponentFactory(activatedRoute, loadedResolver);
var pageRoute = new PageRoute(activatedRoute);
providers = providers.concat(core_1.ReflectiveInjector.resolve([ {
provide: PageRoute,
useValue: pageRoute
} ]));
if (this.isInitialPage) {
log("PageRouterOutlet.activate() initial page - just load component");
this.isInitialPage = false;
var inj = core_1.ReflectiveInjector.fromResolvedProviders(providers, injector);
this.currentActivatedComp = this.containerRef.createComponent(factory, this.containerRef.length, inj, []);
this.refCache.push(this.currentActivatedComp, pageRoute, outletMap, null);
} else {
log("PageRouterOutlet.activate() forward navigation - " + "create detached loader in the loader container");
var page = this.pageFactory({
isNavigation: true,
componentType: factory.componentType
});
var pageResolvedProvider = core_1.ReflectiveInjector.resolve([ {
provide: page_1.Page,
useValue: page
} ]);
var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers.concat(pageResolvedProvider), injector);
var loaderRef = this.containerRef.createComponent(this.detachedLoaderFactory, this.containerRef.length, childInjector, []);
this.currentActivatedComp = loaderRef.instance.loadWithFactory(factory);
this.loadComponentInPage(page, this.currentActivatedComp);
this.refCache.push(this.currentActivatedComp, pageRoute, outletMap, loaderRef);
}
};
PageRouterOutlet.prototype.activateOnGoBack = function(activatedRoute, outletMap) {
log("PageRouterOutlet.activate() - Back navigation, so load from cache");
this.locationStrategy._finishBackPageNavigation();
var cacheItem = this.refCache.peek();
cacheItem.reusedRoute.activatedRoute.next(activatedRoute);
this.outletMap = cacheItem.outletMap;
Object.assign(outletMap, cacheItem.outletMap);
this.currentActivatedComp = cacheItem.componentRef;
};
PageRouterOutlet.prototype.loadComponentInPage = function(page, componentRef) {
var _this = this;
var componentView = componentRef.location.nativeElement;
this.viewUtil.removeChild(componentView.parent, componentView);
page.content = componentView;
page.on("navigatedFrom", global.Zone.current.wrap(function(args) {
if (args.isBackNavigation) {
_this.locationStrategy._beginBackPageNavigation();
_this.locationStrategy.back();
}
}));
var navOptions = this.locationStrategy._beginPageNavigation();
this.frame.navigate({
create: function() {
return page;
},
clearHistory: navOptions.clearHistory,
animated: navOptions.animated,
transition: navOptions.transition
});
if (navOptions.clearHistory) {
this.clearRefCache();
}
};
PageRouterOutlet.prototype.getComponentFactory = function(activatedRoute, loadedResolver) {
var snapshot = activatedRoute._futureSnapshot;
var component = snapshot._routeConfig.component;
var factory;
if (loadedResolver) {
factory = loadedResolver.resolveComponentFactory(component);
} else {
factory = this.componentFactoryResolver.resolveComponentFactory(component);
}
return factory;
};
PageRouterOutlet = __decorate([ core_1.Directive({
selector: "page-router-outlet"
}), __param(2, core_1.Attribute("name")), __param(7, core_1.Inject(platform_providers_1.DEVICE)), __param(8, core_1.Inject(platform_providers_1.PAGE_FACTORY)), __metadata("design:paramtypes", [ router_1.RouterOutletMap, core_1.ViewContainerRef, String, ns_location_strategy_1.NSLocationStrategy, core_1.ComponentFactoryResolver, core_1.ComponentFactoryResolver, frame_1.Frame, Object, Function ]) ], PageRouterOutlet);
return PageRouterOutlet;
}();
exports.PageRouterOutlet = PageRouterOutlet;
function log(msg) {
trace_1.routerLog(msg);
}
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var common_1 = __webpack_require__(203);
var trace_1 = __webpack_require__(174);
var frame_1 = __webpack_require__(10);
var lang_facade_1 = __webpack_require__(200);
var defaultNavOptions = {
clearHistory: false,
animated: true
};
var NSLocationStrategy = function(_super) {
__extends(NSLocationStrategy, _super);
function NSLocationStrategy(frame) {
_super.call(this);
this.frame = frame;
this.states = new Array();
this.popStateCallbacks = new Array();
this._isPageNavigationgBack = false;
trace_1.routerLog("NSLocationStrategy.constructor()");
}
NSLocationStrategy.prototype.path = function() {
var state = this.peekState();
var result = state ? state.url : "/";
trace_1.routerLog("NSLocationStrategy.path(): " + result);
return result;
};
NSLocationStrategy.prototype.prepareExternalUrl = function(internal) {
trace_1.routerLog("NSLocationStrategy.prepareExternalUrl() internal: " + internal);
return internal;
};
NSLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
trace_1.routerLog("NSLocationStrategy.pushState state: " + (state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams));
this.pushStateInternal(state, title, url, queryParams);
};
NSLocationStrategy.prototype.pushStateInternal = function(state, title, url, queryParams) {
var isNewPage = this.states.length === 0;
this.states.push({
state: state,
title: title,
url: url,
queryParams: queryParams,
isPageNavigation: isNewPage
});
};
NSLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
if (this.states.length > 0) {
trace_1.routerLog("NSLocationStrategy.replaceState changing exisitng state: " + (state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams));
var topState = this.peekState();
topState.state = state;
topState.title = title;
topState.url = url;
topState.queryParams = queryParams;
} else {
trace_1.routerLog("NSLocationStrategy.replaceState pushing new state: " + (state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams));
this.pushStateInternal(state, title, url, queryParams);
}
};
NSLocationStrategy.prototype.forward = function() {
throw new Error("NSLocationStrategy.forward() - not implemented");
};
NSLocationStrategy.prototype.back = function() {
if (this._isPageNavigationgBack) {
var state = this.states.pop();
var count = 1;
while (!state.isPageNavigation) {
state = this.states.pop();
count++;
}
trace_1.routerLog("NSLocationStrategy.back() while navigating back. States popped: " + count);
this.callPopState(state, true);
} else {
var state = this.peekState();
if (state.isPageNavigation) {
trace_1.routerLog("NSLocationStrategy.back() while not navigating back but top" + " state is page - will call frame.goback()");
this.frame.goBack();
} else {
trace_1.routerLog("NSLocationStrategy.back() while not navigating back but top" + " state is not page - just pop");
this.callPopState(this.states.pop(), true);
}
}
};
NSLocationStrategy.prototype.canGoBack = function() {
return this.states.length > 1;
};
NSLocationStrategy.prototype.onPopState = function(fn) {
trace_1.routerLog("NSLocationStrategy.onPopState");
this.popStateCallbacks.push(fn);
};
NSLocationStrategy.prototype.getBaseHref = function() {
trace_1.routerLog("NSLocationStrategy.getBaseHref()");
return "";
};
NSLocationStrategy.prototype.callPopState = function(state, pop) {
if (pop === void 0) {
pop = true;
}
var change = {
url: state.url,
pop: pop
};
for (var _i = 0, _a = this.popStateCallbacks; _i < _a.length; _i++) {
var fn = _a[_i];
fn(change);
}
};
NSLocationStrategy.prototype.peekState = function() {
if (this.states.length > 0) {
return this.states[this.states.length - 1];
}
return null;
};
NSLocationStrategy.prototype.toString = function() {
return this.states.map(function(v, i) {
return i + ".[" + (v.isPageNavigation ? "PAGE" : "INTERNAL") + '] "' + v.url + '"';
}).reverse().join("\n");
};
NSLocationStrategy.prototype._beginBackPageNavigation = function() {
trace_1.routerLog("NSLocationStrategy.startGoBack()");
if (this._isPageNavigationgBack) {
throw new Error("Calling startGoBack while going back.");
}
this._isPageNavigationgBack = true;
};
NSLocationStrategy.prototype._finishBackPageNavigation = function() {
trace_1.routerLog("NSLocationStrategy.finishBackPageNavigation()");
if (!this._isPageNavigationgBack) {
throw new Error("Calling endGoBack while not going back.");
}
this._isPageNavigationgBack = false;
};
NSLocationStrategy.prototype._isPageNavigatingBack = function() {
return this._isPageNavigationgBack;
};
NSLocationStrategy.prototype._beginPageNavigation = function() {
trace_1.routerLog("NSLocationStrategy._beginPageNavigation()");
var lastState = this.peekState();
if (lastState) {
lastState.isPageNavigation = true;
}
var navOptions = this._currentNavigationOptions || defaultNavOptions;
if (navOptions.clearHistory) {
trace_1.routerLog("NSLocationStrategy._beginPageNavigation clearing states history");
this.states = [ lastState ];
}
this._currentNavigationOptions = undefined;
return navOptions;
};
NSLocationStrategy.prototype._setNavigationOptions = function(options) {
this._currentNavigationOptions = {
clearHistory: lang_facade_1.isPresent(options.clearHistory) ? options.clearHistory : false,
animated: lang_facade_1.isPresent(options.animated) ? options.animated : true,
transition: options.transition
};
trace_1.routerLog("NSLocationStrategy._setNavigationOptions(" + (JSON.stringify(this._currentNavigationOptions) + ")"));
};
NSLocationStrategy.prototype._getSatates = function() {
return this.states.slice();
};
NSLocationStrategy = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ frame_1.Frame ]) ], NSLocationStrategy);
return NSLocationStrategy;
}(common_1.LocationStrategy);
exports.NSLocationStrategy = NSLocationStrategy;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var router_1 = __webpack_require__(235);
var ns_location_strategy_1 = __webpack_require__(290);
var frame_1 = __webpack_require__(10);
var RouterExtensions = function() {
function RouterExtensions(router, locationStrategy, frame) {
this.router = router;
this.locationStrategy = locationStrategy;
this.frame = frame;
}
RouterExtensions.prototype.navigate = function(commands, extras) {
if (extras) {
this.locationStrategy._setNavigationOptions(extras);
}
return this.router.navigate(commands, extras);
};
RouterExtensions.prototype.navigateByUrl = function(url, options) {
if (options) {
this.locationStrategy._setNavigationOptions(options);
}
return this.router.navigateByUrl(url);
};
RouterExtensions.prototype.back = function() {
this.locationStrategy.back();
};
RouterExtensions.prototype.canGoBack = function() {
return this.locationStrategy.canGoBack();
};
RouterExtensions.prototype.backToPreviousPage = function() {
this.frame.goBack();
};
RouterExtensions.prototype.canGoBackToPreviousPage = function() {
return this.frame.canGoBack();
};
RouterExtensions = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ router_1.Router, ns_location_strategy_1.NSLocationStrategy, frame_1.Frame ]) ], RouterExtensions);
return RouterExtensions;
}();
exports.RouterExtensions = RouterExtensions;
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
var router_1 = __webpack_require__(235);
var router_url_tree_1 = __webpack_require__(293);
var ns_router_link_1 = __webpack_require__(288);
var NSRouterLinkActive = function() {
function NSRouterLinkActive(router, element, renderer) {
var _this = this;
this.router = router;
this.element = element;
this.renderer = renderer;
this.classes = [];
this.nsRouterLinkActiveOptions = {
exact: false
};
this.subscription = router.events.subscribe(function(s) {
if (s instanceof router_1.NavigationEnd) {
_this.update();
}
});
}
NSRouterLinkActive.prototype.ngAfterContentInit = function() {
var _this = this;
this.links.changes.subscribe(function() {
return _this.update();
});
this.update();
};
Object.defineProperty(NSRouterLinkActive.prototype, "nsRouterLinkActive", {
set: function(data) {
if (Array.isArray(data)) {
this.classes = data;
} else {
this.classes = data.split(" ");
}
},
enumerable: true,
configurable: true
});
NSRouterLinkActive.prototype.ngOnChanges = function(_) {
this.update();
};
NSRouterLinkActive.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
NSRouterLinkActive.prototype.update = function() {
var _this = this;
if (!this.links) {
return;
}
var currentUrlTree = this.router.parseUrl(this.router.url);
var isActiveLinks = this.reduceList(currentUrlTree, this.links);
this.classes.forEach(function(c) {
return _this.renderer.setElementClass(_this.element.nativeElement, c, isActiveLinks);
});
};
NSRouterLinkActive.prototype.reduceList = function(currentUrlTree, q) {
var _this = this;
return q.reduce(function(res, link) {
return res || router_url_tree_1.containsTree(currentUrlTree, link.urlTree, _this.nsRouterLinkActiveOptions.exact);
}, false);
};
__decorate([ core_1.ContentChildren(ns_router_link_1.NSRouterLink), __metadata("design:type", core_1.QueryList) ], NSRouterLinkActive.prototype, "links", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], NSRouterLinkActive.prototype, "nsRouterLinkActiveOptions", void 0);
__decorate([ core_1.Input("nsRouterLinkActive"), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], NSRouterLinkActive.prototype, "nsRouterLinkActive", null);
NSRouterLinkActive = __decorate([ core_1.Directive({
selector: "[nsRouterLinkActive]"
}), __metadata("design:paramtypes", [ router_1.Router, core_1.ElementRef, core_1.Renderer ]) ], NSRouterLinkActive);
return NSRouterLinkActive;
}();
exports.NSRouterLinkActive = NSRouterLinkActive;
}, function(module, exports, __webpack_require__) {
var router_1 = __webpack_require__(235);
function containsTree(container, containee, exact) {
if (exact) {
return equalSegmentGroups(container.root, containee.root);
} else {
return containsSegmentGroup(container.root, containee.root);
}
}
exports.containsTree = containsTree;
function equalSegmentGroups(container, containee) {
if (!equalPath(container.segments, containee.segments)) {
return false;
}
if (container.numberOfChildren !== containee.numberOfChildren) {
return false;
}
for (var c in containee.children) {
if (!container.children[c]) {
return false;
}
if (!equalSegmentGroups(container.children[c], containee.children[c])) {
return false;
}
}
return true;
}
function containsSegmentGroup(container, containee) {
return containsSegmentGroupHelper(container, containee, containee.segments);
}
function containsSegmentGroupHelper(container, containee, containeePaths) {
if (container.segments.length > containeePaths.length) {
var current = container.segments.slice(0, containeePaths.length);
if (!equalPath(current, containeePaths)) {
return false;
}
if (containee.hasChildren()) {
return false;
}
return true;
} else if (container.segments.length === containeePaths.length) {
if (!equalPath(container.segments, containeePaths)) {
return false;
}
for (var c in containee.children) {
if (!container.children[c]) {
return false;
}
if (!containsSegmentGroup(container.children[c], containee.children[c])) {
return false;
}
}
return true;
} else {
var current = containeePaths.slice(0, container.segments.length);
var next = containeePaths.slice(container.segments.length);
if (!equalPath(container.segments, current)) {
return false;
}
if (!container.children[router_1.PRIMARY_OUTLET]) {
return false;
}
return containsSegmentGroupHelper(container.children[router_1.PRIMARY_OUTLET], containee, next);
}
}
function equalPath(a, b) {
if (a.length !== b.length) {
return false;
}
for (var i = 0; i < a.length; ++i) {
if (a[i].path !== b[i].path) {
return false;
}
}
return true;
}
exports.equalPath = equalPath;
}, function(module, exports, __webpack_require__) {
var ns_location_strategy_1 = __webpack_require__(290);
var common_1 = __webpack_require__(203);
var core_1 = __webpack_require__(156);
var trace_1 = __webpack_require__(174);
var NativescriptPlatformLocation = function(_super) {
__extends(NativescriptPlatformLocation, _super);
function NativescriptPlatformLocation(locationStartegy) {
_super.call(this);
this.locationStartegy = locationStartegy;
trace_1.routerLog("NativescriptPlatformLocation.constructor()");
}
NativescriptPlatformLocation.prototype.getBaseHrefFromDOM = function() {
return "/";
};
NativescriptPlatformLocation.prototype.onPopState = function(fn) {
this.locationStartegy.onPopState(fn);
};
NativescriptPlatformLocation.prototype.onHashChange = function(_fn) {};
Object.defineProperty(NativescriptPlatformLocation.prototype, "search", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativescriptPlatformLocation.prototype, "hash", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativescriptPlatformLocation.prototype, "pathname", {
get: function() {
return this.locationStartegy.path();
},
set: function(_newPath) {
throw new Error("NativescriptPlatformLocation set pathname - not implemented");
},
enumerable: true,
configurable: true
});
NativescriptPlatformLocation.prototype.pushState = function(state, title, url) {
this.locationStartegy.pushState(state, title, url, null);
};
NativescriptPlatformLocation.prototype.replaceState = function(state, title, url) {
this.locationStartegy.replaceState(state, title, url, null);
};
NativescriptPlatformLocation.prototype.forward = function() {
throw new Error("NativescriptPlatformLocation.forward() - not implemented");
};
NativescriptPlatformLocation.prototype.back = function() {
this.locationStartegy.back();
};
NativescriptPlatformLocation = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ ns_location_strategy_1.NSLocationStrategy ]) ], NativescriptPlatformLocation);
return NativescriptPlatformLocation;
}(common_1.PlatformLocation);
exports.NativescriptPlatformLocation = NativescriptPlatformLocation;
}, function(module, exports, __webpack_require__) {
var dialogs_1 = __webpack_require__(214);
exports.ModalDialogHost = dialogs_1.ModalDialogHost;
exports.ModalDialogParams = dialogs_1.ModalDialogParams;
exports.ModalDialogService = dialogs_1.ModalDialogService;
}, , , , function(module, exports, __webpack_require__) {
var __WEBPACK_AMD_DEFINE_RESULT__;
(function(module) {
(function(root) {
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = typeof module == "object" && module && !module.nodeType && module;
var freeGlobal = typeof global == "object" && global;
if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
root = freeGlobal;
}
var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
overflow: "Overflow: input needs wider integers to process",
"not-basic": "Illegal input >= 0x80 (not a basic code point)",
"invalid-input": "Invalid input"
}, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
function error(type) {
throw RangeError(errors[type]);
}
function map(array, fn) {
var length = array.length;
var result = [];
while (length--) {
result[length] = fn(array[length]);
}
return result;
}
function mapDomain(string, fn) {
var parts = string.split("@");
var result = "";
if (parts.length > 1) {
result = parts[0] + "@";
string = parts[1];
}
string = string.replace(regexSeparators, ".");
var labels = string.split(".");
var encoded = map(labels, fn).join(".");
return result + encoded;
}
function ucs2decode(string) {
var output = [], counter = 0, length = string.length, value, extra;
while (counter < length) {
value = string.charCodeAt(counter++);
if (value >= 55296 && value <= 56319 && counter < length) {
extra = string.charCodeAt(counter++);
if ((extra & 64512) == 56320) {
output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
} else {
output.push(value);
counter--;
}
} else {
output.push(value);
}
}
return output;
}
function ucs2encode(array) {
return map(array, function(value) {
var output = "";
if (value > 65535) {
value -= 65536;
output += stringFromCharCode(value >>> 10 & 1023 | 55296);
value = 56320 | value & 1023;
}
output += stringFromCharCode(value);
return output;
}).join("");
}
function basicToDigit(codePoint) {
if (codePoint - 48 < 10) {
return codePoint - 22;
}
if (codePoint - 65 < 26) {
return codePoint - 65;
}
if (codePoint - 97 < 26) {
return codePoint - 97;
}
return base;
}
function digitToBasic(digit, flag) {
return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}
function adapt(delta, numPoints, firstTime) {
var k = 0;
delta = firstTime ? floor(delta / damp) : delta >> 1;
delta += floor(delta / numPoints);
for (;delta > baseMinusTMin * tMax >> 1; k += base) {
delta = floor(delta / baseMinusTMin);
}
return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}
function decode(input) {
var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
basic = input.lastIndexOf(delimiter);
if (basic < 0) {
basic = 0;
}
for (j = 0; j < basic; ++j) {
if (input.charCodeAt(j) >= 128) {
error("not-basic");
}
output.push(input.charCodeAt(j));
}
for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
for (oldi = i, w = 1, k = base; ;k += base) {
if (index >= inputLength) {
error("invalid-input");
}
digit = basicToDigit(input.charCodeAt(index++));
if (digit >= base || digit > floor((maxInt - i) / w)) {
error("overflow");
}
i += digit * w;
t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
if (digit < t) {
break;
}
baseMinusT = base - t;
if (w > floor(maxInt / baseMinusT)) {
error("overflow");
}
w *= baseMinusT;
}
out = output.length + 1;
bias = adapt(i - oldi, out, oldi == 0);
if (floor(i / out) > maxInt - n) {
error("overflow");
}
n += floor(i / out);
i %= out;
output.splice(i++, 0, n);
}
return ucs2encode(output);
}
function encode(input) {
var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
input = ucs2decode(input);
inputLength = input.length;
n = initialN;
delta = 0;
bias = initialBias;
for (j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue < 128) {
output.push(stringFromCharCode(currentValue));
}
}
handledCPCount = basicLength = output.length;
if (basicLength) {
output.push(delimiter);
}
while (handledCPCount < inputLength) {
for (m = maxInt, j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue >= n && currentValue < m) {
m = currentValue;
}
}
handledCPCountPlusOne = handledCPCount + 1;
if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
error("overflow");
}
delta += (m - n) * handledCPCountPlusOne;
n = m;
for (j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue < n && ++delta > maxInt) {
error("overflow");
}
if (currentValue == n) {
for (q = delta, k = base; ;k += base) {
t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
if (q < t) {
break;
}
qMinusT = q - t;
baseMinusT = base - t;
output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
q = floor(qMinusT / baseMinusT);
}
output.push(stringFromCharCode(digitToBasic(q, 0)));
bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
delta = 0;
++handledCPCount;
}
}
++delta;
++n;
}
return output.join("");
}
function toUnicode(input) {
return mapDomain(input, function(string) {
return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
});
}
function toASCII(input) {
return mapDomain(input, function(string) {
return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
});
}
punycode = {
version: "1.3.2",
ucs2: {
decode: ucs2decode,
encode: ucs2encode
},
decode: decode,
encode: encode,
toASCII: toASCII,
toUnicode: toUnicode
};
if (true) {
!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
return punycode;
}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else if (freeExports && freeModule) {
if (module.exports == freeExports) {
freeModule.exports = punycode;
} else {
for (key in punycode) {
punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
}
}
} else {
root.punycode = punycode;
}
})(this);
}).call(exports, __webpack_require__(300)(module));
}, function(module, exports) {
module.exports = function(module) {
if (!module.webpackPolyfill) {
module.deprecate = function() {};
module.paths = [];
module.children = [];
module.webpackPolyfill = 1;
}
return module;
};
}, function(module, exports) {
"use strict";
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
sep = sep || "&";
eq = eq || "=";
var obj = {};
if (typeof qs !== "string" || qs.length === 0) {
return obj;
}
var regexp = /\+/g;
qs = qs.split(sep);
var maxKeys = 1e3;
if (options && typeof options.maxKeys === "number") {
maxKeys = options.maxKeys;
}
var len = qs.length;
if (maxKeys > 0 && len > maxKeys) {
len = maxKeys;
}
for (var i = 0; i < len; ++i) {
var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
if (idx >= 0) {
kstr = x.substr(0, idx);
vstr = x.substr(idx + 1);
} else {
kstr = x;
vstr = "";
}
k = decodeURIComponent(kstr);
v = decodeURIComponent(vstr);
if (!hasOwnProperty(obj, k)) {
obj[k] = v;
} else if (Array.isArray(obj[k])) {
obj[k].push(v);
} else {
obj[k] = [ obj[k], v ];
}
}
return obj;
};
}, function(module, exports) {
"use strict";
var stringifyPrimitive = function(v) {
switch (typeof v) {
case "string":
return v;

case "boolean":
return v ? "true" : "false";

case "number":
return isFinite(v) ? v : "";

default:
return "";
}
};
module.exports = function(obj, sep, eq, name) {
sep = sep || "&";
eq = eq || "=";
if (obj === null) {
obj = undefined;
}
if (typeof obj === "object") {
return Object.keys(obj).map(function(k) {
var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
if (Array.isArray(obj[k])) {
return obj[k].map(function(v) {
return ks + encodeURIComponent(stringifyPrimitive(v));
}).join(sep);
} else {
return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
}
}).join(sep);
}
if (!name) return "";
return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
}, function(module, exports, __webpack_require__) {
"use strict";
exports.decode = exports.parse = __webpack_require__(301);
exports.encode = exports.stringify = __webpack_require__(302);
}, function(module, exports, __webpack_require__) {
"use strict";
__webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "test"');
e.code = "MODULE_NOT_FOUND";
throw e;
}()).run(__webpack_require__(305));
}, function(module, exports, __webpack_require__) {
"use strict";
var qs = __webpack_require__(303);
var qsTestCases = [ [ "foo=918854443121279438895193", "foo=918854443121279438895193", {
foo: "918854443121279438895193"
} ], [ "foo=bar", "foo=bar", {
foo: "bar"
} ], [ "foo=bar&foo=quux", "foo=bar&foo=quux", {
foo: [ "bar", "quux" ]
} ], [ "foo=1&bar=2", "foo=1&bar=2", {
foo: "1",
bar: "2"
} ], [ "my+weird+field=q1%212%22%27w%245%267%2Fz8%29%3F", "my%20weird%20field=q1!2%22'w%245%267%2Fz8)%3F", {
"my weird field": "q1!2\"'w$5&7/z8)?"
} ], [ "foo%3Dbaz=bar", "foo%3Dbaz=bar", {
"foo=baz": "bar"
} ], [ "foo=baz=bar", "foo=baz%3Dbar", {
foo: "baz=bar"
} ], [ "str=foo&arr=1&arr=2&arr=3&somenull=&undef=", "str=foo&arr=1&arr=2&arr=3&somenull=&undef=", {
str: "foo",
arr: [ "1", "2", "3" ],
somenull: "",
undef: ""
} ], [ " foo = bar ", "%20foo%20=%20bar%20", {
" foo ": " bar "
} ], [ "foo=%EF%BF%BD", "foo=%EF%BF%BD", {
foo: "�"
} ], [ "hasOwnProperty=x&toString=foo&valueOf=bar&__defineGetter__=baz", "hasOwnProperty=x&toString=foo&valueOf=bar&__defineGetter__=baz", {
hasOwnProperty: "x",
toString: "foo",
valueOf: "bar",
__defineGetter__: "baz"
} ], [ "foo&bar=baz", "foo=&bar=baz", {
foo: "",
bar: "baz"
} ] ];
var qsColonTestCases = [ [ "foo:bar", "foo:bar", {
foo: "bar"
} ], [ "foo:bar;foo:quux", "foo:bar;foo:quux", {
foo: [ "bar", "quux" ]
} ], [ "foo:1&bar:2;baz:quux", "foo:1%26bar%3A2;baz:quux", {
foo: "1&bar:2",
baz: "quux"
} ], [ "foo%3Abaz:bar", "foo%3Abaz:bar", {
"foo:baz": "bar"
} ], [ "foo:baz:bar", "foo:baz%3Abar", {
foo: "baz:bar"
} ] ];
var extendedFunction = function() {};
extendedFunction.prototype = {
a: "b"
};
var qsWeirdObjects = [ [ {
regexp: /./g
}, "regexp=", {
regexp: ""
} ], [ {
regexp: new RegExp(".", "g")
}, "regexp=", {
regexp: ""
} ], [ {
fn: function() {}
}, "fn=", {
fn: ""
} ], [ {
fn: new Function("")
}, "fn=", {
fn: ""
} ], [ {
math: Math
}, "math=", {
math: ""
} ], [ {
e: extendedFunction
}, "e=", {
e: ""
} ], [ {
d: new Date()
}, "d=", {
d: ""
} ], [ {
d: Date
}, "d=", {
d: ""
} ], [ {
f: new Boolean(false),
t: new Boolean(true)
}, "f=&t=", {
f: "",
t: ""
} ], [ {
f: false,
t: true
}, "f=false&t=true", {
f: "false",
t: "true"
} ], [ {
n: null
}, "n=", {
n: ""
} ], [ {
nan: NaN
}, "nan=", {
nan: ""
} ], [ {
inf: Infinity
}, "inf=", {
inf: ""
} ] ];
var qsNoMungeTestCases = [ [ "", {} ], [ "foo=bar&foo=baz", {
foo: [ "bar", "baz" ]
} ], [ "blah=burp", {
blah: "burp"
} ], [ "gragh=1&gragh=3&goo=2", {
gragh: [ "1", "3" ],
goo: "2"
} ], [ "frappucino=muffin&goat%5B%5D=scone&pond=moose", {
frappucino: "muffin",
"goat[]": "scone",
pond: "moose"
} ], [ "trololol=yes&lololo=no", {
trololol: "yes",
lololo: "no"
} ] ];
exports["test basic"] = function(assert) {
assert.strictEqual("918854443121279438895193", qs.parse("id=918854443121279438895193").id, "prase id=918854443121279438895193");
};
exports["test that the canonical qs is parsed properly"] = function(assert) {
qsTestCases.forEach(function(testCase) {
assert.deepEqual(testCase[2], qs.parse(testCase[0]), "parse " + testCase[0]);
});
};
exports["test that the colon test cases can do the same"] = function(assert) {
qsColonTestCases.forEach(function(testCase) {
assert.deepEqual(testCase[2], qs.parse(testCase[0], ";", ":"), "parse " + testCase[0] + " -> ; :");
});
};
exports["test the weird objects, that they get parsed properly"] = function(assert) {
qsWeirdObjects.forEach(function(testCase) {
assert.deepEqual(testCase[2], qs.parse(testCase[1]), "parse " + testCase[1]);
});
};
exports["test non munge test cases"] = function(assert) {
qsNoMungeTestCases.forEach(function(testCase) {
assert.deepEqual(testCase[0], qs.stringify(testCase[1], "&", "=", false), "stringify " + JSON.stringify(testCase[1]) + " -> & =");
});
};
exports["test the nested qs-in-qs case"] = function(assert) {
var f = qs.parse("a=b&q=x%3Dy%26y%3Dz");
f.q = qs.parse(f.q);
assert.deepEqual(f, {
a: "b",
q: {
x: "y",
y: "z"
}
}, "parse a=b&q=x%3Dy%26y%3Dz");
};
exports["test nested in colon"] = function(assert) {
var f = qs.parse("a:b;q:x%3Ay%3By%3Az", ";", ":");
f.q = qs.parse(f.q, ";", ":");
assert.deepEqual(f, {
a: "b",
q: {
x: "y",
y: "z"
}
}, "parse a:b;q:x%3Ay%3By%3Az -> ; :");
};
exports["test stringifying"] = function(assert) {
qsTestCases.forEach(function(testCase) {
assert.equal(testCase[1], qs.stringify(testCase[2]), "stringify " + JSON.stringify(testCase[2]));
});
qsColonTestCases.forEach(function(testCase) {
assert.equal(testCase[1], qs.stringify(testCase[2], ";", ":"), "stringify " + JSON.stringify(testCase[2]) + " -> ; :");
});
qsWeirdObjects.forEach(function(testCase) {
assert.equal(testCase[1], qs.stringify(testCase[0]), "stringify " + JSON.stringify(testCase[0]));
});
};
exports["test stringifying nested"] = function(assert) {
var f = qs.stringify({
a: "b",
q: qs.stringify({
x: "y",
y: "z"
})
});
assert.equal(f, "a=b&q=x%3Dy%26y%3Dz", JSON.stringify({
a: "b",
"qs.stringify -> q": {
x: "y",
y: "z"
}
}));
var threw = false;
try {
qs.parse(undefined);
} catch (error) {
threw = true;
}
assert.ok(!threw, "does not throws on undefined");
};
exports["test nested in colon"] = function(assert) {
var f = qs.stringify({
a: "b",
q: qs.stringify({
x: "y",
y: "z"
}, ";", ":")
}, ";", ":");
assert.equal(f, "a:b;q:x%3Ay%3By%3Az", "stringify " + JSON.stringify({
a: "b",
"qs.stringify -> q": {
x: "y",
y: "z"
}
}) + " -> ; : ");
assert.deepEqual({}, qs.parse(), "parse undefined");
};
}, function(module, exports, __webpack_require__) {
"use strict";
__webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "retape"');
e.code = "MODULE_NOT_FOUND";
throw e;
}())(__webpack_require__(305));
}, function(module, exports, __webpack_require__) {
var punycode = __webpack_require__(299);
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;
function Url() {
this.protocol = null;
this.slashes = null;
this.auth = null;
this.host = null;
this.port = null;
this.hostname = null;
this.hash = null;
this.search = null;
this.query = null;
this.pathname = null;
this.path = null;
this.href = null;
}
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, delims = [ "<", ">", '"', "`", " ", "\r", "\n", "\t" ], unwise = [ "{", "}", "|", "\\", "^", "`" ].concat(delims), autoEscape = [ "'" ].concat(unwise), nonHostChars = [ "%", "/", "?", ";", "#" ].concat(autoEscape), hostEndingChars = [ "/", "?", "#" ], hostnameMaxLen = 255, hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
javascript: true,
"javascript:": true
}, hostlessProtocol = {
javascript: true,
"javascript:": true
}, slashedProtocol = {
http: true,
https: true,
ftp: true,
gopher: true,
file: true,
"http:": true,
"https:": true,
"ftp:": true,
"gopher:": true,
"file:": true
}, querystring = __webpack_require__(303);
function urlParse(url, parseQueryString, slashesDenoteHost) {
if (url && isObject(url) && url instanceof Url) return url;
var u = new Url();
u.parse(url, parseQueryString, slashesDenoteHost);
return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
if (!isString(url)) {
throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
}
var rest = url;
rest = rest.trim();
var proto = protocolPattern.exec(rest);
if (proto) {
proto = proto[0];
var lowerProto = proto.toLowerCase();
this.protocol = lowerProto;
rest = rest.substr(proto.length);
}
if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
var slashes = rest.substr(0, 2) === "//";
if (slashes && !(proto && hostlessProtocol[proto])) {
rest = rest.substr(2);
this.slashes = true;
}
}
if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
var hostEnd = -1;
for (var i = 0; i < hostEndingChars.length; i++) {
var hec = rest.indexOf(hostEndingChars[i]);
if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
}
var auth, atSign;
if (hostEnd === -1) {
atSign = rest.lastIndexOf("@");
} else {
atSign = rest.lastIndexOf("@", hostEnd);
}
if (atSign !== -1) {
auth = rest.slice(0, atSign);
rest = rest.slice(atSign + 1);
this.auth = decodeURIComponent(auth);
}
hostEnd = -1;
for (var i = 0; i < nonHostChars.length; i++) {
var hec = rest.indexOf(nonHostChars[i]);
if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
}
if (hostEnd === -1) hostEnd = rest.length;
this.host = rest.slice(0, hostEnd);
rest = rest.slice(hostEnd);
this.parseHost();
this.hostname = this.hostname || "";
var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
if (!ipv6Hostname) {
var hostparts = this.hostname.split(/\./);
for (var i = 0, l = hostparts.length; i < l; i++) {
var part = hostparts[i];
if (!part) continue;
if (!part.match(hostnamePartPattern)) {
var newpart = "";
for (var j = 0, k = part.length; j < k; j++) {
if (part.charCodeAt(j) > 127) {
newpart += "x";
} else {
newpart += part[j];
}
}
if (!newpart.match(hostnamePartPattern)) {
var validParts = hostparts.slice(0, i);
var notHost = hostparts.slice(i + 1);
var bit = part.match(hostnamePartStart);
if (bit) {
validParts.push(bit[1]);
notHost.unshift(bit[2]);
}
if (notHost.length) {
rest = "/" + notHost.join(".") + rest;
}
this.hostname = validParts.join(".");
break;
}
}
}
}
if (this.hostname.length > hostnameMaxLen) {
this.hostname = "";
} else {
this.hostname = this.hostname.toLowerCase();
}
if (!ipv6Hostname) {
var domainArray = this.hostname.split(".");
var newOut = [];
for (var i = 0; i < domainArray.length; ++i) {
var s = domainArray[i];
newOut.push(s.match(/[^A-Za-z0-9_-]/) ? "xn--" + punycode.encode(s) : s);
}
this.hostname = newOut.join(".");
}
var p = this.port ? ":" + this.port : "";
var h = this.hostname || "";
this.host = h + p;
this.href += this.host;
if (ipv6Hostname) {
this.hostname = this.hostname.substr(1, this.hostname.length - 2);
if (rest[0] !== "/") {
rest = "/" + rest;
}
}
}
if (!unsafeProtocol[lowerProto]) {
for (var i = 0, l = autoEscape.length; i < l; i++) {
var ae = autoEscape[i];
var esc = encodeURIComponent(ae);
if (esc === ae) {
esc = escape(ae);
}
rest = rest.split(ae).join(esc);
}
}
var hash = rest.indexOf("#");
if (hash !== -1) {
this.hash = rest.substr(hash);
rest = rest.slice(0, hash);
}
var qm = rest.indexOf("?");
if (qm !== -1) {
this.search = rest.substr(qm);
this.query = rest.substr(qm + 1);
if (parseQueryString) {
this.query = querystring.parse(this.query);
}
rest = rest.slice(0, qm);
} else if (parseQueryString) {
this.search = "";
this.query = {};
}
if (rest) this.pathname = rest;
if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
this.pathname = "/";
}
if (this.pathname || this.search) {
var p = this.pathname || "";
var s = this.search || "";
this.path = p + s;
}
this.href = this.format();
return this;
};
function urlFormat(obj) {
if (isString(obj)) obj = urlParse(obj);
if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
return obj.format();
}
Url.prototype.format = function() {
var auth = this.auth || "";
if (auth) {
auth = encodeURIComponent(auth);
auth = auth.replace(/%3A/i, ":");
auth += "@";
}
var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
if (this.host) {
host = auth + this.host;
} else if (this.hostname) {
host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
if (this.port) {
host += ":" + this.port;
}
}
if (this.query && isObject(this.query) && Object.keys(this.query).length) {
query = querystring.stringify(this.query);
}
var search = this.search || query && "?" + query || "";
if (protocol && protocol.substr(-1) !== ":") protocol += ":";
if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
host = "//" + (host || "");
if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
} else if (!host) {
host = "";
}
if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
if (search && search.charAt(0) !== "?") search = "?" + search;
pathname = pathname.replace(/[?#]/g, function(match) {
return encodeURIComponent(match);
});
search = search.replace("#", "%23");
return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
if (!source) return relative;
return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
if (isString(relative)) {
var rel = new Url();
rel.parse(relative, false, true);
relative = rel;
}
var result = new Url();
Object.keys(this).forEach(function(k) {
result[k] = this[k];
}, this);
result.hash = relative.hash;
if (relative.href === "") {
result.href = result.format();
return result;
}
if (relative.slashes && !relative.protocol) {
Object.keys(relative).forEach(function(k) {
if (k !== "protocol") result[k] = relative[k];
});
if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
result.path = result.pathname = "/";
}
result.href = result.format();
return result;
}
if (relative.protocol && relative.protocol !== result.protocol) {
if (!slashedProtocol[relative.protocol]) {
Object.keys(relative).forEach(function(k) {
result[k] = relative[k];
});
result.href = result.format();
return result;
}
result.protocol = relative.protocol;
if (!relative.host && !hostlessProtocol[relative.protocol]) {
var relPath = (relative.pathname || "").split("/");
while (relPath.length && !(relative.host = relPath.shift())) ;
if (!relative.host) relative.host = "";
if (!relative.hostname) relative.hostname = "";
if (relPath[0] !== "") relPath.unshift("");
if (relPath.length < 2) relPath.unshift("");
result.pathname = relPath.join("/");
} else {
result.pathname = relative.pathname;
}
result.search = relative.search;
result.query = relative.query;
result.host = relative.host || "";
result.auth = relative.auth;
result.hostname = relative.hostname || relative.host;
result.port = relative.port;
if (result.pathname || result.search) {
var p = result.pathname || "";
var s = result.search || "";
result.path = p + s;
}
result.slashes = result.slashes || relative.slashes;
result.href = result.format();
return result;
}
var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
if (psychotic) {
result.hostname = "";
result.port = null;
if (result.host) {
if (srcPath[0] === "") srcPath[0] = result.host; else srcPath.unshift(result.host);
}
result.host = "";
if (relative.protocol) {
relative.hostname = null;
relative.port = null;
if (relative.host) {
if (relPath[0] === "") relPath[0] = relative.host; else relPath.unshift(relative.host);
}
relative.host = null;
}
mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
}
if (isRelAbs) {
result.host = relative.host || relative.host === "" ? relative.host : result.host;
result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
result.search = relative.search;
result.query = relative.query;
srcPath = relPath;
} else if (relPath.length) {
if (!srcPath) srcPath = [];
srcPath.pop();
srcPath = srcPath.concat(relPath);
result.search = relative.search;
result.query = relative.query;
} else if (!isNullOrUndefined(relative.search)) {
if (psychotic) {
result.hostname = result.host = srcPath.shift();
var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
if (authInHost) {
result.auth = authInHost.shift();
result.host = result.hostname = authInHost.shift();
}
}
result.search = relative.search;
result.query = relative.query;
if (!isNull(result.pathname) || !isNull(result.search)) {
result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
}
result.href = result.format();
return result;
}
if (!srcPath.length) {
result.pathname = null;
if (result.search) {
result.path = "/" + result.search;
} else {
result.path = null;
}
result.href = result.format();
return result;
}
var last = srcPath.slice(-1)[0];
var hasTrailingSlash = (result.host || relative.host) && (last === "." || last === "..") || last === "";
var up = 0;
for (var i = srcPath.length; i >= 0; i--) {
last = srcPath[i];
if (last == ".") {
srcPath.splice(i, 1);
} else if (last === "..") {
srcPath.splice(i, 1);
up++;
} else if (up) {
srcPath.splice(i, 1);
up--;
}
}
if (!mustEndAbs && !removeAllDots) {
for (;up--; up) {
srcPath.unshift("..");
}
}
if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
srcPath.unshift("");
}
if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
srcPath.push("");
}
var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
if (psychotic) {
result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
if (authInHost) {
result.auth = authInHost.shift();
result.host = result.hostname = authInHost.shift();
}
}
mustEndAbs = mustEndAbs || result.host && srcPath.length;
if (mustEndAbs && !isAbsolute) {
srcPath.unshift("");
}
if (!srcPath.length) {
result.pathname = null;
result.path = null;
} else {
result.pathname = srcPath.join("/");
}
if (!isNull(result.pathname) || !isNull(result.search)) {
result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
}
result.auth = relative.auth || result.auth;
result.slashes = result.slashes || relative.slashes;
result.href = result.format();
return result;
};
Url.prototype.parseHost = function() {
var host = this.host;
var port = portPattern.exec(host);
if (port) {
port = port[0];
if (port !== ":") {
this.port = port.substr(1);
}
host = host.substr(0, host.length - port.length);
}
if (host) this.hostname = host;
};
function isString(arg) {
return typeof arg === "string";
}
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
function isNull(arg) {
return arg === null;
}
function isNullOrUndefined(arg) {
return arg == null;
}
}, function(module, exports, __webpack_require__) {
var assert = __webpack_require__(309);
var util = __webpack_require__(310);
var url = __webpack_require__(307);
test("god", function() {
var parseTests = {
"//some_path": {
href: "//some_path",
pathname: "//some_path",
path: "//some_path"
},
"HTTP://www.example.com/": {
href: "http://www.example.com/",
protocol: "http:",
slashes: true,
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"HTTP://www.example.com": {
href: "http://www.example.com/",
protocol: "http:",
slashes: true,
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://www.ExAmPlE.com/": {
href: "http://www.example.com/",
protocol: "http:",
slashes: true,
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://user:pw@www.ExAmPlE.com/": {
href: "http://user:pw@www.example.com/",
protocol: "http:",
slashes: true,
auth: "user:pw",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://USER:PW@www.ExAmPlE.com/": {
href: "http://USER:PW@www.example.com/",
protocol: "http:",
slashes: true,
auth: "USER:PW",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://user@www.example.com/": {
href: "http://user@www.example.com/",
protocol: "http:",
slashes: true,
auth: "user",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://user%3Apw@www.example.com/": {
href: "http://user:pw@www.example.com/",
protocol: "http:",
slashes: true,
auth: "user:pw",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://x.com/path?that's#all, folks": {
href: "http://x.com/path?that%27s#all,%20folks",
protocol: "http:",
slashes: true,
host: "x.com",
hostname: "x.com",
search: "?that%27s",
query: "that%27s",
pathname: "/path",
hash: "#all,%20folks",
path: "/path?that%27s"
},
"HTTP://X.COM/Y": {
href: "http://x.com/Y",
protocol: "http:",
slashes: true,
host: "x.com",
hostname: "x.com",
pathname: "/Y",
path: "/Y"
},
"HtTp://x.y.cOm*a/b/c?d=e#f g<h>i": {
href: "http://x.y.com/*a/b/c?d=e#f%20g%3Ch%3Ei",
protocol: "http:",
slashes: true,
host: "x.y.com",
hostname: "x.y.com",
pathname: "/*a/b/c",
search: "?d=e",
query: "d=e",
hash: "#f%20g%3Ch%3Ei",
path: "/*a/b/c?d=e"
},
"HtTp://x.y.cOm*A/b/c?d=e#f g<h>i": {
href: "http://x.y.com/*A/b/c?d=e#f%20g%3Ch%3Ei",
protocol: "http:",
slashes: true,
host: "x.y.com",
hostname: "x.y.com",
pathname: "/*A/b/c",
search: "?d=e",
query: "d=e",
hash: "#f%20g%3Ch%3Ei",
path: "/*A/b/c?d=e"
},
"http://x...y...#p": {
href: "http://x...y.../#p",
protocol: "http:",
slashes: true,
host: "x...y...",
hostname: "x...y...",
hash: "#p",
pathname: "/",
path: "/"
},
'http://x/p/"quoted"': {
href: "http://x/p/%22quoted%22",
protocol: "http:",
slashes: true,
host: "x",
hostname: "x",
pathname: "/p/%22quoted%22",
path: "/p/%22quoted%22"
},
"<http://goo.corn/bread> Is a URL!": {
href: "%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!",
pathname: "%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!",
path: "%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!"
},
"http://www.narwhaljs.org/blog/categories?id=news": {
href: "http://www.narwhaljs.org/blog/categories?id=news",
protocol: "http:",
slashes: true,
host: "www.narwhaljs.org",
hostname: "www.narwhaljs.org",
search: "?id=news",
query: "id=news",
pathname: "/blog/categories",
path: "/blog/categories?id=news"
},
"http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=": {
href: "http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=",
protocol: "http:",
slashes: true,
host: "mt0.google.com",
hostname: "mt0.google.com",
pathname: "/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=",
path: "/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s="
},
"http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=": {
href: "http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api" + "&x=2&y=2&z=3&s=",
protocol: "http:",
slashes: true,
host: "mt0.google.com",
hostname: "mt0.google.com",
search: "???&hl=en&src=api&x=2&y=2&z=3&s=",
query: "??&hl=en&src=api&x=2&y=2&z=3&s=",
pathname: "/vt/lyrs=m@114",
path: "/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s="
},
"http://user:pass@mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=": {
href: "http://user:pass@mt0.google.com/vt/lyrs=m@114???" + "&hl=en&src=api&x=2&y=2&z=3&s=",
protocol: "http:",
slashes: true,
host: "mt0.google.com",
auth: "user:pass",
hostname: "mt0.google.com",
search: "???&hl=en&src=api&x=2&y=2&z=3&s=",
query: "??&hl=en&src=api&x=2&y=2&z=3&s=",
pathname: "/vt/lyrs=m@114",
path: "/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s="
},
"file:///etc/passwd": {
href: "file:///etc/passwd",
slashes: true,
protocol: "file:",
pathname: "/etc/passwd",
hostname: "",
host: "",
path: "/etc/passwd"
},
"file://localhost/etc/passwd": {
href: "file://localhost/etc/passwd",
protocol: "file:",
slashes: true,
pathname: "/etc/passwd",
hostname: "localhost",
host: "localhost",
path: "/etc/passwd"
},
"file://foo/etc/passwd": {
href: "file://foo/etc/passwd",
protocol: "file:",
slashes: true,
pathname: "/etc/passwd",
hostname: "foo",
host: "foo",
path: "/etc/passwd"
},
"file:///etc/node/": {
href: "file:///etc/node/",
slashes: true,
protocol: "file:",
pathname: "/etc/node/",
hostname: "",
host: "",
path: "/etc/node/"
},
"file://localhost/etc/node/": {
href: "file://localhost/etc/node/",
protocol: "file:",
slashes: true,
pathname: "/etc/node/",
hostname: "localhost",
host: "localhost",
path: "/etc/node/"
},
"file://foo/etc/node/": {
href: "file://foo/etc/node/",
protocol: "file:",
slashes: true,
pathname: "/etc/node/",
hostname: "foo",
host: "foo",
path: "/etc/node/"
},
"http:/baz/../foo/bar": {
href: "http:/baz/../foo/bar",
protocol: "http:",
pathname: "/baz/../foo/bar",
path: "/baz/../foo/bar"
},
"http://user:pass@example.com:8000/foo/bar?baz=quux#frag": {
href: "http://user:pass@example.com:8000/foo/bar?baz=quux#frag",
protocol: "http:",
slashes: true,
host: "example.com:8000",
auth: "user:pass",
port: "8000",
hostname: "example.com",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"//user:pass@example.com:8000/foo/bar?baz=quux#frag": {
href: "//user:pass@example.com:8000/foo/bar?baz=quux#frag",
slashes: true,
host: "example.com:8000",
auth: "user:pass",
port: "8000",
hostname: "example.com",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"/foo/bar?baz=quux#frag": {
href: "/foo/bar?baz=quux#frag",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"http:/foo/bar?baz=quux#frag": {
href: "http:/foo/bar?baz=quux#frag",
protocol: "http:",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"mailto:foo@bar.com?subject=hello": {
href: "mailto:foo@bar.com?subject=hello",
protocol: "mailto:",
host: "bar.com",
auth: "foo",
hostname: "bar.com",
search: "?subject=hello",
query: "subject=hello",
path: "?subject=hello"
},
"javascript:alert('hello');": {
href: "javascript:alert('hello');",
protocol: "javascript:",
pathname: "alert('hello');",
path: "alert('hello');"
},
"xmpp:isaacschlueter@jabber.org": {
href: "xmpp:isaacschlueter@jabber.org",
protocol: "xmpp:",
host: "jabber.org",
auth: "isaacschlueter",
hostname: "jabber.org"
},
"http://atpass:foo%40bar@127.0.0.1:8080/path?search=foo#bar": {
href: "http://atpass:foo%40bar@127.0.0.1:8080/path?search=foo#bar",
protocol: "http:",
slashes: true,
host: "127.0.0.1:8080",
auth: "atpass:foo@bar",
hostname: "127.0.0.1",
port: "8080",
pathname: "/path",
search: "?search=foo",
query: "search=foo",
hash: "#bar",
path: "/path?search=foo"
},
"svn+ssh://foo/bar": {
href: "svn+ssh://foo/bar",
host: "foo",
hostname: "foo",
protocol: "svn+ssh:",
pathname: "/bar",
path: "/bar",
slashes: true
},
"dash-test://foo/bar": {
href: "dash-test://foo/bar",
host: "foo",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar",
path: "/bar",
slashes: true
},
"dash-test:foo/bar": {
href: "dash-test:foo/bar",
host: "foo",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar",
path: "/bar"
},
"dot.test://foo/bar": {
href: "dot.test://foo/bar",
host: "foo",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar",
path: "/bar",
slashes: true
},
"dot.test:foo/bar": {
href: "dot.test:foo/bar",
host: "foo",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar",
path: "/bar"
},
"http://www.日本語.com/": {
href: "http://www.xn--wgv71a119e.com/",
protocol: "http:",
slashes: true,
host: "www.xn--wgv71a119e.com",
hostname: "www.xn--wgv71a119e.com",
pathname: "/",
path: "/"
},
"http://example.Bücher.com/": {
href: "http://example.xn--bcher-kva.com/",
protocol: "http:",
slashes: true,
host: "example.xn--bcher-kva.com",
hostname: "example.xn--bcher-kva.com",
pathname: "/",
path: "/"
},
"http://www.Äffchen.com/": {
href: "http://www.xn--ffchen-9ta.com/",
protocol: "http:",
slashes: true,
host: "www.xn--ffchen-9ta.com",
hostname: "www.xn--ffchen-9ta.com",
pathname: "/",
path: "/"
},
"http://www.Äffchen.cOm*A/b/c?d=e#f g<h>i": {
href: "http://www.xn--ffchen-9ta.com/*A/b/c?d=e#f%20g%3Ch%3Ei",
protocol: "http:",
slashes: true,
host: "www.xn--ffchen-9ta.com",
hostname: "www.xn--ffchen-9ta.com",
pathname: "/*A/b/c",
search: "?d=e",
query: "d=e",
hash: "#f%20g%3Ch%3Ei",
path: "/*A/b/c?d=e"
},
"http://SÉLIER.COM/": {
href: "http://xn--slier-bsa.com/",
protocol: "http:",
slashes: true,
host: "xn--slier-bsa.com",
hostname: "xn--slier-bsa.com",
pathname: "/",
path: "/"
},
"http://ليهمابتكلموشعربي؟.ي؟/": {
href: "http://xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f/",
protocol: "http:",
slashes: true,
host: "xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f",
hostname: "xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f",
pathname: "/",
path: "/"
},
"http://➡.ws/➡": {
href: "http://xn--hgi.ws/➡",
protocol: "http:",
slashes: true,
host: "xn--hgi.ws",
hostname: "xn--hgi.ws",
pathname: "/➡",
path: "/➡"
},
"http://bucket_name.s3.amazonaws.com/image.jpg": {
protocol: "http:",
slashes: true,
host: "bucket_name.s3.amazonaws.com",
hostname: "bucket_name.s3.amazonaws.com",
pathname: "/image.jpg",
href: "http://bucket_name.s3.amazonaws.com/image.jpg",
path: "/image.jpg"
},
"git+http://github.com/joyent/node.git": {
protocol: "git+http:",
slashes: true,
host: "github.com",
hostname: "github.com",
pathname: "/joyent/node.git",
path: "/joyent/node.git",
href: "git+http://github.com/joyent/node.git"
},
"local1@domain1": {
pathname: "local1@domain1",
path: "local1@domain1",
href: "local1@domain1"
},
"www.example.com": {
href: "www.example.com",
pathname: "www.example.com",
path: "www.example.com"
},
"[fe80::1]": {
href: "[fe80::1]",
pathname: "[fe80::1]",
path: "[fe80::1]"
},
"coap://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]": {
protocol: "coap:",
slashes: true,
host: "[fedc:ba98:7654:3210:fedc:ba98:7654:3210]",
hostname: "fedc:ba98:7654:3210:fedc:ba98:7654:3210",
href: "coap://[fedc:ba98:7654:3210:fedc:ba98:7654:3210]/",
pathname: "/",
path: "/"
},
"coap://[1080:0:0:0:8:800:200C:417A]:61616/": {
protocol: "coap:",
slashes: true,
host: "[1080:0:0:0:8:800:200c:417a]:61616",
port: "61616",
hostname: "1080:0:0:0:8:800:200c:417a",
href: "coap://[1080:0:0:0:8:800:200c:417a]:61616/",
pathname: "/",
path: "/"
},
"http://user:password@[3ffe:2a00:100:7031::1]:8080": {
protocol: "http:",
slashes: true,
auth: "user:password",
host: "[3ffe:2a00:100:7031::1]:8080",
port: "8080",
hostname: "3ffe:2a00:100:7031::1",
href: "http://user:password@[3ffe:2a00:100:7031::1]:8080/",
pathname: "/",
path: "/"
},
"coap://u:p@[::192.9.5.5]:61616/.well-known/r?n=Temperature": {
protocol: "coap:",
slashes: true,
auth: "u:p",
host: "[::192.9.5.5]:61616",
port: "61616",
hostname: "::192.9.5.5",
href: "coap://u:p@[::192.9.5.5]:61616/.well-known/r?n=Temperature",
search: "?n=Temperature",
query: "n=Temperature",
pathname: "/.well-known/r",
path: "/.well-known/r?n=Temperature"
},
"http://example.com:": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/",
pathname: "/",
path: "/"
},
"http://example.com:/a/b.html": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/a/b.html",
pathname: "/a/b.html",
path: "/a/b.html"
},
"http://example.com:?a=b": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/?a=b",
search: "?a=b",
query: "a=b",
pathname: "/",
path: "/?a=b"
},
"http://example.com:#abc": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/#abc",
hash: "#abc",
pathname: "/",
path: "/"
},
"http://[fe80::1]:/a/b?a=b#abc": {
protocol: "http:",
slashes: true,
host: "[fe80::1]",
hostname: "fe80::1",
href: "http://[fe80::1]/a/b?a=b#abc",
search: "?a=b",
query: "a=b",
hash: "#abc",
pathname: "/a/b",
path: "/a/b?a=b"
},
"http://-lovemonsterz.tumblr.com/rss": {
protocol: "http:",
slashes: true,
host: "-lovemonsterz.tumblr.com",
hostname: "-lovemonsterz.tumblr.com",
href: "http://-lovemonsterz.tumblr.com/rss",
pathname: "/rss",
path: "/rss"
},
"http://-lovemonsterz.tumblr.com:80/rss": {
protocol: "http:",
slashes: true,
port: "80",
host: "-lovemonsterz.tumblr.com:80",
hostname: "-lovemonsterz.tumblr.com",
href: "http://-lovemonsterz.tumblr.com:80/rss",
pathname: "/rss",
path: "/rss"
},
"http://user:pass@-lovemonsterz.tumblr.com/rss": {
protocol: "http:",
slashes: true,
auth: "user:pass",
host: "-lovemonsterz.tumblr.com",
hostname: "-lovemonsterz.tumblr.com",
href: "http://user:pass@-lovemonsterz.tumblr.com/rss",
pathname: "/rss",
path: "/rss"
},
"http://user:pass@-lovemonsterz.tumblr.com:80/rss": {
protocol: "http:",
slashes: true,
auth: "user:pass",
port: "80",
host: "-lovemonsterz.tumblr.com:80",
hostname: "-lovemonsterz.tumblr.com",
href: "http://user:pass@-lovemonsterz.tumblr.com:80/rss",
pathname: "/rss",
path: "/rss"
},
"http://_jabber._tcp.google.com/test": {
protocol: "http:",
slashes: true,
host: "_jabber._tcp.google.com",
hostname: "_jabber._tcp.google.com",
href: "http://_jabber._tcp.google.com/test",
pathname: "/test",
path: "/test"
},
"http://user:pass@_jabber._tcp.google.com/test": {
protocol: "http:",
slashes: true,
auth: "user:pass",
host: "_jabber._tcp.google.com",
hostname: "_jabber._tcp.google.com",
href: "http://user:pass@_jabber._tcp.google.com/test",
pathname: "/test",
path: "/test"
},
"http://_jabber._tcp.google.com:80/test": {
protocol: "http:",
slashes: true,
port: "80",
host: "_jabber._tcp.google.com:80",
hostname: "_jabber._tcp.google.com",
href: "http://_jabber._tcp.google.com:80/test",
pathname: "/test",
path: "/test"
},
"http://user:pass@_jabber._tcp.google.com:80/test": {
protocol: "http:",
slashes: true,
auth: "user:pass",
port: "80",
host: "_jabber._tcp.google.com:80",
hostname: "_jabber._tcp.google.com",
href: "http://user:pass@_jabber._tcp.google.com:80/test",
pathname: "/test",
path: "/test"
},
"http://a@b@c/": {
protocol: "http:",
slashes: true,
auth: "a@b",
host: "c",
hostname: "c",
href: "http://a%40b@c/",
path: "/",
pathname: "/"
},
"http://a@b?@c": {
protocol: "http:",
slashes: true,
auth: "a",
host: "b",
hostname: "b",
href: "http://a@b/?@c",
path: "/?@c",
pathname: "/",
search: "?@c",
query: "@c"
},
"http://a\r\" \t\n<'b:b@c\r\nd/e?f": {
protocol: "http:",
slashes: true,
auth: "a\r\" \t\n<'b:b",
host: "c",
port: null,
hostname: "c",
hash: null,
search: "?f",
query: "f",
pathname: "%0D%0Ad/e",
path: "%0D%0Ad/e?f",
href: "http://a%0D%22%20%09%0A%3C'b:b@c/%0D%0Ad/e?f"
}
};
for (var u in parseTests) {
var actual = url.parse(u), spaced = url.parse("     \t  " + u + "\n\t");
expected = parseTests[u];
Object.keys(actual).forEach(function(i) {
if (expected[i] === undefined && actual[i] === null) {
expected[i] = null;
}
});
assert.deepEqual(actual, expected);
assert.deepEqual(spaced, expected);
var expected = parseTests[u].href, actual = url.format(parseTests[u]);
assert.equal(actual, expected, "format(" + u + ") == " + u + "\nactual:" + actual);
}
var parseTestsWithQueryString = {
"/foo/bar?baz=quux#frag": {
href: "/foo/bar?baz=quux#frag",
hash: "#frag",
search: "?baz=quux",
query: {
baz: "quux"
},
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"http://example.com": {
href: "http://example.com/",
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
query: {},
search: "",
pathname: "/",
path: "/"
}
};
for (var u in parseTestsWithQueryString) {
var actual = url.parse(u, true);
var expected = parseTestsWithQueryString[u];
for (var i in actual) {
if (actual[i] === null && expected[i] === undefined) {
expected[i] = null;
}
}
assert.deepEqual(actual, expected);
}
var formatTests = {
"http://example.com?": {
href: "http://example.com/?",
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
search: "?",
query: {},
pathname: "/"
},
"http://example.com?foo=bar#frag": {
href: "http://example.com/?foo=bar#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=bar",
query: "foo=bar",
pathname: "/"
},
"http://example.com?foo=@bar#frag": {
href: "http://example.com/?foo=@bar#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=@bar",
query: "foo=@bar",
pathname: "/"
},
"http://example.com?foo=/bar/#frag": {
href: "http://example.com/?foo=/bar/#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=/bar/",
query: "foo=/bar/",
pathname: "/"
},
"http://example.com?foo=?bar/#frag": {
href: "http://example.com/?foo=?bar/#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=?bar/",
query: "foo=?bar/",
pathname: "/"
},
"http://example.com#frag=?bar/#frag": {
href: "http://example.com/#frag=?bar/#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag=?bar/#frag",
pathname: "/"
},
'http://google.com" onload="alert(42)/': {
href: "http://google.com/%22%20onload=%22alert(42)/",
protocol: "http:",
host: "google.com",
pathname: "/%22%20onload=%22alert(42)/"
},
"http://a.com/a/b/c?s#h": {
href: "http://a.com/a/b/c?s#h",
protocol: "http",
host: "a.com",
pathname: "a/b/c",
hash: "h",
search: "s"
},
"xmpp:isaacschlueter@jabber.org": {
href: "xmpp:isaacschlueter@jabber.org",
protocol: "xmpp:",
host: "jabber.org",
auth: "isaacschlueter",
hostname: "jabber.org"
},
"http://atpass:foo%40bar@127.0.0.1/": {
href: "http://atpass:foo%40bar@127.0.0.1/",
auth: "atpass:foo@bar",
hostname: "127.0.0.1",
protocol: "http:",
pathname: "/"
},
"http://atslash%2F%40:%2F%40@foo/": {
href: "http://atslash%2F%40:%2F%40@foo/",
auth: "atslash/@:/@",
hostname: "foo",
protocol: "http:",
pathname: "/"
},
"svn+ssh://foo/bar": {
href: "svn+ssh://foo/bar",
hostname: "foo",
protocol: "svn+ssh:",
pathname: "/bar",
slashes: true
},
"dash-test://foo/bar": {
href: "dash-test://foo/bar",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar",
slashes: true
},
"dash-test:foo/bar": {
href: "dash-test:foo/bar",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar"
},
"dot.test://foo/bar": {
href: "dot.test://foo/bar",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar",
slashes: true
},
"dot.test:foo/bar": {
href: "dot.test:foo/bar",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar"
},
"coap:u:p@[::1]:61616/.well-known/r?n=Temperature": {
href: "coap:u:p@[::1]:61616/.well-known/r?n=Temperature",
protocol: "coap:",
auth: "u:p",
hostname: "::1",
port: "61616",
pathname: "/.well-known/r",
search: "n=Temperature"
},
"coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton": {
href: "coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton",
protocol: "coap",
host: "[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616",
pathname: "/s/stopButton"
},
"/path/to/%%23%3F+=&.txt?foo=theA1#bar": {
href: "/path/to/%%23%3F+=&.txt?foo=theA1#bar",
pathname: "/path/to/%#?+=&.txt",
query: {
foo: "theA1"
},
hash: "#bar"
},
"/path/to/%%23%3F+=&.txt?foo=the%231#bar": {
href: "/path/to/%%23%3F+=&.txt?foo=the%231#bar",
pathname: "/path/to/%#?+=&.txt",
query: {
foo: "the#1"
},
hash: "#bar"
},
"http://ex.com/foo%3F100%m%23r?abc=the%231?&foo=bar#frag": {
href: "http://ex.com/foo%3F100%m%23r?abc=the%231?&foo=bar#frag",
protocol: "http:",
hostname: "ex.com",
hash: "#frag",
search: "?abc=the#1?&foo=bar",
pathname: "/foo?100%m#r"
},
"http://ex.com/fooA100%mBr?abc=the%231?&foo=bar#frag": {
href: "http://ex.com/fooA100%mBr?abc=the%231?&foo=bar#frag",
protocol: "http:",
hostname: "ex.com",
hash: "#frag",
search: "?abc=the#1?&foo=bar",
pathname: "/fooA100%mBr"
}
};
for (var u in formatTests) {
var expect = formatTests[u].href;
delete formatTests[u].href;
var actual = url.format(u);
var actualObj = url.format(formatTests[u]);
assert.equal(actual, expect, "wonky format(" + u + ") == " + expect + "\nactual:" + actual);
assert.equal(actualObj, expect, "wonky format(" + JSON.stringify(formatTests[u]) + ") == " + expect + "\nactual: " + actualObj);
}
var relativeTests = [ [ "/foo/bar/baz", "quux", "/foo/bar/quux" ], [ "/foo/bar/baz", "quux/asdf", "/foo/bar/quux/asdf" ], [ "/foo/bar/baz", "quux/baz", "/foo/bar/quux/baz" ], [ "/foo/bar/baz", "../quux/baz", "/foo/quux/baz" ], [ "/foo/bar/baz", "/bar", "/bar" ], [ "/foo/bar/baz/", "quux", "/foo/bar/baz/quux" ], [ "/foo/bar/baz/", "quux/baz", "/foo/bar/baz/quux/baz" ], [ "/foo/bar/baz", "../../../../../../../../quux/baz", "/quux/baz" ], [ "/foo/bar/baz", "../../../../../../../quux/baz", "/quux/baz" ], [ "foo/bar", "../../../baz", "../../baz" ], [ "foo/bar/", "../../../baz", "../baz" ], [ "http://example.com/b//c//d;p?q#blarg", "https:#hash2", "https:///#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "https:/p/a/t/h?s#hash2", "https://p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "https://u:p@h.com/p/a/t/h?s#hash2", "https://u:p@h.com/p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "https:/a/b/c/d", "https://a/b/c/d" ], [ "http://example.com/b//c//d;p?q#blarg", "http:#hash2", "http://example.com/b//c//d;p?q#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "http:/p/a/t/h?s#hash2", "http://example.com/p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "http://u:p@h.com/p/a/t/h?s#hash2", "http://u:p@h.com/p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "http:/a/b/c/d", "http://example.com/a/b/c/d" ], [ "/foo/bar/baz", "/../etc/passwd", "/etc/passwd" ] ];
relativeTests.forEach(function(relativeTest) {
var a = url.resolve(relativeTest[0], relativeTest[1]), e = relativeTest[2];
assert.equal(a, e, "resolve(" + [ relativeTest[0], relativeTest[1] ] + ") == " + e + "\n  actual=" + a);
});
[ undefined, null, true, false, 0, 0, [], {} ].forEach(function(val) {
assert.throws(function() {
url.parse(val);
}, TypeError);
});
var bases = [ "http://a/b/c/d;p?q", "http://a/b/c/d;p?q=1/2", "http://a/b/c/d;p=1/2?q", "fred:///s//a/b/c", "http:///s//a/b/c" ];
var relativeTests2 = [ [ "../c", "foo:a/b", "foo:c" ], [ "foo:.", "foo:a", "foo:" ], [ "/foo/../../../bar", "zz:abc", "zz:/bar" ], [ "/foo/../bar", "zz:abc", "zz:/bar" ], [ "foo/../../../bar", "zz:abc", "zz:bar" ], [ "foo/../bar", "zz:abc", "zz:bar" ], [ "zz:.", "zz:abc", "zz:" ], [ "/.", bases[0], "http://a/" ], [ "/.foo", bases[0], "http://a/.foo" ], [ ".foo", bases[0], "http://a/b/c/.foo" ], [ "g:h", bases[0], "g:h" ], [ "g", bases[0], "http://a/b/c/g" ], [ "./g", bases[0], "http://a/b/c/g" ], [ "g/", bases[0], "http://a/b/c/g/" ], [ "/g", bases[0], "http://a/g" ], [ "//g", bases[0], "http://g/" ], [ "?y", bases[0], "http://a/b/c/d;p?y" ], [ "g?y", bases[0], "http://a/b/c/g?y" ], [ "#s", bases[0], "http://a/b/c/d;p?q#s" ], [ "g#s", bases[0], "http://a/b/c/g#s" ], [ "g?y#s", bases[0], "http://a/b/c/g?y#s" ], [ ";x", bases[0], "http://a/b/c/;x" ], [ "g;x", bases[0], "http://a/b/c/g;x" ], [ "g;x?y#s", bases[0], "http://a/b/c/g;x?y#s" ], [ "", bases[0], "http://a/b/c/d;p?q" ], [ ".", bases[0], "http://a/b/c/" ], [ "./", bases[0], "http://a/b/c/" ], [ "..", bases[0], "http://a/b/" ], [ "../", bases[0], "http://a/b/" ], [ "../g", bases[0], "http://a/b/g" ], [ "../..", bases[0], "http://a/" ], [ "../../", bases[0], "http://a/" ], [ "../../g", bases[0], "http://a/g" ], [ "../../../g", bases[0], ("http://a/../g", 
"http://a/g") ], [ "../../../../g", bases[0], ("http://a/../../g", "http://a/g") ], [ "/./g", bases[0], "http://a/g" ], [ "/../g", bases[0], "http://a/g" ], [ "g.", bases[0], "http://a/b/c/g." ], [ ".g", bases[0], "http://a/b/c/.g" ], [ "g..", bases[0], "http://a/b/c/g.." ], [ "..g", bases[0], "http://a/b/c/..g" ], [ "./../g", bases[0], "http://a/b/g" ], [ "./g/.", bases[0], "http://a/b/c/g/" ], [ "g/./h", bases[0], "http://a/b/c/g/h" ], [ "g/../h", bases[0], "http://a/b/c/h" ], [ "g;x=1/./y", bases[0], "http://a/b/c/g;x=1/y" ], [ "g;x=1/../y", bases[0], "http://a/b/c/y" ], [ "g?y/./x", bases[0], "http://a/b/c/g?y/./x" ], [ "g?y/../x", bases[0], "http://a/b/c/g?y/../x" ], [ "g#s/./x", bases[0], "http://a/b/c/g#s/./x" ], [ "g#s/../x", bases[0], "http://a/b/c/g#s/../x" ], [ "http:g", bases[0], ("http:g", 
"http://a/b/c/g") ], [ "http:", bases[0], ("http:", bases[0]) ], [ "/a/b/c/./../../g", bases[0], "http://a/a/g" ], [ "g", bases[1], "http://a/b/c/g" ], [ "./g", bases[1], "http://a/b/c/g" ], [ "g/", bases[1], "http://a/b/c/g/" ], [ "/g", bases[1], "http://a/g" ], [ "//g", bases[1], "http://g/" ], [ "?y", bases[1], "http://a/b/c/d;p?y" ], [ "g?y", bases[1], "http://a/b/c/g?y" ], [ "g?y/./x", bases[1], "http://a/b/c/g?y/./x" ], [ "g?y/../x", bases[1], "http://a/b/c/g?y/../x" ], [ "g#s", bases[1], "http://a/b/c/g#s" ], [ "g#s/./x", bases[1], "http://a/b/c/g#s/./x" ], [ "g#s/../x", bases[1], "http://a/b/c/g#s/../x" ], [ "./", bases[1], "http://a/b/c/" ], [ "../", bases[1], "http://a/b/" ], [ "../g", bases[1], "http://a/b/g" ], [ "../../", bases[1], "http://a/" ], [ "../../g", bases[1], "http://a/g" ], [ "g", bases[2], "http://a/b/c/d;p=1/g" ], [ "./g", bases[2], "http://a/b/c/d;p=1/g" ], [ "g/", bases[2], "http://a/b/c/d;p=1/g/" ], [ "g?y", bases[2], "http://a/b/c/d;p=1/g?y" ], [ ";x", bases[2], "http://a/b/c/d;p=1/;x" ], [ "g;x", bases[2], "http://a/b/c/d;p=1/g;x" ], [ "g;x=1/./y", bases[2], "http://a/b/c/d;p=1/g;x=1/y" ], [ "g;x=1/../y", bases[2], "http://a/b/c/d;p=1/y" ], [ "./", bases[2], "http://a/b/c/d;p=1/" ], [ "../", bases[2], "http://a/b/c/" ], [ "../g", bases[2], "http://a/b/c/g" ], [ "../../", bases[2], "http://a/b/" ], [ "../../g", bases[2], "http://a/b/g" ], [ "g:h", bases[3], "g:h" ], [ "g", bases[3], "fred:///s//a/b/g" ], [ "./g", bases[3], "fred:///s//a/b/g" ], [ "g/", bases[3], "fred:///s//a/b/g/" ], [ "/g", bases[3], "fred:///g" ], [ "//g", bases[3], "fred://g" ], [ "//g/x", bases[3], "fred://g/x" ], [ "///g", bases[3], "fred:///g" ], [ "./", bases[3], "fred:///s//a/b/" ], [ "../", bases[3], "fred:///s//a/" ], [ "../g", bases[3], "fred:///s//a/g" ], [ "../../", bases[3], "fred:///s//" ], [ "../../g", bases[3], "fred:///s//g" ], [ "../../../g", bases[3], "fred:///s/g" ], [ "../../../../g", bases[3], "fred:///g" ], [ "g:h", bases[4], "g:h" ], [ "g", bases[4], "http:///s//a/b/g" ], [ "./g", bases[4], "http:///s//a/b/g" ], [ "g/", bases[4], "http:///s//a/b/g/" ], [ "/g", bases[4], "http:///g" ], [ "//g", bases[4], "http://g/" ], [ "//g/x", bases[4], "http://g/x" ], [ "///g", bases[4], "http:///g" ], [ "./", bases[4], "http:///s//a/b/" ], [ "../", bases[4], "http:///s//a/" ], [ "../g", bases[4], "http:///s//a/g" ], [ "../../", bases[4], "http:///s//" ], [ "../../g", bases[4], "http:///s//g" ], [ "../../../g", bases[4], "http:///s/g" ], [ "../../../../g", bases[4], "http:///g" ], [ "bar:abc", "foo:xyz", "bar:abc" ], [ "../abc", "http://example/x/y/z", "http://example/x/abc" ], [ "http://example/x/abc", "http://example2/x/y/z", "http://example/x/abc" ], [ "../r", "http://ex/x/y/z", "http://ex/x/r" ], [ "q/r", "http://ex/x/y", "http://ex/x/q/r" ], [ "q/r#s", "http://ex/x/y", "http://ex/x/q/r#s" ], [ "q/r#s/t", "http://ex/x/y", "http://ex/x/q/r#s/t" ], [ "ftp://ex/x/q/r", "http://ex/x/y", "ftp://ex/x/q/r" ], [ "", "http://ex/x/y", "http://ex/x/y" ], [ "", "http://ex/x/y/", "http://ex/x/y/" ], [ "", "http://ex/x/y/pdq", "http://ex/x/y/pdq" ], [ "z/", "http://ex/x/y/", "http://ex/x/y/z/" ], [ "#Animal", "file:/swap/test/animal.rdf", "file:/swap/test/animal.rdf#Animal" ], [ "../abc", "file:/e/x/y/z", "file:/e/x/abc" ], [ "/example/x/abc", "file:/example2/x/y/z", "file:/example/x/abc" ], [ "../r", "file:/ex/x/y/z", "file:/ex/x/r" ], [ "/r", "file:/ex/x/y/z", "file:/r" ], [ "q/r", "file:/ex/x/y", "file:/ex/x/q/r" ], [ "q/r#s", "file:/ex/x/y", "file:/ex/x/q/r#s" ], [ "q/r#", "file:/ex/x/y", "file:/ex/x/q/r#" ], [ "q/r#s/t", "file:/ex/x/y", "file:/ex/x/q/r#s/t" ], [ "ftp://ex/x/q/r", "file:/ex/x/y", "ftp://ex/x/q/r" ], [ "", "file:/ex/x/y", "file:/ex/x/y" ], [ "", "file:/ex/x/y/", "file:/ex/x/y/" ], [ "", "file:/ex/x/y/pdq", "file:/ex/x/y/pdq" ], [ "z/", "file:/ex/x/y/", "file:/ex/x/y/z/" ], [ "file://meetings.example.com/cal#m1", "file:/devel/WWW/2000/10/swap/test/reluri-1.n3", "file://meetings.example.com/cal#m1" ], [ "file://meetings.example.com/cal#m1", "file:/home/connolly/w3ccvs/WWW/2000/10/swap/test/reluri-1.n3", "file://meetings.example.com/cal#m1" ], [ "./#blort", "file:/some/dir/foo", "file:/some/dir/#blort" ], [ "./#", "file:/some/dir/foo", "file:/some/dir/#" ], [ "./", "http://example/x/abc.efg", "http://example/x/" ], [ "./q:r", "http://ex/x/y", "http://ex/x/q:r" ], [ "./p=q:r", "http://ex/x/y", "http://ex/x/p=q:r" ], [ "?pp/rr", "http://ex/x/y?pp/qq", "http://ex/x/y?pp/rr" ], [ "y/z", "http://ex/x/y?pp/qq", "http://ex/x/y/z" ], [ "local/qual@domain.org#frag", "mailto:local", "mailto:local/qual@domain.org#frag" ], [ "more/qual2@domain2.org#frag", "mailto:local/qual1@domain1.org", "mailto:local/more/qual2@domain2.org#frag" ], [ "y?q", "http://ex/x/y?q", "http://ex/x/y?q" ], [ "/x/y?q", "http://ex?p", "http://ex/x/y?q" ], [ "c/d", "foo:a/b", "foo:a/c/d" ], [ "/c/d", "foo:a/b", "foo:/c/d" ], [ "", "foo:a/b?c#d", "foo:a/b?c" ], [ "b/c", "foo:a", "foo:b/c" ], [ "../b/c", "foo:/a/y/z", "foo:/a/b/c" ], [ "./b/c", "foo:a", "foo:b/c" ], [ "/./b/c", "foo:a", "foo:/b/c" ], [ "../../d", "foo://a//b/c", "foo://a/d" ], [ ".", "foo:a", "foo:" ], [ "..", "foo:a", "foo:" ], [ "abc", "http://example/x/y%2Fz", "http://example/x/abc" ], [ "../../x%2Fabc", "http://example/a/x/y/z", "http://example/a/x%2Fabc" ], [ "../x%2Fabc", "http://example/a/x/y%2Fz", "http://example/a/x%2Fabc" ], [ "abc", "http://example/x%2Fy/z", "http://example/x%2Fy/abc" ], [ "q%3Ar", "http://ex/x/y", "http://ex/x/q%3Ar" ], [ "/x%2Fabc", "http://example/x/y%2Fz", "http://example/x%2Fabc" ], [ "/x%2Fabc", "http://example/x/y/z", "http://example/x%2Fabc" ], [ "/x%2Fabc", "http://example/x/y%2Fz", "http://example/x%2Fabc" ], [ "local2@domain2", "mailto:local1@domain1?query1", "mailto:local2@domain2" ], [ "local2@domain2?query2", "mailto:local1@domain1", "mailto:local2@domain2?query2" ], [ "local2@domain2?query2", "mailto:local1@domain1?query1", "mailto:local2@domain2?query2" ], [ "?query2", "mailto:local@domain?query1", "mailto:local@domain?query2" ], [ "local@domain?query2", "mailto:?query1", "mailto:local@domain?query2" ], [ "?query2", "mailto:local@domain?query1", "mailto:local@domain?query2" ], [ "http://example/a/b?c/../d", "foo:bar", "http://example/a/b?c/../d" ], [ "http://example/a/b#c/../d", "foo:bar", "http://example/a/b#c/../d" ], [ "http:this", "http://example.org/base/uri", "http://example.org/base/this" ], [ "http:this", "http:base", "http:this" ], [ ".//g", "f:/a", "f://g" ], [ "b/c//d/e", "f://example.org/base/a", "f://example.org/base/b/c//d/e" ], [ "m2@example.ord/c2@example.org", "mid:m@example.ord/c@example.org", "mid:m@example.ord/m2@example.ord/c2@example.org" ], [ "mini1.xml", "file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/", "file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/mini1.xml" ], [ "../b/c", "foo:a/y/z", "foo:a/b/c" ], [ "http://diff:auth@www.example.com", "http://asdf:qwer@www.example.com", "http://diff:auth@www.example.com/" ] ];
relativeTests2.forEach(function(relativeTest) {
var a = url.resolve(relativeTest[1], relativeTest[0]), e = relativeTest[2];
assert.equal(a, e, "resolve(" + [ relativeTest[1], relativeTest[0] ] + ") == " + e + "\n  actual=" + a);
});
var emptyIsImportant = {
host: true,
hostname: ""
};
relativeTests.forEach(function(relativeTest) {
var actual = url.resolveObject(url.parse(relativeTest[0]), relativeTest[1]), expected = url.parse(relativeTest[2]);
assert.deepEqual(actual, expected);
expected = relativeTest[2];
actual = url.format(actual);
assert.equal(actual, expected, "format(" + actual + ") == " + expected + "\nactual:" + actual);
});
if (relativeTests2[181][0] === ".//g" && relativeTests2[181][1] === "f:/a" && relativeTests2[181][2] === "f://g") {
relativeTests2.splice(181, 1);
}
relativeTests2.forEach(function(relativeTest) {
var actual = url.resolveObject(url.parse(relativeTest[1]), relativeTest[0]), expected = url.parse(relativeTest[2]);
assert.deepEqual(actual, expected);
var expected = relativeTest[2], actual = url.format(actual);
assert.equal(actual, expected, "format(" + relativeTest[1] + ") == " + expected + "\nactual:" + actual);
});
});
}, function(module, exports, __webpack_require__) {
"use strict";
function compare(a, b) {
if (a === b) {
return 0;
}
var x = a.length;
var y = b.length;
for (var i = 0, len = Math.min(x, y); i < len; ++i) {
if (a[i] !== b[i]) {
x = a[i];
y = b[i];
break;
}
}
if (x < y) {
return -1;
}
if (y < x) {
return 1;
}
return 0;
}
function isBuffer(b) {
if (global.Buffer && typeof global.Buffer.isBuffer === "function") {
return global.Buffer.isBuffer(b);
}
return !!(b != null && b._isBuffer);
}
var util = __webpack_require__(310);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = function() {
return function foo() {}.name === "foo";
}();
function pToString(obj) {
return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
if (isBuffer(arrbuf)) {
return false;
}
if (typeof global.ArrayBuffer !== "function") {
return false;
}
if (typeof ArrayBuffer.isView === "function") {
return ArrayBuffer.isView(arrbuf);
}
if (!arrbuf) {
return false;
}
if (arrbuf instanceof DataView) {
return true;
}
if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
return true;
}
return false;
}
var assert = module.exports = ok;
var regex = /\s*function\s+([^\(\s]*)\s*/;
function getName(func) {
if (!util.isFunction(func)) {
return;
}
if (functionsHaveNames) {
return func.name;
}
var str = func.toString();
var match = str.match(regex);
return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
this.name = "AssertionError";
this.actual = options.actual;
this.expected = options.expected;
this.operator = options.operator;
if (options.message) {
this.message = options.message;
this.generatedMessage = false;
} else {
this.message = getMessage(this);
this.generatedMessage = true;
}
var stackStartFunction = options.stackStartFunction || fail;
if (Error.captureStackTrace) {
Error.captureStackTrace(this, stackStartFunction);
} else {
var err = new Error();
if (err.stack) {
var out = err.stack;
var fn_name = getName(stackStartFunction);
var idx = out.indexOf("\n" + fn_name);
if (idx >= 0) {
var next_line = out.indexOf("\n", idx + 1);
out = out.substring(next_line + 1);
}
this.stack = out;
}
}
};
util.inherits(assert.AssertionError, Error);
function truncate(s, n) {
if (typeof s === "string") {
return s.length < n ? s : s.slice(0, n);
} else {
return s;
}
}
function inspect(something) {
if (functionsHaveNames || !util.isFunction(something)) {
return util.inspect(something);
}
var rawname = getName(something);
var name = rawname ? ": " + rawname : "";
return "[Function" + name + "]";
}
function getMessage(self) {
return truncate(inspect(self.actual), 128) + " " + self.operator + " " + truncate(inspect(self.expected), 128);
}
function fail(actual, expected, message, operator, stackStartFunction) {
throw new assert.AssertionError({
message: message,
actual: actual,
expected: expected,
operator: operator,
stackStartFunction: stackStartFunction
});
}
assert.fail = fail;
function ok(value, message) {
if (!value) fail(value, true, message, "==", assert.ok);
}
assert.ok = ok;
assert.equal = function equal(actual, expected, message) {
if (actual != expected) fail(actual, expected, message, "==", assert.equal);
};
assert.notEqual = function notEqual(actual, expected, message) {
if (actual == expected) {
fail(actual, expected, message, "!=", assert.notEqual);
}
};
assert.deepEqual = function deepEqual(actual, expected, message) {
if (!_deepEqual(actual, expected, false)) {
fail(actual, expected, message, "deepEqual", assert.deepEqual);
}
};
assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
if (!_deepEqual(actual, expected, true)) {
fail(actual, expected, message, "deepStrictEqual", assert.deepStrictEqual);
}
};
function _deepEqual(actual, expected, strict, memos) {
if (actual === expected) {
return true;
} else if (isBuffer(actual) && isBuffer(expected)) {
return compare(actual, expected) === 0;
} else if (util.isDate(actual) && util.isDate(expected)) {
return actual.getTime() === expected.getTime();
} else if (util.isRegExp(actual) && util.isRegExp(expected)) {
return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
} else if ((actual === null || typeof actual !== "object") && (expected === null || typeof expected !== "object")) {
return strict ? actual === expected : actual == expected;
} else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;
} else if (isBuffer(actual) !== isBuffer(expected)) {
return false;
} else {
memos = memos || {
actual: [],
expected: []
};
var actualIndex = memos.actual.indexOf(actual);
if (actualIndex !== -1) {
if (actualIndex === memos.expected.indexOf(expected)) {
return true;
}
}
memos.actual.push(actual);
memos.expected.push(expected);
return objEquiv(actual, expected, strict, memos);
}
}
function isArguments(object) {
return Object.prototype.toString.call(object) == "[object Arguments]";
}
function objEquiv(a, b, strict, actualVisitedObjects) {
if (a === null || a === undefined || b === null || b === undefined) return false;
if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
var aIsArgs = isArguments(a);
var bIsArgs = isArguments(b);
if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
if (aIsArgs) {
a = pSlice.call(a);
b = pSlice.call(b);
return _deepEqual(a, b, strict);
}
var ka = objectKeys(a);
var kb = objectKeys(b);
var key, i;
if (ka.length !== kb.length) return false;
ka.sort();
kb.sort();
for (i = ka.length - 1; i >= 0; i--) {
if (ka[i] !== kb[i]) return false;
}
for (i = ka.length - 1; i >= 0; i--) {
key = ka[i];
if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
}
return true;
}
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
if (_deepEqual(actual, expected, false)) {
fail(actual, expected, message, "notDeepEqual", assert.notDeepEqual);
}
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
if (_deepEqual(actual, expected, true)) {
fail(actual, expected, message, "notDeepStrictEqual", notDeepStrictEqual);
}
}
assert.strictEqual = function strictEqual(actual, expected, message) {
if (actual !== expected) {
fail(actual, expected, message, "===", assert.strictEqual);
}
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
if (actual === expected) {
fail(actual, expected, message, "!==", assert.notStrictEqual);
}
};
function expectedException(actual, expected) {
if (!actual || !expected) {
return false;
}
if (Object.prototype.toString.call(expected) == "[object RegExp]") {
return expected.test(actual);
}
try {
if (actual instanceof expected) {
return true;
}
} catch (e) {}
if (Error.isPrototypeOf(expected)) {
return false;
}
return expected.call({}, actual) === true;
}
function _tryBlock(block) {
var error;
try {
block();
} catch (e) {
error = e;
}
return error;
}
function _throws(shouldThrow, block, expected, message) {
var actual;
if (typeof block !== "function") {
throw new TypeError('"block" argument must be a function');
}
if (typeof expected === "string") {
message = expected;
expected = null;
}
actual = _tryBlock(block);
message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
if (shouldThrow && !actual) {
fail(actual, expected, "Missing expected exception" + message);
}
var userProvidedMessage = typeof message === "string";
var isUnwantedException = !shouldThrow && util.isError(actual);
var isUnexpectedException = !shouldThrow && actual && !expected;
if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
fail(actual, expected, "Got unwanted exception" + message);
}
if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
throw actual;
}
}
assert.throws = function(block, error, message) {
_throws(true, block, error, message);
};
assert.doesNotThrow = function(block, error, message) {
_throws(false, block, error, message);
};
assert.ifError = function(err) {
if (err) throw err;
};
var objectKeys = Object.keys || function(obj) {
var keys = [];
for (var key in obj) {
if (hasOwn.call(obj, key)) keys.push(key);
}
return keys;
};
}, function(module, exports, __webpack_require__) {
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
if (!isString(f)) {
var objects = [];
for (var i = 0; i < arguments.length; i++) {
objects.push(inspect(arguments[i]));
}
return objects.join(" ");
}
var i = 1;
var args = arguments;
var len = args.length;
var str = String(f).replace(formatRegExp, function(x) {
if (x === "%%") return "%";
if (i >= len) return x;
switch (x) {
case "%s":
return String(args[i++]);

case "%d":
return Number(args[i++]);

case "%j":
try {
return JSON.stringify(args[i++]);
} catch (_) {
return "[Circular]";
}

default:
return x;
}
});
for (var x = args[i]; i < len; x = args[++i]) {
if (isNull(x) || !isObject(x)) {
str += " " + x;
} else {
str += " " + inspect(x);
}
}
return str;
};
exports.deprecate = function(fn, msg) {
if (isUndefined(global.process)) {
return function() {
return exports.deprecate(fn, msg).apply(this, arguments);
};
}
if (process.noDeprecation === true) {
return fn;
}
var warned = false;
function deprecated() {
if (!warned) {
if (process.throwDeprecation) {
throw new Error(msg);
} else if (process.traceDeprecation) {
console.trace(msg);
} else {
console.error(msg);
}
warned = true;
}
return fn.apply(this, arguments);
}
return deprecated;
};
var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
set = set.toUpperCase();
if (!debugs[set]) {
if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
var pid = process.pid;
debugs[set] = function() {
var msg = exports.format.apply(exports, arguments);
console.error("%s %d: %s", set, pid, msg);
};
} else {
debugs[set] = function() {};
}
}
return debugs[set];
};
function inspect(obj, opts) {
var ctx = {
seen: [],
stylize: stylizeNoColor
};
if (arguments.length >= 3) ctx.depth = arguments[2];
if (arguments.length >= 4) ctx.colors = arguments[3];
if (isBoolean(opts)) {
ctx.showHidden = opts;
} else if (opts) {
exports._extend(ctx, opts);
}
if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
if (isUndefined(ctx.depth)) ctx.depth = 2;
if (isUndefined(ctx.colors)) ctx.colors = false;
if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
if (ctx.colors) ctx.stylize = stylizeWithColor;
return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
inspect.colors = {
bold: [ 1, 22 ],
italic: [ 3, 23 ],
underline: [ 4, 24 ],
inverse: [ 7, 27 ],
white: [ 37, 39 ],
grey: [ 90, 39 ],
black: [ 30, 39 ],
blue: [ 34, 39 ],
cyan: [ 36, 39 ],
green: [ 32, 39 ],
magenta: [ 35, 39 ],
red: [ 31, 39 ],
yellow: [ 33, 39 ]
};
inspect.styles = {
special: "cyan",
number: "yellow",
boolean: "yellow",
undefined: "grey",
null: "bold",
string: "green",
date: "magenta",
regexp: "red"
};
function stylizeWithColor(str, styleType) {
var style = inspect.styles[styleType];
if (style) {
return "[" + inspect.colors[style][0] + "m" + str + "[" + inspect.colors[style][1] + "m";
} else {
return str;
}
}
function stylizeNoColor(str, styleType) {
return str;
}
function arrayToHash(array) {
var hash = {};
array.forEach(function(val, idx) {
hash[val] = true;
});
return hash;
}
function formatValue(ctx, value, recurseTimes) {
if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (!isString(ret)) {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
var keys = Object.keys(value);
var visibleKeys = arrayToHash(keys);
if (ctx.showHidden) {
keys = Object.getOwnPropertyNames(value);
}
if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
return formatError(value);
}
if (keys.length === 0) {
if (isFunction(value)) {
var name = value.name ? ": " + value.name : "";
return ctx.stylize("[Function" + name + "]", "special");
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toString.call(value), "date");
}
if (isError(value)) {
return formatError(value);
}
}
var base = "", array = false, braces = [ "{", "}" ];
if (isArray(value)) {
array = true;
braces = [ "[", "]" ];
}
if (isFunction(value)) {
var n = value.name ? ": " + value.name : "";
base = " [Function" + n + "]";
}
if (isRegExp(value)) {
base = " " + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = " " + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
base = " " + formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
} else {
return ctx.stylize("[Object]", "special");
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else {
output = keys.map(function(key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
if (isString(value)) {
var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
return ctx.stylize(simple, "string");
}
if (isNumber(value)) return ctx.stylize("" + value, "number");
if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (hasOwnProperty(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push("");
}
}
keys.forEach(function(key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name, str, desc;
desc = Object.getOwnPropertyDescriptor(value, key) || {
value: value[key]
};
if (desc.get) {
if (desc.set) {
str = ctx.stylize("[Getter/Setter]", "special");
} else {
str = ctx.stylize("[Getter]", "special");
}
} else {
if (desc.set) {
str = ctx.stylize("[Setter]", "special");
}
}
if (!hasOwnProperty(visibleKeys, key)) {
name = "[" + key + "]";
}
if (!str) {
if (ctx.seen.indexOf(desc.value) < 0) {
if (isNull(recurseTimes)) {
str = formatValue(ctx, desc.value, null);
} else {
str = formatValue(ctx, desc.value, recurseTimes - 1);
}
if (str.indexOf("\n") > -1) {
if (array) {
str = str.split("\n").map(function(line) {
return "  " + line;
}).join("\n").substr(2);
} else {
str = "\n" + str.split("\n").map(function(line) {
return "   " + line;
}).join("\n");
}
}
} else {
str = ctx.stylize("[Circular]", "special");
}
}
if (isUndefined(name)) {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify("" + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, "name");
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, "string");
}
}
return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function(prev, cur) {
numLinesEst++;
if (cur.indexOf("\n") >= 0) numLinesEst++;
return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
}
return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
function isError(e) {
return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(311);
function objectToString(o) {
return Object.prototype.toString.call(o);
}
function pad(n) {
return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
function timestamp() {
var d = new Date();
var time = [ pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds()) ].join(":");
return [ d.getDate(), months[d.getMonth()], time ].join(" ");
}
exports.log = function() {
console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
exports.inherits = __webpack_require__(312);
exports._extend = function(origin, add) {
if (!add || !isObject(add)) return origin;
var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
}, function(module, exports) {
module.exports = function isBuffer(arg) {
return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};
}, function(module, exports, __webpack_require__) {
module.exports = __webpack_require__(310).inherits;
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var os = __webpack_require__(314);
var hookHelper = __webpack_require__(280);
var projectDir = hookHelper.findProjectDir();
if (projectDir) {
var hooksDir = hookHelper.getHooksDir(), beforeLivesyncHookDir = hookHelper.getBeforeLivesyncHookDir(), content = 'module.exports = require("nativescript-angular/hooks/before-livesync");';
if (!fs.existsSync(hooksDir)) {
fs.mkdirSync(hooksDir);
}
if (!fs.existsSync(beforeLivesyncHookDir)) {
fs.mkdirSync(beforeLivesyncHookDir);
}
fs.writeFileSync(hookHelper.getHookFilePath(), content + os.EOL);
}
}, function(module, exports) {
exports.endianness = function() {
return "LE";
};
exports.hostname = function() {
if (typeof location !== "undefined") {
return location.hostname;
} else return "";
};
exports.loadavg = function() {
return [];
};
exports.uptime = function() {
return 0;
};
exports.freemem = function() {
return Number.MAX_VALUE;
};
exports.totalmem = function() {
return Number.MAX_VALUE;
};
exports.cpus = function() {
return [];
};
exports.type = function() {
return "Browser";
};
exports.release = function() {
if (typeof navigator !== "undefined") {
return navigator.appVersion;
}
return "";
};
exports.networkInterfaces = exports.getNetworkInterfaces = function() {
return {};
};
exports.arch = function() {
return "javascript";
};
exports.platform = function() {
return "browser";
};
exports.tmpdir = exports.tmpDir = function() {
return "/tmp";
};
exports.EOL = "\n";
}, function(module, exports, __webpack_require__) {
var core_1 = __webpack_require__(156);
exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
exports.DebugDomRootRenderer = core_1.__core_private__.DebugDomRootRenderer;
exports.reflector = core_1.__core_private__.reflector;
exports.NoOpAnimationPlayer = core_1.__core_private__.NoOpAnimationPlayer;
exports.AnimationPlayer = core_1.__core_private__.AnimationPlayer;
exports.AnimationSequencePlayer = core_1.__core_private__.AnimationSequencePlayer;
exports.AnimationGroupPlayer = core_1.__core_private__.AnimationGroupPlayer;
exports.AnimationKeyframe = core_1.__core_private__.AnimationKeyframe;
exports.AnimationStyles = core_1.__core_private__.AnimationStyles;
exports.prepareFinalAnimationStyles = core_1.__core_private__.prepareFinalAnimationStyles;
exports.balanceAnimationKeyframes = core_1.__core_private__.balanceAnimationKeyframes;
exports.clearStyles = core_1.__core_private__.clearStyles;
exports.collectAndResolveStyles = core_1.__core_private__.collectAndResolveStyles;
}, function(module, exports, __webpack_require__) {
"use strict";
var Subject_1 = __webpack_require__(157);
exports.Subject = Subject_1.Subject;
var Observable_1 = __webpack_require__(158);
exports.Observable = Observable_1.Observable;
__webpack_require__(317);
__webpack_require__(321);
__webpack_require__(324);
__webpack_require__(327);
__webpack_require__(330);
__webpack_require__(333);
__webpack_require__(335);
__webpack_require__(338);
__webpack_require__(339);
__webpack_require__(342);
__webpack_require__(284);
__webpack_require__(345);
__webpack_require__(347);
__webpack_require__(350);
__webpack_require__(359);
__webpack_require__(362);
__webpack_require__(364);
__webpack_require__(368);
__webpack_require__(369);
__webpack_require__(371);
__webpack_require__(374);
__webpack_require__(377);
__webpack_require__(380);
__webpack_require__(383);
__webpack_require__(387);
__webpack_require__(390);
__webpack_require__(393);
__webpack_require__(401);
__webpack_require__(403);
__webpack_require__(405);
__webpack_require__(407);
__webpack_require__(409);
__webpack_require__(411);
__webpack_require__(413);
__webpack_require__(414);
__webpack_require__(416);
__webpack_require__(417);
__webpack_require__(418);
__webpack_require__(419);
__webpack_require__(420);
__webpack_require__(423);
__webpack_require__(425);
__webpack_require__(427);
__webpack_require__(429);
__webpack_require__(431);
__webpack_require__(433);
__webpack_require__(435);
__webpack_require__(437);
__webpack_require__(439);
__webpack_require__(441);
__webpack_require__(443);
__webpack_require__(445);
__webpack_require__(447);
__webpack_require__(449);
__webpack_require__(451);
__webpack_require__(453);
__webpack_require__(456);
__webpack_require__(457);
__webpack_require__(459);
__webpack_require__(461);
__webpack_require__(463);
__webpack_require__(464);
__webpack_require__(469);
__webpack_require__(471);
__webpack_require__(473);
__webpack_require__(475);
__webpack_require__(477);
__webpack_require__(478);
__webpack_require__(480);
__webpack_require__(481);
__webpack_require__(482);
__webpack_require__(484);
__webpack_require__(486);
__webpack_require__(488);
__webpack_require__(489);
__webpack_require__(490);
__webpack_require__(491);
__webpack_require__(492);
__webpack_require__(494);
__webpack_require__(496);
__webpack_require__(500);
__webpack_require__(501);
__webpack_require__(502);
__webpack_require__(504);
__webpack_require__(507);
__webpack_require__(509);
__webpack_require__(511);
__webpack_require__(513);
__webpack_require__(515);
__webpack_require__(517);
__webpack_require__(518);
__webpack_require__(519);
__webpack_require__(521);
__webpack_require__(523);
__webpack_require__(525);
__webpack_require__(527);
__webpack_require__(529);
__webpack_require__(531);
__webpack_require__(533);
__webpack_require__(535);
__webpack_require__(537);
__webpack_require__(539);
__webpack_require__(541);
__webpack_require__(543);
__webpack_require__(545);
__webpack_require__(547);
__webpack_require__(554);
__webpack_require__(556);
__webpack_require__(558);
__webpack_require__(560);
__webpack_require__(562);
__webpack_require__(564);
__webpack_require__(566);
__webpack_require__(568);
__webpack_require__(570);
__webpack_require__(572);
__webpack_require__(574);
__webpack_require__(576);
__webpack_require__(578);
__webpack_require__(580);
__webpack_require__(582);
__webpack_require__(583);
__webpack_require__(585);
__webpack_require__(587);
__webpack_require__(589);
__webpack_require__(591);
__webpack_require__(593);
__webpack_require__(595);
__webpack_require__(596);
var Subscription_1 = __webpack_require__(163);
exports.Subscription = Subscription_1.Subscription;
var Subscriber_1 = __webpack_require__(161);
exports.Subscriber = Subscriber_1.Subscriber;
var AsyncSubject_1 = __webpack_require__(320);
exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
var ReplaySubject_1 = __webpack_require__(396);
exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
var BehaviorSubject_1 = __webpack_require__(236);
exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
var MulticastObservable_1 = __webpack_require__(498);
exports.MulticastObservable = MulticastObservable_1.MulticastObservable;
var ConnectableObservable_1 = __webpack_require__(499);
exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
var Notification_1 = __webpack_require__(248);
exports.Notification = Notification_1.Notification;
var EmptyError_1 = __webpack_require__(257);
exports.EmptyError = EmptyError_1.EmptyError;
var ArgumentOutOfRangeError_1 = __webpack_require__(455);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
var ObjectUnsubscribedError_1 = __webpack_require__(172);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var UnsubscriptionError_1 = __webpack_require__(168);
exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var timeInterval_1 = __webpack_require__(573);
exports.TimeInterval = timeInterval_1.TimeInterval;
var timestamp_1 = __webpack_require__(579);
exports.Timestamp = timestamp_1.Timestamp;
var TestScheduler_1 = __webpack_require__(598);
exports.TestScheduler = TestScheduler_1.TestScheduler;
var VirtualTimeScheduler_1 = __webpack_require__(604);
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
var AjaxObservable_1 = __webpack_require__(392);
exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
exports.AjaxError = AjaxObservable_1.AjaxError;
exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
var asap_1 = __webpack_require__(550);
var async_1 = __webpack_require__(354);
var queue_1 = __webpack_require__(397);
var animationFrame_1 = __webpack_require__(605);
var rxSubscriber_1 = __webpack_require__(170);
var iterator_1 = __webpack_require__(241);
var observable_1 = __webpack_require__(171);
var Scheduler = {
asap: asap_1.asap,
queue: queue_1.queue,
animationFrame: animationFrame_1.animationFrame,
async: async_1.async
};
exports.Scheduler = Scheduler;
var Symbol = {
rxSubscriber: rxSubscriber_1.$$rxSubscriber,
observable: observable_1.$$observable,
iterator: iterator_1.$$iterator
};
exports.Symbol = Symbol;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var bindCallback_1 = __webpack_require__(318);
Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
}, function(module, exports, __webpack_require__) {
"use strict";
var BoundCallbackObservable_1 = __webpack_require__(319);
exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var AsyncSubject_1 = __webpack_require__(320);
var BoundCallbackObservable = function(_super) {
__extends(BoundCallbackObservable, _super);
function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {
_super.call(this);
this.callbackFunc = callbackFunc;
this.selector = selector;
this.args = args;
this.scheduler = scheduler;
}
BoundCallbackObservable.create = function(func, selector, scheduler) {
if (selector === void 0) {
selector = undefined;
}
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
return new BoundCallbackObservable(func, selector, args, scheduler);
};
};
BoundCallbackObservable.prototype._subscribe = function(subscriber) {
var callbackFunc = this.callbackFunc;
var args = this.args;
var scheduler = this.scheduler;
var subject = this.subject;
if (!scheduler) {
if (!subject) {
subject = this.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
if (selector) {
var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_1 === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
} else {
subject.next(result_1);
subject.complete();
}
} else {
subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
subject.complete();
}
};
handler.source = this;
var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
return subject.subscribe(subscriber);
} else {
return scheduler.schedule(BoundCallbackObservable.dispatch, 0, {
source: this,
subscriber: subscriber
});
}
};
BoundCallbackObservable.dispatch = function(state) {
var self = this;
var source = state.source, subscriber = state.subscriber;
var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;
var subject = source.subject;
if (!subject) {
subject = source.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
if (selector) {
var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_2 === errorObject_1.errorObject) {
self.add(scheduler.schedule(dispatchError, 0, {
err: errorObject_1.errorObject.e,
subject: subject
}));
} else {
self.add(scheduler.schedule(dispatchNext, 0, {
value: result_2,
subject: subject
}));
}
} else {
var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
self.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subject: subject
}));
}
};
handler.source = source;
var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
self.add(subject.subscribe(subscriber));
};
return BoundCallbackObservable;
}(Observable_1.Observable);
exports.BoundCallbackObservable = BoundCallbackObservable;
function dispatchNext(arg) {
var value = arg.value, subject = arg.subject;
subject.next(value);
subject.complete();
}
function dispatchError(arg) {
var err = arg.err, subject = arg.subject;
subject.error(err);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var Subscription_1 = __webpack_require__(163);
var AsyncSubject = function(_super) {
__extends(AsyncSubject, _super);
function AsyncSubject() {
_super.apply(this, arguments);
this.value = null;
this.hasNext = false;
this.hasCompleted = false;
}
AsyncSubject.prototype._subscribe = function(subscriber) {
if (this.hasCompleted && this.hasNext) {
subscriber.next(this.value);
subscriber.complete();
return Subscription_1.Subscription.EMPTY;
} else if (this.hasError) {
subscriber.error(this.thrownError);
return Subscription_1.Subscription.EMPTY;
}
return _super.prototype._subscribe.call(this, subscriber);
};
AsyncSubject.prototype.next = function(value) {
if (!this.hasCompleted) {
this.value = value;
this.hasNext = true;
}
};
AsyncSubject.prototype.complete = function() {
this.hasCompleted = true;
if (this.hasNext) {
_super.prototype.next.call(this, this.value);
}
_super.prototype.complete.call(this);
};
return AsyncSubject;
}(Subject_1.Subject);
exports.AsyncSubject = AsyncSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var bindNodeCallback_1 = __webpack_require__(322);
Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
}, function(module, exports, __webpack_require__) {
"use strict";
var BoundNodeCallbackObservable_1 = __webpack_require__(323);
exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var AsyncSubject_1 = __webpack_require__(320);
var BoundNodeCallbackObservable = function(_super) {
__extends(BoundNodeCallbackObservable, _super);
function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {
_super.call(this);
this.callbackFunc = callbackFunc;
this.selector = selector;
this.args = args;
this.scheduler = scheduler;
}
BoundNodeCallbackObservable.create = function(func, selector, scheduler) {
if (selector === void 0) {
selector = undefined;
}
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
return new BoundNodeCallbackObservable(func, selector, args, scheduler);
};
};
BoundNodeCallbackObservable.prototype._subscribe = function(subscriber) {
var callbackFunc = this.callbackFunc;
var args = this.args;
var scheduler = this.scheduler;
var subject = this.subject;
if (!scheduler) {
if (!subject) {
subject = this.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
var err = innerArgs.shift();
if (err) {
subject.error(err);
} else if (selector) {
var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_1 === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
} else {
subject.next(result_1);
subject.complete();
}
} else {
subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
subject.complete();
}
};
handler.source = this;
var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
return subject.subscribe(subscriber);
} else {
return scheduler.schedule(dispatch, 0, {
source: this,
subscriber: subscriber
});
}
};
return BoundNodeCallbackObservable;
}(Observable_1.Observable);
exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
function dispatch(state) {
var self = this;
var source = state.source, subscriber = state.subscriber;
var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;
var subject = source.subject;
if (!subject) {
subject = source.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
var err = innerArgs.shift();
if (err) {
subject.error(err);
} else if (selector) {
var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_2 === errorObject_1.errorObject) {
self.add(scheduler.schedule(dispatchError, 0, {
err: errorObject_1.errorObject.e,
subject: subject
}));
} else {
self.add(scheduler.schedule(dispatchNext, 0, {
value: result_2,
subject: subject
}));
}
} else {
var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
self.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subject: subject
}));
}
};
handler.source = source;
var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
self.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
var value = arg.value, subject = arg.subject;
subject.next(value);
subject.complete();
}
function dispatchError(arg) {
var err = arg.err, subject = arg.subject;
subject.error(err);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var combineLatest_1 = __webpack_require__(325);
Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
}, function(module, exports, __webpack_require__) {
"use strict";
var isScheduler_1 = __webpack_require__(245);
var isArray_1 = __webpack_require__(164);
var ArrayObservable_1 = __webpack_require__(242);
var combineLatest_1 = __webpack_require__(326);
function combineLatest() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var project = null;
var scheduler = null;
if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
scheduler = observables.pop();
}
if (typeof observables[observables.length - 1] === "function") {
project = observables.pop();
}
if (observables.length === 1 && isArray_1.isArray(observables[0])) {
observables = observables[0];
}
return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__(242);
var isArray_1 = __webpack_require__(164);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
var none = {};
function combineLatest() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var project = null;
if (typeof observables[observables.length - 1] === "function") {
project = observables.pop();
}
if (observables.length === 1 && isArray_1.isArray(observables[0])) {
observables = observables[0];
}
observables.unshift(this);
return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = function() {
function CombineLatestOperator(project) {
this.project = project;
}
CombineLatestOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));
};
return CombineLatestOperator;
}();
exports.CombineLatestOperator = CombineLatestOperator;
var CombineLatestSubscriber = function(_super) {
__extends(CombineLatestSubscriber, _super);
function CombineLatestSubscriber(destination, project) {
_super.call(this, destination);
this.project = project;
this.active = 0;
this.values = [];
this.observables = [];
}
CombineLatestSubscriber.prototype._next = function(observable) {
this.values.push(none);
this.observables.push(observable);
};
CombineLatestSubscriber.prototype._complete = function() {
var observables = this.observables;
var len = observables.length;
if (len === 0) {
this.destination.complete();
} else {
this.active = len;
this.toRespond = len;
for (var i = 0; i < len; i++) {
var observable = observables[i];
this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
}
}
};
CombineLatestSubscriber.prototype.notifyComplete = function(unused) {
if ((this.active -= 1) === 0) {
this.destination.complete();
}
};
CombineLatestSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var values = this.values;
var oldVal = values[outerIndex];
var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;
values[outerIndex] = innerValue;
if (toRespond === 0) {
if (this.project) {
this._tryProject(values);
} else {
this.destination.next(values.slice());
}
}
};
CombineLatestSubscriber.prototype._tryProject = function(values) {
var result;
try {
result = this.project.apply(this, values);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.CombineLatestSubscriber = CombineLatestSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var concat_1 = __webpack_require__(328);
Observable_1.Observable.concat = concat_1.concat;
}, function(module, exports, __webpack_require__) {
"use strict";
var concat_1 = __webpack_require__(329);
exports.concat = concat_1.concatStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var isScheduler_1 = __webpack_require__(245);
var ArrayObservable_1 = __webpack_require__(242);
var mergeAll_1 = __webpack_require__(262);
function concat() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
return concatStatic.apply(void 0, [ this ].concat(observables));
}
exports.concat = concat;
function concatStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var scheduler = null;
var args = observables;
if (isScheduler_1.isScheduler(args[observables.length - 1])) {
scheduler = args.pop();
}
return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatStatic = concatStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var defer_1 = __webpack_require__(331);
Observable_1.Observable.defer = defer_1.defer;
}, function(module, exports, __webpack_require__) {
"use strict";
var DeferObservable_1 = __webpack_require__(332);
exports.defer = DeferObservable_1.DeferObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
var DeferObservable = function(_super) {
__extends(DeferObservable, _super);
function DeferObservable(observableFactory) {
_super.call(this);
this.observableFactory = observableFactory;
}
DeferObservable.create = function(observableFactory) {
return new DeferObservable(observableFactory);
};
DeferObservable.prototype._subscribe = function(subscriber) {
return new DeferSubscriber(subscriber, this.observableFactory);
};
return DeferObservable;
}(Observable_1.Observable);
exports.DeferObservable = DeferObservable;
var DeferSubscriber = function(_super) {
__extends(DeferSubscriber, _super);
function DeferSubscriber(destination, factory) {
_super.call(this, destination);
this.factory = factory;
this.tryDefer();
}
DeferSubscriber.prototype.tryDefer = function() {
try {
this._callFactory();
} catch (err) {
this._error(err);
}
};
DeferSubscriber.prototype._callFactory = function() {
var result = this.factory();
if (result) {
this.add(subscribeToResult_1.subscribeToResult(this, result));
}
};
return DeferSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var empty_1 = __webpack_require__(334);
Observable_1.Observable.empty = empty_1.empty;
}, function(module, exports, __webpack_require__) {
"use strict";
var EmptyObservable_1 = __webpack_require__(244);
exports.empty = EmptyObservable_1.EmptyObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var forkJoin_1 = __webpack_require__(336);
Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
}, function(module, exports, __webpack_require__) {
"use strict";
var ForkJoinObservable_1 = __webpack_require__(337);
exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var EmptyObservable_1 = __webpack_require__(244);
var isArray_1 = __webpack_require__(164);
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
var ForkJoinObservable = function(_super) {
__extends(ForkJoinObservable, _super);
function ForkJoinObservable(sources, resultSelector) {
_super.call(this);
this.sources = sources;
this.resultSelector = resultSelector;
}
ForkJoinObservable.create = function() {
var sources = [];
for (var _i = 0; _i < arguments.length; _i++) {
sources[_i - 0] = arguments[_i];
}
if (sources === null || arguments.length === 0) {
return new EmptyObservable_1.EmptyObservable();
}
var resultSelector = null;
if (typeof sources[sources.length - 1] === "function") {
resultSelector = sources.pop();
}
if (sources.length === 1 && isArray_1.isArray(sources[0])) {
sources = sources[0];
}
if (sources.length === 0) {
return new EmptyObservable_1.EmptyObservable();
}
return new ForkJoinObservable(sources, resultSelector);
};
ForkJoinObservable.prototype._subscribe = function(subscriber) {
return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
};
return ForkJoinObservable;
}(Observable_1.Observable);
exports.ForkJoinObservable = ForkJoinObservable;
var ForkJoinSubscriber = function(_super) {
__extends(ForkJoinSubscriber, _super);
function ForkJoinSubscriber(destination, sources, resultSelector) {
_super.call(this, destination);
this.sources = sources;
this.resultSelector = resultSelector;
this.completed = 0;
this.haveValues = 0;
var len = sources.length;
this.total = len;
this.values = new Array(len);
for (var i = 0; i < len; i++) {
var source = sources[i];
var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
if (innerSubscription) {
innerSubscription.outerIndex = i;
this.add(innerSubscription);
}
}
}
ForkJoinSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.values[outerIndex] = innerValue;
if (!innerSub._hasValue) {
innerSub._hasValue = true;
this.haveValues++;
}
};
ForkJoinSubscriber.prototype.notifyComplete = function(innerSub) {
var destination = this.destination;
var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
var len = values.length;
if (!innerSub._hasValue) {
destination.complete();
return;
}
this.completed++;
if (this.completed !== len) {
return;
}
if (haveValues === len) {
var value = resultSelector ? resultSelector.apply(this, values) : values;
destination.next(value);
}
destination.complete();
};
return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var from_1 = __webpack_require__(237);
Observable_1.Observable.from = from_1.from;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var fromEvent_1 = __webpack_require__(340);
Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
}, function(module, exports, __webpack_require__) {
"use strict";
var FromEventObservable_1 = __webpack_require__(341);
exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var tryCatch_1 = __webpack_require__(166);
var isFunction_1 = __webpack_require__(162);
var errorObject_1 = __webpack_require__(167);
var Subscription_1 = __webpack_require__(163);
function isNodeStyleEventEmmitter(sourceObj) {
return !!sourceObj && typeof sourceObj.addListener === "function" && typeof sourceObj.removeListener === "function";
}
function isJQueryStyleEventEmitter(sourceObj) {
return !!sourceObj && typeof sourceObj.on === "function" && typeof sourceObj.off === "function";
}
function isNodeList(sourceObj) {
return !!sourceObj && sourceObj.toString() === "[object NodeList]";
}
function isHTMLCollection(sourceObj) {
return !!sourceObj && sourceObj.toString() === "[object HTMLCollection]";
}
function isEventTarget(sourceObj) {
return !!sourceObj && typeof sourceObj.addEventListener === "function" && typeof sourceObj.removeEventListener === "function";
}
var FromEventObservable = function(_super) {
__extends(FromEventObservable, _super);
function FromEventObservable(sourceObj, eventName, selector, options) {
_super.call(this);
this.sourceObj = sourceObj;
this.eventName = eventName;
this.selector = selector;
this.options = options;
}
FromEventObservable.create = function(target, eventName, options, selector) {
if (isFunction_1.isFunction(options)) {
selector = options;
options = undefined;
}
return new FromEventObservable(target, eventName, selector, options);
};
FromEventObservable.setupSubscription = function(sourceObj, eventName, handler, subscriber, options) {
var unsubscribe;
if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
for (var i = 0, len = sourceObj.length; i < len; i++) {
FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
}
} else if (isEventTarget(sourceObj)) {
var source_1 = sourceObj;
sourceObj.addEventListener(eventName, handler, options);
unsubscribe = function() {
return source_1.removeEventListener(eventName, handler);
};
} else if (isJQueryStyleEventEmitter(sourceObj)) {
var source_2 = sourceObj;
sourceObj.on(eventName, handler);
unsubscribe = function() {
return source_2.off(eventName, handler);
};
} else if (isNodeStyleEventEmmitter(sourceObj)) {
var source_3 = sourceObj;
sourceObj.addListener(eventName, handler);
unsubscribe = function() {
return source_3.removeListener(eventName, handler);
};
}
subscriber.add(new Subscription_1.Subscription(unsubscribe));
};
FromEventObservable.prototype._subscribe = function(subscriber) {
var sourceObj = this.sourceObj;
var eventName = this.eventName;
var options = this.options;
var selector = this.selector;
var handler = selector ? function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
if (result === errorObject_1.errorObject) {
subscriber.error(errorObject_1.errorObject.e);
} else {
subscriber.next(result);
}
} : function(e) {
return subscriber.next(e);
};
FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
};
return FromEventObservable;
}(Observable_1.Observable);
exports.FromEventObservable = FromEventObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var fromEventPattern_1 = __webpack_require__(343);
Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
}, function(module, exports, __webpack_require__) {
"use strict";
var FromEventPatternObservable_1 = __webpack_require__(344);
exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var Subscription_1 = __webpack_require__(163);
var FromEventPatternObservable = function(_super) {
__extends(FromEventPatternObservable, _super);
function FromEventPatternObservable(addHandler, removeHandler, selector) {
_super.call(this);
this.addHandler = addHandler;
this.removeHandler = removeHandler;
this.selector = selector;
}
FromEventPatternObservable.create = function(addHandler, removeHandler, selector) {
return new FromEventPatternObservable(addHandler, removeHandler, selector);
};
FromEventPatternObservable.prototype._subscribe = function(subscriber) {
var _this = this;
var removeHandler = this.removeHandler;
var handler = !!this.selector ? function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
_this._callSelector(subscriber, args);
} : function(e) {
subscriber.next(e);
};
this._callAddHandler(handler, subscriber);
subscriber.add(new Subscription_1.Subscription(function() {
removeHandler(handler);
}));
};
FromEventPatternObservable.prototype._callSelector = function(subscriber, args) {
try {
var result = this.selector.apply(this, args);
subscriber.next(result);
} catch (e) {
subscriber.error(e);
}
};
FromEventPatternObservable.prototype._callAddHandler = function(handler, errorSubscriber) {
try {
this.addHandler(handler);
} catch (e) {
errorSubscriber.error(e);
}
};
return FromEventPatternObservable;
}(Observable_1.Observable);
exports.FromEventPatternObservable = FromEventPatternObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var GenerateObservable_1 = __webpack_require__(346);
Observable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var isScheduler_1 = __webpack_require__(245);
var selfSelector = function(value) {
return value;
};
var GenerateObservable = function(_super) {
__extends(GenerateObservable, _super);
function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
_super.call(this);
this.initialState = initialState;
this.condition = condition;
this.iterate = iterate;
this.resultSelector = resultSelector;
this.scheduler = scheduler;
}
GenerateObservable.create = function(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
if (arguments.length == 1) {
return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
}
if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
}
return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
};
GenerateObservable.prototype._subscribe = function(subscriber) {
var state = this.initialState;
if (this.scheduler) {
return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
subscriber: subscriber,
iterate: this.iterate,
condition: this.condition,
resultSelector: this.resultSelector,
state: state
});
}
var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;
do {
if (condition) {
var conditionResult = void 0;
try {
conditionResult = condition(state);
} catch (err) {
subscriber.error(err);
return;
}
if (!conditionResult) {
subscriber.complete();
break;
}
}
var value = void 0;
try {
value = resultSelector(state);
} catch (err) {
subscriber.error(err);
return;
}
subscriber.next(value);
if (subscriber.closed) {
break;
}
try {
state = iterate(state);
} catch (err) {
subscriber.error(err);
return;
}
} while (true);
};
GenerateObservable.dispatch = function(state) {
var subscriber = state.subscriber, condition = state.condition;
if (subscriber.closed) {
return;
}
if (state.needIterate) {
try {
state.state = state.iterate(state.state);
} catch (err) {
subscriber.error(err);
return;
}
} else {
state.needIterate = true;
}
if (condition) {
var conditionResult = void 0;
try {
conditionResult = condition(state.state);
} catch (err) {
subscriber.error(err);
return;
}
if (!conditionResult) {
subscriber.complete();
return;
}
if (subscriber.closed) {
return;
}
}
var value;
try {
value = state.resultSelector(state.state);
} catch (err) {
subscriber.error(err);
return;
}
if (subscriber.closed) {
return;
}
subscriber.next(value);
if (subscriber.closed) {
return;
}
return this.schedule(state);
};
return GenerateObservable;
}(Observable_1.Observable);
exports.GenerateObservable = GenerateObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var if_1 = __webpack_require__(348);
Observable_1.Observable.if = if_1._if;
}, function(module, exports, __webpack_require__) {
"use strict";
var IfObservable_1 = __webpack_require__(349);
exports._if = IfObservable_1.IfObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
var IfObservable = function(_super) {
__extends(IfObservable, _super);
function IfObservable(condition, thenSource, elseSource) {
_super.call(this);
this.condition = condition;
this.thenSource = thenSource;
this.elseSource = elseSource;
}
IfObservable.create = function(condition, thenSource, elseSource) {
return new IfObservable(condition, thenSource, elseSource);
};
IfObservable.prototype._subscribe = function(subscriber) {
var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
return new IfSubscriber(subscriber, condition, thenSource, elseSource);
};
return IfObservable;
}(Observable_1.Observable);
exports.IfObservable = IfObservable;
var IfSubscriber = function(_super) {
__extends(IfSubscriber, _super);
function IfSubscriber(destination, condition, thenSource, elseSource) {
_super.call(this, destination);
this.condition = condition;
this.thenSource = thenSource;
this.elseSource = elseSource;
this.tryIf();
}
IfSubscriber.prototype.tryIf = function() {
var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
var result;
try {
result = condition();
var source = result ? thenSource : elseSource;
if (source) {
this.add(subscribeToResult_1.subscribeToResult(this, source));
} else {
this._complete();
}
} catch (err) {
this._error(err);
}
};
return IfSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var interval_1 = __webpack_require__(351);
Observable_1.Observable.interval = interval_1.interval;
}, function(module, exports, __webpack_require__) {
"use strict";
var IntervalObservable_1 = __webpack_require__(352);
exports.interval = IntervalObservable_1.IntervalObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__(353);
var Observable_1 = __webpack_require__(158);
var async_1 = __webpack_require__(354);
var IntervalObservable = function(_super) {
__extends(IntervalObservable, _super);
function IntervalObservable(period, scheduler) {
if (period === void 0) {
period = 0;
}
if (scheduler === void 0) {
scheduler = async_1.async;
}
_super.call(this);
this.period = period;
this.scheduler = scheduler;
if (!isNumeric_1.isNumeric(period) || period < 0) {
this.period = 0;
}
if (!scheduler || typeof scheduler.schedule !== "function") {
this.scheduler = async_1.async;
}
}
IntervalObservable.create = function(period, scheduler) {
if (period === void 0) {
period = 0;
}
if (scheduler === void 0) {
scheduler = async_1.async;
}
return new IntervalObservable(period, scheduler);
};
IntervalObservable.dispatch = function(state) {
var index = state.index, subscriber = state.subscriber, period = state.period;
subscriber.next(index);
if (subscriber.closed) {
return;
}
state.index += 1;
this.schedule(state, period);
};
IntervalObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var period = this.period;
var scheduler = this.scheduler;
subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
index: index,
subscriber: subscriber,
period: period
}));
};
return IntervalObservable;
}(Observable_1.Observable);
exports.IntervalObservable = IntervalObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var isArray_1 = __webpack_require__(164);
function isNumeric(val) {
return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;
}
exports.isNumeric = isNumeric;
}, function(module, exports, __webpack_require__) {
"use strict";
var AsyncAction_1 = __webpack_require__(355);
var AsyncScheduler_1 = __webpack_require__(357);
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(159);
var Action_1 = __webpack_require__(356);
var AsyncAction = function(_super) {
__extends(AsyncAction, _super);
function AsyncAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
this.pending = false;
}
AsyncAction.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
if (this.closed) {
return this;
}
this.state = state;
this.pending = true;
var id = this.id;
var scheduler = this.scheduler;
if (id != null) {
this.id = this.recycleAsyncId(scheduler, id, delay);
}
this.delay = delay;
this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
return this;
};
AsyncAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
};
AsyncAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && this.delay === delay) {
return id;
}
return root_1.root.clearInterval(id) && undefined || undefined;
};
AsyncAction.prototype.execute = function(state, delay) {
if (this.closed) {
return new Error("executing a cancelled action");
}
this.pending = false;
var error = this._execute(state, delay);
if (error) {
return error;
} else if (this.pending === false && this.id != null) {
this.id = this.recycleAsyncId(this.scheduler, this.id, null);
}
};
AsyncAction.prototype._execute = function(state, delay) {
var errored = false;
var errorValue = undefined;
try {
this.work(state);
} catch (e) {
errored = true;
errorValue = !!e && e || new Error(e);
}
if (errored) {
this.unsubscribe();
return errorValue;
}
};
AsyncAction.prototype._unsubscribe = function() {
var id = this.id;
var scheduler = this.scheduler;
var actions = scheduler.actions;
var index = actions.indexOf(this);
this.work = null;
this.delay = null;
this.state = null;
this.pending = false;
this.scheduler = null;
if (index !== -1) {
actions.splice(index, 1);
}
if (id != null) {
this.id = this.recycleAsyncId(scheduler, id, null);
}
};
return AsyncAction;
}(Action_1.Action);
exports.AsyncAction = AsyncAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(163);
var Action = function(_super) {
__extends(Action, _super);
function Action(scheduler, work) {
_super.call(this);
}
Action.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
return this;
};
return Action;
}(Subscription_1.Subscription);
exports.Action = Action;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Scheduler_1 = __webpack_require__(358);
var AsyncScheduler = function(_super) {
__extends(AsyncScheduler, _super);
function AsyncScheduler() {
_super.apply(this, arguments);
this.actions = [];
this.active = false;
this.scheduled = undefined;
}
AsyncScheduler.prototype.flush = function(action) {
var actions = this.actions;
if (this.active) {
actions.push(action);
return;
}
var error;
this.active = true;
do {
if (error = action.execute(action.state, action.delay)) {
break;
}
} while (action = actions.shift());
this.active = false;
if (error) {
while (action = actions.shift()) {
action.unsubscribe();
}
throw error;
}
};
return AsyncScheduler;
}(Scheduler_1.Scheduler);
exports.AsyncScheduler = AsyncScheduler;
}, function(module, exports) {
"use strict";
var Scheduler = function() {
function Scheduler(SchedulerAction, now) {
if (now === void 0) {
now = Scheduler.now;
}
this.SchedulerAction = SchedulerAction;
this.now = now;
}
Scheduler.prototype.schedule = function(work, delay, state) {
if (delay === void 0) {
delay = 0;
}
return new this.SchedulerAction(this, work).schedule(state, delay);
};
Scheduler.now = Date.now ? Date.now : function() {
return +new Date();
};
return Scheduler;
}();
exports.Scheduler = Scheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var merge_1 = __webpack_require__(360);
Observable_1.Observable.merge = merge_1.merge;
}, function(module, exports, __webpack_require__) {
"use strict";
var merge_1 = __webpack_require__(361);
exports.merge = merge_1.mergeStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var ArrayObservable_1 = __webpack_require__(242);
var mergeAll_1 = __webpack_require__(262);
var isScheduler_1 = __webpack_require__(245);
function merge() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
observables.unshift(this);
return mergeStatic.apply(this, observables);
}
exports.merge = merge;
function mergeStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var concurrent = Number.POSITIVE_INFINITY;
var scheduler = null;
var last = observables[observables.length - 1];
if (isScheduler_1.isScheduler(last)) {
scheduler = observables.pop();
if (observables.length > 1 && typeof observables[observables.length - 1] === "number") {
concurrent = observables.pop();
}
} else if (typeof last === "number") {
concurrent = observables.pop();
}
if (observables.length === 1) {
return observables[0];
}
return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
exports.mergeStatic = mergeStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var race_1 = __webpack_require__(363);
Observable_1.Observable.race = race_1.raceStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(164);
var ArrayObservable_1 = __webpack_require__(242);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function race() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
if (observables.length === 1 && isArray_1.isArray(observables[0])) {
observables = observables[0];
}
observables.unshift(this);
return raceStatic.apply(this, observables);
}
exports.race = race;
function raceStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
if (observables.length === 1) {
if (isArray_1.isArray(observables[0])) {
observables = observables[0];
} else {
return observables[0];
}
}
return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
}
exports.raceStatic = raceStatic;
var RaceOperator = function() {
function RaceOperator() {}
RaceOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new RaceSubscriber(subscriber));
};
return RaceOperator;
}();
exports.RaceOperator = RaceOperator;
var RaceSubscriber = function(_super) {
__extends(RaceSubscriber, _super);
function RaceSubscriber(destination) {
_super.call(this, destination);
this.hasFirst = false;
this.observables = [];
this.subscriptions = [];
}
RaceSubscriber.prototype._next = function(observable) {
this.observables.push(observable);
};
RaceSubscriber.prototype._complete = function() {
var observables = this.observables;
var len = observables.length;
if (len === 0) {
this.destination.complete();
} else {
for (var i = 0; i < len; i++) {
var observable = observables[i];
var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
if (this.subscriptions) {
this.subscriptions.push(subscription);
this.add(subscription);
}
}
this.observables = null;
}
};
RaceSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (!this.hasFirst) {
this.hasFirst = true;
for (var i = 0; i < this.subscriptions.length; i++) {
if (i !== outerIndex) {
var subscription = this.subscriptions[i];
subscription.unsubscribe();
this.remove(subscription);
}
}
this.subscriptions = null;
}
this.destination.next(innerValue);
};
return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.RaceSubscriber = RaceSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var never_1 = __webpack_require__(365);
Observable_1.Observable.never = never_1.never;
}, function(module, exports, __webpack_require__) {
"use strict";
var NeverObservable_1 = __webpack_require__(366);
exports.never = NeverObservable_1.NeverObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var noop_1 = __webpack_require__(367);
var NeverObservable = function(_super) {
__extends(NeverObservable, _super);
function NeverObservable() {
_super.call(this);
}
NeverObservable.create = function() {
return new NeverObservable();
};
NeverObservable.prototype._subscribe = function(subscriber) {
noop_1.noop();
};
return NeverObservable;
}(Observable_1.Observable);
exports.NeverObservable = NeverObservable;
}, function(module, exports) {
"use strict";
function noop() {}
exports.noop = noop;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var of_1 = __webpack_require__(249);
Observable_1.Observable.of = of_1.of;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var onErrorResumeNext_1 = __webpack_require__(370);
Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var FromObservable_1 = __webpack_require__(238);
var isArray_1 = __webpack_require__(164);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function onErrorResumeNext() {
var nextSources = [];
for (var _i = 0; _i < arguments.length; _i++) {
nextSources[_i - 0] = arguments[_i];
}
if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
nextSources = nextSources[0];
}
return this.lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNext = onErrorResumeNext;
function onErrorResumeNextStatic() {
var nextSources = [];
for (var _i = 0; _i < arguments.length; _i++) {
nextSources[_i - 0] = arguments[_i];
}
var source = null;
if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
nextSources = nextSources[0];
}
source = nextSources.shift();
return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = function() {
function OnErrorResumeNextOperator(nextSources) {
this.nextSources = nextSources;
}
OnErrorResumeNextOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
};
return OnErrorResumeNextOperator;
}();
var OnErrorResumeNextSubscriber = function(_super) {
__extends(OnErrorResumeNextSubscriber, _super);
function OnErrorResumeNextSubscriber(destination, nextSources) {
_super.call(this, destination);
this.destination = destination;
this.nextSources = nextSources;
}
OnErrorResumeNextSubscriber.prototype.notifyError = function(error, innerSub) {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype.notifyComplete = function(innerSub) {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype._error = function(err) {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype._complete = function() {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function() {
var next = this.nextSources.shift();
if (next) {
this.add(subscribeToResult_1.subscribeToResult(this, next));
} else {
this.destination.complete();
}
};
return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var pairs_1 = __webpack_require__(372);
Observable_1.Observable.pairs = pairs_1.pairs;
}, function(module, exports, __webpack_require__) {
"use strict";
var PairsObservable_1 = __webpack_require__(373);
exports.pairs = PairsObservable_1.PairsObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
function dispatch(state) {
var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;
if (index === length) {
subscriber.complete();
return;
}
var key = keys[index];
subscriber.next([ key, obj[key] ]);
state.index = index + 1;
this.schedule(state);
}
var PairsObservable = function(_super) {
__extends(PairsObservable, _super);
function PairsObservable(obj, scheduler) {
_super.call(this);
this.obj = obj;
this.scheduler = scheduler;
this.keys = Object.keys(obj);
}
PairsObservable.create = function(obj, scheduler) {
return new PairsObservable(obj, scheduler);
};
PairsObservable.prototype._subscribe = function(subscriber) {
var _a = this, keys = _a.keys, scheduler = _a.scheduler;
var length = keys.length;
if (scheduler) {
return scheduler.schedule(dispatch, 0, {
obj: this.obj,
keys: keys,
length: length,
index: 0,
subscriber: subscriber
});
} else {
for (var idx = 0; idx < length; idx++) {
var key = keys[idx];
subscriber.next([ key, this.obj[key] ]);
}
subscriber.complete();
}
};
return PairsObservable;
}(Observable_1.Observable);
exports.PairsObservable = PairsObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var range_1 = __webpack_require__(375);
Observable_1.Observable.range = range_1.range;
}, function(module, exports, __webpack_require__) {
"use strict";
var RangeObservable_1 = __webpack_require__(376);
exports.range = RangeObservable_1.RangeObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var RangeObservable = function(_super) {
__extends(RangeObservable, _super);
function RangeObservable(start, count, scheduler) {
_super.call(this);
this.start = start;
this._count = count;
this.scheduler = scheduler;
}
RangeObservable.create = function(start, count, scheduler) {
if (start === void 0) {
start = 0;
}
if (count === void 0) {
count = 0;
}
return new RangeObservable(start, count, scheduler);
};
RangeObservable.dispatch = function(state) {
var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
if (index >= count) {
subscriber.complete();
return;
}
subscriber.next(start);
if (subscriber.closed) {
return;
}
state.index = index + 1;
state.start = start + 1;
this.schedule(state);
};
RangeObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var start = this.start;
var count = this._count;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(RangeObservable.dispatch, 0, {
index: index,
count: count,
start: start,
subscriber: subscriber
});
} else {
do {
if (index++ >= count) {
subscriber.complete();
break;
}
subscriber.next(start++);
if (subscriber.closed) {
break;
}
} while (true);
}
};
return RangeObservable;
}(Observable_1.Observable);
exports.RangeObservable = RangeObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var using_1 = __webpack_require__(378);
Observable_1.Observable.using = using_1.using;
}, function(module, exports, __webpack_require__) {
"use strict";
var UsingObservable_1 = __webpack_require__(379);
exports.using = UsingObservable_1.UsingObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
var UsingObservable = function(_super) {
__extends(UsingObservable, _super);
function UsingObservable(resourceFactory, observableFactory) {
_super.call(this);
this.resourceFactory = resourceFactory;
this.observableFactory = observableFactory;
}
UsingObservable.create = function(resourceFactory, observableFactory) {
return new UsingObservable(resourceFactory, observableFactory);
};
UsingObservable.prototype._subscribe = function(subscriber) {
var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;
var resource;
try {
resource = resourceFactory();
return new UsingSubscriber(subscriber, resource, observableFactory);
} catch (err) {
subscriber.error(err);
}
};
return UsingObservable;
}(Observable_1.Observable);
exports.UsingObservable = UsingObservable;
var UsingSubscriber = function(_super) {
__extends(UsingSubscriber, _super);
function UsingSubscriber(destination, resource, observableFactory) {
_super.call(this, destination);
this.resource = resource;
this.observableFactory = observableFactory;
destination.add(resource);
this.tryUse();
}
UsingSubscriber.prototype.tryUse = function() {
try {
var source = this.observableFactory.call(this, this.resource);
if (source) {
this.add(subscribeToResult_1.subscribeToResult(this, source));
}
} catch (err) {
this._error(err);
}
};
return UsingSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var throw_1 = __webpack_require__(381);
Observable_1.Observable.throw = throw_1._throw;
}, function(module, exports, __webpack_require__) {
"use strict";
var ErrorObservable_1 = __webpack_require__(382);
exports._throw = ErrorObservable_1.ErrorObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var ErrorObservable = function(_super) {
__extends(ErrorObservable, _super);
function ErrorObservable(error, scheduler) {
_super.call(this);
this.error = error;
this.scheduler = scheduler;
}
ErrorObservable.create = function(error, scheduler) {
return new ErrorObservable(error, scheduler);
};
ErrorObservable.dispatch = function(arg) {
var error = arg.error, subscriber = arg.subscriber;
subscriber.error(error);
};
ErrorObservable.prototype._subscribe = function(subscriber) {
var error = this.error;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(ErrorObservable.dispatch, 0, {
error: error,
subscriber: subscriber
});
} else {
subscriber.error(error);
}
};
return ErrorObservable;
}(Observable_1.Observable);
exports.ErrorObservable = ErrorObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var timer_1 = __webpack_require__(384);
Observable_1.Observable.timer = timer_1.timer;
}, function(module, exports, __webpack_require__) {
"use strict";
var TimerObservable_1 = __webpack_require__(385);
exports.timer = TimerObservable_1.TimerObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__(353);
var Observable_1 = __webpack_require__(158);
var async_1 = __webpack_require__(354);
var isScheduler_1 = __webpack_require__(245);
var isDate_1 = __webpack_require__(386);
var TimerObservable = function(_super) {
__extends(TimerObservable, _super);
function TimerObservable(dueTime, period, scheduler) {
if (dueTime === void 0) {
dueTime = 0;
}
_super.call(this);
this.period = -1;
this.dueTime = 0;
if (isNumeric_1.isNumeric(period)) {
this.period = Number(period) < 1 && 1 || Number(period);
} else if (isScheduler_1.isScheduler(period)) {
scheduler = period;
}
if (!isScheduler_1.isScheduler(scheduler)) {
scheduler = async_1.async;
}
this.scheduler = scheduler;
this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;
}
TimerObservable.create = function(initialDelay, period, scheduler) {
if (initialDelay === void 0) {
initialDelay = 0;
}
return new TimerObservable(initialDelay, period, scheduler);
};
TimerObservable.dispatch = function(state) {
var index = state.index, period = state.period, subscriber = state.subscriber;
var action = this;
subscriber.next(index);
if (subscriber.closed) {
return;
} else if (period === -1) {
return subscriber.complete();
}
state.index = index + 1;
action.schedule(state, period);
};
TimerObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
return scheduler.schedule(TimerObservable.dispatch, dueTime, {
index: index,
period: period,
subscriber: subscriber
});
};
return TimerObservable;
}(Observable_1.Observable);
exports.TimerObservable = TimerObservable;
}, function(module, exports) {
"use strict";
function isDate(value) {
return value instanceof Date && !isNaN(+value);
}
exports.isDate = isDate;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var zip_1 = __webpack_require__(388);
Observable_1.Observable.zip = zip_1.zip;
}, function(module, exports, __webpack_require__) {
"use strict";
var zip_1 = __webpack_require__(389);
exports.zip = zip_1.zipStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__(242);
var isArray_1 = __webpack_require__(164);
var Subscriber_1 = __webpack_require__(161);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
var iterator_1 = __webpack_require__(241);
function zipProto() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
observables.unshift(this);
return zipStatic.apply(this, observables);
}
exports.zipProto = zipProto;
function zipStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var project = observables[observables.length - 1];
if (typeof project === "function") {
observables.pop();
}
return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
}
exports.zipStatic = zipStatic;
var ZipOperator = function() {
function ZipOperator(project) {
this.project = project;
}
ZipOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ZipSubscriber(subscriber, this.project));
};
return ZipOperator;
}();
exports.ZipOperator = ZipOperator;
var ZipSubscriber = function(_super) {
__extends(ZipSubscriber, _super);
function ZipSubscriber(destination, project, values) {
if (values === void 0) {
values = Object.create(null);
}
_super.call(this, destination);
this.index = 0;
this.iterators = [];
this.active = 0;
this.project = typeof project === "function" ? project : null;
this.values = values;
}
ZipSubscriber.prototype._next = function(value) {
var iterators = this.iterators;
var index = this.index++;
if (isArray_1.isArray(value)) {
iterators.push(new StaticArrayIterator(value));
} else if (typeof value[iterator_1.$$iterator] === "function") {
iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));
} else {
iterators.push(new ZipBufferIterator(this.destination, this, value, index));
}
};
ZipSubscriber.prototype._complete = function() {
var iterators = this.iterators;
var len = iterators.length;
this.active = len;
for (var i = 0; i < len; i++) {
var iterator = iterators[i];
if (iterator.stillUnsubscribed) {
this.add(iterator.subscribe(iterator, i));
} else {
this.active--;
}
}
};
ZipSubscriber.prototype.notifyInactive = function() {
this.active--;
if (this.active === 0) {
this.destination.complete();
}
};
ZipSubscriber.prototype.checkIterators = function() {
var iterators = this.iterators;
var len = iterators.length;
var destination = this.destination;
for (var i = 0; i < len; i++) {
var iterator = iterators[i];
if (typeof iterator.hasValue === "function" && !iterator.hasValue()) {
return;
}
}
var shouldComplete = false;
var args = [];
for (var i = 0; i < len; i++) {
var iterator = iterators[i];
var result = iterator.next();
if (iterator.hasCompleted()) {
shouldComplete = true;
}
if (result.done) {
destination.complete();
return;
}
args.push(result.value);
}
if (this.project) {
this._tryProject(args);
} else {
destination.next(args);
}
if (shouldComplete) {
destination.complete();
}
};
ZipSubscriber.prototype._tryProject = function(args) {
var result;
try {
result = this.project.apply(this, args);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return ZipSubscriber;
}(Subscriber_1.Subscriber);
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = function() {
function StaticIterator(iterator) {
this.iterator = iterator;
this.nextResult = iterator.next();
}
StaticIterator.prototype.hasValue = function() {
return true;
};
StaticIterator.prototype.next = function() {
var result = this.nextResult;
this.nextResult = this.iterator.next();
return result;
};
StaticIterator.prototype.hasCompleted = function() {
var nextResult = this.nextResult;
return nextResult && nextResult.done;
};
return StaticIterator;
}();
var StaticArrayIterator = function() {
function StaticArrayIterator(array) {
this.array = array;
this.index = 0;
this.length = 0;
this.length = array.length;
}
StaticArrayIterator.prototype[iterator_1.$$iterator] = function() {
return this;
};
StaticArrayIterator.prototype.next = function(value) {
var i = this.index++;
var array = this.array;
return i < this.length ? {
value: array[i],
done: false
} : {
value: null,
done: true
};
};
StaticArrayIterator.prototype.hasValue = function() {
return this.array.length > this.index;
};
StaticArrayIterator.prototype.hasCompleted = function() {
return this.array.length === this.index;
};
return StaticArrayIterator;
}();
var ZipBufferIterator = function(_super) {
__extends(ZipBufferIterator, _super);
function ZipBufferIterator(destination, parent, observable, index) {
_super.call(this, destination);
this.parent = parent;
this.observable = observable;
this.index = index;
this.stillUnsubscribed = true;
this.buffer = [];
this.isComplete = false;
}
ZipBufferIterator.prototype[iterator_1.$$iterator] = function() {
return this;
};
ZipBufferIterator.prototype.next = function() {
var buffer = this.buffer;
if (buffer.length === 0 && this.isComplete) {
return {
value: null,
done: true
};
} else {
return {
value: buffer.shift(),
done: false
};
}
};
ZipBufferIterator.prototype.hasValue = function() {
return this.buffer.length > 0;
};
ZipBufferIterator.prototype.hasCompleted = function() {
return this.buffer.length === 0 && this.isComplete;
};
ZipBufferIterator.prototype.notifyComplete = function() {
if (this.buffer.length > 0) {
this.isComplete = true;
this.parent.notifyInactive();
} else {
this.destination.complete();
}
};
ZipBufferIterator.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.buffer.push(innerValue);
this.parent.checkIterators();
};
ZipBufferIterator.prototype.subscribe = function(value, index) {
return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
};
return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var ajax_1 = __webpack_require__(391);
Observable_1.Observable.ajax = ajax_1.ajax;
}, function(module, exports, __webpack_require__) {
"use strict";
var AjaxObservable_1 = __webpack_require__(392);
exports.ajax = AjaxObservable_1.AjaxObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(159);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var Observable_1 = __webpack_require__(158);
var Subscriber_1 = __webpack_require__(161);
var map_1 = __webpack_require__(258);
function getCORSRequest() {
if (root_1.root.XMLHttpRequest) {
var xhr = new root_1.root.XMLHttpRequest();
if ("withCredentials" in xhr) {
xhr.withCredentials = !!this.withCredentials;
}
return xhr;
} else if (!!root_1.root.XDomainRequest) {
return new root_1.root.XDomainRequest();
} else {
throw new Error("CORS is not supported by your browser");
}
}
function getXMLHttpRequest() {
if (root_1.root.XMLHttpRequest) {
return new root_1.root.XMLHttpRequest();
} else {
var progId = void 0;
try {
var progIds = [ "Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0" ];
for (var i = 0; i < 3; i++) {
try {
progId = progIds[i];
if (new root_1.root.ActiveXObject(progId)) {
break;
}
} catch (e) {}
}
return new root_1.root.ActiveXObject(progId);
} catch (e) {
throw new Error("XMLHttpRequest is not supported by your browser");
}
}
}
function ajaxGet(url, headers) {
if (headers === void 0) {
headers = null;
}
return new AjaxObservable({
method: "GET",
url: url,
headers: headers
});
}
exports.ajaxGet = ajaxGet;
function ajaxPost(url, body, headers) {
return new AjaxObservable({
method: "POST",
url: url,
body: body,
headers: headers
});
}
exports.ajaxPost = ajaxPost;
function ajaxDelete(url, headers) {
return new AjaxObservable({
method: "DELETE",
url: url,
headers: headers
});
}
exports.ajaxDelete = ajaxDelete;
function ajaxPut(url, body, headers) {
return new AjaxObservable({
method: "PUT",
url: url,
body: body,
headers: headers
});
}
exports.ajaxPut = ajaxPut;
function ajaxGetJSON(url, headers) {
return new AjaxObservable({
method: "GET",
url: url,
responseType: "json",
headers: headers
}).lift(new map_1.MapOperator(function(x, index) {
return x.response;
}, null));
}
exports.ajaxGetJSON = ajaxGetJSON;
var AjaxObservable = function(_super) {
__extends(AjaxObservable, _super);
function AjaxObservable(urlOrRequest) {
_super.call(this);
var request = {
async: true,
createXHR: function() {
return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
},
crossDomain: false,
withCredentials: false,
headers: {},
method: "GET",
responseType: "json",
timeout: 0
};
if (typeof urlOrRequest === "string") {
request.url = urlOrRequest;
} else {
for (var prop in urlOrRequest) {
if (urlOrRequest.hasOwnProperty(prop)) {
request[prop] = urlOrRequest[prop];
}
}
}
this.request = request;
}
AjaxObservable.prototype._subscribe = function(subscriber) {
return new AjaxSubscriber(subscriber, this.request);
};
AjaxObservable.create = function() {
var create = function(urlOrRequest) {
return new AjaxObservable(urlOrRequest);
};
create.get = ajaxGet;
create.post = ajaxPost;
create.delete = ajaxDelete;
create.put = ajaxPut;
create.getJSON = ajaxGetJSON;
return create;
}();
return AjaxObservable;
}(Observable_1.Observable);
exports.AjaxObservable = AjaxObservable;
var AjaxSubscriber = function(_super) {
__extends(AjaxSubscriber, _super);
function AjaxSubscriber(destination, request) {
_super.call(this, destination);
this.request = request;
this.done = false;
var headers = request.headers = request.headers || {};
if (!request.crossDomain && !headers["X-Requested-With"]) {
headers["X-Requested-With"] = "XMLHttpRequest";
}
if (!("Content-Type" in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== "undefined") {
headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8";
}
request.body = this.serializeBody(request.body, request.headers["Content-Type"]);
this.send();
}
AjaxSubscriber.prototype.next = function(e) {
this.done = true;
var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
var response = new AjaxResponse(e, xhr, request);
destination.next(response);
};
AjaxSubscriber.prototype.send = function() {
var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
var createXHR = request.createXHR;
var xhr = tryCatch_1.tryCatch(createXHR).call(request);
if (xhr === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
} else {
this.xhr = xhr;
var result = void 0;
if (user) {
result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
} else {
result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
}
if (result === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
return null;
}
xhr.timeout = request.timeout;
xhr.responseType = request.responseType;
this.setHeaders(xhr, headers);
this.setupEvents(xhr, request);
if (body) {
xhr.send(body);
} else {
xhr.send();
}
}
return xhr;
};
AjaxSubscriber.prototype.serializeBody = function(body, contentType) {
if (!body || typeof body === "string") {
return body;
} else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
return body;
}
if (contentType) {
var splitIndex = contentType.indexOf(";");
if (splitIndex !== -1) {
contentType = contentType.substring(0, splitIndex);
}
}
switch (contentType) {
case "application/x-www-form-urlencoded":
return Object.keys(body).map(function(key) {
return encodeURI(key) + "=" + encodeURI(body[key]);
}).join("&");

case "application/json":
return JSON.stringify(body);

default:
return body;
}
};
AjaxSubscriber.prototype.setHeaders = function(xhr, headers) {
for (var key in headers) {
if (headers.hasOwnProperty(key)) {
xhr.setRequestHeader(key, headers[key]);
}
}
};
AjaxSubscriber.prototype.setupEvents = function(xhr, request) {
var progressSubscriber = request.progressSubscriber;
xhr.ontimeout = function xhrTimeout(e) {
var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
if (progressSubscriber) {
progressSubscriber.error(e);
}
subscriber.error(new AjaxTimeoutError(this, request));
};
xhr.ontimeout.request = request;
xhr.ontimeout.subscriber = this;
xhr.ontimeout.progressSubscriber = progressSubscriber;
if (xhr.upload && "withCredentials" in xhr && root_1.root.XDomainRequest) {
if (progressSubscriber) {
xhr.onprogress = function xhrProgress(e) {
var progressSubscriber = xhrProgress.progressSubscriber;
progressSubscriber.next(e);
};
xhr.onprogress.progressSubscriber = progressSubscriber;
}
xhr.onerror = function xhrError(e) {
var _a = xhrError, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
if (progressSubscriber) {
progressSubscriber.error(e);
}
subscriber.error(new AjaxError("ajax error", this, request));
};
xhr.onerror.request = request;
xhr.onerror.subscriber = this;
xhr.onerror.progressSubscriber = progressSubscriber;
}
xhr.onreadystatechange = function xhrReadyStateChange(e) {
var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
if (this.readyState === 4) {
var status_1 = this.status === 1223 ? 204 : this.status;
var response = this.responseType === "text" ? this.response || this.responseText : this.response;
if (status_1 === 0) {
status_1 = response ? 200 : 0;
}
if (200 <= status_1 && status_1 < 300) {
if (progressSubscriber) {
progressSubscriber.complete();
}
subscriber.next(e);
subscriber.complete();
} else {
if (progressSubscriber) {
progressSubscriber.error(e);
}
subscriber.error(new AjaxError("ajax error " + status_1, this, request));
}
}
};
xhr.onreadystatechange.subscriber = this;
xhr.onreadystatechange.progressSubscriber = progressSubscriber;
xhr.onreadystatechange.request = request;
};
AjaxSubscriber.prototype.unsubscribe = function() {
var _a = this, done = _a.done, xhr = _a.xhr;
if (!done && xhr && xhr.readyState !== 4) {
xhr.abort();
}
_super.prototype.unsubscribe.call(this);
};
return AjaxSubscriber;
}(Subscriber_1.Subscriber);
exports.AjaxSubscriber = AjaxSubscriber;
var AjaxResponse = function() {
function AjaxResponse(originalEvent, xhr, request) {
this.originalEvent = originalEvent;
this.xhr = xhr;
this.request = request;
this.status = xhr.status;
this.responseType = xhr.responseType || request.responseType;
switch (this.responseType) {
case "json":
if ("response" in xhr) {
this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || "null");
} else {
this.response = JSON.parse(xhr.responseText || "null");
}
break;

case "xml":
this.response = xhr.responseXML;
break;

case "text":
default:
this.response = "response" in xhr ? xhr.response : xhr.responseText;
break;
}
}
return AjaxResponse;
}();
exports.AjaxResponse = AjaxResponse;
var AjaxError = function(_super) {
__extends(AjaxError, _super);
function AjaxError(message, xhr, request) {
_super.call(this, message);
this.message = message;
this.xhr = xhr;
this.request = request;
this.status = xhr.status;
}
return AjaxError;
}(Error);
exports.AjaxError = AjaxError;
var AjaxTimeoutError = function(_super) {
__extends(AjaxTimeoutError, _super);
function AjaxTimeoutError(xhr, request) {
_super.call(this, "ajax timeout", xhr, request);
}
return AjaxTimeoutError;
}(AjaxError);
exports.AjaxTimeoutError = AjaxTimeoutError;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var webSocket_1 = __webpack_require__(394);
Observable_1.Observable.webSocket = webSocket_1.webSocket;
}, function(module, exports, __webpack_require__) {
"use strict";
var WebSocketSubject_1 = __webpack_require__(395);
exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var Subscriber_1 = __webpack_require__(161);
var Observable_1 = __webpack_require__(158);
var Subscription_1 = __webpack_require__(163);
var root_1 = __webpack_require__(159);
var ReplaySubject_1 = __webpack_require__(396);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var assign_1 = __webpack_require__(400);
var WebSocketSubject = function(_super) {
__extends(WebSocketSubject, _super);
function WebSocketSubject(urlConfigOrSource, destination) {
if (urlConfigOrSource instanceof Observable_1.Observable) {
_super.call(this, destination, urlConfigOrSource);
} else {
_super.call(this);
this.WebSocketCtor = root_1.root.WebSocket;
this._output = new Subject_1.Subject();
if (typeof urlConfigOrSource === "string") {
this.url = urlConfigOrSource;
} else {
assign_1.assign(this, urlConfigOrSource);
}
if (!this.WebSocketCtor) {
throw new Error("no WebSocket constructor can be found");
}
this.destination = new ReplaySubject_1.ReplaySubject();
}
}
WebSocketSubject.prototype.resultSelector = function(e) {
return JSON.parse(e.data);
};
WebSocketSubject.create = function(urlConfigOrSource) {
return new WebSocketSubject(urlConfigOrSource);
};
WebSocketSubject.prototype.lift = function(operator) {
var sock = new WebSocketSubject(this, this.destination);
sock.operator = operator;
return sock;
};
WebSocketSubject.prototype.multiplex = function(subMsg, unsubMsg, messageFilter) {
var self = this;
return new Observable_1.Observable(function(observer) {
var result = tryCatch_1.tryCatch(subMsg)();
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else {
self.next(result);
}
var subscription = self.subscribe(function(x) {
var result = tryCatch_1.tryCatch(messageFilter)(x);
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else if (result) {
observer.next(x);
}
}, function(err) {
return observer.error(err);
}, function() {
return observer.complete();
});
return function() {
var result = tryCatch_1.tryCatch(unsubMsg)();
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else {
self.next(result);
}
subscription.unsubscribe();
};
});
};
WebSocketSubject.prototype._connectSocket = function() {
var _this = this;
var WebSocketCtor = this.WebSocketCtor;
var observer = this._output;
var socket = null;
try {
socket = this.protocol ? new WebSocketCtor(this.url, this.protocol) : new WebSocketCtor(this.url);
this.socket = socket;
} catch (e) {
observer.error(e);
return;
}
var subscription = new Subscription_1.Subscription(function() {
_this.socket = null;
if (socket && socket.readyState === 1) {
socket.close();
}
});
socket.onopen = function(e) {
var openObserver = _this.openObserver;
if (openObserver) {
openObserver.next(e);
}
var queue = _this.destination;
_this.destination = Subscriber_1.Subscriber.create(function(x) {
return socket.readyState === 1 && socket.send(x);
}, function(e) {
var closingObserver = _this.closingObserver;
if (closingObserver) {
closingObserver.next(undefined);
}
if (e && e.code) {
socket.close(e.code, e.reason);
} else {
observer.error(new TypeError("WebSocketSubject.error must be called with an object with an error code, " + "and an optional reason: { code: number, reason: string }"));
}
_this.destination = new ReplaySubject_1.ReplaySubject();
_this.socket = null;
}, function() {
var closingObserver = _this.closingObserver;
if (closingObserver) {
closingObserver.next(undefined);
}
socket.close();
_this.destination = new ReplaySubject_1.ReplaySubject();
_this.socket = null;
});
if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
subscription.add(queue.subscribe(_this.destination));
}
};
socket.onerror = function(e) {
return observer.error(e);
};
socket.onclose = function(e) {
var closeObserver = _this.closeObserver;
if (closeObserver) {
closeObserver.next(e);
}
if (e.wasClean) {
observer.complete();
} else {
observer.error(e);
}
};
socket.onmessage = function(e) {
var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else {
observer.next(result);
}
};
};
WebSocketSubject.prototype._subscribe = function(subscriber) {
var _this = this;
var source = this.source;
if (source) {
return source.subscribe(subscriber);
}
if (!this.socket) {
this._connectSocket();
}
var subscription = new Subscription_1.Subscription();
subscription.add(this._output.subscribe(subscriber));
subscription.add(function() {
var socket = _this.socket;
if (_this._output.observers.length === 0 && socket && socket.readyState === 1) {
socket.close();
_this.socket = null;
}
});
return subscription;
};
WebSocketSubject.prototype.unsubscribe = function() {
var _a = this, source = _a.source, socket = _a.socket;
if (socket && socket.readyState === 1) {
socket.close();
this.socket = null;
}
_super.prototype.unsubscribe.call(this);
if (!source) {
this.destination = new ReplaySubject_1.ReplaySubject();
}
};
return WebSocketSubject;
}(Subject_1.AnonymousSubject);
exports.WebSocketSubject = WebSocketSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var queue_1 = __webpack_require__(397);
var observeOn_1 = __webpack_require__(247);
var ReplaySubject = function(_super) {
__extends(ReplaySubject, _super);
function ReplaySubject(bufferSize, windowTime, scheduler) {
if (bufferSize === void 0) {
bufferSize = Number.POSITIVE_INFINITY;
}
if (windowTime === void 0) {
windowTime = Number.POSITIVE_INFINITY;
}
_super.call(this);
this.scheduler = scheduler;
this._events = [];
this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
this._windowTime = windowTime < 1 ? 1 : windowTime;
}
ReplaySubject.prototype.next = function(value) {
var now = this._getNow();
this._events.push(new ReplayEvent(now, value));
this._trimBufferThenGetEvents();
_super.prototype.next.call(this, value);
};
ReplaySubject.prototype._subscribe = function(subscriber) {
var _events = this._trimBufferThenGetEvents();
var scheduler = this.scheduler;
if (scheduler) {
subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
}
var len = _events.length;
for (var i = 0; i < len && !subscriber.closed; i++) {
subscriber.next(_events[i].value);
}
return _super.prototype._subscribe.call(this, subscriber);
};
ReplaySubject.prototype._getNow = function() {
return (this.scheduler || queue_1.queue).now();
};
ReplaySubject.prototype._trimBufferThenGetEvents = function() {
var now = this._getNow();
var _bufferSize = this._bufferSize;
var _windowTime = this._windowTime;
var _events = this._events;
var eventsCount = _events.length;
var spliceCount = 0;
while (spliceCount < eventsCount) {
if (now - _events[spliceCount].time < _windowTime) {
break;
}
spliceCount++;
}
if (eventsCount > _bufferSize) {
spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
}
if (spliceCount > 0) {
_events.splice(0, spliceCount);
}
return _events;
};
return ReplaySubject;
}(Subject_1.Subject);
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = function() {
function ReplayEvent(time, value) {
this.time = time;
this.value = value;
}
return ReplayEvent;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var QueueAction_1 = __webpack_require__(398);
var QueueScheduler_1 = __webpack_require__(399);
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(355);
var QueueAction = function(_super) {
__extends(QueueAction, _super);
function QueueAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
}
QueueAction.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay > 0) {
return _super.prototype.schedule.call(this, state, delay);
}
this.delay = delay;
this.state = state;
this.scheduler.flush(this);
return this;
};
QueueAction.prototype.execute = function(state, delay) {
return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
};
QueueAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
}
return scheduler.flush(this);
};
return QueueAction;
}(AsyncAction_1.AsyncAction);
exports.QueueAction = QueueAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(357);
var QueueScheduler = function(_super) {
__extends(QueueScheduler, _super);
function QueueScheduler() {
_super.apply(this, arguments);
}
return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.QueueScheduler = QueueScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var Object = root_1.root.Object;
if (typeof Object.assign != "function") {
(function() {
Object.assign = function assignPolyfill(target) {
var sources = [];
for (var _i = 1; _i < arguments.length; _i++) {
sources[_i - 1] = arguments[_i];
}
if (target === undefined || target === null) {
throw new TypeError("cannot convert undefined or null to object");
}
var output = Object(target);
var len = sources.length;
for (var index = 0; index < len; index++) {
var source = sources[index];
if (source !== undefined && source !== null) {
for (var key in source) {
if (source.hasOwnProperty(key)) {
output[key] = source[key];
}
}
}
}
return output;
};
})();
}
exports.assign = Object.assign;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var buffer_1 = __webpack_require__(402);
Observable_1.Observable.prototype.buffer = buffer_1.buffer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function buffer(closingNotifier) {
return this.lift(new BufferOperator(closingNotifier));
}
exports.buffer = buffer;
var BufferOperator = function() {
function BufferOperator(closingNotifier) {
this.closingNotifier = closingNotifier;
}
BufferOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
};
return BufferOperator;
}();
var BufferSubscriber = function(_super) {
__extends(BufferSubscriber, _super);
function BufferSubscriber(destination, closingNotifier) {
_super.call(this, destination);
this.buffer = [];
this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
}
BufferSubscriber.prototype._next = function(value) {
this.buffer.push(value);
};
BufferSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var buffer = this.buffer;
this.buffer = [];
this.destination.next(buffer);
};
return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var bufferCount_1 = __webpack_require__(404);
Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function bufferCount(bufferSize, startBufferEvery) {
if (startBufferEvery === void 0) {
startBufferEvery = null;
}
return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
}
exports.bufferCount = bufferCount;
var BufferCountOperator = function() {
function BufferCountOperator(bufferSize, startBufferEvery) {
this.bufferSize = bufferSize;
this.startBufferEvery = startBufferEvery;
}
BufferCountOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));
};
return BufferCountOperator;
}();
var BufferCountSubscriber = function(_super) {
__extends(BufferCountSubscriber, _super);
function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
_super.call(this, destination);
this.bufferSize = bufferSize;
this.startBufferEvery = startBufferEvery;
this.buffers = [ [] ];
this.count = 0;
}
BufferCountSubscriber.prototype._next = function(value) {
var count = this.count += 1;
var destination = this.destination;
var bufferSize = this.bufferSize;
var startBufferEvery = this.startBufferEvery == null ? bufferSize : this.startBufferEvery;
var buffers = this.buffers;
var len = buffers.length;
var remove = -1;
if (count % startBufferEvery === 0) {
buffers.push([]);
}
for (var i = 0; i < len; i++) {
var buffer = buffers[i];
buffer.push(value);
if (buffer.length === bufferSize) {
remove = i;
destination.next(buffer);
}
}
if (remove !== -1) {
buffers.splice(remove, 1);
}
};
BufferCountSubscriber.prototype._complete = function() {
var destination = this.destination;
var buffers = this.buffers;
while (buffers.length > 0) {
var buffer = buffers.shift();
if (buffer.length > 0) {
destination.next(buffer);
}
}
_super.prototype._complete.call(this);
};
return BufferCountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var bufferTime_1 = __webpack_require__(406);
Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(354);
var Subscriber_1 = __webpack_require__(161);
var isScheduler_1 = __webpack_require__(245);
function bufferTime(bufferTimeSpan) {
var length = arguments.length;
var scheduler = async_1.async;
if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
scheduler = arguments[arguments.length - 1];
length--;
}
var bufferCreationInterval = null;
if (length >= 2) {
bufferCreationInterval = arguments[1];
}
var maxBufferSize = Number.POSITIVE_INFINITY;
if (length >= 3) {
maxBufferSize = arguments[2];
}
return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
}
exports.bufferTime = bufferTime;
var BufferTimeOperator = function() {
function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
this.bufferTimeSpan = bufferTimeSpan;
this.bufferCreationInterval = bufferCreationInterval;
this.maxBufferSize = maxBufferSize;
this.scheduler = scheduler;
}
BufferTimeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
};
return BufferTimeOperator;
}();
var Context = function() {
function Context() {
this.buffer = [];
}
return Context;
}();
var BufferTimeSubscriber = function(_super) {
__extends(BufferTimeSubscriber, _super);
function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
_super.call(this, destination);
this.bufferTimeSpan = bufferTimeSpan;
this.bufferCreationInterval = bufferCreationInterval;
this.maxBufferSize = maxBufferSize;
this.scheduler = scheduler;
this.contexts = [];
var context = this.openContext();
this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
if (this.timespanOnly) {
var timeSpanOnlyState = {
subscriber: this,
context: context,
bufferTimeSpan: bufferTimeSpan
};
this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
} else {
var closeState = {
subscriber: this,
context: context
};
var creationState = {
bufferTimeSpan: bufferTimeSpan,
bufferCreationInterval: bufferCreationInterval,
subscriber: this,
scheduler: scheduler
};
this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
}
}
BufferTimeSubscriber.prototype._next = function(value) {
var contexts = this.contexts;
var len = contexts.length;
var filledBufferContext;
for (var i = 0; i < len; i++) {
var context = contexts[i];
var buffer = context.buffer;
buffer.push(value);
if (buffer.length == this.maxBufferSize) {
filledBufferContext = context;
}
}
if (filledBufferContext) {
this.onBufferFull(filledBufferContext);
}
};
BufferTimeSubscriber.prototype._error = function(err) {
this.contexts.length = 0;
_super.prototype._error.call(this, err);
};
BufferTimeSubscriber.prototype._complete = function() {
var _a = this, contexts = _a.contexts, destination = _a.destination;
while (contexts.length > 0) {
var context = contexts.shift();
destination.next(context.buffer);
}
_super.prototype._complete.call(this);
};
BufferTimeSubscriber.prototype._unsubscribe = function() {
this.contexts = null;
};
BufferTimeSubscriber.prototype.onBufferFull = function(context) {
this.closeContext(context);
var closeAction = context.closeAction;
closeAction.unsubscribe();
this.remove(closeAction);
if (this.timespanOnly) {
context = this.openContext();
var bufferTimeSpan = this.bufferTimeSpan;
var timeSpanOnlyState = {
subscriber: this,
context: context,
bufferTimeSpan: bufferTimeSpan
};
this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
}
};
BufferTimeSubscriber.prototype.openContext = function() {
var context = new Context();
this.contexts.push(context);
return context;
};
BufferTimeSubscriber.prototype.closeContext = function(context) {
this.destination.next(context.buffer);
var contexts = this.contexts;
var spliceIndex = contexts ? contexts.indexOf(context) : -1;
if (spliceIndex >= 0) {
contexts.splice(contexts.indexOf(context), 1);
}
};
return BufferTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchBufferTimeSpanOnly(state) {
var subscriber = state.subscriber;
var prevContext = state.context;
if (prevContext) {
subscriber.closeContext(prevContext);
}
if (!subscriber.closed) {
state.context = subscriber.openContext();
state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
}
}
function dispatchBufferCreation(state) {
var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
var context = subscriber.openContext();
var action = this;
if (!subscriber.closed) {
subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
subscriber: subscriber,
context: context
}));
action.schedule(state, bufferCreationInterval);
}
}
function dispatchBufferClose(arg) {
var subscriber = arg.subscriber, context = arg.context;
subscriber.closeContext(context);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var bufferToggle_1 = __webpack_require__(408);
Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(163);
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
function bufferToggle(openings, closingSelector) {
return this.lift(new BufferToggleOperator(openings, closingSelector));
}
exports.bufferToggle = bufferToggle;
var BufferToggleOperator = function() {
function BufferToggleOperator(openings, closingSelector) {
this.openings = openings;
this.closingSelector = closingSelector;
}
BufferToggleOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
};
return BufferToggleOperator;
}();
var BufferToggleSubscriber = function(_super) {
__extends(BufferToggleSubscriber, _super);
function BufferToggleSubscriber(destination, openings, closingSelector) {
_super.call(this, destination);
this.openings = openings;
this.closingSelector = closingSelector;
this.contexts = [];
this.add(subscribeToResult_1.subscribeToResult(this, openings));
}
BufferToggleSubscriber.prototype._next = function(value) {
var contexts = this.contexts;
var len = contexts.length;
for (var i = 0; i < len; i++) {
contexts[i].buffer.push(value);
}
};
BufferToggleSubscriber.prototype._error = function(err) {
var contexts = this.contexts;
while (contexts.length > 0) {
var context = contexts.shift();
context.subscription.unsubscribe();
context.buffer = null;
context.subscription = null;
}
this.contexts = null;
_super.prototype._error.call(this, err);
};
BufferToggleSubscriber.prototype._complete = function() {
var contexts = this.contexts;
while (contexts.length > 0) {
var context = contexts.shift();
this.destination.next(context.buffer);
context.subscription.unsubscribe();
context.buffer = null;
context.subscription = null;
}
this.contexts = null;
_super.prototype._complete.call(this);
};
BufferToggleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
};
BufferToggleSubscriber.prototype.notifyComplete = function(innerSub) {
this.closeBuffer(innerSub.context);
};
BufferToggleSubscriber.prototype.openBuffer = function(value) {
try {
var closingSelector = this.closingSelector;
var closingNotifier = closingSelector.call(this, value);
if (closingNotifier) {
this.trySubscribe(closingNotifier);
}
} catch (err) {
this._error(err);
}
};
BufferToggleSubscriber.prototype.closeBuffer = function(context) {
var contexts = this.contexts;
if (contexts && context) {
var buffer = context.buffer, subscription = context.subscription;
this.destination.next(buffer);
contexts.splice(contexts.indexOf(context), 1);
this.remove(subscription);
subscription.unsubscribe();
}
};
BufferToggleSubscriber.prototype.trySubscribe = function(closingNotifier) {
var contexts = this.contexts;
var buffer = [];
var subscription = new Subscription_1.Subscription();
var context = {
buffer: buffer,
subscription: subscription
};
contexts.push(context);
var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
if (!innerSubscription || innerSubscription.closed) {
this.closeBuffer(context);
} else {
innerSubscription.context = context;
this.add(innerSubscription);
subscription.add(innerSubscription);
}
};
return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var bufferWhen_1 = __webpack_require__(410);
Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(163);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function bufferWhen(closingSelector) {
return this.lift(new BufferWhenOperator(closingSelector));
}
exports.bufferWhen = bufferWhen;
var BufferWhenOperator = function() {
function BufferWhenOperator(closingSelector) {
this.closingSelector = closingSelector;
}
BufferWhenOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
};
return BufferWhenOperator;
}();
var BufferWhenSubscriber = function(_super) {
__extends(BufferWhenSubscriber, _super);
function BufferWhenSubscriber(destination, closingSelector) {
_super.call(this, destination);
this.closingSelector = closingSelector;
this.subscribing = false;
this.openBuffer();
}
BufferWhenSubscriber.prototype._next = function(value) {
this.buffer.push(value);
};
BufferWhenSubscriber.prototype._complete = function() {
var buffer = this.buffer;
if (buffer) {
this.destination.next(buffer);
}
_super.prototype._complete.call(this);
};
BufferWhenSubscriber.prototype._unsubscribe = function() {
this.buffer = null;
this.subscribing = false;
};
BufferWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.openBuffer();
};
BufferWhenSubscriber.prototype.notifyComplete = function() {
if (this.subscribing) {
this.complete();
} else {
this.openBuffer();
}
};
BufferWhenSubscriber.prototype.openBuffer = function() {
var closingSubscription = this.closingSubscription;
if (closingSubscription) {
this.remove(closingSubscription);
closingSubscription.unsubscribe();
}
var buffer = this.buffer;
if (this.buffer) {
this.destination.next(buffer);
}
this.buffer = [];
var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
if (closingNotifier === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
} else {
closingSubscription = new Subscription_1.Subscription();
this.closingSubscription = closingSubscription;
this.add(closingSubscription);
this.subscribing = true;
closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
this.subscribing = false;
}
};
return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var cache_1 = __webpack_require__(412);
Observable_1.Observable.prototype.cache = cache_1.cache;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var ReplaySubject_1 = __webpack_require__(396);
function cache(bufferSize, windowTime, scheduler) {
if (bufferSize === void 0) {
bufferSize = Number.POSITIVE_INFINITY;
}
if (windowTime === void 0) {
windowTime = Number.POSITIVE_INFINITY;
}
var subject;
var source = this;
var refs = 0;
var outerSub;
var getSubject = function() {
subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
return subject;
};
return new Observable_1.Observable(function(observer) {
if (!subject) {
subject = getSubject();
outerSub = source.subscribe(function(value) {
return subject.next(value);
}, function(err) {
var s = subject;
subject = null;
s.error(err);
}, function() {
return subject.complete();
});
}
refs++;
if (!subject) {
subject = getSubject();
}
var innerSub = subject.subscribe(observer);
return function() {
refs--;
if (innerSub) {
innerSub.unsubscribe();
}
if (refs === 0) {
outerSub.unsubscribe();
}
};
});
}
exports.cache = cache;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var catch_1 = __webpack_require__(260);
Observable_1.Observable.prototype.catch = catch_1._catch;
Observable_1.Observable.prototype._catch = catch_1._catch;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var combineAll_1 = __webpack_require__(415);
Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var combineLatest_1 = __webpack_require__(326);
function combineAll(project) {
return this.lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineAll = combineAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var combineLatest_1 = __webpack_require__(326);
Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var concat_1 = __webpack_require__(329);
Observable_1.Observable.prototype.concat = concat_1.concat;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var concatAll_1 = __webpack_require__(261);
Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var concatMap_1 = __webpack_require__(250);
Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var concatMapTo_1 = __webpack_require__(421);
Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var mergeMapTo_1 = __webpack_require__(422);
function concatMapTo(innerObservable, resultSelector) {
return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
}
exports.concatMapTo = concatMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function mergeMapTo(innerObservable, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
if (typeof resultSelector === "number") {
concurrent = resultSelector;
resultSelector = null;
}
return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
}
exports.mergeMapTo = mergeMapTo;
var MergeMapToOperator = function() {
function MergeMapToOperator(ish, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
this.ish = ish;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
}
MergeMapToOperator.prototype.call = function(observer, source) {
return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
};
return MergeMapToOperator;
}();
exports.MergeMapToOperator = MergeMapToOperator;
var MergeMapToSubscriber = function(_super) {
__extends(MergeMapToSubscriber, _super);
function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
_super.call(this, destination);
this.ish = ish;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
this.index = 0;
}
MergeMapToSubscriber.prototype._next = function(value) {
if (this.active < this.concurrent) {
var resultSelector = this.resultSelector;
var index = this.index++;
var ish = this.ish;
var destination = this.destination;
this.active++;
this._innerSub(ish, destination, resultSelector, value, index);
} else {
this.buffer.push(value);
}
};
MergeMapToSubscriber.prototype._innerSub = function(ish, destination, resultSelector, value, index) {
this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
};
MergeMapToSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
this.destination.complete();
}
};
MergeMapToSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
if (resultSelector) {
this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
} else {
destination.next(innerValue);
}
};
MergeMapToSubscriber.prototype.trySelectResult = function(outerValue, innerValue, outerIndex, innerIndex) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
var result;
try {
result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
destination.error(err);
return;
}
destination.next(result);
};
MergeMapToSubscriber.prototype.notifyError = function(err) {
this.destination.error(err);
};
MergeMapToSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
this.destination.complete();
}
};
return MergeMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapToSubscriber = MergeMapToSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var count_1 = __webpack_require__(424);
Observable_1.Observable.prototype.count = count_1.count;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function count(predicate) {
return this.lift(new CountOperator(predicate, this));
}
exports.count = count;
var CountOperator = function() {
function CountOperator(predicate, source) {
this.predicate = predicate;
this.source = source;
}
CountOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
};
return CountOperator;
}();
var CountSubscriber = function(_super) {
__extends(CountSubscriber, _super);
function CountSubscriber(destination, predicate, source) {
_super.call(this, destination);
this.predicate = predicate;
this.source = source;
this.count = 0;
this.index = 0;
}
CountSubscriber.prototype._next = function(value) {
if (this.predicate) {
this._tryPredicate(value);
} else {
this.count++;
}
};
CountSubscriber.prototype._tryPredicate = function(value) {
var result;
try {
result = this.predicate(value, this.index++, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
this.count++;
}
};
CountSubscriber.prototype._complete = function() {
this.destination.next(this.count);
this.destination.complete();
};
return CountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var dematerialize_1 = __webpack_require__(426);
Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function dematerialize() {
return this.lift(new DeMaterializeOperator());
}
exports.dematerialize = dematerialize;
var DeMaterializeOperator = function() {
function DeMaterializeOperator() {}
DeMaterializeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DeMaterializeSubscriber(subscriber));
};
return DeMaterializeOperator;
}();
var DeMaterializeSubscriber = function(_super) {
__extends(DeMaterializeSubscriber, _super);
function DeMaterializeSubscriber(destination) {
_super.call(this, destination);
}
DeMaterializeSubscriber.prototype._next = function(value) {
value.observe(this.destination);
};
return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var debounce_1 = __webpack_require__(428);
Observable_1.Observable.prototype.debounce = debounce_1.debounce;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function debounce(durationSelector) {
return this.lift(new DebounceOperator(durationSelector));
}
exports.debounce = debounce;
var DebounceOperator = function() {
function DebounceOperator(durationSelector) {
this.durationSelector = durationSelector;
}
DebounceOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
};
return DebounceOperator;
}();
var DebounceSubscriber = function(_super) {
__extends(DebounceSubscriber, _super);
function DebounceSubscriber(destination, durationSelector) {
_super.call(this, destination);
this.durationSelector = durationSelector;
this.hasValue = false;
this.durationSubscription = null;
}
DebounceSubscriber.prototype._next = function(value) {
try {
var result = this.durationSelector.call(this, value);
if (result) {
this._tryNext(value, result);
}
} catch (err) {
this.destination.error(err);
}
};
DebounceSubscriber.prototype._complete = function() {
this.emitValue();
this.destination.complete();
};
DebounceSubscriber.prototype._tryNext = function(value, duration) {
var subscription = this.durationSubscription;
this.value = value;
this.hasValue = true;
if (subscription) {
subscription.unsubscribe();
this.remove(subscription);
}
subscription = subscribeToResult_1.subscribeToResult(this, duration);
if (!subscription.closed) {
this.add(this.durationSubscription = subscription);
}
};
DebounceSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.emitValue();
};
DebounceSubscriber.prototype.notifyComplete = function() {
this.emitValue();
};
DebounceSubscriber.prototype.emitValue = function() {
if (this.hasValue) {
var value = this.value;
var subscription = this.durationSubscription;
if (subscription) {
this.durationSubscription = null;
subscription.unsubscribe();
this.remove(subscription);
}
this.value = null;
this.hasValue = false;
_super.prototype._next.call(this, value);
}
};
return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var debounceTime_1 = __webpack_require__(430);
Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var async_1 = __webpack_require__(354);
function debounceTime(dueTime, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new DebounceTimeOperator(dueTime, scheduler));
}
exports.debounceTime = debounceTime;
var DebounceTimeOperator = function() {
function DebounceTimeOperator(dueTime, scheduler) {
this.dueTime = dueTime;
this.scheduler = scheduler;
}
DebounceTimeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
};
return DebounceTimeOperator;
}();
var DebounceTimeSubscriber = function(_super) {
__extends(DebounceTimeSubscriber, _super);
function DebounceTimeSubscriber(destination, dueTime, scheduler) {
_super.call(this, destination);
this.dueTime = dueTime;
this.scheduler = scheduler;
this.debouncedSubscription = null;
this.lastValue = null;
this.hasValue = false;
}
DebounceTimeSubscriber.prototype._next = function(value) {
this.clearDebounce();
this.lastValue = value;
this.hasValue = true;
this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
};
DebounceTimeSubscriber.prototype._complete = function() {
this.debouncedNext();
this.destination.complete();
};
DebounceTimeSubscriber.prototype.debouncedNext = function() {
this.clearDebounce();
if (this.hasValue) {
this.destination.next(this.lastValue);
this.lastValue = null;
this.hasValue = false;
}
};
DebounceTimeSubscriber.prototype.clearDebounce = function() {
var debouncedSubscription = this.debouncedSubscription;
if (debouncedSubscription !== null) {
this.remove(debouncedSubscription);
debouncedSubscription.unsubscribe();
this.debouncedSubscription = null;
}
};
return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(subscriber) {
subscriber.debouncedNext();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var defaultIfEmpty_1 = __webpack_require__(432);
Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function defaultIfEmpty(defaultValue) {
if (defaultValue === void 0) {
defaultValue = null;
}
return this.lift(new DefaultIfEmptyOperator(defaultValue));
}
exports.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = function() {
function DefaultIfEmptyOperator(defaultValue) {
this.defaultValue = defaultValue;
}
DefaultIfEmptyOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
};
return DefaultIfEmptyOperator;
}();
var DefaultIfEmptySubscriber = function(_super) {
__extends(DefaultIfEmptySubscriber, _super);
function DefaultIfEmptySubscriber(destination, defaultValue) {
_super.call(this, destination);
this.defaultValue = defaultValue;
this.isEmpty = true;
}
DefaultIfEmptySubscriber.prototype._next = function(value) {
this.isEmpty = false;
this.destination.next(value);
};
DefaultIfEmptySubscriber.prototype._complete = function() {
if (this.isEmpty) {
this.destination.next(this.defaultValue);
}
this.destination.complete();
};
return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var delay_1 = __webpack_require__(434);
Observable_1.Observable.prototype.delay = delay_1.delay;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(354);
var isDate_1 = __webpack_require__(386);
var Subscriber_1 = __webpack_require__(161);
var Notification_1 = __webpack_require__(248);
function delay(delay, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
var absoluteDelay = isDate_1.isDate(delay);
var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
return this.lift(new DelayOperator(delayFor, scheduler));
}
exports.delay = delay;
var DelayOperator = function() {
function DelayOperator(delay, scheduler) {
this.delay = delay;
this.scheduler = scheduler;
}
DelayOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
};
return DelayOperator;
}();
var DelaySubscriber = function(_super) {
__extends(DelaySubscriber, _super);
function DelaySubscriber(destination, delay, scheduler) {
_super.call(this, destination);
this.delay = delay;
this.scheduler = scheduler;
this.queue = [];
this.active = false;
this.errored = false;
}
DelaySubscriber.dispatch = function(state) {
var source = state.source;
var queue = source.queue;
var scheduler = state.scheduler;
var destination = state.destination;
while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
queue.shift().notification.observe(destination);
}
if (queue.length > 0) {
var delay_1 = Math.max(0, queue[0].time - scheduler.now());
this.schedule(state, delay_1);
} else {
source.active = false;
}
};
DelaySubscriber.prototype._schedule = function(scheduler) {
this.active = true;
this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
source: this,
destination: this.destination,
scheduler: scheduler
}));
};
DelaySubscriber.prototype.scheduleNotification = function(notification) {
if (this.errored === true) {
return;
}
var scheduler = this.scheduler;
var message = new DelayMessage(scheduler.now() + this.delay, notification);
this.queue.push(message);
if (this.active === false) {
this._schedule(scheduler);
}
};
DelaySubscriber.prototype._next = function(value) {
this.scheduleNotification(Notification_1.Notification.createNext(value));
};
DelaySubscriber.prototype._error = function(err) {
this.errored = true;
this.queue = [];
this.destination.error(err);
};
DelaySubscriber.prototype._complete = function() {
this.scheduleNotification(Notification_1.Notification.createComplete());
};
return DelaySubscriber;
}(Subscriber_1.Subscriber);
var DelayMessage = function() {
function DelayMessage(time, notification) {
this.time = time;
this.notification = notification;
}
return DelayMessage;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var delayWhen_1 = __webpack_require__(436);
Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var Observable_1 = __webpack_require__(158);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function delayWhen(delayDurationSelector, subscriptionDelay) {
if (subscriptionDelay) {
return new SubscriptionDelayObservable(this, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
}
return this.lift(new DelayWhenOperator(delayDurationSelector));
}
exports.delayWhen = delayWhen;
var DelayWhenOperator = function() {
function DelayWhenOperator(delayDurationSelector) {
this.delayDurationSelector = delayDurationSelector;
}
DelayWhenOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
};
return DelayWhenOperator;
}();
var DelayWhenSubscriber = function(_super) {
__extends(DelayWhenSubscriber, _super);
function DelayWhenSubscriber(destination, delayDurationSelector) {
_super.call(this, destination);
this.delayDurationSelector = delayDurationSelector;
this.completed = false;
this.delayNotifierSubscriptions = [];
this.values = [];
}
DelayWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.destination.next(outerValue);
this.removeSubscription(innerSub);
this.tryComplete();
};
DelayWhenSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
DelayWhenSubscriber.prototype.notifyComplete = function(innerSub) {
var value = this.removeSubscription(innerSub);
if (value) {
this.destination.next(value);
}
this.tryComplete();
};
DelayWhenSubscriber.prototype._next = function(value) {
try {
var delayNotifier = this.delayDurationSelector(value);
if (delayNotifier) {
this.tryDelay(delayNotifier, value);
}
} catch (err) {
this.destination.error(err);
}
};
DelayWhenSubscriber.prototype._complete = function() {
this.completed = true;
this.tryComplete();
};
DelayWhenSubscriber.prototype.removeSubscription = function(subscription) {
subscription.unsubscribe();
var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
var value = null;
if (subscriptionIdx !== -1) {
value = this.values[subscriptionIdx];
this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
this.values.splice(subscriptionIdx, 1);
}
return value;
};
DelayWhenSubscriber.prototype.tryDelay = function(delayNotifier, value) {
var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
this.add(notifierSubscription);
this.delayNotifierSubscriptions.push(notifierSubscription);
this.values.push(value);
};
DelayWhenSubscriber.prototype.tryComplete = function() {
if (this.completed && this.delayNotifierSubscriptions.length === 0) {
this.destination.complete();
}
};
return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
var SubscriptionDelayObservable = function(_super) {
__extends(SubscriptionDelayObservable, _super);
function SubscriptionDelayObservable(source, subscriptionDelay) {
_super.call(this);
this.source = source;
this.subscriptionDelay = subscriptionDelay;
}
SubscriptionDelayObservable.prototype._subscribe = function(subscriber) {
this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
};
return SubscriptionDelayObservable;
}(Observable_1.Observable);
var SubscriptionDelaySubscriber = function(_super) {
__extends(SubscriptionDelaySubscriber, _super);
function SubscriptionDelaySubscriber(parent, source) {
_super.call(this);
this.parent = parent;
this.source = source;
this.sourceSubscribed = false;
}
SubscriptionDelaySubscriber.prototype._next = function(unused) {
this.subscribeToSource();
};
SubscriptionDelaySubscriber.prototype._error = function(err) {
this.unsubscribe();
this.parent.error(err);
};
SubscriptionDelaySubscriber.prototype._complete = function() {
this.subscribeToSource();
};
SubscriptionDelaySubscriber.prototype.subscribeToSource = function() {
if (!this.sourceSubscribed) {
this.sourceSubscribed = true;
this.unsubscribe();
this.source.subscribe(this.parent);
}
};
return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var distinct_1 = __webpack_require__(438);
Observable_1.Observable.prototype.distinct = distinct_1.distinct;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function distinct(compare, flushes) {
return this.lift(new DistinctOperator(compare, flushes));
}
exports.distinct = distinct;
var DistinctOperator = function() {
function DistinctOperator(compare, flushes) {
this.compare = compare;
this.flushes = flushes;
}
DistinctOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));
};
return DistinctOperator;
}();
var DistinctSubscriber = function(_super) {
__extends(DistinctSubscriber, _super);
function DistinctSubscriber(destination, compare, flushes) {
_super.call(this, destination);
this.values = [];
if (typeof compare === "function") {
this.compare = compare;
}
if (flushes) {
this.add(subscribeToResult_1.subscribeToResult(this, flushes));
}
}
DistinctSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.values.length = 0;
};
DistinctSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
DistinctSubscriber.prototype._next = function(value) {
var found = false;
var values = this.values;
var len = values.length;
try {
for (var i = 0; i < len; i++) {
if (this.compare(values[i], value)) {
found = true;
return;
}
}
} catch (err) {
this.destination.error(err);
return;
}
this.values.push(value);
this.destination.next(value);
};
DistinctSubscriber.prototype.compare = function(x, y) {
return x === y;
};
return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.DistinctSubscriber = DistinctSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var distinctKey_1 = __webpack_require__(440);
Observable_1.Observable.prototype.distinctKey = distinctKey_1.distinctKey;
}, function(module, exports, __webpack_require__) {
"use strict";
var distinct_1 = __webpack_require__(438);
function distinctKey(key, compare, flushes) {
return distinct_1.distinct.call(this, function(x, y) {
if (compare) {
return compare(x[key], y[key]);
}
return x[key] === y[key];
}, flushes);
}
exports.distinctKey = distinctKey;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var distinctUntilChanged_1 = __webpack_require__(442);
Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
function distinctUntilChanged(compare, keySelector) {
return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
}
exports.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = function() {
function DistinctUntilChangedOperator(compare, keySelector) {
this.compare = compare;
this.keySelector = keySelector;
}
DistinctUntilChangedOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
};
return DistinctUntilChangedOperator;
}();
var DistinctUntilChangedSubscriber = function(_super) {
__extends(DistinctUntilChangedSubscriber, _super);
function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
_super.call(this, destination);
this.keySelector = keySelector;
this.hasKey = false;
if (typeof compare === "function") {
this.compare = compare;
}
}
DistinctUntilChangedSubscriber.prototype.compare = function(x, y) {
return x === y;
};
DistinctUntilChangedSubscriber.prototype._next = function(value) {
var keySelector = this.keySelector;
var key = value;
if (keySelector) {
key = tryCatch_1.tryCatch(this.keySelector)(value);
if (key === errorObject_1.errorObject) {
return this.destination.error(errorObject_1.errorObject.e);
}
}
var result = false;
if (this.hasKey) {
result = tryCatch_1.tryCatch(this.compare)(this.key, key);
if (result === errorObject_1.errorObject) {
return this.destination.error(errorObject_1.errorObject.e);
}
} else {
this.hasKey = true;
}
if (Boolean(result) === false) {
this.key = key;
this.destination.next(value);
}
};
return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var distinctUntilKeyChanged_1 = __webpack_require__(444);
Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
}, function(module, exports, __webpack_require__) {
"use strict";
var distinctUntilChanged_1 = __webpack_require__(442);
function distinctUntilKeyChanged(key, compare) {
return distinctUntilChanged_1.distinctUntilChanged.call(this, function(x, y) {
if (compare) {
return compare(x[key], y[key]);
}
return x[key] === y[key];
});
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var do_1 = __webpack_require__(446);
Observable_1.Observable.prototype.do = do_1._do;
Observable_1.Observable.prototype._do = do_1._do;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function _do(nextOrObserver, error, complete) {
return this.lift(new DoOperator(nextOrObserver, error, complete));
}
exports._do = _do;
var DoOperator = function() {
function DoOperator(nextOrObserver, error, complete) {
this.nextOrObserver = nextOrObserver;
this.error = error;
this.complete = complete;
}
DoOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
};
return DoOperator;
}();
var DoSubscriber = function(_super) {
__extends(DoSubscriber, _super);
function DoSubscriber(destination, nextOrObserver, error, complete) {
_super.call(this, destination);
var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
safeSubscriber.syncErrorThrowable = true;
this.add(safeSubscriber);
this.safeSubscriber = safeSubscriber;
}
DoSubscriber.prototype._next = function(value) {
var safeSubscriber = this.safeSubscriber;
safeSubscriber.next(value);
if (safeSubscriber.syncErrorThrown) {
this.destination.error(safeSubscriber.syncErrorValue);
} else {
this.destination.next(value);
}
};
DoSubscriber.prototype._error = function(err) {
var safeSubscriber = this.safeSubscriber;
safeSubscriber.error(err);
if (safeSubscriber.syncErrorThrown) {
this.destination.error(safeSubscriber.syncErrorValue);
} else {
this.destination.error(err);
}
};
DoSubscriber.prototype._complete = function() {
var safeSubscriber = this.safeSubscriber;
safeSubscriber.complete();
if (safeSubscriber.syncErrorThrown) {
this.destination.error(safeSubscriber.syncErrorValue);
} else {
this.destination.complete();
}
};
return DoSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var exhaust_1 = __webpack_require__(448);
Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function exhaust() {
return this.lift(new SwitchFirstOperator());
}
exports.exhaust = exhaust;
var SwitchFirstOperator = function() {
function SwitchFirstOperator() {}
SwitchFirstOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SwitchFirstSubscriber(subscriber));
};
return SwitchFirstOperator;
}();
var SwitchFirstSubscriber = function(_super) {
__extends(SwitchFirstSubscriber, _super);
function SwitchFirstSubscriber(destination) {
_super.call(this, destination);
this.hasCompleted = false;
this.hasSubscription = false;
}
SwitchFirstSubscriber.prototype._next = function(value) {
if (!this.hasSubscription) {
this.hasSubscription = true;
this.add(subscribeToResult_1.subscribeToResult(this, value));
}
};
SwitchFirstSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (!this.hasSubscription) {
this.destination.complete();
}
};
SwitchFirstSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.hasSubscription = false;
if (this.hasCompleted) {
this.destination.complete();
}
};
return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var exhaustMap_1 = __webpack_require__(450);
Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function exhaustMap(project, resultSelector) {
return this.lift(new SwitchFirstMapOperator(project, resultSelector));
}
exports.exhaustMap = exhaustMap;
var SwitchFirstMapOperator = function() {
function SwitchFirstMapOperator(project, resultSelector) {
this.project = project;
this.resultSelector = resultSelector;
}
SwitchFirstMapOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
};
return SwitchFirstMapOperator;
}();
var SwitchFirstMapSubscriber = function(_super) {
__extends(SwitchFirstMapSubscriber, _super);
function SwitchFirstMapSubscriber(destination, project, resultSelector) {
_super.call(this, destination);
this.project = project;
this.resultSelector = resultSelector;
this.hasSubscription = false;
this.hasCompleted = false;
this.index = 0;
}
SwitchFirstMapSubscriber.prototype._next = function(value) {
if (!this.hasSubscription) {
this.tryNext(value);
}
};
SwitchFirstMapSubscriber.prototype.tryNext = function(value) {
var index = this.index++;
var destination = this.destination;
try {
var result = this.project(value, index);
this.hasSubscription = true;
this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
} catch (err) {
destination.error(err);
}
};
SwitchFirstMapSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (!this.hasSubscription) {
this.destination.complete();
}
};
SwitchFirstMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
if (resultSelector) {
this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
} else {
destination.next(innerValue);
}
};
SwitchFirstMapSubscriber.prototype.trySelectResult = function(outerValue, innerValue, outerIndex, innerIndex) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
try {
var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
destination.next(result);
} catch (err) {
destination.error(err);
}
};
SwitchFirstMapSubscriber.prototype.notifyError = function(err) {
this.destination.error(err);
};
SwitchFirstMapSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.hasSubscription = false;
if (this.hasCompleted) {
this.destination.complete();
}
};
return SwitchFirstMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var expand_1 = __webpack_require__(452);
Observable_1.Observable.prototype.expand = expand_1.expand;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function expand(project, concurrent, scheduler) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
if (scheduler === void 0) {
scheduler = undefined;
}
concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
return this.lift(new ExpandOperator(project, concurrent, scheduler));
}
exports.expand = expand;
var ExpandOperator = function() {
function ExpandOperator(project, concurrent, scheduler) {
this.project = project;
this.concurrent = concurrent;
this.scheduler = scheduler;
}
ExpandOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
};
return ExpandOperator;
}();
exports.ExpandOperator = ExpandOperator;
var ExpandSubscriber = function(_super) {
__extends(ExpandSubscriber, _super);
function ExpandSubscriber(destination, project, concurrent, scheduler) {
_super.call(this, destination);
this.project = project;
this.concurrent = concurrent;
this.scheduler = scheduler;
this.index = 0;
this.active = 0;
this.hasCompleted = false;
if (concurrent < Number.POSITIVE_INFINITY) {
this.buffer = [];
}
}
ExpandSubscriber.dispatch = function(arg) {
var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
subscriber.subscribeToProjection(result, value, index);
};
ExpandSubscriber.prototype._next = function(value) {
var destination = this.destination;
if (destination.closed) {
this._complete();
return;
}
var index = this.index++;
if (this.active < this.concurrent) {
destination.next(value);
var result = tryCatch_1.tryCatch(this.project)(value, index);
if (result === errorObject_1.errorObject) {
destination.error(errorObject_1.errorObject.e);
} else if (!this.scheduler) {
this.subscribeToProjection(result, value, index);
} else {
var state = {
subscriber: this,
result: result,
value: value,
index: index
};
this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
}
} else {
this.buffer.push(value);
}
};
ExpandSubscriber.prototype.subscribeToProjection = function(result, value, index) {
this.active++;
this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
};
ExpandSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.hasCompleted && this.active === 0) {
this.destination.complete();
}
};
ExpandSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this._next(innerValue);
};
ExpandSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer && buffer.length > 0) {
this._next(buffer.shift());
}
if (this.hasCompleted && this.active === 0) {
this.destination.complete();
}
};
return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.ExpandSubscriber = ExpandSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var elementAt_1 = __webpack_require__(454);
Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var ArgumentOutOfRangeError_1 = __webpack_require__(455);
function elementAt(index, defaultValue) {
return this.lift(new ElementAtOperator(index, defaultValue));
}
exports.elementAt = elementAt;
var ElementAtOperator = function() {
function ElementAtOperator(index, defaultValue) {
this.index = index;
this.defaultValue = defaultValue;
if (index < 0) {
throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
}
}
ElementAtOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
};
return ElementAtOperator;
}();
var ElementAtSubscriber = function(_super) {
__extends(ElementAtSubscriber, _super);
function ElementAtSubscriber(destination, index, defaultValue) {
_super.call(this, destination);
this.index = index;
this.defaultValue = defaultValue;
}
ElementAtSubscriber.prototype._next = function(x) {
if (this.index-- === 0) {
this.destination.next(x);
this.destination.complete();
}
};
ElementAtSubscriber.prototype._complete = function() {
var destination = this.destination;
if (this.index >= 0) {
if (typeof this.defaultValue !== "undefined") {
destination.next(this.defaultValue);
} else {
destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError());
}
}
destination.complete();
};
return ElementAtSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArgumentOutOfRangeError = function(_super) {
__extends(ArgumentOutOfRangeError, _super);
function ArgumentOutOfRangeError() {
var err = _super.call(this, "argument out of range");
this.name = err.name = "ArgumentOutOfRangeError";
this.stack = err.stack;
this.message = err.message;
}
return ArgumentOutOfRangeError;
}(Error);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var filter_1 = __webpack_require__(264);
Observable_1.Observable.prototype.filter = filter_1.filter;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var finally_1 = __webpack_require__(458);
Observable_1.Observable.prototype.finally = finally_1._finally;
Observable_1.Observable.prototype._finally = finally_1._finally;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var Subscription_1 = __webpack_require__(163);
function _finally(callback) {
return this.lift(new FinallyOperator(callback));
}
exports._finally = _finally;
var FinallyOperator = function() {
function FinallyOperator(callback) {
this.callback = callback;
}
FinallyOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new FinallySubscriber(subscriber, this.callback));
};
return FinallyOperator;
}();
var FinallySubscriber = function(_super) {
__extends(FinallySubscriber, _super);
function FinallySubscriber(destination, callback) {
_super.call(this, destination);
this.add(new Subscription_1.Subscription(callback));
}
return FinallySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var find_1 = __webpack_require__(460);
Observable_1.Observable.prototype.find = find_1.find;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function find(predicate, thisArg) {
if (typeof predicate !== "function") {
throw new TypeError("predicate is not a function");
}
return this.lift(new FindValueOperator(predicate, this, false, thisArg));
}
exports.find = find;
var FindValueOperator = function() {
function FindValueOperator(predicate, source, yieldIndex, thisArg) {
this.predicate = predicate;
this.source = source;
this.yieldIndex = yieldIndex;
this.thisArg = thisArg;
}
FindValueOperator.prototype.call = function(observer, source) {
return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
};
return FindValueOperator;
}();
exports.FindValueOperator = FindValueOperator;
var FindValueSubscriber = function(_super) {
__extends(FindValueSubscriber, _super);
function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
_super.call(this, destination);
this.predicate = predicate;
this.source = source;
this.yieldIndex = yieldIndex;
this.thisArg = thisArg;
this.index = 0;
}
FindValueSubscriber.prototype.notifyComplete = function(value) {
var destination = this.destination;
destination.next(value);
destination.complete();
};
FindValueSubscriber.prototype._next = function(value) {
var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
var index = this.index++;
try {
var result = predicate.call(thisArg || this, value, index, this.source);
if (result) {
this.notifyComplete(this.yieldIndex ? index : value);
}
} catch (err) {
this.destination.error(err);
}
};
FindValueSubscriber.prototype._complete = function() {
this.notifyComplete(this.yieldIndex ? -1 : undefined);
};
return FindValueSubscriber;
}(Subscriber_1.Subscriber);
exports.FindValueSubscriber = FindValueSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var findIndex_1 = __webpack_require__(462);
Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
}, function(module, exports, __webpack_require__) {
"use strict";
var find_1 = __webpack_require__(460);
function findIndex(predicate, thisArg) {
return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));
}
exports.findIndex = findIndex;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var first_1 = __webpack_require__(256);
Observable_1.Observable.prototype.first = first_1.first;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var groupBy_1 = __webpack_require__(465);
Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var Subscription_1 = __webpack_require__(163);
var Observable_1 = __webpack_require__(158);
var Subject_1 = __webpack_require__(157);
var Map_1 = __webpack_require__(466);
var FastMap_1 = __webpack_require__(468);
function groupBy(keySelector, elementSelector, durationSelector) {
return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));
}
exports.groupBy = groupBy;
var GroupByOperator = function() {
function GroupByOperator(source, keySelector, elementSelector, durationSelector) {
this.source = source;
this.keySelector = keySelector;
this.elementSelector = elementSelector;
this.durationSelector = durationSelector;
}
GroupByOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));
};
return GroupByOperator;
}();
var GroupBySubscriber = function(_super) {
__extends(GroupBySubscriber, _super);
function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {
_super.call(this, destination);
this.keySelector = keySelector;
this.elementSelector = elementSelector;
this.durationSelector = durationSelector;
this.groups = null;
this.attemptedToUnsubscribe = false;
this.count = 0;
}
GroupBySubscriber.prototype._next = function(value) {
var key;
try {
key = this.keySelector(value);
} catch (err) {
this.error(err);
return;
}
this._group(value, key);
};
GroupBySubscriber.prototype._group = function(value, key) {
var groups = this.groups;
if (!groups) {
groups = this.groups = typeof key === "string" ? new FastMap_1.FastMap() : new Map_1.Map();
}
var group = groups.get(key);
var element;
if (this.elementSelector) {
try {
element = this.elementSelector(value);
} catch (err) {
this.error(err);
}
} else {
element = value;
}
if (!group) {
groups.set(key, group = new Subject_1.Subject());
var groupedObservable = new GroupedObservable(key, group, this);
this.destination.next(groupedObservable);
if (this.durationSelector) {
var duration = void 0;
try {
duration = this.durationSelector(new GroupedObservable(key, group));
} catch (err) {
this.error(err);
return;
}
this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
}
}
if (!group.closed) {
group.next(element);
}
};
GroupBySubscriber.prototype._error = function(err) {
var groups = this.groups;
if (groups) {
groups.forEach(function(group, key) {
group.error(err);
});
groups.clear();
}
this.destination.error(err);
};
GroupBySubscriber.prototype._complete = function() {
var groups = this.groups;
if (groups) {
groups.forEach(function(group, key) {
group.complete();
});
groups.clear();
}
this.destination.complete();
};
GroupBySubscriber.prototype.removeGroup = function(key) {
this.groups.delete(key);
};
GroupBySubscriber.prototype.unsubscribe = function() {
if (!this.closed && !this.attemptedToUnsubscribe) {
this.attemptedToUnsubscribe = true;
if (this.count === 0) {
_super.prototype.unsubscribe.call(this);
}
}
};
return GroupBySubscriber;
}(Subscriber_1.Subscriber);
var GroupDurationSubscriber = function(_super) {
__extends(GroupDurationSubscriber, _super);
function GroupDurationSubscriber(key, group, parent) {
_super.call(this);
this.key = key;
this.group = group;
this.parent = parent;
}
GroupDurationSubscriber.prototype._next = function(value) {
this._complete();
};
GroupDurationSubscriber.prototype._error = function(err) {
var group = this.group;
if (!group.closed) {
group.error(err);
}
this.parent.removeGroup(this.key);
};
GroupDurationSubscriber.prototype._complete = function() {
var group = this.group;
if (!group.closed) {
group.complete();
}
this.parent.removeGroup(this.key);
};
return GroupDurationSubscriber;
}(Subscriber_1.Subscriber);
var GroupedObservable = function(_super) {
__extends(GroupedObservable, _super);
function GroupedObservable(key, groupSubject, refCountSubscription) {
_super.call(this);
this.key = key;
this.groupSubject = groupSubject;
this.refCountSubscription = refCountSubscription;
}
GroupedObservable.prototype._subscribe = function(subscriber) {
var subscription = new Subscription_1.Subscription();
var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
if (refCountSubscription && !refCountSubscription.closed) {
subscription.add(new InnerRefCountSubscription(refCountSubscription));
}
subscription.add(groupSubject.subscribe(subscriber));
return subscription;
};
return GroupedObservable;
}(Observable_1.Observable);
exports.GroupedObservable = GroupedObservable;
var InnerRefCountSubscription = function(_super) {
__extends(InnerRefCountSubscription, _super);
function InnerRefCountSubscription(parent) {
_super.call(this);
this.parent = parent;
parent.count++;
}
InnerRefCountSubscription.prototype.unsubscribe = function() {
var parent = this.parent;
if (!parent.closed && !this.closed) {
_super.prototype.unsubscribe.call(this);
parent.count -= 1;
if (parent.count === 0 && parent.attemptedToUnsubscribe) {
parent.unsubscribe();
}
}
};
return InnerRefCountSubscription;
}(Subscription_1.Subscription);
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var MapPolyfill_1 = __webpack_require__(467);
exports.Map = root_1.root.Map || function() {
return MapPolyfill_1.MapPolyfill;
}();
}, function(module, exports) {
"use strict";
var MapPolyfill = function() {
function MapPolyfill() {
this.size = 0;
this._values = [];
this._keys = [];
}
MapPolyfill.prototype.get = function(key) {
var i = this._keys.indexOf(key);
return i === -1 ? undefined : this._values[i];
};
MapPolyfill.prototype.set = function(key, value) {
var i = this._keys.indexOf(key);
if (i === -1) {
this._keys.push(key);
this._values.push(value);
this.size++;
} else {
this._values[i] = value;
}
return this;
};
MapPolyfill.prototype.delete = function(key) {
var i = this._keys.indexOf(key);
if (i === -1) {
return false;
}
this._values.splice(i, 1);
this._keys.splice(i, 1);
this.size--;
return true;
};
MapPolyfill.prototype.clear = function() {
this._keys.length = 0;
this._values.length = 0;
this.size = 0;
};
MapPolyfill.prototype.forEach = function(cb, thisArg) {
for (var i = 0; i < this.size; i++) {
cb.call(thisArg, this._values[i], this._keys[i]);
}
};
return MapPolyfill;
}();
exports.MapPolyfill = MapPolyfill;
}, function(module, exports) {
"use strict";
var FastMap = function() {
function FastMap() {
this.values = {};
}
FastMap.prototype.delete = function(key) {
this.values[key] = null;
return true;
};
FastMap.prototype.set = function(key, value) {
this.values[key] = value;
return this;
};
FastMap.prototype.get = function(key) {
return this.values[key];
};
FastMap.prototype.forEach = function(cb, thisArg) {
var values = this.values;
for (var key in values) {
if (values.hasOwnProperty(key) && values[key] !== null) {
cb.call(thisArg, values[key], key);
}
}
};
FastMap.prototype.clear = function() {
this.values = {};
};
return FastMap;
}();
exports.FastMap = FastMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var ignoreElements_1 = __webpack_require__(470);
Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var noop_1 = __webpack_require__(367);
function ignoreElements() {
return this.lift(new IgnoreElementsOperator());
}
exports.ignoreElements = ignoreElements;
var IgnoreElementsOperator = function() {
function IgnoreElementsOperator() {}
IgnoreElementsOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new IgnoreElementsSubscriber(subscriber));
};
return IgnoreElementsOperator;
}();
var IgnoreElementsSubscriber = function(_super) {
__extends(IgnoreElementsSubscriber, _super);
function IgnoreElementsSubscriber() {
_super.apply(this, arguments);
}
IgnoreElementsSubscriber.prototype._next = function(unused) {
noop_1.noop();
};
return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var isEmpty_1 = __webpack_require__(472);
Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function isEmpty() {
return this.lift(new IsEmptyOperator());
}
exports.isEmpty = isEmpty;
var IsEmptyOperator = function() {
function IsEmptyOperator() {}
IsEmptyOperator.prototype.call = function(observer, source) {
return source._subscribe(new IsEmptySubscriber(observer));
};
return IsEmptyOperator;
}();
var IsEmptySubscriber = function(_super) {
__extends(IsEmptySubscriber, _super);
function IsEmptySubscriber(destination) {
_super.call(this, destination);
}
IsEmptySubscriber.prototype.notifyComplete = function(isEmpty) {
var destination = this.destination;
destination.next(isEmpty);
destination.complete();
};
IsEmptySubscriber.prototype._next = function(value) {
this.notifyComplete(false);
};
IsEmptySubscriber.prototype._complete = function() {
this.notifyComplete(true);
};
return IsEmptySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var audit_1 = __webpack_require__(474);
Observable_1.Observable.prototype.audit = audit_1.audit;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function audit(durationSelector) {
return this.lift(new AuditOperator(durationSelector));
}
exports.audit = audit;
var AuditOperator = function() {
function AuditOperator(durationSelector) {
this.durationSelector = durationSelector;
}
AuditOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));
};
return AuditOperator;
}();
var AuditSubscriber = function(_super) {
__extends(AuditSubscriber, _super);
function AuditSubscriber(destination, durationSelector) {
_super.call(this, destination);
this.durationSelector = durationSelector;
this.hasValue = false;
}
AuditSubscriber.prototype._next = function(value) {
this.value = value;
this.hasValue = true;
if (!this.throttled) {
var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
if (duration === errorObject_1.errorObject) {
this.destination.error(errorObject_1.errorObject.e);
} else {
this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
}
}
};
AuditSubscriber.prototype.clearThrottle = function() {
var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
if (throttled) {
this.remove(throttled);
this.throttled = null;
throttled.unsubscribe();
}
if (hasValue) {
this.value = null;
this.hasValue = false;
this.destination.next(value);
}
};
AuditSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex) {
this.clearThrottle();
};
AuditSubscriber.prototype.notifyComplete = function() {
this.clearThrottle();
};
return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var auditTime_1 = __webpack_require__(476);
Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(354);
var Subscriber_1 = __webpack_require__(161);
function auditTime(duration, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new AuditTimeOperator(duration, scheduler));
}
exports.auditTime = auditTime;
var AuditTimeOperator = function() {
function AuditTimeOperator(duration, scheduler) {
this.duration = duration;
this.scheduler = scheduler;
}
AuditTimeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));
};
return AuditTimeOperator;
}();
var AuditTimeSubscriber = function(_super) {
__extends(AuditTimeSubscriber, _super);
function AuditTimeSubscriber(destination, duration, scheduler) {
_super.call(this, destination);
this.duration = duration;
this.scheduler = scheduler;
this.hasValue = false;
}
AuditTimeSubscriber.prototype._next = function(value) {
this.value = value;
this.hasValue = true;
if (!this.throttled) {
this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));
}
};
AuditTimeSubscriber.prototype.clearThrottle = function() {
var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
if (throttled) {
this.remove(throttled);
this.throttled = null;
throttled.unsubscribe();
}
if (hasValue) {
this.value = null;
this.hasValue = false;
this.destination.next(value);
}
};
return AuditTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(subscriber) {
subscriber.clearThrottle();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var last_1 = __webpack_require__(263);
Observable_1.Observable.prototype.last = last_1.last;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var let_1 = __webpack_require__(479);
Observable_1.Observable.prototype.let = let_1.letProto;
Observable_1.Observable.prototype.letBind = let_1.letProto;
}, function(module, exports) {
"use strict";
function letProto(func) {
return func(this);
}
exports.letProto = letProto;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var every_1 = __webpack_require__(255);
Observable_1.Observable.prototype.every = every_1.every;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var map_1 = __webpack_require__(258);
Observable_1.Observable.prototype.map = map_1.map;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var mapTo_1 = __webpack_require__(483);
Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function mapTo(value) {
return this.lift(new MapToOperator(value));
}
exports.mapTo = mapTo;
var MapToOperator = function() {
function MapToOperator(value) {
this.value = value;
}
MapToOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new MapToSubscriber(subscriber, this.value));
};
return MapToOperator;
}();
var MapToSubscriber = function(_super) {
__extends(MapToSubscriber, _super);
function MapToSubscriber(destination, value) {
_super.call(this, destination);
this.value = value;
}
MapToSubscriber.prototype._next = function(x) {
this.destination.next(this.value);
};
return MapToSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var materialize_1 = __webpack_require__(485);
Observable_1.Observable.prototype.materialize = materialize_1.materialize;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var Notification_1 = __webpack_require__(248);
function materialize() {
return this.lift(new MaterializeOperator());
}
exports.materialize = materialize;
var MaterializeOperator = function() {
function MaterializeOperator() {}
MaterializeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new MaterializeSubscriber(subscriber));
};
return MaterializeOperator;
}();
var MaterializeSubscriber = function(_super) {
__extends(MaterializeSubscriber, _super);
function MaterializeSubscriber(destination) {
_super.call(this, destination);
}
MaterializeSubscriber.prototype._next = function(value) {
this.destination.next(Notification_1.Notification.createNext(value));
};
MaterializeSubscriber.prototype._error = function(err) {
var destination = this.destination;
destination.next(Notification_1.Notification.createError(err));
destination.complete();
};
MaterializeSubscriber.prototype._complete = function() {
var destination = this.destination;
destination.next(Notification_1.Notification.createComplete());
destination.complete();
};
return MaterializeSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var max_1 = __webpack_require__(487);
Observable_1.Observable.prototype.max = max_1.max;
}, function(module, exports, __webpack_require__) {
"use strict";
var reduce_1 = __webpack_require__(259);
function max(comparer) {
var max = typeof comparer === "function" ? function(x, y) {
return comparer(x, y) > 0 ? x : y;
} : function(x, y) {
return x > y ? x : y;
};
return this.lift(new reduce_1.ReduceOperator(max));
}
exports.max = max;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var merge_1 = __webpack_require__(361);
Observable_1.Observable.prototype.merge = merge_1.merge;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var mergeAll_1 = __webpack_require__(262);
Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var mergeMap_1 = __webpack_require__(251);
Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var mergeMapTo_1 = __webpack_require__(422);
Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var mergeScan_1 = __webpack_require__(493);
Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var subscribeToResult_1 = __webpack_require__(252);
var OuterSubscriber_1 = __webpack_require__(254);
function mergeScan(project, seed, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
return this.lift(new MergeScanOperator(project, seed, concurrent));
}
exports.mergeScan = mergeScan;
var MergeScanOperator = function() {
function MergeScanOperator(project, seed, concurrent) {
this.project = project;
this.seed = seed;
this.concurrent = concurrent;
}
MergeScanOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));
};
return MergeScanOperator;
}();
exports.MergeScanOperator = MergeScanOperator;
var MergeScanSubscriber = function(_super) {
__extends(MergeScanSubscriber, _super);
function MergeScanSubscriber(destination, project, acc, concurrent) {
_super.call(this, destination);
this.project = project;
this.acc = acc;
this.concurrent = concurrent;
this.hasValue = false;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
this.index = 0;
}
MergeScanSubscriber.prototype._next = function(value) {
if (this.active < this.concurrent) {
var index = this.index++;
var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);
var destination = this.destination;
if (ish === errorObject_1.errorObject) {
destination.error(errorObject_1.errorObject.e);
} else {
this.active++;
this._innerSub(ish, value, index);
}
} else {
this.buffer.push(value);
}
};
MergeScanSubscriber.prototype._innerSub = function(ish, value, index) {
this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
};
MergeScanSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
if (this.hasValue === false) {
this.destination.next(this.acc);
}
this.destination.complete();
}
};
MergeScanSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var destination = this.destination;
this.acc = innerValue;
this.hasValue = true;
destination.next(innerValue);
};
MergeScanSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
if (this.hasValue === false) {
this.destination.next(this.acc);
}
this.destination.complete();
}
};
return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeScanSubscriber = MergeScanSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var min_1 = __webpack_require__(495);
Observable_1.Observable.prototype.min = min_1.min;
}, function(module, exports, __webpack_require__) {
"use strict";
var reduce_1 = __webpack_require__(259);
function min(comparer) {
var min = typeof comparer === "function" ? function(x, y) {
return comparer(x, y) < 0 ? x : y;
} : function(x, y) {
return x < y ? x : y;
};
return this.lift(new reduce_1.ReduceOperator(min));
}
exports.min = min;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var multicast_1 = __webpack_require__(497);
Observable_1.Observable.prototype.multicast = multicast_1.multicast;
}, function(module, exports, __webpack_require__) {
"use strict";
var MulticastObservable_1 = __webpack_require__(498);
var ConnectableObservable_1 = __webpack_require__(499);
function multicast(subjectOrSubjectFactory, selector) {
var subjectFactory;
if (typeof subjectOrSubjectFactory === "function") {
subjectFactory = subjectOrSubjectFactory;
} else {
subjectFactory = function subjectFactory() {
return subjectOrSubjectFactory;
};
}
return !selector ? new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) : new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);
}
exports.multicast = multicast;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var ConnectableObservable_1 = __webpack_require__(499);
var MulticastObservable = function(_super) {
__extends(MulticastObservable, _super);
function MulticastObservable(source, subjectFactory, selector) {
_super.call(this);
this.source = source;
this.subjectFactory = subjectFactory;
this.selector = selector;
}
MulticastObservable.prototype._subscribe = function(subscriber) {
var _a = this, selector = _a.selector, source = _a.source;
var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);
var subscription = selector(connectable).subscribe(subscriber);
subscription.add(connectable.connect());
return subscription;
};
return MulticastObservable;
}(Observable_1.Observable);
exports.MulticastObservable = MulticastObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var Observable_1 = __webpack_require__(158);
var Subscriber_1 = __webpack_require__(161);
var Subscription_1 = __webpack_require__(163);
var ConnectableObservable = function(_super) {
__extends(ConnectableObservable, _super);
function ConnectableObservable(source, subjectFactory) {
_super.call(this);
this.source = source;
this.subjectFactory = subjectFactory;
this._refCount = 0;
}
ConnectableObservable.prototype._subscribe = function(subscriber) {
return this.getSubject().subscribe(subscriber);
};
ConnectableObservable.prototype.getSubject = function() {
var subject = this._subject;
if (!subject || subject.isStopped) {
this._subject = this.subjectFactory();
}
return this._subject;
};
ConnectableObservable.prototype.connect = function() {
var connection = this._connection;
if (!connection) {
connection = this._connection = new Subscription_1.Subscription();
connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
if (connection.closed) {
this._connection = null;
connection = Subscription_1.Subscription.EMPTY;
} else {
this._connection = connection;
}
}
return connection;
};
ConnectableObservable.prototype.refCount = function() {
return this.lift(new RefCountOperator(this));
};
return ConnectableObservable;
}(Observable_1.Observable);
exports.ConnectableObservable = ConnectableObservable;
var ConnectableSubscriber = function(_super) {
__extends(ConnectableSubscriber, _super);
function ConnectableSubscriber(destination, connectable) {
_super.call(this, destination);
this.connectable = connectable;
}
ConnectableSubscriber.prototype._error = function(err) {
this._unsubscribe();
_super.prototype._error.call(this, err);
};
ConnectableSubscriber.prototype._complete = function() {
this._unsubscribe();
_super.prototype._complete.call(this);
};
ConnectableSubscriber.prototype._unsubscribe = function() {
var connectable = this.connectable;
if (connectable) {
this.connectable = null;
var connection = connectable._connection;
connectable._refCount = 0;
connectable._subject = null;
connectable._connection = null;
if (connection) {
connection.unsubscribe();
}
}
};
return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber);
var RefCountOperator = function() {
function RefCountOperator(connectable) {
this.connectable = connectable;
}
RefCountOperator.prototype.call = function(subscriber, source) {
var connectable = this.connectable;
connectable._refCount++;
var refCounter = new RefCountSubscriber(subscriber, connectable);
var subscription = source._subscribe(refCounter);
if (!refCounter.closed) {
refCounter.connection = connectable.connect();
}
return subscription;
};
return RefCountOperator;
}();
var RefCountSubscriber = function(_super) {
__extends(RefCountSubscriber, _super);
function RefCountSubscriber(destination, connectable) {
_super.call(this, destination);
this.connectable = connectable;
}
RefCountSubscriber.prototype._unsubscribe = function() {
var connectable = this.connectable;
if (!connectable) {
this.connection = null;
return;
}
this.connectable = null;
var refCount = connectable._refCount;
if (refCount <= 0) {
this.connection = null;
return;
}
connectable._refCount = refCount - 1;
if (refCount > 1) {
this.connection = null;
return;
}
var connection = this.connection;
var sharedConnection = connectable._connection;
this.connection = null;
if (sharedConnection && (!connection || sharedConnection === connection)) {
sharedConnection.unsubscribe();
}
};
return RefCountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var observeOn_1 = __webpack_require__(247);
Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var onErrorResumeNext_1 = __webpack_require__(370);
Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var pairwise_1 = __webpack_require__(503);
Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function pairwise() {
return this.lift(new PairwiseOperator());
}
exports.pairwise = pairwise;
var PairwiseOperator = function() {
function PairwiseOperator() {}
PairwiseOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new PairwiseSubscriber(subscriber));
};
return PairwiseOperator;
}();
var PairwiseSubscriber = function(_super) {
__extends(PairwiseSubscriber, _super);
function PairwiseSubscriber(destination) {
_super.call(this, destination);
this.hasPrev = false;
}
PairwiseSubscriber.prototype._next = function(value) {
if (this.hasPrev) {
this.destination.next([ this.prev, value ]);
} else {
this.hasPrev = true;
}
this.prev = value;
};
return PairwiseSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var partition_1 = __webpack_require__(505);
Observable_1.Observable.prototype.partition = partition_1.partition;
}, function(module, exports, __webpack_require__) {
"use strict";
var not_1 = __webpack_require__(506);
var filter_1 = __webpack_require__(264);
function partition(predicate, thisArg) {
return [ filter_1.filter.call(this, predicate), filter_1.filter.call(this, not_1.not(predicate, thisArg)) ];
}
exports.partition = partition;
}, function(module, exports) {
"use strict";
function not(pred, thisArg) {
function notPred() {
return !notPred.pred.apply(notPred.thisArg, arguments);
}
notPred.pred = pred;
notPred.thisArg = thisArg;
return notPred;
}
exports.not = not;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var pluck_1 = __webpack_require__(508);
Observable_1.Observable.prototype.pluck = pluck_1.pluck;
}, function(module, exports, __webpack_require__) {
"use strict";
var map_1 = __webpack_require__(258);
function pluck() {
var properties = [];
for (var _i = 0; _i < arguments.length; _i++) {
properties[_i - 0] = arguments[_i];
}
var length = properties.length;
if (length === 0) {
throw new Error("list of properties cannot be empty.");
}
return map_1.map.call(this, plucker(properties, length));
}
exports.pluck = pluck;
function plucker(props, length) {
var mapper = function(x) {
var currentProp = x;
for (var i = 0; i < length; i++) {
var p = currentProp[props[i]];
if (typeof p !== "undefined") {
currentProp = p;
} else {
return undefined;
}
}
return currentProp;
};
return mapper;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var publish_1 = __webpack_require__(510);
Observable_1.Observable.prototype.publish = publish_1.publish;
}, function(module, exports, __webpack_require__) {
"use strict";
var Subject_1 = __webpack_require__(157);
var multicast_1 = __webpack_require__(497);
function publish(selector) {
return selector ? multicast_1.multicast.call(this, function() {
return new Subject_1.Subject();
}, selector) : multicast_1.multicast.call(this, new Subject_1.Subject());
}
exports.publish = publish;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var publishBehavior_1 = __webpack_require__(512);
Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
}, function(module, exports, __webpack_require__) {
"use strict";
var BehaviorSubject_1 = __webpack_require__(236);
var multicast_1 = __webpack_require__(497);
function publishBehavior(value) {
return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
}
exports.publishBehavior = publishBehavior;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var publishReplay_1 = __webpack_require__(514);
Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
}, function(module, exports, __webpack_require__) {
"use strict";
var ReplaySubject_1 = __webpack_require__(396);
var multicast_1 = __webpack_require__(497);
function publishReplay(bufferSize, windowTime, scheduler) {
if (bufferSize === void 0) {
bufferSize = Number.POSITIVE_INFINITY;
}
if (windowTime === void 0) {
windowTime = Number.POSITIVE_INFINITY;
}
return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
}
exports.publishReplay = publishReplay;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var publishLast_1 = __webpack_require__(516);
Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
}, function(module, exports, __webpack_require__) {
"use strict";
var AsyncSubject_1 = __webpack_require__(320);
var multicast_1 = __webpack_require__(497);
function publishLast() {
return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
}
exports.publishLast = publishLast;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var race_1 = __webpack_require__(363);
Observable_1.Observable.prototype.race = race_1.race;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var reduce_1 = __webpack_require__(259);
Observable_1.Observable.prototype.reduce = reduce_1.reduce;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var repeat_1 = __webpack_require__(520);
Observable_1.Observable.prototype.repeat = repeat_1.repeat;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var EmptyObservable_1 = __webpack_require__(244);
function repeat(count) {
if (count === void 0) {
count = -1;
}
if (count === 0) {
return new EmptyObservable_1.EmptyObservable();
} else if (count < 0) {
return this.lift(new RepeatOperator(-1, this));
} else {
return this.lift(new RepeatOperator(count - 1, this));
}
}
exports.repeat = repeat;
var RepeatOperator = function() {
function RepeatOperator(count, source) {
this.count = count;
this.source = source;
}
RepeatOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
};
return RepeatOperator;
}();
var RepeatSubscriber = function(_super) {
__extends(RepeatSubscriber, _super);
function RepeatSubscriber(destination, count, source) {
_super.call(this, destination);
this.count = count;
this.source = source;
}
RepeatSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var _a = this, source = _a.source, count = _a.count;
if (count === 0) {
return _super.prototype.complete.call(this);
} else if (count > -1) {
this.count = count - 1;
}
this.unsubscribe();
this.isStopped = false;
this.closed = false;
source.subscribe(this);
}
};
return RepeatSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var repeatWhen_1 = __webpack_require__(522);
Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function repeatWhen(notifier) {
return this.lift(new RepeatWhenOperator(notifier, this));
}
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = function() {
function RepeatWhenOperator(notifier, source) {
this.notifier = notifier;
this.source = source;
}
RepeatWhenOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));
};
return RepeatWhenOperator;
}();
var RepeatWhenSubscriber = function(_super) {
__extends(RepeatWhenSubscriber, _super);
function RepeatWhenSubscriber(destination, notifier, source) {
_super.call(this, destination);
this.notifier = notifier;
this.source = source;
}
RepeatWhenSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var notifications = this.notifications;
var retries = this.retries;
var retriesSubscription = this.retriesSubscription;
if (!retries) {
notifications = new Subject_1.Subject();
retries = tryCatch_1.tryCatch(this.notifier)(notifications);
if (retries === errorObject_1.errorObject) {
return _super.prototype.complete.call(this);
}
retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
} else {
this.notifications = null;
this.retriesSubscription = null;
}
this.unsubscribe();
this.closed = false;
this.notifications = notifications;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
notifications.next();
}
};
RepeatWhenSubscriber.prototype._unsubscribe = function() {
var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
if (notifications) {
notifications.unsubscribe();
this.notifications = null;
}
if (retriesSubscription) {
retriesSubscription.unsubscribe();
this.retriesSubscription = null;
}
this.retries = null;
};
RepeatWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
this.notifications = null;
this.retries = null;
this.retriesSubscription = null;
this.unsubscribe();
this.isStopped = false;
this.closed = false;
this.notifications = notifications;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
this.source.subscribe(this);
};
return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var retry_1 = __webpack_require__(524);
Observable_1.Observable.prototype.retry = retry_1.retry;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function retry(count) {
if (count === void 0) {
count = -1;
}
return this.lift(new RetryOperator(count, this));
}
exports.retry = retry;
var RetryOperator = function() {
function RetryOperator(count, source) {
this.count = count;
this.source = source;
}
RetryOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));
};
return RetryOperator;
}();
var RetrySubscriber = function(_super) {
__extends(RetrySubscriber, _super);
function RetrySubscriber(destination, count, source) {
_super.call(this, destination);
this.count = count;
this.source = source;
}
RetrySubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var _a = this, source = _a.source, count = _a.count;
if (count === 0) {
return _super.prototype.error.call(this, err);
} else if (count > -1) {
this.count = count - 1;
}
this.unsubscribe();
this.isStopped = false;
this.closed = false;
source.subscribe(this);
}
};
return RetrySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var retryWhen_1 = __webpack_require__(526);
Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function retryWhen(notifier) {
return this.lift(new RetryWhenOperator(notifier, this));
}
exports.retryWhen = retryWhen;
var RetryWhenOperator = function() {
function RetryWhenOperator(notifier, source) {
this.notifier = notifier;
this.source = source;
}
RetryWhenOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
};
return RetryWhenOperator;
}();
var RetryWhenSubscriber = function(_super) {
__extends(RetryWhenSubscriber, _super);
function RetryWhenSubscriber(destination, notifier, source) {
_super.call(this, destination);
this.notifier = notifier;
this.source = source;
}
RetryWhenSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var errors = this.errors;
var retries = this.retries;
var retriesSubscription = this.retriesSubscription;
if (!retries) {
errors = new Subject_1.Subject();
retries = tryCatch_1.tryCatch(this.notifier)(errors);
if (retries === errorObject_1.errorObject) {
return _super.prototype.error.call(this, errorObject_1.errorObject.e);
}
retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
} else {
this.errors = null;
this.retriesSubscription = null;
}
this.unsubscribe();
this.closed = false;
this.errors = errors;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
errors.next(err);
}
};
RetryWhenSubscriber.prototype._unsubscribe = function() {
var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
if (errors) {
errors.unsubscribe();
this.errors = null;
}
if (retriesSubscription) {
retriesSubscription.unsubscribe();
this.retriesSubscription = null;
}
this.retries = null;
};
RetryWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
this.errors = null;
this.retries = null;
this.retriesSubscription = null;
this.unsubscribe();
this.isStopped = false;
this.closed = false;
this.errors = errors;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
this.source.subscribe(this);
};
return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var sample_1 = __webpack_require__(528);
Observable_1.Observable.prototype.sample = sample_1.sample;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function sample(notifier) {
return this.lift(new SampleOperator(notifier));
}
exports.sample = sample;
var SampleOperator = function() {
function SampleOperator(notifier) {
this.notifier = notifier;
}
SampleOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SampleSubscriber(subscriber, this.notifier));
};
return SampleOperator;
}();
var SampleSubscriber = function(_super) {
__extends(SampleSubscriber, _super);
function SampleSubscriber(destination, notifier) {
_super.call(this, destination);
this.hasValue = false;
this.add(subscribeToResult_1.subscribeToResult(this, notifier));
}
SampleSubscriber.prototype._next = function(value) {
this.value = value;
this.hasValue = true;
};
SampleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.emitValue();
};
SampleSubscriber.prototype.notifyComplete = function() {
this.emitValue();
};
SampleSubscriber.prototype.emitValue = function() {
if (this.hasValue) {
this.hasValue = false;
this.destination.next(this.value);
}
};
return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var sampleTime_1 = __webpack_require__(530);
Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var async_1 = __webpack_require__(354);
function sampleTime(period, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new SampleTimeOperator(period, scheduler));
}
exports.sampleTime = sampleTime;
var SampleTimeOperator = function() {
function SampleTimeOperator(period, scheduler) {
this.period = period;
this.scheduler = scheduler;
}
SampleTimeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
};
return SampleTimeOperator;
}();
var SampleTimeSubscriber = function(_super) {
__extends(SampleTimeSubscriber, _super);
function SampleTimeSubscriber(destination, period, scheduler) {
_super.call(this, destination);
this.period = period;
this.scheduler = scheduler;
this.hasValue = false;
this.add(scheduler.schedule(dispatchNotification, period, {
subscriber: this,
period: period
}));
}
SampleTimeSubscriber.prototype._next = function(value) {
this.lastValue = value;
this.hasValue = true;
};
SampleTimeSubscriber.prototype.notifyNext = function() {
if (this.hasValue) {
this.hasValue = false;
this.destination.next(this.lastValue);
}
};
return SampleTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNotification(state) {
var subscriber = state.subscriber, period = state.period;
subscriber.notifyNext();
this.schedule(state, period);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var scan_1 = __webpack_require__(532);
Observable_1.Observable.prototype.scan = scan_1.scan;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function scan(accumulator, seed) {
return this.lift(new ScanOperator(accumulator, seed));
}
exports.scan = scan;
var ScanOperator = function() {
function ScanOperator(accumulator, seed) {
this.accumulator = accumulator;
this.seed = seed;
}
ScanOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));
};
return ScanOperator;
}();
var ScanSubscriber = function(_super) {
__extends(ScanSubscriber, _super);
function ScanSubscriber(destination, accumulator, seed) {
_super.call(this, destination);
this.accumulator = accumulator;
this.index = 0;
this.accumulatorSet = false;
this.seed = seed;
this.accumulatorSet = typeof seed !== "undefined";
}
Object.defineProperty(ScanSubscriber.prototype, "seed", {
get: function() {
return this._seed;
},
set: function(value) {
this.accumulatorSet = true;
this._seed = value;
},
enumerable: true,
configurable: true
});
ScanSubscriber.prototype._next = function(value) {
if (!this.accumulatorSet) {
this.seed = value;
this.destination.next(value);
} else {
return this._tryNext(value);
}
};
ScanSubscriber.prototype._tryNext = function(value) {
var index = this.index++;
var result;
try {
result = this.accumulator(this.seed, value, index);
} catch (err) {
this.destination.error(err);
}
this.seed = result;
this.destination.next(result);
};
return ScanSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var sequenceEqual_1 = __webpack_require__(534);
Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
function sequenceEqual(compareTo, comparor) {
return this.lift(new SequenceEqualOperator(compareTo, comparor));
}
exports.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = function() {
function SequenceEqualOperator(compareTo, comparor) {
this.compareTo = compareTo;
this.comparor = comparor;
}
SequenceEqualOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
};
return SequenceEqualOperator;
}();
exports.SequenceEqualOperator = SequenceEqualOperator;
var SequenceEqualSubscriber = function(_super) {
__extends(SequenceEqualSubscriber, _super);
function SequenceEqualSubscriber(destination, compareTo, comparor) {
_super.call(this, destination);
this.compareTo = compareTo;
this.comparor = comparor;
this._a = [];
this._b = [];
this._oneComplete = false;
this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
}
SequenceEqualSubscriber.prototype._next = function(value) {
if (this._oneComplete && this._b.length === 0) {
this.emit(false);
} else {
this._a.push(value);
this.checkValues();
}
};
SequenceEqualSubscriber.prototype._complete = function() {
if (this._oneComplete) {
this.emit(this._a.length === 0 && this._b.length === 0);
} else {
this._oneComplete = true;
}
};
SequenceEqualSubscriber.prototype.checkValues = function() {
var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
while (_a.length > 0 && _b.length > 0) {
var a = _a.shift();
var b = _b.shift();
var areEqual = false;
if (comparor) {
areEqual = tryCatch_1.tryCatch(comparor)(a, b);
if (areEqual === errorObject_1.errorObject) {
this.destination.error(errorObject_1.errorObject.e);
}
} else {
areEqual = a === b;
}
if (!areEqual) {
this.emit(false);
}
}
};
SequenceEqualSubscriber.prototype.emit = function(value) {
var destination = this.destination;
destination.next(value);
destination.complete();
};
SequenceEqualSubscriber.prototype.nextB = function(value) {
if (this._oneComplete && this._a.length === 0) {
this.emit(false);
} else {
this._b.push(value);
this.checkValues();
}
};
return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber);
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = function(_super) {
__extends(SequenceEqualCompareToSubscriber, _super);
function SequenceEqualCompareToSubscriber(destination, parent) {
_super.call(this, destination);
this.parent = parent;
}
SequenceEqualCompareToSubscriber.prototype._next = function(value) {
this.parent.nextB(value);
};
SequenceEqualCompareToSubscriber.prototype._error = function(err) {
this.parent.error(err);
};
SequenceEqualCompareToSubscriber.prototype._complete = function() {
this.parent._complete();
};
return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var share_1 = __webpack_require__(536);
Observable_1.Observable.prototype.share = share_1.share;
}, function(module, exports, __webpack_require__) {
"use strict";
var multicast_1 = __webpack_require__(497);
var Subject_1 = __webpack_require__(157);
function shareSubjectFactory() {
return new Subject_1.Subject();
}
function share() {
return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
exports.share = share;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var single_1 = __webpack_require__(538);
Observable_1.Observable.prototype.single = single_1.single;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var EmptyError_1 = __webpack_require__(257);
function single(predicate) {
return this.lift(new SingleOperator(predicate, this));
}
exports.single = single;
var SingleOperator = function() {
function SingleOperator(predicate, source) {
this.predicate = predicate;
this.source = source;
}
SingleOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
};
return SingleOperator;
}();
var SingleSubscriber = function(_super) {
__extends(SingleSubscriber, _super);
function SingleSubscriber(destination, predicate, source) {
_super.call(this, destination);
this.predicate = predicate;
this.source = source;
this.seenValue = false;
this.index = 0;
}
SingleSubscriber.prototype.applySingleValue = function(value) {
if (this.seenValue) {
this.destination.error("Sequence contains more than one element");
} else {
this.seenValue = true;
this.singleValue = value;
}
};
SingleSubscriber.prototype._next = function(value) {
var predicate = this.predicate;
this.index++;
if (predicate) {
this.tryNext(value);
} else {
this.applySingleValue(value);
}
};
SingleSubscriber.prototype.tryNext = function(value) {
try {
var result = this.predicate(value, this.index, this.source);
if (result) {
this.applySingleValue(value);
}
} catch (err) {
this.destination.error(err);
}
};
SingleSubscriber.prototype._complete = function() {
var destination = this.destination;
if (this.index > 0) {
destination.next(this.seenValue ? this.singleValue : undefined);
destination.complete();
} else {
destination.error(new EmptyError_1.EmptyError());
}
};
return SingleSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var skip_1 = __webpack_require__(540);
Observable_1.Observable.prototype.skip = skip_1.skip;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function skip(total) {
return this.lift(new SkipOperator(total));
}
exports.skip = skip;
var SkipOperator = function() {
function SkipOperator(total) {
this.total = total;
}
SkipOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SkipSubscriber(subscriber, this.total));
};
return SkipOperator;
}();
var SkipSubscriber = function(_super) {
__extends(SkipSubscriber, _super);
function SkipSubscriber(destination, total) {
_super.call(this, destination);
this.total = total;
this.count = 0;
}
SkipSubscriber.prototype._next = function(x) {
if (++this.count > this.total) {
this.destination.next(x);
}
};
return SkipSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var skipUntil_1 = __webpack_require__(542);
Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function skipUntil(notifier) {
return this.lift(new SkipUntilOperator(notifier));
}
exports.skipUntil = skipUntil;
var SkipUntilOperator = function() {
function SkipUntilOperator(notifier) {
this.notifier = notifier;
}
SkipUntilOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
};
return SkipUntilOperator;
}();
var SkipUntilSubscriber = function(_super) {
__extends(SkipUntilSubscriber, _super);
function SkipUntilSubscriber(destination, notifier) {
_super.call(this, destination);
this.hasValue = false;
this.isInnerStopped = false;
this.add(subscribeToResult_1.subscribeToResult(this, notifier));
}
SkipUntilSubscriber.prototype._next = function(value) {
if (this.hasValue) {
_super.prototype._next.call(this, value);
}
};
SkipUntilSubscriber.prototype._complete = function() {
if (this.isInnerStopped) {
_super.prototype._complete.call(this);
} else {
this.unsubscribe();
}
};
SkipUntilSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.hasValue = true;
};
SkipUntilSubscriber.prototype.notifyComplete = function() {
this.isInnerStopped = true;
if (this.isStopped) {
_super.prototype._complete.call(this);
}
};
return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var skipWhile_1 = __webpack_require__(544);
Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function skipWhile(predicate) {
return this.lift(new SkipWhileOperator(predicate));
}
exports.skipWhile = skipWhile;
var SkipWhileOperator = function() {
function SkipWhileOperator(predicate) {
this.predicate = predicate;
}
SkipWhileOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
};
return SkipWhileOperator;
}();
var SkipWhileSubscriber = function(_super) {
__extends(SkipWhileSubscriber, _super);
function SkipWhileSubscriber(destination, predicate) {
_super.call(this, destination);
this.predicate = predicate;
this.skipping = true;
this.index = 0;
}
SkipWhileSubscriber.prototype._next = function(value) {
var destination = this.destination;
if (this.skipping) {
this.tryCallPredicate(value);
}
if (!this.skipping) {
destination.next(value);
}
};
SkipWhileSubscriber.prototype.tryCallPredicate = function(value) {
try {
var result = this.predicate(value, this.index++);
this.skipping = Boolean(result);
} catch (err) {
this.destination.error(err);
}
};
return SkipWhileSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var startWith_1 = __webpack_require__(546);
Observable_1.Observable.prototype.startWith = startWith_1.startWith;
}, function(module, exports, __webpack_require__) {
"use strict";
var ArrayObservable_1 = __webpack_require__(242);
var ScalarObservable_1 = __webpack_require__(243);
var EmptyObservable_1 = __webpack_require__(244);
var concat_1 = __webpack_require__(329);
var isScheduler_1 = __webpack_require__(245);
function startWith() {
var array = [];
for (var _i = 0; _i < arguments.length; _i++) {
array[_i - 0] = arguments[_i];
}
var scheduler = array[array.length - 1];
if (isScheduler_1.isScheduler(scheduler)) {
array.pop();
} else {
scheduler = null;
}
var len = array.length;
if (len === 1) {
return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
} else if (len > 1) {
return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
} else {
return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
}
}
exports.startWith = startWith;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var subscribeOn_1 = __webpack_require__(548);
Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
}, function(module, exports, __webpack_require__) {
"use strict";
var SubscribeOnObservable_1 = __webpack_require__(549);
function subscribeOn(scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);
}
exports.subscribeOn = subscribeOn;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var asap_1 = __webpack_require__(550);
var isNumeric_1 = __webpack_require__(353);
var SubscribeOnObservable = function(_super) {
__extends(SubscribeOnObservable, _super);
function SubscribeOnObservable(source, delayTime, scheduler) {
if (delayTime === void 0) {
delayTime = 0;
}
if (scheduler === void 0) {
scheduler = asap_1.asap;
}
_super.call(this);
this.source = source;
this.delayTime = delayTime;
this.scheduler = scheduler;
if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
this.delayTime = 0;
}
if (!scheduler || typeof scheduler.schedule !== "function") {
this.scheduler = asap_1.asap;
}
}
SubscribeOnObservable.create = function(source, delay, scheduler) {
if (delay === void 0) {
delay = 0;
}
if (scheduler === void 0) {
scheduler = asap_1.asap;
}
return new SubscribeOnObservable(source, delay, scheduler);
};
SubscribeOnObservable.dispatch = function(arg) {
var source = arg.source, subscriber = arg.subscriber;
return source.subscribe(subscriber);
};
SubscribeOnObservable.prototype._subscribe = function(subscriber) {
var delay = this.delayTime;
var source = this.source;
var scheduler = this.scheduler;
return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
source: source,
subscriber: subscriber
});
};
return SubscribeOnObservable;
}(Observable_1.Observable);
exports.SubscribeOnObservable = SubscribeOnObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var AsapAction_1 = __webpack_require__(551);
var AsapScheduler_1 = __webpack_require__(553);
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Immediate_1 = __webpack_require__(552);
var AsyncAction_1 = __webpack_require__(355);
var AsapAction = function(_super) {
__extends(AsapAction, _super);
function AsapAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
}
AsapAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
}
scheduler.actions.push(this);
return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
};
AsapAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
}
if (scheduler.actions.length === 0) {
Immediate_1.Immediate.clearImmediate(id);
scheduler.scheduled = undefined;
}
return undefined;
};
return AsapAction;
}(AsyncAction_1.AsyncAction);
exports.AsapAction = AsapAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var ImmediateDefinition = function() {
function ImmediateDefinition(root) {
this.root = root;
if (root.setImmediate && typeof root.setImmediate === "function") {
this.setImmediate = root.setImmediate.bind(root);
this.clearImmediate = root.clearImmediate.bind(root);
} else {
this.nextHandle = 1;
this.tasksByHandle = {};
this.currentlyRunningATask = false;
if (this.canUseProcessNextTick()) {
this.setImmediate = this.createProcessNextTickSetImmediate();
} else if (this.canUsePostMessage()) {
this.setImmediate = this.createPostMessageSetImmediate();
} else if (this.canUseMessageChannel()) {
this.setImmediate = this.createMessageChannelSetImmediate();
} else if (this.canUseReadyStateChange()) {
this.setImmediate = this.createReadyStateChangeSetImmediate();
} else {
this.setImmediate = this.createSetTimeoutSetImmediate();
}
var ci = function clearImmediate(handle) {
delete clearImmediate.instance.tasksByHandle[handle];
};
ci.instance = this;
this.clearImmediate = ci;
}
}
ImmediateDefinition.prototype.identify = function(o) {
return this.root.Object.prototype.toString.call(o);
};
ImmediateDefinition.prototype.canUseProcessNextTick = function() {
return this.identify(this.root.process) === "[object process]";
};
ImmediateDefinition.prototype.canUseMessageChannel = function() {
return Boolean(this.root.MessageChannel);
};
ImmediateDefinition.prototype.canUseReadyStateChange = function() {
var document = this.root.document;
return Boolean(document && "onreadystatechange" in document.createElement("script"));
};
ImmediateDefinition.prototype.canUsePostMessage = function() {
var root = this.root;
if (root.postMessage && !root.importScripts) {
var postMessageIsAsynchronous_1 = true;
var oldOnMessage = root.onmessage;
root.onmessage = function() {
postMessageIsAsynchronous_1 = false;
};
root.postMessage("", "*");
root.onmessage = oldOnMessage;
return postMessageIsAsynchronous_1;
}
return false;
};
ImmediateDefinition.prototype.partiallyApplied = function(handler) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var fn = function result() {
var _a = result, handler = _a.handler, args = _a.args;
if (typeof handler === "function") {
handler.apply(undefined, args);
} else {
new Function("" + handler)();
}
};
fn.handler = handler;
fn.args = args;
return fn;
};
ImmediateDefinition.prototype.addFromSetImmediateArguments = function(args) {
this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
return this.nextHandle++;
};
ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function() {
var fn = function setImmediate() {
var instance = setImmediate.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
return handle;
};
fn.instance = this;
return fn;
};
ImmediateDefinition.prototype.createPostMessageSetImmediate = function() {
var root = this.root;
var messagePrefix = "setImmediate$" + root.Math.random() + "$";
var onGlobalMessage = function globalMessageHandler(event) {
var instance = globalMessageHandler.instance;
if (event.source === root && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
instance.runIfPresent(+event.data.slice(messagePrefix.length));
}
};
onGlobalMessage.instance = this;
root.addEventListener("message", onGlobalMessage, false);
var fn = function setImmediate() {
var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
instance.root.postMessage(messagePrefix + handle, "*");
return handle;
};
fn.instance = this;
fn.messagePrefix = messagePrefix;
return fn;
};
ImmediateDefinition.prototype.runIfPresent = function(handle) {
if (this.currentlyRunningATask) {
this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
} else {
var task = this.tasksByHandle[handle];
if (task) {
this.currentlyRunningATask = true;
try {
task();
} finally {
this.clearImmediate(handle);
this.currentlyRunningATask = false;
}
}
}
};
ImmediateDefinition.prototype.createMessageChannelSetImmediate = function() {
var _this = this;
var channel = new this.root.MessageChannel();
channel.port1.onmessage = function(event) {
var handle = event.data;
_this.runIfPresent(handle);
};
var fn = function setImmediate() {
var _a = setImmediate, channel = _a.channel, instance = _a.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
channel.port2.postMessage(handle);
return handle;
};
fn.channel = channel;
fn.instance = this;
return fn;
};
ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function() {
var fn = function setImmediate() {
var instance = setImmediate.instance;
var root = instance.root;
var doc = root.document;
var html = doc.documentElement;
var handle = instance.addFromSetImmediateArguments(arguments);
var script = doc.createElement("script");
script.onreadystatechange = function() {
instance.runIfPresent(handle);
script.onreadystatechange = null;
html.removeChild(script);
script = null;
};
html.appendChild(script);
return handle;
};
fn.instance = this;
return fn;
};
ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function() {
var fn = function setImmediate() {
var instance = setImmediate.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
return handle;
};
fn.instance = this;
return fn;
};
return ImmediateDefinition;
}();
exports.ImmediateDefinition = ImmediateDefinition;
exports.Immediate = new ImmediateDefinition(root_1.root);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(357);
var AsapScheduler = function(_super) {
__extends(AsapScheduler, _super);
function AsapScheduler() {
_super.apply(this, arguments);
}
AsapScheduler.prototype.flush = function() {
this.active = true;
this.scheduled = undefined;
var actions = this.actions;
var error;
var index = -1;
var count = actions.length;
var action = actions.shift();
do {
if (error = action.execute(action.state, action.delay)) {
break;
}
} while (++index < count && (action = actions.shift()));
this.active = false;
if (error) {
while (++index < count && (action = actions.shift())) {
action.unsubscribe();
}
throw error;
}
};
return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.AsapScheduler = AsapScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var switch_1 = __webpack_require__(555);
Observable_1.Observable.prototype.switch = switch_1._switch;
Observable_1.Observable.prototype._switch = switch_1._switch;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function _switch() {
return this.lift(new SwitchOperator());
}
exports._switch = _switch;
var SwitchOperator = function() {
function SwitchOperator() {}
SwitchOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SwitchSubscriber(subscriber));
};
return SwitchOperator;
}();
var SwitchSubscriber = function(_super) {
__extends(SwitchSubscriber, _super);
function SwitchSubscriber(destination) {
_super.call(this, destination);
this.active = 0;
this.hasCompleted = false;
}
SwitchSubscriber.prototype._next = function(value) {
this.unsubscribeInner();
this.active++;
this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
};
SwitchSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0) {
this.destination.complete();
}
};
SwitchSubscriber.prototype.unsubscribeInner = function() {
this.active = this.active > 0 ? this.active - 1 : 0;
var innerSubscription = this.innerSubscription;
if (innerSubscription) {
innerSubscription.unsubscribe();
this.remove(innerSubscription);
}
};
SwitchSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.destination.next(innerValue);
};
SwitchSubscriber.prototype.notifyError = function(err) {
this.destination.error(err);
};
SwitchSubscriber.prototype.notifyComplete = function() {
this.unsubscribeInner();
if (this.hasCompleted && this.active === 0) {
this.destination.complete();
}
};
return SwitchSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var switchMap_1 = __webpack_require__(557);
Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function switchMap(project, resultSelector) {
return this.lift(new SwitchMapOperator(project, resultSelector));
}
exports.switchMap = switchMap;
var SwitchMapOperator = function() {
function SwitchMapOperator(project, resultSelector) {
this.project = project;
this.resultSelector = resultSelector;
}
SwitchMapOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
};
return SwitchMapOperator;
}();
var SwitchMapSubscriber = function(_super) {
__extends(SwitchMapSubscriber, _super);
function SwitchMapSubscriber(destination, project, resultSelector) {
_super.call(this, destination);
this.project = project;
this.resultSelector = resultSelector;
this.index = 0;
}
SwitchMapSubscriber.prototype._next = function(value) {
var result;
var index = this.index++;
try {
result = this.project(value, index);
} catch (error) {
this.destination.error(error);
return;
}
this._innerSub(result, value, index);
};
SwitchMapSubscriber.prototype._innerSub = function(result, value, index) {
var innerSubscription = this.innerSubscription;
if (innerSubscription) {
innerSubscription.unsubscribe();
}
this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
};
SwitchMapSubscriber.prototype._complete = function() {
var innerSubscription = this.innerSubscription;
if (!innerSubscription || innerSubscription.closed) {
_super.prototype._complete.call(this);
}
};
SwitchMapSubscriber.prototype._unsubscribe = function() {
this.innerSubscription = null;
};
SwitchMapSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.innerSubscription = null;
if (this.isStopped) {
_super.prototype._complete.call(this);
}
};
SwitchMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (this.resultSelector) {
this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
} else {
this.destination.next(innerValue);
}
};
SwitchMapSubscriber.prototype._tryNotifyNext = function(outerValue, innerValue, outerIndex, innerIndex) {
var result;
try {
result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var switchMapTo_1 = __webpack_require__(559);
Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function switchMapTo(innerObservable, resultSelector) {
return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
}
exports.switchMapTo = switchMapTo;
var SwitchMapToOperator = function() {
function SwitchMapToOperator(observable, resultSelector) {
this.observable = observable;
this.resultSelector = resultSelector;
}
SwitchMapToOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
};
return SwitchMapToOperator;
}();
var SwitchMapToSubscriber = function(_super) {
__extends(SwitchMapToSubscriber, _super);
function SwitchMapToSubscriber(destination, inner, resultSelector) {
_super.call(this, destination);
this.inner = inner;
this.resultSelector = resultSelector;
this.index = 0;
}
SwitchMapToSubscriber.prototype._next = function(value) {
var innerSubscription = this.innerSubscription;
if (innerSubscription) {
innerSubscription.unsubscribe();
}
this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
};
SwitchMapToSubscriber.prototype._complete = function() {
var innerSubscription = this.innerSubscription;
if (!innerSubscription || innerSubscription.closed) {
_super.prototype._complete.call(this);
}
};
SwitchMapToSubscriber.prototype._unsubscribe = function() {
this.innerSubscription = null;
};
SwitchMapToSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.innerSubscription = null;
if (this.isStopped) {
_super.prototype._complete.call(this);
}
};
SwitchMapToSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
if (resultSelector) {
this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
} else {
destination.next(innerValue);
}
};
SwitchMapToSubscriber.prototype.tryResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
var result;
try {
result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
destination.error(err);
return;
}
destination.next(result);
};
return SwitchMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var take_1 = __webpack_require__(561);
Observable_1.Observable.prototype.take = take_1.take;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var ArgumentOutOfRangeError_1 = __webpack_require__(455);
var EmptyObservable_1 = __webpack_require__(244);
function take(count) {
if (count === 0) {
return new EmptyObservable_1.EmptyObservable();
} else {
return this.lift(new TakeOperator(count));
}
}
exports.take = take;
var TakeOperator = function() {
function TakeOperator(total) {
this.total = total;
if (this.total < 0) {
throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
}
}
TakeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new TakeSubscriber(subscriber, this.total));
};
return TakeOperator;
}();
var TakeSubscriber = function(_super) {
__extends(TakeSubscriber, _super);
function TakeSubscriber(destination, total) {
_super.call(this, destination);
this.total = total;
this.count = 0;
}
TakeSubscriber.prototype._next = function(value) {
var total = this.total;
if (++this.count <= total) {
this.destination.next(value);
if (this.count === total) {
this.destination.complete();
this.unsubscribe();
}
}
};
return TakeSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var takeLast_1 = __webpack_require__(563);
Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var ArgumentOutOfRangeError_1 = __webpack_require__(455);
var EmptyObservable_1 = __webpack_require__(244);
function takeLast(count) {
if (count === 0) {
return new EmptyObservable_1.EmptyObservable();
} else {
return this.lift(new TakeLastOperator(count));
}
}
exports.takeLast = takeLast;
var TakeLastOperator = function() {
function TakeLastOperator(total) {
this.total = total;
if (this.total < 0) {
throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
}
}
TakeLastOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new TakeLastSubscriber(subscriber, this.total));
};
return TakeLastOperator;
}();
var TakeLastSubscriber = function(_super) {
__extends(TakeLastSubscriber, _super);
function TakeLastSubscriber(destination, total) {
_super.call(this, destination);
this.total = total;
this.ring = new Array();
this.count = 0;
}
TakeLastSubscriber.prototype._next = function(value) {
var ring = this.ring;
var total = this.total;
var count = this.count++;
if (ring.length < total) {
ring.push(value);
} else {
var index = count % total;
ring[index] = value;
}
};
TakeLastSubscriber.prototype._complete = function() {
var destination = this.destination;
var count = this.count;
if (count > 0) {
var total = this.count >= this.total ? this.total : this.count;
var ring = this.ring;
for (var i = 0; i < total; i++) {
var idx = count++ % total;
destination.next(ring[idx]);
}
}
destination.complete();
};
return TakeLastSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var takeUntil_1 = __webpack_require__(565);
Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function takeUntil(notifier) {
return this.lift(new TakeUntilOperator(notifier));
}
exports.takeUntil = takeUntil;
var TakeUntilOperator = function() {
function TakeUntilOperator(notifier) {
this.notifier = notifier;
}
TakeUntilOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
};
return TakeUntilOperator;
}();
var TakeUntilSubscriber = function(_super) {
__extends(TakeUntilSubscriber, _super);
function TakeUntilSubscriber(destination, notifier) {
_super.call(this, destination);
this.notifier = notifier;
this.add(subscribeToResult_1.subscribeToResult(this, notifier));
}
TakeUntilSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.complete();
};
TakeUntilSubscriber.prototype.notifyComplete = function() {};
return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var takeWhile_1 = __webpack_require__(567);
Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function takeWhile(predicate) {
return this.lift(new TakeWhileOperator(predicate));
}
exports.takeWhile = takeWhile;
var TakeWhileOperator = function() {
function TakeWhileOperator(predicate) {
this.predicate = predicate;
}
TakeWhileOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
};
return TakeWhileOperator;
}();
var TakeWhileSubscriber = function(_super) {
__extends(TakeWhileSubscriber, _super);
function TakeWhileSubscriber(destination, predicate) {
_super.call(this, destination);
this.predicate = predicate;
this.index = 0;
}
TakeWhileSubscriber.prototype._next = function(value) {
var destination = this.destination;
var result;
try {
result = this.predicate(value, this.index++);
} catch (err) {
destination.error(err);
return;
}
this.nextOrComplete(value, result);
};
TakeWhileSubscriber.prototype.nextOrComplete = function(value, predicateResult) {
var destination = this.destination;
if (Boolean(predicateResult)) {
destination.next(value);
} else {
destination.complete();
}
};
return TakeWhileSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var throttle_1 = __webpack_require__(569);
Observable_1.Observable.prototype.throttle = throttle_1.throttle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function throttle(durationSelector) {
return this.lift(new ThrottleOperator(durationSelector));
}
exports.throttle = throttle;
var ThrottleOperator = function() {
function ThrottleOperator(durationSelector) {
this.durationSelector = durationSelector;
}
ThrottleOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));
};
return ThrottleOperator;
}();
var ThrottleSubscriber = function(_super) {
__extends(ThrottleSubscriber, _super);
function ThrottleSubscriber(destination, durationSelector) {
_super.call(this, destination);
this.destination = destination;
this.durationSelector = durationSelector;
}
ThrottleSubscriber.prototype._next = function(value) {
if (!this.throttled) {
this.tryDurationSelector(value);
}
};
ThrottleSubscriber.prototype.tryDurationSelector = function(value) {
var duration = null;
try {
duration = this.durationSelector(value);
} catch (err) {
this.destination.error(err);
return;
}
this.emitAndThrottle(value, duration);
};
ThrottleSubscriber.prototype.emitAndThrottle = function(value, duration) {
this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
this.destination.next(value);
};
ThrottleSubscriber.prototype._unsubscribe = function() {
var throttled = this.throttled;
if (throttled) {
this.remove(throttled);
this.throttled = null;
throttled.unsubscribe();
}
};
ThrottleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this._unsubscribe();
};
ThrottleSubscriber.prototype.notifyComplete = function() {
this._unsubscribe();
};
return ThrottleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var throttleTime_1 = __webpack_require__(571);
Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var async_1 = __webpack_require__(354);
function throttleTime(duration, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new ThrottleTimeOperator(duration, scheduler));
}
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = function() {
function ThrottleTimeOperator(duration, scheduler) {
this.duration = duration;
this.scheduler = scheduler;
}
ThrottleTimeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));
};
return ThrottleTimeOperator;
}();
var ThrottleTimeSubscriber = function(_super) {
__extends(ThrottleTimeSubscriber, _super);
function ThrottleTimeSubscriber(destination, duration, scheduler) {
_super.call(this, destination);
this.duration = duration;
this.scheduler = scheduler;
}
ThrottleTimeSubscriber.prototype._next = function(value) {
if (!this.throttled) {
this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {
subscriber: this
}));
this.destination.next(value);
}
};
ThrottleTimeSubscriber.prototype.clearThrottle = function() {
var throttled = this.throttled;
if (throttled) {
throttled.unsubscribe();
this.remove(throttled);
this.throttled = null;
}
};
return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(arg) {
var subscriber = arg.subscriber;
subscriber.clearThrottle();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var timeInterval_1 = __webpack_require__(573);
Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var async_1 = __webpack_require__(354);
function timeInterval(scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new TimeIntervalOperator(scheduler));
}
exports.timeInterval = timeInterval;
var TimeInterval = function() {
function TimeInterval(value, interval) {
this.value = value;
this.interval = interval;
}
return TimeInterval;
}();
exports.TimeInterval = TimeInterval;
var TimeIntervalOperator = function() {
function TimeIntervalOperator(scheduler) {
this.scheduler = scheduler;
}
TimeIntervalOperator.prototype.call = function(observer, source) {
return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
};
return TimeIntervalOperator;
}();
var TimeIntervalSubscriber = function(_super) {
__extends(TimeIntervalSubscriber, _super);
function TimeIntervalSubscriber(destination, scheduler) {
_super.call(this, destination);
this.scheduler = scheduler;
this.lastTime = 0;
this.lastTime = scheduler.now();
}
TimeIntervalSubscriber.prototype._next = function(value) {
var now = this.scheduler.now();
var span = now - this.lastTime;
this.lastTime = now;
this.destination.next(new TimeInterval(value, span));
};
return TimeIntervalSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var timeout_1 = __webpack_require__(575);
Observable_1.Observable.prototype.timeout = timeout_1.timeout;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(354);
var isDate_1 = __webpack_require__(386);
var Subscriber_1 = __webpack_require__(161);
function timeout(due, errorToSend, scheduler) {
if (errorToSend === void 0) {
errorToSend = null;
}
if (scheduler === void 0) {
scheduler = async_1.async;
}
var absoluteTimeout = isDate_1.isDate(due);
var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));
}
exports.timeout = timeout;
var TimeoutOperator = function() {
function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {
this.waitFor = waitFor;
this.absoluteTimeout = absoluteTimeout;
this.errorToSend = errorToSend;
this.scheduler = scheduler;
}
TimeoutOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));
};
return TimeoutOperator;
}();
var TimeoutSubscriber = function(_super) {
__extends(TimeoutSubscriber, _super);
function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {
_super.call(this, destination);
this.absoluteTimeout = absoluteTimeout;
this.waitFor = waitFor;
this.errorToSend = errorToSend;
this.scheduler = scheduler;
this.index = 0;
this._previousIndex = 0;
this._hasCompleted = false;
this.scheduleTimeout();
}
Object.defineProperty(TimeoutSubscriber.prototype, "previousIndex", {
get: function() {
return this._previousIndex;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimeoutSubscriber.prototype, "hasCompleted", {
get: function() {
return this._hasCompleted;
},
enumerable: true,
configurable: true
});
TimeoutSubscriber.dispatchTimeout = function(state) {
var source = state.subscriber;
var currentIndex = state.index;
if (!source.hasCompleted && source.previousIndex === currentIndex) {
source.notifyTimeout();
}
};
TimeoutSubscriber.prototype.scheduleTimeout = function() {
var currentIndex = this.index;
this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, {
subscriber: this,
index: currentIndex
});
this.index++;
this._previousIndex = currentIndex;
};
TimeoutSubscriber.prototype._next = function(value) {
this.destination.next(value);
if (!this.absoluteTimeout) {
this.scheduleTimeout();
}
};
TimeoutSubscriber.prototype._error = function(err) {
this.destination.error(err);
this._hasCompleted = true;
};
TimeoutSubscriber.prototype._complete = function() {
this.destination.complete();
this._hasCompleted = true;
};
TimeoutSubscriber.prototype.notifyTimeout = function() {
this.error(this.errorToSend || new Error("timeout"));
};
return TimeoutSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var timeoutWith_1 = __webpack_require__(577);
Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(354);
var isDate_1 = __webpack_require__(386);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function timeoutWith(due, withObservable, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
var absoluteTimeout = isDate_1.isDate(due);
var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
}
exports.timeoutWith = timeoutWith;
var TimeoutWithOperator = function() {
function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
this.waitFor = waitFor;
this.absoluteTimeout = absoluteTimeout;
this.withObservable = withObservable;
this.scheduler = scheduler;
}
TimeoutWithOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
};
return TimeoutWithOperator;
}();
var TimeoutWithSubscriber = function(_super) {
__extends(TimeoutWithSubscriber, _super);
function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
_super.call(this);
this.destination = destination;
this.absoluteTimeout = absoluteTimeout;
this.waitFor = waitFor;
this.withObservable = withObservable;
this.scheduler = scheduler;
this.timeoutSubscription = undefined;
this.index = 0;
this._previousIndex = 0;
this._hasCompleted = false;
destination.add(this);
this.scheduleTimeout();
}
Object.defineProperty(TimeoutWithSubscriber.prototype, "previousIndex", {
get: function() {
return this._previousIndex;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimeoutWithSubscriber.prototype, "hasCompleted", {
get: function() {
return this._hasCompleted;
},
enumerable: true,
configurable: true
});
TimeoutWithSubscriber.dispatchTimeout = function(state) {
var source = state.subscriber;
var currentIndex = state.index;
if (!source.hasCompleted && source.previousIndex === currentIndex) {
source.handleTimeout();
}
};
TimeoutWithSubscriber.prototype.scheduleTimeout = function() {
var currentIndex = this.index;
var timeoutState = {
subscriber: this,
index: currentIndex
};
this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
this.index++;
this._previousIndex = currentIndex;
};
TimeoutWithSubscriber.prototype._next = function(value) {
this.destination.next(value);
if (!this.absoluteTimeout) {
this.scheduleTimeout();
}
};
TimeoutWithSubscriber.prototype._error = function(err) {
this.destination.error(err);
this._hasCompleted = true;
};
TimeoutWithSubscriber.prototype._complete = function() {
this.destination.complete();
this._hasCompleted = true;
};
TimeoutWithSubscriber.prototype.handleTimeout = function() {
if (!this.closed) {
var withObservable = this.withObservable;
this.unsubscribe();
this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));
}
};
return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var timestamp_1 = __webpack_require__(579);
Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var async_1 = __webpack_require__(354);
function timestamp(scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new TimestampOperator(scheduler));
}
exports.timestamp = timestamp;
var Timestamp = function() {
function Timestamp(value, timestamp) {
this.value = value;
this.timestamp = timestamp;
}
return Timestamp;
}();
exports.Timestamp = Timestamp;
var TimestampOperator = function() {
function TimestampOperator(scheduler) {
this.scheduler = scheduler;
}
TimestampOperator.prototype.call = function(observer, source) {
return source._subscribe(new TimestampSubscriber(observer, this.scheduler));
};
return TimestampOperator;
}();
var TimestampSubscriber = function(_super) {
__extends(TimestampSubscriber, _super);
function TimestampSubscriber(destination, scheduler) {
_super.call(this, destination);
this.scheduler = scheduler;
}
TimestampSubscriber.prototype._next = function(value) {
var now = this.scheduler.now();
this.destination.next(new Timestamp(value, now));
};
return TimestampSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var toArray_1 = __webpack_require__(581);
Observable_1.Observable.prototype.toArray = toArray_1.toArray;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
function toArray() {
return this.lift(new ToArrayOperator());
}
exports.toArray = toArray;
var ToArrayOperator = function() {
function ToArrayOperator() {}
ToArrayOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new ToArraySubscriber(subscriber));
};
return ToArrayOperator;
}();
var ToArraySubscriber = function(_super) {
__extends(ToArraySubscriber, _super);
function ToArraySubscriber(destination) {
_super.call(this, destination);
this.array = [];
}
ToArraySubscriber.prototype._next = function(x) {
this.array.push(x);
};
ToArraySubscriber.prototype._complete = function() {
this.destination.next(this.array);
this.destination.complete();
};
return ToArraySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var toPromise_1 = __webpack_require__(223);
Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var window_1 = __webpack_require__(584);
Observable_1.Observable.prototype.window = window_1.window;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function window(windowBoundaries) {
return this.lift(new WindowOperator(windowBoundaries));
}
exports.window = window;
var WindowOperator = function() {
function WindowOperator(windowBoundaries) {
this.windowBoundaries = windowBoundaries;
}
WindowOperator.prototype.call = function(subscriber, source) {
var windowSubscriber = new WindowSubscriber(subscriber);
var sourceSubscription = source._subscribe(windowSubscriber);
if (!sourceSubscription.closed) {
windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
}
return sourceSubscription;
};
return WindowOperator;
}();
var WindowSubscriber = function(_super) {
__extends(WindowSubscriber, _super);
function WindowSubscriber(destination) {
_super.call(this, destination);
this.window = new Subject_1.Subject();
destination.next(this.window);
}
WindowSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.openWindow();
};
WindowSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
WindowSubscriber.prototype.notifyComplete = function(innerSub) {
this._complete();
};
WindowSubscriber.prototype._next = function(value) {
this.window.next(value);
};
WindowSubscriber.prototype._error = function(err) {
this.window.error(err);
this.destination.error(err);
};
WindowSubscriber.prototype._complete = function() {
this.window.complete();
this.destination.complete();
};
WindowSubscriber.prototype._unsubscribe = function() {
this.window = null;
};
WindowSubscriber.prototype.openWindow = function() {
var prevWindow = this.window;
if (prevWindow) {
prevWindow.complete();
}
var destination = this.destination;
var newWindow = this.window = new Subject_1.Subject();
destination.next(newWindow);
};
return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var windowCount_1 = __webpack_require__(586);
Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(161);
var Subject_1 = __webpack_require__(157);
function windowCount(windowSize, startWindowEvery) {
if (startWindowEvery === void 0) {
startWindowEvery = 0;
}
return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
}
exports.windowCount = windowCount;
var WindowCountOperator = function() {
function WindowCountOperator(windowSize, startWindowEvery) {
this.windowSize = windowSize;
this.startWindowEvery = startWindowEvery;
}
WindowCountOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
};
return WindowCountOperator;
}();
var WindowCountSubscriber = function(_super) {
__extends(WindowCountSubscriber, _super);
function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
_super.call(this, destination);
this.destination = destination;
this.windowSize = windowSize;
this.startWindowEvery = startWindowEvery;
this.windows = [ new Subject_1.Subject() ];
this.count = 0;
destination.next(this.windows[0]);
}
WindowCountSubscriber.prototype._next = function(value) {
var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
var destination = this.destination;
var windowSize = this.windowSize;
var windows = this.windows;
var len = windows.length;
for (var i = 0; i < len && !this.closed; i++) {
windows[i].next(value);
}
var c = this.count - windowSize + 1;
if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
windows.shift().complete();
}
if (++this.count % startWindowEvery === 0 && !this.closed) {
var window_1 = new Subject_1.Subject();
windows.push(window_1);
destination.next(window_1);
}
};
WindowCountSubscriber.prototype._error = function(err) {
var windows = this.windows;
if (windows) {
while (windows.length > 0 && !this.closed) {
windows.shift().error(err);
}
}
this.destination.error(err);
};
WindowCountSubscriber.prototype._complete = function() {
var windows = this.windows;
if (windows) {
while (windows.length > 0 && !this.closed) {
windows.shift().complete();
}
}
this.destination.complete();
};
WindowCountSubscriber.prototype._unsubscribe = function() {
this.count = 0;
this.windows = null;
};
return WindowCountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var windowTime_1 = __webpack_require__(588);
Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var async_1 = __webpack_require__(354);
var Subscriber_1 = __webpack_require__(161);
function windowTime(windowTimeSpan, windowCreationInterval, scheduler) {
if (windowCreationInterval === void 0) {
windowCreationInterval = null;
}
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
}
exports.windowTime = windowTime;
var WindowTimeOperator = function() {
function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
this.windowTimeSpan = windowTimeSpan;
this.windowCreationInterval = windowCreationInterval;
this.scheduler = scheduler;
}
WindowTimeOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));
};
return WindowTimeOperator;
}();
var WindowTimeSubscriber = function(_super) {
__extends(WindowTimeSubscriber, _super);
function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
_super.call(this, destination);
this.destination = destination;
this.windowTimeSpan = windowTimeSpan;
this.windowCreationInterval = windowCreationInterval;
this.scheduler = scheduler;
this.windows = [];
if (windowCreationInterval !== null && windowCreationInterval >= 0) {
var window_1 = this.openWindow();
var closeState = {
subscriber: this,
window: window_1,
context: null
};
var creationState = {
windowTimeSpan: windowTimeSpan,
windowCreationInterval: windowCreationInterval,
subscriber: this,
scheduler: scheduler
};
this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
} else {
var window_2 = this.openWindow();
var timeSpanOnlyState = {
subscriber: this,
window: window_2,
windowTimeSpan: windowTimeSpan
};
this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
}
}
WindowTimeSubscriber.prototype._next = function(value) {
var windows = this.windows;
var len = windows.length;
for (var i = 0; i < len; i++) {
var window_3 = windows[i];
if (!window_3.closed) {
window_3.next(value);
}
}
};
WindowTimeSubscriber.prototype._error = function(err) {
var windows = this.windows;
while (windows.length > 0) {
windows.shift().error(err);
}
this.destination.error(err);
};
WindowTimeSubscriber.prototype._complete = function() {
var windows = this.windows;
while (windows.length > 0) {
var window_4 = windows.shift();
if (!window_4.closed) {
window_4.complete();
}
}
this.destination.complete();
};
WindowTimeSubscriber.prototype.openWindow = function() {
var window = new Subject_1.Subject();
this.windows.push(window);
var destination = this.destination;
destination.next(window);
return window;
};
WindowTimeSubscriber.prototype.closeWindow = function(window) {
window.complete();
var windows = this.windows;
windows.splice(windows.indexOf(window), 1);
};
return WindowTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchWindowTimeSpanOnly(state) {
var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
if (window) {
window.complete();
}
state.window = subscriber.openWindow();
this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
var window = subscriber.openWindow();
var action = this;
var context = {
action: action,
subscription: null
};
var timeSpanState = {
subscriber: subscriber,
window: window,
context: context
};
context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
action.add(context.subscription);
action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(arg) {
var subscriber = arg.subscriber, window = arg.window, context = arg.context;
if (context && context.action && context.subscription) {
context.action.remove(context.subscription);
}
subscriber.closeWindow(window);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var windowToggle_1 = __webpack_require__(590);
Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var Subscription_1 = __webpack_require__(163);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function windowToggle(openings, closingSelector) {
return this.lift(new WindowToggleOperator(openings, closingSelector));
}
exports.windowToggle = windowToggle;
var WindowToggleOperator = function() {
function WindowToggleOperator(openings, closingSelector) {
this.openings = openings;
this.closingSelector = closingSelector;
}
WindowToggleOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
};
return WindowToggleOperator;
}();
var WindowToggleSubscriber = function(_super) {
__extends(WindowToggleSubscriber, _super);
function WindowToggleSubscriber(destination, openings, closingSelector) {
_super.call(this, destination);
this.openings = openings;
this.closingSelector = closingSelector;
this.contexts = [];
this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
}
WindowToggleSubscriber.prototype._next = function(value) {
var contexts = this.contexts;
if (contexts) {
var len = contexts.length;
for (var i = 0; i < len; i++) {
contexts[i].window.next(value);
}
}
};
WindowToggleSubscriber.prototype._error = function(err) {
var contexts = this.contexts;
this.contexts = null;
if (contexts) {
var len = contexts.length;
var index = -1;
while (++index < len) {
var context = contexts[index];
context.window.error(err);
context.subscription.unsubscribe();
}
}
_super.prototype._error.call(this, err);
};
WindowToggleSubscriber.prototype._complete = function() {
var contexts = this.contexts;
this.contexts = null;
if (contexts) {
var len = contexts.length;
var index = -1;
while (++index < len) {
var context = contexts[index];
context.window.complete();
context.subscription.unsubscribe();
}
}
_super.prototype._complete.call(this);
};
WindowToggleSubscriber.prototype._unsubscribe = function() {
var contexts = this.contexts;
this.contexts = null;
if (contexts) {
var len = contexts.length;
var index = -1;
while (++index < len) {
var context = contexts[index];
context.window.unsubscribe();
context.subscription.unsubscribe();
}
}
};
WindowToggleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (outerValue === this.openings) {
var closingSelector = this.closingSelector;
var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
if (closingNotifier === errorObject_1.errorObject) {
return this.error(errorObject_1.errorObject.e);
} else {
var window_1 = new Subject_1.Subject();
var subscription = new Subscription_1.Subscription();
var context = {
window: window_1,
subscription: subscription
};
this.contexts.push(context);
var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
if (innerSubscription.closed) {
this.closeWindow(this.contexts.length - 1);
} else {
innerSubscription.context = context;
subscription.add(innerSubscription);
}
this.destination.next(window_1);
}
} else {
this.closeWindow(this.contexts.indexOf(outerValue));
}
};
WindowToggleSubscriber.prototype.notifyError = function(err) {
this.error(err);
};
WindowToggleSubscriber.prototype.notifyComplete = function(inner) {
if (inner !== this.openSubscription) {
this.closeWindow(this.contexts.indexOf(inner.context));
}
};
WindowToggleSubscriber.prototype.closeWindow = function(index) {
if (index === -1) {
return;
}
var contexts = this.contexts;
var context = contexts[index];
var window = context.window, subscription = context.subscription;
contexts.splice(index, 1);
window.complete();
subscription.unsubscribe();
};
return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var windowWhen_1 = __webpack_require__(592);
Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var tryCatch_1 = __webpack_require__(166);
var errorObject_1 = __webpack_require__(167);
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function windowWhen(closingSelector) {
return this.lift(new WindowOperator(closingSelector));
}
exports.windowWhen = windowWhen;
var WindowOperator = function() {
function WindowOperator(closingSelector) {
this.closingSelector = closingSelector;
}
WindowOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));
};
return WindowOperator;
}();
var WindowSubscriber = function(_super) {
__extends(WindowSubscriber, _super);
function WindowSubscriber(destination, closingSelector) {
_super.call(this, destination);
this.destination = destination;
this.closingSelector = closingSelector;
this.openWindow();
}
WindowSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.openWindow(innerSub);
};
WindowSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
WindowSubscriber.prototype.notifyComplete = function(innerSub) {
this.openWindow(innerSub);
};
WindowSubscriber.prototype._next = function(value) {
this.window.next(value);
};
WindowSubscriber.prototype._error = function(err) {
this.window.error(err);
this.destination.error(err);
this.unsubscribeClosingNotification();
};
WindowSubscriber.prototype._complete = function() {
this.window.complete();
this.destination.complete();
this.unsubscribeClosingNotification();
};
WindowSubscriber.prototype.unsubscribeClosingNotification = function() {
if (this.closingNotification) {
this.closingNotification.unsubscribe();
}
};
WindowSubscriber.prototype.openWindow = function(innerSub) {
if (innerSub === void 0) {
innerSub = null;
}
if (innerSub) {
this.remove(innerSub);
innerSub.unsubscribe();
}
var prevWindow = this.window;
if (prevWindow) {
prevWindow.complete();
}
var window = this.window = new Subject_1.Subject();
this.destination.next(window);
var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
if (closingNotifier === errorObject_1.errorObject) {
var err = errorObject_1.errorObject.e;
this.destination.error(err);
this.window.error(err);
} else {
this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
}
};
return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var withLatestFrom_1 = __webpack_require__(594);
Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(254);
var subscribeToResult_1 = __webpack_require__(252);
function withLatestFrom() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var project;
if (typeof args[args.length - 1] === "function") {
project = args.pop();
}
var observables = args;
return this.lift(new WithLatestFromOperator(observables, project));
}
exports.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = function() {
function WithLatestFromOperator(observables, project) {
this.observables = observables;
this.project = project;
}
WithLatestFromOperator.prototype.call = function(subscriber, source) {
return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
};
return WithLatestFromOperator;
}();
var WithLatestFromSubscriber = function(_super) {
__extends(WithLatestFromSubscriber, _super);
function WithLatestFromSubscriber(destination, observables, project) {
_super.call(this, destination);
this.observables = observables;
this.project = project;
this.toRespond = [];
var len = observables.length;
this.values = new Array(len);
for (var i = 0; i < len; i++) {
this.toRespond.push(i);
}
for (var i = 0; i < len; i++) {
var observable = observables[i];
this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
}
}
WithLatestFromSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.values[outerIndex] = innerValue;
var toRespond = this.toRespond;
if (toRespond.length > 0) {
var found = toRespond.indexOf(outerIndex);
if (found !== -1) {
toRespond.splice(found, 1);
}
}
};
WithLatestFromSubscriber.prototype.notifyComplete = function() {};
WithLatestFromSubscriber.prototype._next = function(value) {
if (this.toRespond.length === 0) {
var args = [ value ].concat(this.values);
if (this.project) {
this._tryProject(args);
} else {
this.destination.next(args);
}
}
};
WithLatestFromSubscriber.prototype._tryProject = function(args) {
var result;
try {
result = this.project.apply(this, args);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var zip_1 = __webpack_require__(389);
Observable_1.Observable.prototype.zip = zip_1.zipProto;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(158);
var zipAll_1 = __webpack_require__(597);
Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var zip_1 = __webpack_require__(389);
function zipAll(project) {
return this.lift(new zip_1.ZipOperator(project));
}
exports.zipAll = zipAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var Notification_1 = __webpack_require__(248);
var ColdObservable_1 = __webpack_require__(599);
var HotObservable_1 = __webpack_require__(603);
var SubscriptionLog_1 = __webpack_require__(601);
var VirtualTimeScheduler_1 = __webpack_require__(604);
var defaultMaxFrame = 750;
var TestScheduler = function(_super) {
__extends(TestScheduler, _super);
function TestScheduler(assertDeepEqual) {
_super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
this.assertDeepEqual = assertDeepEqual;
this.hotObservables = [];
this.coldObservables = [];
this.flushTests = [];
}
TestScheduler.prototype.createTime = function(marbles) {
var indexOf = marbles.indexOf("|");
if (indexOf === -1) {
throw new Error('marble diagram for time should have a completion marker "|"');
}
return indexOf * TestScheduler.frameTimeFactor;
};
TestScheduler.prototype.createColdObservable = function(marbles, values, error) {
if (marbles.indexOf("^") !== -1) {
throw new Error('cold observable cannot have subscription offset "^"');
}
if (marbles.indexOf("!") !== -1) {
throw new Error('cold observable cannot have unsubscription marker "!"');
}
var messages = TestScheduler.parseMarbles(marbles, values, error);
var cold = new ColdObservable_1.ColdObservable(messages, this);
this.coldObservables.push(cold);
return cold;
};
TestScheduler.prototype.createHotObservable = function(marbles, values, error) {
if (marbles.indexOf("!") !== -1) {
throw new Error('hot observable cannot have unsubscription marker "!"');
}
var messages = TestScheduler.parseMarbles(marbles, values, error);
var subject = new HotObservable_1.HotObservable(messages, this);
this.hotObservables.push(subject);
return subject;
};
TestScheduler.prototype.materializeInnerObservable = function(observable, outerFrame) {
var _this = this;
var messages = [];
observable.subscribe(function(value) {
messages.push({
frame: _this.frame - outerFrame,
notification: Notification_1.Notification.createNext(value)
});
}, function(err) {
messages.push({
frame: _this.frame - outerFrame,
notification: Notification_1.Notification.createError(err)
});
}, function() {
messages.push({
frame: _this.frame - outerFrame,
notification: Notification_1.Notification.createComplete()
});
});
return messages;
};
TestScheduler.prototype.expectObservable = function(observable, unsubscriptionMarbles) {
var _this = this;
if (unsubscriptionMarbles === void 0) {
unsubscriptionMarbles = null;
}
var actual = [];
var flushTest = {
actual: actual,
ready: false
};
var unsubscriptionFrame = TestScheduler.parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
var subscription;
this.schedule(function() {
subscription = observable.subscribe(function(x) {
var value = x;
if (x instanceof Observable_1.Observable) {
value = _this.materializeInnerObservable(value, _this.frame);
}
actual.push({
frame: _this.frame,
notification: Notification_1.Notification.createNext(value)
});
}, function(err) {
actual.push({
frame: _this.frame,
notification: Notification_1.Notification.createError(err)
});
}, function() {
actual.push({
frame: _this.frame,
notification: Notification_1.Notification.createComplete()
});
});
}, 0);
if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
this.schedule(function() {
return subscription.unsubscribe();
}, unsubscriptionFrame);
}
this.flushTests.push(flushTest);
return {
toBe: function(marbles, values, errorValue) {
flushTest.ready = true;
flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
}
};
};
TestScheduler.prototype.expectSubscriptions = function(actualSubscriptionLogs) {
var flushTest = {
actual: actualSubscriptionLogs,
ready: false
};
this.flushTests.push(flushTest);
return {
toBe: function(marbles) {
var marblesArray = typeof marbles === "string" ? [ marbles ] : marbles;
flushTest.ready = true;
flushTest.expected = marblesArray.map(function(marbles) {
return TestScheduler.parseMarblesAsSubscriptions(marbles);
});
}
};
};
TestScheduler.prototype.flush = function() {
var hotObservables = this.hotObservables;
while (hotObservables.length > 0) {
hotObservables.shift().setup();
}
_super.prototype.flush.call(this);
var readyFlushTests = this.flushTests.filter(function(test) {
return test.ready;
});
while (readyFlushTests.length > 0) {
var test = readyFlushTests.shift();
this.assertDeepEqual(test.actual, test.expected);
}
};
TestScheduler.parseMarblesAsSubscriptions = function(marbles) {
if (typeof marbles !== "string") {
return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
}
var len = marbles.length;
var groupStart = -1;
var subscriptionFrame = Number.POSITIVE_INFINITY;
var unsubscriptionFrame = Number.POSITIVE_INFINITY;
for (var i = 0; i < len; i++) {
var frame = i * this.frameTimeFactor;
var c = marbles[i];
switch (c) {
case "-":
case " ":
break;

case "(":
groupStart = frame;
break;

case ")":
groupStart = -1;
break;

case "^":
if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
throw new Error("found a second subscription point '^' in a " + "subscription marble diagram. There can only be one.");
}
subscriptionFrame = groupStart > -1 ? groupStart : frame;
break;

case "!":
if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
throw new Error("found a second subscription point '^' in a " + "subscription marble diagram. There can only be one.");
}
unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
break;

default:
throw new Error("there can only be '^' and '!' markers in a " + "subscription marble diagram. Found instead '" + c + "'.");
}
}
if (unsubscriptionFrame < 0) {
return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
} else {
return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
}
};
TestScheduler.parseMarbles = function(marbles, values, errorValue, materializeInnerObservables) {
if (materializeInnerObservables === void 0) {
materializeInnerObservables = false;
}
if (marbles.indexOf("!") !== -1) {
throw new Error("conventional marble diagrams cannot have the " + 'unsubscription marker "!"');
}
var len = marbles.length;
var testMessages = [];
var subIndex = marbles.indexOf("^");
var frameOffset = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;
var getValue = typeof values !== "object" ? function(x) {
return x;
} : function(x) {
if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
return values[x].messages;
}
return values[x];
};
var groupStart = -1;
for (var i = 0; i < len; i++) {
var frame = i * this.frameTimeFactor + frameOffset;
var notification = void 0;
var c = marbles[i];
switch (c) {
case "-":
case " ":
break;

case "(":
groupStart = frame;
break;

case ")":
groupStart = -1;
break;

case "|":
notification = Notification_1.Notification.createComplete();
break;

case "^":
break;

case "#":
notification = Notification_1.Notification.createError(errorValue || "error");
break;

default:
notification = Notification_1.Notification.createNext(getValue(c));
break;
}
if (notification) {
testMessages.push({
frame: groupStart > -1 ? groupStart : frame,
notification: notification
});
}
}
return testMessages;
};
return TestScheduler;
}(VirtualTimeScheduler_1.VirtualTimeScheduler);
exports.TestScheduler = TestScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(158);
var Subscription_1 = __webpack_require__(163);
var SubscriptionLoggable_1 = __webpack_require__(600);
var applyMixins_1 = __webpack_require__(602);
var ColdObservable = function(_super) {
__extends(ColdObservable, _super);
function ColdObservable(messages, scheduler) {
_super.call(this, function(subscriber) {
var observable = this;
var index = observable.logSubscribedFrame();
subscriber.add(new Subscription_1.Subscription(function() {
observable.logUnsubscribedFrame(index);
}));
observable.scheduleMessages(subscriber);
return subscriber;
});
this.messages = messages;
this.subscriptions = [];
this.scheduler = scheduler;
}
ColdObservable.prototype.scheduleMessages = function(subscriber) {
var messagesLength = this.messages.length;
for (var i = 0; i < messagesLength; i++) {
var message = this.messages[i];
subscriber.add(this.scheduler.schedule(function(_a) {
var message = _a.message, subscriber = _a.subscriber;
message.notification.observe(subscriber);
}, message.frame, {
message: message,
subscriber: subscriber
}));
}
};
return ColdObservable;
}(Observable_1.Observable);
exports.ColdObservable = ColdObservable;
applyMixins_1.applyMixins(ColdObservable, [ SubscriptionLoggable_1.SubscriptionLoggable ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var SubscriptionLog_1 = __webpack_require__(601);
var SubscriptionLoggable = function() {
function SubscriptionLoggable() {
this.subscriptions = [];
}
SubscriptionLoggable.prototype.logSubscribedFrame = function() {
this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
return this.subscriptions.length - 1;
};
SubscriptionLoggable.prototype.logUnsubscribedFrame = function(index) {
var subscriptionLogs = this.subscriptions;
var oldSubscriptionLog = subscriptionLogs[index];
subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
};
return SubscriptionLoggable;
}();
exports.SubscriptionLoggable = SubscriptionLoggable;
}, function(module, exports) {
"use strict";
var SubscriptionLog = function() {
function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
if (unsubscribedFrame === void 0) {
unsubscribedFrame = Number.POSITIVE_INFINITY;
}
this.subscribedFrame = subscribedFrame;
this.unsubscribedFrame = unsubscribedFrame;
}
return SubscriptionLog;
}();
exports.SubscriptionLog = SubscriptionLog;
}, function(module, exports) {
"use strict";
function applyMixins(derivedCtor, baseCtors) {
for (var i = 0, len = baseCtors.length; i < len; i++) {
var baseCtor = baseCtors[i];
var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
var name_1 = propertyKeys[j];
derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
}
}
}
exports.applyMixins = applyMixins;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(157);
var Subscription_1 = __webpack_require__(163);
var SubscriptionLoggable_1 = __webpack_require__(600);
var applyMixins_1 = __webpack_require__(602);
var HotObservable = function(_super) {
__extends(HotObservable, _super);
function HotObservable(messages, scheduler) {
_super.call(this);
this.messages = messages;
this.subscriptions = [];
this.scheduler = scheduler;
}
HotObservable.prototype._subscribe = function(subscriber) {
var subject = this;
var index = subject.logSubscribedFrame();
subscriber.add(new Subscription_1.Subscription(function() {
subject.logUnsubscribedFrame(index);
}));
return _super.prototype._subscribe.call(this, subscriber);
};
HotObservable.prototype.setup = function() {
var subject = this;
var messagesLength = subject.messages.length;
for (var i = 0; i < messagesLength; i++) {
(function() {
var message = subject.messages[i];
subject.scheduler.schedule(function() {
message.notification.observe(subject);
}, message.frame);
})();
}
};
return HotObservable;
}(Subject_1.Subject);
exports.HotObservable = HotObservable;
applyMixins_1.applyMixins(HotObservable, [ SubscriptionLoggable_1.SubscriptionLoggable ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(355);
var AsyncScheduler_1 = __webpack_require__(357);
var VirtualTimeScheduler = function(_super) {
__extends(VirtualTimeScheduler, _super);
function VirtualTimeScheduler(SchedulerAction, maxFrames) {
var _this = this;
if (SchedulerAction === void 0) {
SchedulerAction = VirtualAction;
}
if (maxFrames === void 0) {
maxFrames = Number.POSITIVE_INFINITY;
}
_super.call(this, SchedulerAction, function() {
return _this.frame;
});
this.maxFrames = maxFrames;
this.frame = 0;
this.index = -1;
}
VirtualTimeScheduler.prototype.flush = function() {
var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
var error, action;
while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
if (error = action.execute(action.state, action.delay)) {
break;
}
}
if (error) {
while (action = actions.shift()) {
action.unsubscribe();
}
throw error;
}
};
VirtualTimeScheduler.frameTimeFactor = 10;
return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.VirtualTimeScheduler = VirtualTimeScheduler;
var VirtualAction = function(_super) {
__extends(VirtualAction, _super);
function VirtualAction(scheduler, work, index) {
if (index === void 0) {
index = scheduler.index += 1;
}
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
this.index = index;
this.index = scheduler.index = index;
}
VirtualAction.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
return !this.id ? _super.prototype.schedule.call(this, state, delay) : this.add(new VirtualAction(this.scheduler, this.work)).schedule(state, delay);
};
VirtualAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
this.delay = scheduler.frame + delay;
var actions = scheduler.actions;
actions.push(this);
actions.sort(VirtualAction.sortActions);
return true;
};
VirtualAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
return undefined;
};
VirtualAction.sortActions = function(a, b) {
if (a.delay === b.delay) {
if (a.index === b.index) {
return 0;
} else if (a.index > b.index) {
return 1;
} else {
return -1;
}
} else if (a.delay > b.delay) {
return 1;
} else {
return -1;
}
};
return VirtualAction;
}(AsyncAction_1.AsyncAction);
exports.VirtualAction = VirtualAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var AnimationFrameAction_1 = __webpack_require__(606);
var AnimationFrameScheduler_1 = __webpack_require__(608);
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(355);
var AnimationFrame_1 = __webpack_require__(607);
var AnimationFrameAction = function(_super) {
__extends(AnimationFrameAction, _super);
function AnimationFrameAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
}
AnimationFrameAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
}
scheduler.actions.push(this);
return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
};
AnimationFrameAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
}
if (scheduler.actions.length === 0) {
AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
scheduler.scheduled = undefined;
}
return undefined;
};
return AnimationFrameAction;
}(AsyncAction_1.AsyncAction);
exports.AnimationFrameAction = AnimationFrameAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(159);
var RequestAnimationFrameDefinition = function() {
function RequestAnimationFrameDefinition(root) {
if (root.requestAnimationFrame) {
this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
} else if (root.mozRequestAnimationFrame) {
this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
} else if (root.webkitRequestAnimationFrame) {
this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
} else if (root.msRequestAnimationFrame) {
this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
} else if (root.oRequestAnimationFrame) {
this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
} else {
this.cancelAnimationFrame = root.clearTimeout.bind(root);
this.requestAnimationFrame = function(cb) {
return root.setTimeout(cb, 1e3 / 60);
};
}
}
return RequestAnimationFrameDefinition;
}();
exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(357);
var AnimationFrameScheduler = function(_super) {
__extends(AnimationFrameScheduler, _super);
function AnimationFrameScheduler() {
_super.apply(this, arguments);
}
AnimationFrameScheduler.prototype.flush = function() {
this.active = true;
this.scheduled = undefined;
var actions = this.actions;
var error;
var index = -1;
var count = actions.length;
var action = actions.shift();
do {
if (error = action.execute(action.state, action.delay)) {
break;
}
} while (++index < count && (action = actions.shift()));
this.active = false;
if (error) {
while (++index < count && (action = actions.shift())) {
action.unsubscribe();
}
throw error;
}
};
return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.AnimationFrameScheduler = AnimationFrameScheduler;
}, function(module, exports) {
;"use strict";
}, , , function(module, exports, __webpack_require__) {
module.exports = __webpack_require__(613);
}, function(module, exports, __webpack_require__) {
(function(module) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
var _ponyfill = __webpack_require__(614);
var _ponyfill2 = _interopRequireDefault(_ponyfill);
function _interopRequireDefault(obj) {
return obj && obj.__esModule ? obj : {
default: obj
};
}
var root;
if (typeof self !== "undefined") {
root = self;
} else if (typeof window !== "undefined") {
root = window;
} else if (typeof global !== "undefined") {
root = global;
} else if (true) {
root = module;
} else {
root = Function("return this")();
}
var result = (0, _ponyfill2["default"])(root);
exports["default"] = result;
}).call(exports, __webpack_require__(300)(module));
}, function(module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
exports["default"] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
var result;
var _Symbol = root.Symbol;
if (typeof _Symbol === "function") {
if (_Symbol.observable) {
result = _Symbol.observable;
} else {
result = _Symbol("observable");
_Symbol.observable = result;
}
} else {
result = "@@observable";
}
return result;
}
}, function(module, exports, __webpack_require__) {
(function(root, factory) {
root.Rx = factory();
})(window || global || this, function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "../dist/cjs/Rx"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
});
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var NativeScriptActivity = function(_super) {
__extends(NativeScriptActivity, _super);
function NativeScriptActivity() {
_super.call(this);
return global.__native(this);
}
NativeScriptActivity.prototype.onCreate = function(savedInstanceState) {
this.isNativeScriptActivity = true;
if (!this._callbacks) {
frame_1.setActivityCallbacks(this);
}
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
NativeScriptActivity.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
NativeScriptActivity.prototype.onStart = function() {
this._callbacks.onStart(this, _super.prototype.onStart);
};
NativeScriptActivity.prototype.onStop = function() {
this._callbacks.onStop(this, _super.prototype.onStop);
};
NativeScriptActivity.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
NativeScriptActivity.prototype.onBackPressed = function() {
this._callbacks.onBackPressed(this, _super.prototype.onBackPressed);
};
NativeScriptActivity.prototype.onRequestPermissionsResult = function(requestCode, permissions, grantResults) {
this._callbacks.onRequestPermissionsResult(this, requestCode, permissions, grantResults, undefined);
};
NativeScriptActivity.prototype.onActivityResult = function(requestCode, resultCode, data) {
this._callbacks.onActivityResult(this, requestCode, resultCode, data, _super.prototype.onActivityResult);
};
NativeScriptActivity = __decorate([ JavaProxy("com.tns.NativeScriptActivity") ], NativeScriptActivity);
return NativeScriptActivity;
}(android.app.Activity);
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(618);
var LruBitmapCacheClass;
function ensureLruBitmapCacheClass() {
if (LruBitmapCacheClass) {
return;
}
var LruBitmapCache = function(_super) {
__extends(LruBitmapCache, _super);
function LruBitmapCache(cacheSize) {
_super.call(this, cacheSize);
return global.__native(this);
}
LruBitmapCache.prototype.sizeOf = function(key, bitmap) {
var result = Math.round(bitmap.getByteCount() / 1024);
return result;
};
return LruBitmapCache;
}(android.util.LruCache);
LruBitmapCacheClass = LruBitmapCache;
}
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
_super.call(this);
ensureLruBitmapCacheClass();
var maxMemory = java.lang.Runtime.getRuntime().maxMemory() / 1024;
var cacheSize = maxMemory / 8;
this._cache = new LruBitmapCacheClass(cacheSize);
var that = new WeakRef(this);
this._callback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
var instance = that.get();
if (instance) {
instance._onDownloadCompleted(context, result);
}
}
});
}
Cache.prototype._downloadCore = function(request) {
org.nativescript.widgets.Async.Image.download(request.url, this._callback, request.key);
};
Cache.prototype.get = function(key) {
var result = this._cache.get(key);
return result;
};
Cache.prototype.set = function(key, image) {
this._cache.put(key, image);
};
Cache.prototype.remove = function(key) {
this._cache.remove(key);
};
Cache.prototype.clear = function() {
this._cache.evictAll();
};
return Cache;
}(common.Cache);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
_super.apply(this, arguments);
this.maxRequests = 5;
this._enabled = true;
this._pendingDownloads = {};
this._queue = [];
this._currentDownloads = 0;
}
Cache.prototype.enableDownload = function() {
if (this._enabled) {
return;
}
this._enabled = true;
var request;
while (this._queue.length > 0 && this._currentDownloads < this.maxRequests) {
request = this._queue.pop();
if (!(request.key in this._pendingDownloads)) {
this._download(request);
}
}
};
Cache.prototype.disableDownload = function() {
if (!this._enabled) {
return;
}
this._enabled = false;
};
Cache.prototype.push = function(request) {
this._addRequest(request, true);
};
Cache.prototype.enqueue = function(request) {
this._addRequest(request, false);
};
Cache.prototype._addRequest = function(request, onTop) {
if (request.key in this._pendingDownloads) {
var existingRequest = this._pendingDownloads[request.key];
this._mergeRequests(existingRequest, request);
} else {
var queueRequest;
for (var i = 0; i < this._queue.length; i++) {
if (this._queue[i].key === request.key) {
queueRequest = this._queue[i];
break;
}
}
if (queueRequest) {
this._mergeRequests(queueRequest, request);
} else {
if (this._shouldDownload(request, onTop)) {
this._download(request);
}
}
}
};
Cache.prototype._mergeRequests = function(existingRequest, newRequest) {
if (existingRequest.completed) {
if (newRequest.completed) {
var existingCompleted = existingRequest.completed;
var stackCompleted = function(result, key) {
existingCompleted(result, key);
newRequest.completed(result, key);
};
existingRequest.completed = stackCompleted;
}
} else {
existingRequest.completed = newRequest.completed;
}
};
Cache.prototype.get = function(key) {
throw new Error("Abstract");
};
Cache.prototype.set = function(key, image) {
throw new Error("Abstract");
};
Cache.prototype.remove = function(key) {
throw new Error("Abstract");
};
Cache.prototype.clear = function() {
throw new Error("Abstract");
};
Cache.prototype._downloadCore = function(request) {
throw new Error("Abstract");
};
Cache.prototype._onDownloadCompleted = function(key, image) {
var request = this._pendingDownloads[key];
if (request.key && image) {
this.set(request.key, image);
}
this._currentDownloads--;
if (request.completed) {
request.completed(image, request.key);
}
if (this.hasListeners(Cache.downloadedEvent)) {
this.notify({
eventName: Cache.downloadedEvent,
object: this,
key: key,
image: image
});
}
delete this._pendingDownloads[request.key];
this._updateQueue();
};
Cache.prototype._shouldDownload = function(request, onTop) {
if (this.get(request.key) || request.key in this._pendingDownloads) {
return false;
}
if (this._currentDownloads >= this.maxRequests || !this._enabled) {
if (onTop) {
this._queue.push(request);
} else {
this._queue.unshift(request);
}
return false;
}
return true;
};
Cache.prototype._download = function(request) {
this._currentDownloads++;
this._pendingDownloads[request.key] = request;
this._downloadCore(request);
};
Cache.prototype._updateQueue = function() {
if (!this._enabled || this._queue.length === 0 || this._currentDownloads === this.maxRequests) {
return;
}
var request = this._queue.pop();
this._download(request);
};
Cache.downloadedEvent = "downloaded";
return Cache;
}(observable.Observable);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
var layoutBase = __webpack_require__(78);
var trace = __webpack_require__(31);
var utils = __webpack_require__(37);
var OWNER = "_owner";
var NativeViewGroupClass;
function ensureNativeViewGroupClass() {
if (NativeViewGroupClass) {
return;
}
NativeViewGroupClass = android.view.ViewGroup.extend({
onMeasure: function(widthMeasureSpec, heightMeasureSpec) {
var owner = this[OWNER];
owner.onMeasure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(owner.getMeasuredWidth(), owner.getMeasuredHeight());
},
onLayout: function(changed, left, top, right, bottom) {
var owner = this[OWNER];
owner.onLayout(left, top, right, bottom);
}
});
}
var Layout = function(_super) {
__extends(Layout, _super);
function Layout() {
_super.apply(this, arguments);
}
Object.defineProperty(Layout.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Layout.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Layout.prototype._createUI = function() {
ensureNativeViewGroupClass();
this._viewGroup = new NativeViewGroupClass(this._context);
this._viewGroup[OWNER] = this;
};
Layout.prototype._onDetached = function(force) {
delete this._viewGroup[OWNER];
_super.prototype._onDetached.call(this, force);
};
Layout.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
var view = this._nativeView;
if (view) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
if (trace.enabled) {
trace.write(this + " :measure: " + utils.layout.getMode(widthMode) + " " + width + ", " + utils.layout.getMode(heightMode) + " " + height, trace.categories.Layout);
}
view.measure(widthMeasureSpec, heightMeasureSpec);
}
};
Layout.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
if (trace.enabled) {
trace.write(this + " :layout: " + left + ", " + top + ", " + (right - left) + ", " + (bottom - top), trace.categories.Layout);
}
}
};
Layout.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
Layout.prototype.onLayout = function(left, top, right, bottom) {};
return Layout;
}(layoutBase.LayoutBase);
exports.Layout = Layout;
}, function(module, exports) {
exports.merge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
} ]);
